WEBVTT

00:02.280 --> 00:08.670
So in the last lecture, we added a script to start our application and this is nice to know that we

00:08.670 --> 00:14.880
have this scripting functionality. Now with such a package.json file available,

00:14.910 --> 00:22.770
so therefore with this being a managed node project you could say, we can also do one other very important thing,

00:23.160 --> 00:32.670
we can install third party packages because a typical node project looks like that. You have your local

00:32.670 --> 00:39.580
project with your code obviously and you use a lot of core node packages like the fs package or the http

00:39.590 --> 00:41.350
package we're already using

00:41.670 --> 00:43.710
but often this does not suffice

00:43.830 --> 00:49.920
and in the next core section, we will install one big third package actually because you typically have

00:49.920 --> 00:52.890
such dependencies third party packages.

00:52.890 --> 00:57.880
So you want to use some functionalities some code which you didn't write on your own but which is also

00:57.900 --> 01:05.120
not included into nodejs. Packages could help you with parsing incoming requests, validating user input,

01:05.190 --> 01:07.200
anything of that kind.

01:07.200 --> 01:14.050
Now we will use express in the next lectures or in the next module to be precise, body parser is another

01:14.110 --> 01:19.740
package we'll use throughout this course and there are thousands of packages available that offer all

01:19.740 --> 01:22.460
kinds of utilities you can add to your projects

01:22.470 --> 01:25.230
so that you don't have to reinvent the wheel.

01:25.230 --> 01:29.040
These packages are available through the npm repository,

01:29.040 --> 01:32.910
that is a cloud package repository where all these packages live

01:33.120 --> 01:36.930
and you can conveniently install and manage them via npm,

01:37.050 --> 01:43.020
remember that tool that shipped with node. And this is exactly what we will do now to install a first

01:43.020 --> 01:47.270
little utility package that will speed up our development workflow.

01:47.850 --> 01:53.250
Because right now what we have to do is whenever we change our code, we have to quit the development

01:53.250 --> 01:55.730
server with Control-C and restart it,

01:55.770 --> 01:56.190
right,

01:56.310 --> 02:01.640
so if we have it running with npm start now, remember this is our new command to start the server

02:01.860 --> 02:06.960
and I would change something here, like for example here I fixed that /head right,

02:06.960 --> 02:12.420
whenever I do this I have to save this and for my change to have an effect, I have to quit the server

02:12.420 --> 02:14.880
with Control-C and restart it.

02:14.880 --> 02:19.520
Now this is a bit cumbersome because we just want to be able to type and then hit save

02:19.590 --> 02:25.470
and it should automatically restart and right, that would be a great workflow during development and

02:25.500 --> 02:31.800
to achieve this, we have to install a third party package that gives us just this functionality.

02:31.860 --> 02:34.810
Now how do we add such a third party package?

02:34.890 --> 02:39.560
We do that with the help of npm and there, we get the install command,

02:39.570 --> 02:45.720
so just as we had run to run one of our scripts, install installs a third party package.

02:45.720 --> 02:47.880
Now how do we install it?

02:47.880 --> 02:50.190
First of all we have to know the package name

02:50.190 --> 02:53.110
and if you're wondering well how do I know the package name,

02:53.250 --> 02:59.090
well that comes with courses like this, experience or by simply googling for certain problems which

02:59.100 --> 03:03.230
you want to have solved and all of a sudden you find a thread where some package is mentioned.

03:03.510 --> 03:06.470
Now I can tell you for this auto-restart mechanism,

03:06.570 --> 03:09.870
there is a package called nodemon, written like this.

03:09.870 --> 03:17.860
By the way you can always search for npm and then the package name if you know that name and you will

03:17.860 --> 03:21.070
find an entry on npmjs.com.

03:21.070 --> 03:28.240
Now this is the package page basically where you find a description, installation instructions, usage

03:28.240 --> 03:33.880
instructions, how to configure it because most packages give you an easy way of using it and then always

03:33.880 --> 03:36.310
give you configuration possibilities.

03:36.400 --> 03:38.200
You'll see how popular the package is,

03:38.200 --> 03:44.260
what's version it's using, if there is an exernal little home page, where the source code can be found if

03:44.260 --> 03:45.340
it's open source.

03:45.340 --> 03:48.340
So you find a bunch of stuff here, pretty useful,

03:48.340 --> 03:50.800
you also see how many versions are existing

03:50.920 --> 03:54.610
and by default, you will always install the latest version by the way

03:54.610 --> 03:56.560
but let's go back to installing it

03:56.560 --> 03:59.070
before we dive deeper into this whole npm thing.

03:59.380 --> 04:02.830
So we want to install it and this command would install it

04:02.950 --> 04:05.230
but don't hit enter yet,

04:05.320 --> 04:13.900
you can define how this should be installed because packages which you install can be divided into development

04:13.900 --> 04:20.500
packages, so packages which mostly help you during development and production dependencies,

04:20.500 --> 04:27.340
so packages that helps you for the app as it's running on a server, for example nodemon would be a

04:27.340 --> 04:31.490
development dependency because we only use it during the development process,

04:31.600 --> 04:35.320
once we install our app on a real server we don't need it there.

04:35.350 --> 04:39.880
The real server which is running somewhere in the Internet of course shouldn't restart

04:39.880 --> 04:44.180
and it also doesn't have to because we'll not change its code dynamically.

04:44.870 --> 04:51.150
And you can basically tell npm which kind of dependency this is, this does not make a huge difference

04:51.150 --> 04:58.080
and you can omit the setting but it helps you understand which package is used for what. Now you do add this

04:58.080 --> 05:01.760
by adding --save-dev,

05:01.920 --> 05:07.260
if you had just save like this, this would install it as a production dependency,

05:07.260 --> 05:13.290
so a package which we really use and use in our code and work with and with this we're indicating that

05:13.340 --> 05:17.390
this only adds something we used during development.

05:17.430 --> 05:19.350
There also is a third option by the way,

05:19.350 --> 05:24.690
-g, we'll not install it in this project but globally on your machine

05:24.750 --> 05:27.280
so that you can use it anywhere.

05:27.290 --> 05:33.530
Now let's first of all install it with save dev, like this --save-dev.

05:33.540 --> 05:40.660
Now what this will do is it will download it from the npm repository and install it into this project,

05:40.710 --> 05:44.780
so not globally on your machine but into this project.

05:45.180 --> 05:51.450
So now you see you get a report here that it finished successfully, what it did and it gives you a couple

05:51.450 --> 05:53.400
of new things in your project.

05:53.400 --> 05:59.970
It gives you that node modules folder, the package log json file and it updated the package.json

05:59.970 --> 06:00.600
file.

06:00.900 --> 06:06.450
There we see that the new dev dependency section was added and that stands for development dependencies,

06:06.540 --> 06:10.060
as I said you can differentiate between different dependencies,

06:10.140 --> 06:12.560
we'll see production dependencies later too

06:12.990 --> 06:17.290
and there you see that nodemon was installed and which version was picked.

06:17.290 --> 06:19.720
Now regarding that character here,

06:19.890 --> 06:23.610
well this basically defines how this package will be updated

06:23.850 --> 06:31.110
if you rerun just npm install, without defining an extra package name because this command standalone

06:31.320 --> 06:37.770
will simply go through all your packages mentioned in package.json and install them and it would automatically

06:37.770 --> 06:39.690
pick a later version if available

06:39.810 --> 06:43.710
but more on npm and packages can also be found in a separate module

06:43.770 --> 06:45.110
later in the course.

06:45.390 --> 06:48.030
So this is basically how we now install this

06:48.150 --> 06:50.650
and the question is where is it installed?

06:50.850 --> 06:52.880
Well that is the node modules folder

06:52.980 --> 06:57.690
and actually that is a huge folder as you can tell. The reason for this is that

06:57.690 --> 06:59.870
for one we got nodemon in there, 

07:00.000 --> 07:04.250
if we look for n, we see it here.

07:04.440 --> 07:09.630
Now this is basically the source code of the package or the build version of the package we installed

07:10.320 --> 07:15.000
and this package simply happens to have a couple of peer dependencies,

07:15.060 --> 07:17.260
you can see them here and here.

07:17.310 --> 07:22.920
So we got a bunch of dependencies in there and these and their dependencies are also installed,

07:22.920 --> 07:29.010
that is why you could end up with quite a big node modules folder but you can always delete that node

07:29.010 --> 07:31.600
modules folder if you need to free up space.

07:31.620 --> 07:37.380
Now you can't use that package but you can then rerun npm install if you start working on that project

07:37.380 --> 07:43.290
again and it will re-install this package and all its pure dependencies and therefore recreate the node

07:43.290 --> 07:44.370
modules folder,

07:44.550 --> 07:47.640
this is how packages work in node projects.

07:47.640 --> 07:52.530
So you need that node modules folder while still using the packages but if you're not working on the

07:52.530 --> 07:58.020
project, you can delete it if you want, if you need the free space and then just remember to rerun npm

07:58.030 --> 08:00.960
install once you are working on the project again.

08:01.410 --> 08:09.360
The package log json file by the way just stores the exact versions I installed today so that if you

08:09.360 --> 08:15.130
share your project with others, they can actually get these exact versions too instead of the latest versions

08:15.150 --> 08:18.140
but again, more on npm in a separate module.
