WEBVTT

1
00:00:02.260 --> 00:00:03.790
<v Instructor>Now, I will not dive into</v>

2
00:00:03.790 --> 00:00:05.790
all possible types we have.

3
00:00:05.790 --> 00:00:08.800
Instead I wanna focus on a couple of core features.

4
00:00:08.800 --> 00:00:10.700
Therefore, as a next step,

5
00:00:10.700 --> 00:00:13.760
let's add some configuration to this project.

6
00:00:13.760 --> 00:00:15.310
So that they can briefly walk you

7
00:00:15.310 --> 00:00:16.610
through some Core Settings,

8
00:00:16.610 --> 00:00:18.600
especially one Core Setting.

9
00:00:18.600 --> 00:00:20.590
We can add a Configuration file,

10
00:00:20.590 --> 00:00:22.810
which will then be taken into account by the TypeScript

11
00:00:22.810 --> 00:00:27.810
compiler to this project by running tsc--init.

12
00:00:28.170 --> 00:00:30.445
This adds a tsconfig.json file,

13
00:00:30.445 --> 00:00:34.070
which has quite a lot of options you can set.

14
00:00:34.070 --> 00:00:37.750
Now, you can read through these comments here.

15
00:00:37.750 --> 00:00:40.360
I do talk about the options in greater detail.

16
00:00:40.360 --> 00:00:43.490
In my Understanding TypeScript Course.

17
00:00:43.490 --> 00:00:47.100
Here, I will leave most options as they are,

18
00:00:47.100 --> 00:00:49.530
so I will not comment them in,

19
00:00:49.530 --> 00:00:52.910
but I wanna talk about this "Strict" option because

20
00:00:52.910 --> 00:00:54.117
that is important.

21
00:00:54.117 --> 00:00:57.200
"Strict" mode is generally encouraged.

22
00:00:57.200 --> 00:00:59.830
It means that certain things are not allowed,

23
00:00:59.830 --> 00:01:02.710
which normally would be allowed in TypeScript.

24
00:01:02.710 --> 00:01:04.910
And we see this in app.ts file

25
00:01:04.910 --> 00:01:06.530
just by adding this configuration.

26
00:01:06.530 --> 00:01:10.580
I now get an error here that this is possibly 'null'

27
00:01:10.580 --> 00:01:13.460
This is one "strict" mode feature.

28
00:01:13.460 --> 00:01:15.990
We have this "strictNullCheck"

29
00:01:15.990 --> 00:01:17.130
which is turned on.

30
00:01:17.130 --> 00:01:19.760
All those checks here are turned on.

31
00:01:19.760 --> 00:01:21.350
If "strict" is set to true,

32
00:01:21.350 --> 00:01:24.110
alternatively, you comment out to this line and

33
00:01:24.110 --> 00:01:27.700
just comment in the features you want down there.

34
00:01:27.700 --> 00:01:31.010
So, they're all set to true when setting "Strict" to true.

35
00:01:31.010 --> 00:01:33.910
And one of these features ensures that you're not calling

36
00:01:33.910 --> 00:01:37.720
something on something else, which might be "null".

37
00:01:37.720 --> 00:01:39.800
And here indeed,

38
00:01:39.800 --> 00:01:41.260
we select the 'button',

39
00:01:41.260 --> 00:01:43.270
but of course, TypeScript can't know,

40
00:01:43.270 --> 00:01:45.630
whether that 'button' actually exists.

41
00:01:45.630 --> 00:01:49.210
it does not check our HTML code.

42
00:01:49.210 --> 00:01:50.850
So therefore this could be 'null'

43
00:01:50.850 --> 00:01:52.120
if we don't find a 'button',

44
00:01:52.120 --> 00:01:53.520
if we have no buttonElement.

45
00:01:54.550 --> 00:01:57.570
Now to work around this, we have two options.

46
00:01:57.570 --> 00:02:00.920
We can add some code here where we check.

47
00:02:00.920 --> 00:02:05.920
If buttonElement is Truthy and move that code into

48
00:02:06.170 --> 00:02:07.340
that if check.

49
00:02:07.340 --> 00:02:10.300
Now we know that if this code runs buttonElement,

50
00:02:10.300 --> 00:02:12.230
can't be null.

51
00:02:12.230 --> 00:02:13.690
Because if it would be null,

52
00:02:13.690 --> 00:02:15.730
it would be falsy and we wouldn't make it

53
00:02:15.730 --> 00:02:16.803
into this if check.

54
00:02:17.800 --> 00:02:22.090
Alternatively, we know that there will be a button.

55
00:02:22.090 --> 00:02:24.700
Just as we know that these elements here

56
00:02:24.700 --> 00:02:27.000
are HTMLInputElements.

57
00:02:27.000 --> 00:02:31.173
In such cases, we can add an exclamation mark here.

58
00:02:32.050 --> 00:02:35.030
This simply means the statement in front of it.

59
00:02:35.030 --> 00:02:36.780
The expression in front of it,

60
00:02:36.780 --> 00:02:38.380
could theoretically be 'null',

61
00:02:38.380 --> 00:02:40.260
but we know that it isn't.

62
00:02:40.260 --> 00:02:43.530
So, please TypeScript ignored that 'null' case and

63
00:02:43.530 --> 00:02:44.910
take the other value.

64
00:02:44.910 --> 00:02:49.910
in this case, take HTMLButtonElement as the only value.

65
00:02:50.170 --> 00:02:51.740
This is important.

66
00:02:51.740 --> 00:02:54.090
And that's something I wanted to show you here.

67
00:02:55.470 --> 00:02:58.430
One other thing that wouldn't be allowed with Strict mode is

68
00:02:58.430 --> 00:03:02.250
that you omit the type of one parameter for example,

69
00:03:02.250 --> 00:03:05.560
now it complains that this parameter implicitly

70
00:03:05.560 --> 00:03:07.340
has the 'any' the type.

71
00:03:07.340 --> 00:03:10.210
There is an 'any' type which you cannot sign,

72
00:03:10.210 --> 00:03:11.900
and that's also is fine.

73
00:03:11.900 --> 00:03:14.370
But that's a very generic fallback type.

74
00:03:14.370 --> 00:03:17.520
It basically carries no extra type information.

75
00:03:17.520 --> 00:03:20.260
Any kind of value is allowed here.

76
00:03:20.260 --> 00:03:22.810
And therefore, this is really just a type you should know.

77
00:03:22.810 --> 00:03:26.330
If you have no idea, which kind of data you can expect,

78
00:03:26.330 --> 00:03:27.840
if you do know it better,

79
00:03:27.840 --> 00:03:31.200
it is recommended that you are as clear as possible,

80
00:03:31.200 --> 00:03:34.730
in this case that you simply define that you want a number.

81
00:03:34.730 --> 00:03:36.310
But even if you don't know it,

82
00:03:36.310 --> 00:03:38.800
if you set this to any it's okay.

83
00:03:38.800 --> 00:03:40.830
But not setting 'any' type,

84
00:03:40.830 --> 00:03:43.450
that's not something the "Strict" mode allows.

85
00:03:43.450 --> 00:03:45.790
Because then does this implicitly 'any',

86
00:03:45.790 --> 00:03:48.800
but it looks like you simply forgot to look into this

87
00:03:48.800 --> 00:03:52.250
argument and you should at least explicitly set 'any' to

88
00:03:52.250 --> 00:03:54.620
make it very clear that you don't know better,

89
00:03:54.620 --> 00:03:58.300
or that you indeed want to allow any kind of value here.

90
00:03:58.300 --> 00:04:01.690
So, explicit 'any' is allowed implicit 'any' isn't,

91
00:04:01.690 --> 00:04:02.720
and it's even better,

92
00:04:02.720 --> 00:04:06.430
if you set the specific type you are expecting.

93
00:04:06.430 --> 00:04:07.530
now important,

94
00:04:07.530 --> 00:04:10.950
As soon as you added that tsconfig.json file,

95
00:04:10.950 --> 00:04:12.810
Once you run the types of compiler,

96
00:04:12.810 --> 00:04:15.360
you can still select the file,

97
00:04:15.360 --> 00:04:17.113
but then the tsconfig.json

98
00:04:17.113 --> 00:04:20.470
configuration will not be taken into account.

99
00:04:20.470 --> 00:04:24.590
Instead, as soon as you do have such a tsconfig.json file,

100
00:04:24.590 --> 00:04:26.500
just run tsc like this,

101
00:04:26.500 --> 00:04:30.530
and it will compile all types of files in the folder,

102
00:04:30.530 --> 00:04:34.230
whilst taking the Config File into account.

103
00:04:34.230 --> 00:04:37.260
So, only if you don't point at a specific file,

104
00:04:37.260 --> 00:04:39.950
the configuration file will be taken into account.

105
00:04:39.950 --> 00:04:43.840
And all types of files in the folder will be configured.

106
00:04:43.840 --> 00:04:46.750
You can still target the file if you want to.

107
00:04:46.750 --> 00:04:48.970
Then the configuration file is ignored for

108
00:04:48.970 --> 00:04:50.720
the types of compilation though.

109
00:04:50.720 --> 00:04:54.260
The IDE always picks up to config.json file.

110
00:04:54.260 --> 00:04:57.030
So the IDE support is always provided.

111
00:04:57.030 --> 00:04:59.023
No matter how you then compile it.

