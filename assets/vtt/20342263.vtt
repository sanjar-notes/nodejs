WEBVTT

1
00:00:02.070 --> 00:00:04.370
<v Instructor>So let's get started building some basic,</v>

2
00:00:04.370 --> 00:00:07.890
very basic node REST API here.

3
00:00:07.890 --> 00:00:11.560
For that, I'll create a new subfolder, node

4
00:00:11.560 --> 00:00:13.843
and a new subfolder, deno.

5
00:00:14.700 --> 00:00:16.670
And in the node folder,

6
00:00:16.670 --> 00:00:20.100
unsurprisingly, we'll build the node API.

7
00:00:20.100 --> 00:00:21.970
Now it'll be a simple API.

8
00:00:21.970 --> 00:00:24.410
Nonetheless, in there, we'll have an app.js file,

9
00:00:24.410 --> 00:00:26.960
we'll have our routes folder for your routes.

10
00:00:26.960 --> 00:00:30.170
We could add a controllers and a model's folder,

11
00:00:30.170 --> 00:00:33.370
but since it will be a very simple API with some dummy data,

12
00:00:33.370 --> 00:00:36.820
I'll just go with this basic data structure.

13
00:00:36.820 --> 00:00:40.747
Now it'll be a very simple todo API.

14
00:00:43.080 --> 00:00:45.290
And I noted everyone hates todos,

15
00:00:45.290 --> 00:00:47.380
but I'm going to go with some todos,

16
00:00:47.380 --> 00:00:50.700
because it's not so much about the fancy application,

17
00:00:50.700 --> 00:00:53.600
but it's about the differences between node and Deno.

18
00:00:53.600 --> 00:00:57.550
And the easier the API is and the less amount of work

19
00:00:57.550 --> 00:00:58.990
we have to do there,

20
00:00:58.990 --> 00:01:01.870
the easier it will be to grasp the differences

21
00:01:01.870 --> 00:01:05.270
and to grasp Deno's core features.

22
00:01:05.270 --> 00:01:08.140
So I have the todos.js file in the routes folder.

23
00:01:08.140 --> 00:01:09.850
I have the app.js file.

24
00:01:09.850 --> 00:01:11.610
And now of course, in node's case,

25
00:01:11.610 --> 00:01:14.550
I wanna use express.js here.

26
00:01:14.550 --> 00:01:17.010
So therefore I'll navigate into the node folder

27
00:01:17.010 --> 00:01:21.180
and run npm init to create a new package.json file,

28
00:01:21.180 --> 00:01:23.710
where I'm going to confirm all the defaults,

29
00:01:23.710 --> 00:01:25.150
so that now in that folder,

30
00:01:25.150 --> 00:01:29.370
we can run npm install to install express.

31
00:01:29.370 --> 00:01:31.730
And I'll also install the body parser

32
00:01:31.730 --> 00:01:34.223
to parse incoming request bodies.

33
00:01:35.540 --> 00:01:39.820
Now in app.js, we then require express.

34
00:01:39.820 --> 00:01:43.390
That's how we import in node.

35
00:01:43.390 --> 00:01:47.080
We could also import with the modern import syntax,

36
00:01:47.080 --> 00:01:49.900
which I cover in the modern JavaScript module,

37
00:01:49.900 --> 00:01:52.000
but I'll stick to this traditional approach,

38
00:01:52.000 --> 00:01:54.580
which you'll see in most projects.

39
00:01:54.580 --> 00:01:57.900
Also, I, again, disabled the Deno extension,

40
00:01:57.900 --> 00:02:01.410
so that I get good IDE support in node code?

41
00:02:01.410 --> 00:02:02.730
No, actually that's not the app.

42
00:02:02.730 --> 00:02:04.270
That's the express package, of course,

43
00:02:04.270 --> 00:02:06.050
but we then create the app.

44
00:02:06.050 --> 00:02:09.540
That's what we do by calling express like this.

45
00:02:09.540 --> 00:02:12.850
And on that app, we then can call, listen, for example,

46
00:02:12.850 --> 00:02:17.850
on port 3000 to start listening on that app server.

47
00:02:17.850 --> 00:02:21.340
And now we can register some middleware in node express

48
00:02:21.340 --> 00:02:23.830
with the use method as you learned.

49
00:02:23.830 --> 00:02:26.720
Now, I will outsource some middleware

50
00:02:26.720 --> 00:02:28.890
into the todos.js file.

51
00:02:28.890 --> 00:02:33.010
So here we again, import express by requiring express.

52
00:02:35.290 --> 00:02:38.240
And then here we get access to the router by extracting it

53
00:02:38.240 --> 00:02:40.723
from express.Router like that.

54
00:02:42.630 --> 00:02:45.920
And actually that should be lowercase

55
00:02:45.920 --> 00:02:47.060
because then on the router,

56
00:02:47.060 --> 00:02:52.060
we can register various routes like a get route to /todos,

57
00:02:52.210 --> 00:02:54.200
which will get a middleware function,

58
00:02:54.200 --> 00:02:58.600
with request, response, and next that should return todos.

59
00:02:58.600 --> 00:03:00.680
And by the way, if that's brand new to you,

60
00:03:00.680 --> 00:03:03.210
definitely go through the respective sections

61
00:03:03.210 --> 00:03:06.830
in this course first, this is all node express knowledge

62
00:03:06.830 --> 00:03:08.920
you gained throughout the course.

63
00:03:08.920 --> 00:03:11.010
So we have this get route.

64
00:03:11.010 --> 00:03:13.300
We then have a post route to /todos

65
00:03:13.300 --> 00:03:16.603
to get a new todo, for example.

66
00:03:18.660 --> 00:03:21.720
And we then also have a put route

67
00:03:21.720 --> 00:03:24.050
to replace a todo, for example.

68
00:03:24.050 --> 00:03:29.000
Here, I also want to get the todoId as part of the URL

69
00:03:29.000 --> 00:03:30.990
so that we can extract it from there

70
00:03:30.990 --> 00:03:35.490
and identify the fitting todo and update that accordingly.

71
00:03:35.490 --> 00:03:36.620
It's up to you, by the way,

72
00:03:36.620 --> 00:03:40.130
if you wanna have a put or a patch route here.

73
00:03:40.130 --> 00:03:43.740
And we also have to delete route to todos

74
00:03:43.740 --> 00:03:47.760
and then also some specific todoId, of course,

75
00:03:47.760 --> 00:03:50.820
and then we'll have that middleware function here as well

76
00:03:50.820 --> 00:03:55.820
to delete a todo, just like that.

77
00:03:56.090 --> 00:03:59.970
And ultimately, we export the router here

78
00:03:59.970 --> 00:04:04.970
so that in the app.js file, we can import the todo routes

79
00:04:08.710 --> 00:04:13.710
by requiring ./routes/todos.js,

80
00:04:16.150 --> 00:04:18.700
without the extension actually just todos.

81
00:04:18.700 --> 00:04:19.880
This is how we import this,

82
00:04:19.880 --> 00:04:22.480
and now we can use this as a middleware

83
00:04:22.480 --> 00:04:25.690
and we could also add some other middleware if we wanted to,

84
00:04:25.690 --> 00:04:28.893
we can register any middleware whenever we want.

85
00:04:30.650 --> 00:04:34.953
So here I could console.log some middleware

86
00:04:38.150 --> 00:04:41.050
and I can always call next to proceed

87
00:04:41.050 --> 00:04:43.750
to the next middleware in line.

88
00:04:43.750 --> 00:04:47.110
So that's how we can do this in node express.

89
00:04:47.110 --> 00:04:49.360
Of course our logic is missing here though.

90
00:04:49.360 --> 00:04:53.500
So to keep it simple, I'll just have a todos array up there,

91
00:04:53.500 --> 00:04:55.540
which is a very simple array.

92
00:04:55.540 --> 00:04:57.910
And when we get a get request,

93
00:04:57.910 --> 00:05:02.460
I just want to send back a response with some JSON data,

94
00:05:02.460 --> 00:05:06.960
where I add a todos property, which holds the todos array.

95
00:05:06.960 --> 00:05:09.710
So a very simple response.

96
00:05:09.710 --> 00:05:13.490
If we get a post request, I'll create a newTodo,

97
00:05:13.490 --> 00:05:18.053
which is a JavaScript object that might have an id.

98
00:05:19.840 --> 00:05:24.310
That id could be the current date converted to an ISOString.

99
00:05:24.310 --> 00:05:26.260
And I have the todo text,

100
00:05:26.260 --> 00:05:29.160
which I expect to get from the request.body.

101
00:05:29.160 --> 00:05:31.740
There, I expect to have a text field.

102
00:05:31.740 --> 00:05:35.050
And in order to be able to extract that data

103
00:05:35.050 --> 00:05:39.720
from the body, in app.js, I also want to import

104
00:05:39.720 --> 00:05:42.190
the body-parser by requiring it

105
00:05:42.190 --> 00:05:45.660
from the body-parser package, which we installed.

106
00:05:45.660 --> 00:05:50.200
And I'll register the bodyParser.json middleware here.

107
00:05:50.200 --> 00:05:52.690
And this will parse all incoming requests,

108
00:05:52.690 --> 00:05:54.830
check if they carry JSON data.

109
00:05:54.830 --> 00:05:57.810
And if they do, the JSON data will be parsed

110
00:05:57.810 --> 00:06:01.040
and will be made available as a JavaScript object

111
00:06:01.040 --> 00:06:03.063
on the request.body field.

112
00:06:04.260 --> 00:06:06.810
So we can create a newTodo then,

113
00:06:06.810 --> 00:06:09.030
and we can then reach out to todos

114
00:06:09.030 --> 00:06:11.693
and push the newTodo onto todos.

115
00:06:15.580 --> 00:06:17.460
By the way, if you followed along

116
00:06:17.460 --> 00:06:19.490
with the TypeScript section in this course,

117
00:06:19.490 --> 00:06:23.190
this API might look quite familiar to you.

118
00:06:23.190 --> 00:06:25.983
Now for updating a todo, we need to get that todoID.

119
00:06:26.950 --> 00:06:28.857
I'll store it in a constant named tid.

120
00:06:30.060 --> 00:06:32.403
And we get it from the request.params,

121
00:06:33.450 --> 00:06:35.860
and there we'll have a todoId param

122
00:06:35.860 --> 00:06:37.860
because that's the name we picked here.

123
00:06:37.860 --> 00:06:39.750
So we can extract it here.

124
00:06:39.750 --> 00:06:42.840
And now we need to find the index of the todo

125
00:06:42.840 --> 00:06:44.430
in the todos array.

126
00:06:44.430 --> 00:06:49.420
So todoIndex is todos, which is our array, findIndex

127
00:06:49.420 --> 00:06:53.210
and findIndex takes a function that executes for every todo.

128
00:06:53.210 --> 00:06:55.940
So here we get every todo as an argument,

129
00:06:55.940 --> 00:06:58.610
and we wanna return true if the todo.id

130
00:06:58.610 --> 00:07:00.463
is equal to the extracted tid.

131
00:07:03.010 --> 00:07:05.530
Then we know that's the to do we wanna update.

132
00:07:05.530 --> 00:07:09.073
So then we can reach out to todos for the given todoIndex

133
00:07:10.070 --> 00:07:14.030
and replace the object being stored there with a new object

134
00:07:14.030 --> 00:07:15.960
where I keep the id.

135
00:07:15.960 --> 00:07:19.100
So I still access todos for todoIndex here

136
00:07:19.100 --> 00:07:22.000
and extract the existing id,

137
00:07:22.000 --> 00:07:25.140
but where I set the text to the text we get

138
00:07:25.140 --> 00:07:26.743
on the request.body here.

139
00:07:28.130 --> 00:07:30.210
That's how we could update.

140
00:07:30.210 --> 00:07:32.530
Now we wanna send back a response here

141
00:07:32.530 --> 00:07:34.820
and also for posting, of course.

142
00:07:34.820 --> 00:07:39.410
For posting, my response could have a status code of 201

143
00:07:39.410 --> 00:07:41.610
to indicate that it was successful

144
00:07:41.610 --> 00:07:44.270
and a new resource was created.

145
00:07:44.270 --> 00:07:49.040
And we could have a message where we say, Todo created!

146
00:07:49.040 --> 00:07:50.660
And if we wanted to, of course,

147
00:07:50.660 --> 00:07:53.700
we could also attach the newTodo,

148
00:07:53.700 --> 00:07:55.823
so that we return the created data.

149
00:07:57.720 --> 00:07:59.460
And for updating on the response,

150
00:07:59.460 --> 00:08:02.390
I'll set my status code to 200

151
00:08:02.390 --> 00:08:04.560
and then also attach some JSON data

152
00:08:04.560 --> 00:08:07.353
where the message could be, Updated todo!

153
00:08:10.040 --> 00:08:14.070
Now for deleting, we still will need the todoId

154
00:08:14.070 --> 00:08:17.200
from the params so we can copy this line.

155
00:08:17.200 --> 00:08:20.810
And then I wanna replace my todos array with a new array.

156
00:08:20.810 --> 00:08:23.610
So this array will be replaced with a new array,

157
00:08:23.610 --> 00:08:27.840
which should be the old array minus the item with that id.

158
00:08:27.840 --> 00:08:30.660
So I'll filter the todos array.

159
00:08:30.660 --> 00:08:34.010
And filter takes a function that executes on every element

160
00:08:34.010 --> 00:08:37.420
in the todos array and if we return true here,

161
00:08:37.420 --> 00:08:39.190
this element will be kept.

162
00:08:39.190 --> 00:08:41.760
If we return false, it will be deleted.

163
00:08:41.760 --> 00:08:44.190
So I wanna return true for todos

164
00:08:44.190 --> 00:08:48.270
where the id does not match, because if it does match,

165
00:08:48.270 --> 00:08:50.220
I know it's the element I wanna delete.

166
00:08:52.720 --> 00:08:56.410
And then here, we also can set a status code of 200

167
00:08:56.410 --> 00:08:58.410
and set back some JSON data

168
00:08:58.410 --> 00:09:02.070
where we have a message of, Todo deleted!

169
00:09:02.070 --> 00:09:05.893
And that's a very, very, very trivial API now.

170
00:09:08.670 --> 00:09:12.390
Now with that, if we now run this API,

171
00:09:12.390 --> 00:09:15.870
so if we go into the node...

172
00:09:15.870 --> 00:09:18.320
Oops, into the node folder here,

173
00:09:18.320 --> 00:09:22.363
and I execute my app.js file, it starts executing.

174
00:09:24.180 --> 00:09:28.100
And now we can use tools like Postman, which is a free tool.

175
00:09:28.100 --> 00:09:31.640
You can download and install to test our API.

176
00:09:31.640 --> 00:09:35.140
You can simply visit postman.com, download it there.

177
00:09:35.140 --> 00:09:37.060
You won't need to sign up to do that.

178
00:09:37.060 --> 00:09:39.720
You can just download it like this.

179
00:09:39.720 --> 00:09:42.360
And once you downloaded it and started it,

180
00:09:42.360 --> 00:09:44.010
you should see a screen like this.

181
00:09:44.010 --> 00:09:47.050
If you get a welcome screen, you can simply close that.

182
00:09:47.050 --> 00:09:49.000
And here you can set up new requests.

183
00:09:49.000 --> 00:09:53.800
For example, a get request to localhost:3000/todos.

184
00:09:53.800 --> 00:09:56.570
And this should fetch us all the todos.

185
00:09:56.570 --> 00:10:00.520
Now if I send this, we see that our server works.

186
00:10:00.520 --> 00:10:03.650
I get no todos, but I get a success response.

187
00:10:03.650 --> 00:10:06.993
So sending and parsing and handling the request worked.

188
00:10:07.950 --> 00:10:09.980
Now let's create a newTodo.

189
00:10:09.980 --> 00:10:14.190
For that I'll open up a new tab here and send a post request

190
00:10:14.190 --> 00:10:17.280
to localhost:3000/todos.

191
00:10:17.280 --> 00:10:20.410
And now here we need to append some data.

192
00:10:20.410 --> 00:10:22.830
So under body, we can go to raw

193
00:10:22.830 --> 00:10:25.870
and then pick JSON here in the dropdown.

194
00:10:25.870 --> 00:10:27.810
And that will simply add some JSON data

195
00:10:27.810 --> 00:10:29.420
to the outgoing request.

196
00:10:29.420 --> 00:10:32.320
And there, we should set a text field

197
00:10:32.320 --> 00:10:34.780
because we're going to look for a text field

198
00:10:34.780 --> 00:10:38.450
when we extract data from the body on the server side.

199
00:10:38.450 --> 00:10:41.860
So we should make sure that text exists here,

200
00:10:41.860 --> 00:10:46.410
and then I can send a new todo, click send,

201
00:10:46.410 --> 00:10:50.600
and I get this confirmation message, status code 201.

202
00:10:50.600 --> 00:10:54.233
And if we now fetch all todos, we see the new todo here.

203
00:10:55.090 --> 00:10:57.940
Now for updating, it will the need todoid

204
00:10:57.940 --> 00:11:02.940
so we can copy that and send a new request, a put request,

205
00:11:03.480 --> 00:11:06.230
because I'm waiting for a put request here

206
00:11:06.230 --> 00:11:11.230
to localhost:3000/todo/ that id.

207
00:11:12.360 --> 00:11:15.020
Now the put request also needs the new data

208
00:11:15.020 --> 00:11:17.380
with which we wanna update the todo.

209
00:11:17.380 --> 00:11:21.260
So under body, we still wanna add some JSON data,

210
00:11:21.260 --> 00:11:23.740
and that should again be a JSON object,

211
00:11:23.740 --> 00:11:26.790
which has a text key because we're also looking

212
00:11:26.790 --> 00:11:30.260
for the text field on the put request here,

213
00:11:30.260 --> 00:11:34.190
and there we'll have our updated todo text.

214
00:11:34.190 --> 00:11:37.050
If I now send this, this seems to work.

215
00:11:37.050 --> 00:11:39.240
We get back the success response.

216
00:11:39.240 --> 00:11:41.210
And if we get all todos,

217
00:11:41.210 --> 00:11:43.513
we see the updated text here as well.

218
00:11:44.620 --> 00:11:46.430
Now last but not least, for deleting,

219
00:11:46.430 --> 00:11:48.570
if we send a delete request

220
00:11:48.570 --> 00:11:52.760
to localhost:3000/todos/ that id,

221
00:11:52.760 --> 00:11:55.160
we don't need to add any extra data.

222
00:11:55.160 --> 00:11:57.040
And if we send this, it seems to work.

223
00:11:57.040 --> 00:11:59.020
We get the confirmation message.

224
00:11:59.020 --> 00:12:02.950
And if we now get all todos, we're back to an empty array.

225
00:12:02.950 --> 00:12:07.750
So our API works, but that's of course, just node.js.

226
00:12:07.750 --> 00:12:11.040
Now let's see how we would build that same API

227
00:12:11.040 --> 00:12:13.023
with Deno and Oak.

