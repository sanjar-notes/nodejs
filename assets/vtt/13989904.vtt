WEBVTT

00:02.170 --> 00:08.560
So this is an introduction to testing and you'll learn how to use Mocha and Chai to write tests and

00:08.560 --> 00:14.710
expectations that you can test async code, that you can work with, testing databases or with steps

00:15.070 --> 00:17.740
if you have external dependencies.

00:18.250 --> 00:20.170
And still this can be overwhelming.

00:20.170 --> 00:25.060
I know because how are you testing file access?

00:25.180 --> 00:29.380
How should you work with sessions or with cookies?

00:29.470 --> 00:30.940
There's so much to test.

00:30.940 --> 00:32.770
How do you know what to test?

00:32.770 --> 00:35.260
How do you come up with good test ideas?

00:35.260 --> 00:39.760
Does it make sense to test whether the status code was set correctly, for example?

00:40.030 --> 00:44.260
Well, these are all tough questions to answer or not.

00:45.010 --> 00:46.090
Regarding the status code.

00:46.090 --> 00:53.320
For example, always ask yourself, are you testing something that you are responsible for with your

00:53.320 --> 00:53.920
code?

00:54.190 --> 01:00.340
Regarding the status code, of course we don't need to test whether the status code is set on the response,

01:00.340 --> 01:05.020
but if that exact status code you are looking for is correct, that is something you could test.

01:05.050 --> 01:08.050
Is it status code 201 or 500?

01:08.050 --> 01:10.750
It's you and your code that defines that.

01:10.750 --> 01:17.800
So it is something you should test if you have functions that are very large and you find yourself stopping

01:17.800 --> 01:23.500
a lot of stuff to test some tiny part of it, maybe you can split a function apart.

01:23.530 --> 01:25.840
We could do this for our controllers here too.

01:25.960 --> 01:33.010
We could, for example, also outsource the part where we add a post to our user posts into a new function

01:33.010 --> 01:39.820
that simply accepts a user ID and the created post as an input, and then looks for that user ID and

01:39.820 --> 01:40.570
adds that post.

01:40.570 --> 01:45.910
So a function that essentially only does this part, we could outsource this into a new function, which

01:45.910 --> 01:52.510
then all of a sudden becomes way easier to test because you test functions and splitting your code into

01:52.510 --> 01:57.310
more granular functions can make it easier to maintain and easier to test.

01:57.310 --> 02:04.360
So if you have problems testing large functions, try splitting them in smaller, more testable functions.

02:05.510 --> 02:10.880
If you're wondering how to test sessions or cookies, well, google is your friend.

02:10.910 --> 02:12.890
Sounds dumb, but it's the case.

02:12.920 --> 02:14.780
Search for Node.js.

02:14.780 --> 02:17.150
Express cookie testing.

02:17.420 --> 02:18.860
Session testing.

02:19.100 --> 02:23.170
You'll find instructions, ideas, thoughts by other people.

02:23.180 --> 02:28.730
Because testing is a lot about thinking and experience and trying stuff out.

02:28.730 --> 02:31.860
There rarely is one correct solution.

02:31.880 --> 02:35.270
It's also the case for writing your own test cases here.

02:35.360 --> 02:38.090
What do you pass in as a dummy configuration?

02:38.090 --> 02:40.330
Like for example, this time request object.

02:40.340 --> 02:41.660
How should it look like?

02:41.810 --> 02:49.070
Analyze, decode your testing and then think about how you need to configure your inputs or your dependencies

02:49.070 --> 02:52.490
for your test scenario to become real.

02:52.910 --> 02:58.160
Of course, always keep an eye open if you're maybe just testing for stuff you're introducing here.

02:58.280 --> 03:04.700
For example, when you're testing the user sign up and you pass in some dummy request object with an

03:04.700 --> 03:09.890
email and password that might look like this, and you're then expecting a user to be created with an

03:09.920 --> 03:12.710
email address of test two at Test Dotcom.

03:12.740 --> 03:18.650
Well, then your test will fail and not because your code is bad, but because your test is bad, because

03:18.650 --> 03:21.680
you define a bad input for your expectations.

03:21.950 --> 03:28.850
And therefore, testing really is about trying stuff out, gathering experience, diving into discussions

03:28.850 --> 03:35.390
with other developers, diving into StackOverflow, and that will make it easier over time.

03:35.810 --> 03:42.020
I hope it became clear that writing tests in general isn't too hard, though that you write code that

03:42.020 --> 03:48.330
tests your code and the official docs of Chae and MOCA should really help you.

03:48.350 --> 03:55.160
Defining tests, grouping tests, testing different things and you'll find plenty of third party packages

03:55.160 --> 03:57.470
and plug in that can make it even easier.

03:57.470 --> 04:01.390
For example, testing things like sessions or testing promises.

04:01.400 --> 04:07.010
There are all the packages that make that easier to let you write even leaner code than we are doing

04:07.010 --> 04:07.460
here.

04:07.790 --> 04:13.610
So with that, I hope this introduction was helpful and I hope you now are not just able to write awesome

04:13.610 --> 04:20.510
note express applications, but you are also able to test them both manually and automatically.
