WEBVTT

00:02.050 --> 00:09.100
Now to demonstrate testing, I picked a snapshot from our course where we just finished the rest API

00:09.100 --> 00:15.150
with async await because that is particularly nice to test and to dive into testing.

00:15.160 --> 00:22.960
Now obviously testing different kinds of node applications like GraphQL API all have their own specialties

00:22.960 --> 00:24.610
and special complexities.

00:24.610 --> 00:27.430
And this is only an introductory module here.

00:27.430 --> 00:32.470
If you want to learn all about that, you find dedicated tutorials for all these different scenarios

00:32.470 --> 00:38.110
that would be enough content for its own course, and therefore I rather did not squeeze it all into

00:38.110 --> 00:39.640
this one to not bloat it.

00:40.060 --> 00:46.210
But what you'll learn here, the core ideas, the core concepts, the way of thinking about testing

00:46.210 --> 00:52.450
and the general setup that will always be the same no matter which node application you're building.

00:52.450 --> 00:59.440
And therefore this is super important start into testing that you need to then really master testing.

01:00.070 --> 01:05.650
So here I have this snapshot and you find that code attached to this lecture, of course.

01:05.920 --> 01:13.090
And to add tests here with first of all have to set up our testing environment with MoCCA and Chai.

01:13.300 --> 01:20.620
Now you can simply Google for MOCA GS to find MOCA dot org where you can find the official docs and

01:20.620 --> 01:23.350
find out how to install it, how to write tests and so on.

01:23.500 --> 01:24.220
And the same.

01:24.220 --> 01:25.570
Of course it's true for Chai.

01:25.600 --> 01:31.480
You can Google for chai jazz and you can learn more about Chai here and find out how that works.

01:31.480 --> 01:34.540
But of course, I'm going to walk you through all these fundamentals here.

01:34.900 --> 01:42.400
So let's install these things here now with NPM installed safe dash depth here in our project and there

01:42.400 --> 01:44.290
it's just mocha and chai.

01:44.320 --> 01:46.720
These are the two tools we need to get started.

01:47.020 --> 01:50.350
So let's install them here and let's wait for that to finish.

01:52.540 --> 01:58.560
And with the installation process finished, let's start writing our first tests now for that.

01:58.570 --> 02:00.370
First of all, let's go to the package store.

02:00.400 --> 02:06.730
Jason fall in there to the script section and there you should have a test script already if you don't

02:06.730 --> 02:08.920
simply add it now by default.

02:08.920 --> 02:10.980
This does not have a useful command in there.

02:10.990 --> 02:12.300
So let's get rid of that.

02:12.310 --> 02:17.830
And here you can now just run MOCA, just like this, just type markup, this dependency you just installed

02:17.830 --> 02:20.590
without any other configuration.

02:21.160 --> 02:28.900
Now what you can do now is you can run NPM test here in your terminal, navigate it into the project

02:28.900 --> 02:34.000
folder, and this will now run all your tests you defined in this project.

02:34.180 --> 02:38.950
But of course here it's going to complain that it didn't find any test files.

02:39.280 --> 02:43.690
The reason for that is that mock up by default looks for a folder named test.

02:43.690 --> 02:49.270
So let's add one and it has to be named test, not tests, not anything else, just test.

02:49.450 --> 02:53.110
And in there you can now define files that hold your testing code.

02:53.500 --> 02:57.670
Now let's start very simple and I'll name it starts as you can name it.

02:57.670 --> 02:59.530
Whatever you want doesn't have to be named.

02:59.530 --> 03:01.510
Start can be any phylum you want.

03:01.510 --> 03:03.730
Should be a JavaScript file though.

03:04.000 --> 03:11.080
Now in here we write our testing code and writing testing code can be strange when you see the for the

03:11.080 --> 03:14.530
first time, but it quickly becomes very straightforward.

03:14.740 --> 03:18.190
You simply write a test by writing it.

03:18.190 --> 03:19.420
Just it.

03:19.420 --> 03:22.660
And it is a function provided by MOCA.

03:22.930 --> 03:29.800
Now it might look like a strange function name, but the idea here is that you give your tests name

03:29.800 --> 03:36.190
and they read like plain English sentences because indeed it takes two arguments and the first one is

03:36.190 --> 03:39.190
a string which simply describes your test.

03:39.190 --> 03:44.920
And this is something which you'll later see as an output for your test, which will help you identify

03:44.920 --> 03:47.560
which tests failed and which tests succeeded.

03:47.560 --> 03:51.820
So obviously this should be a title that kind of describes what's happening in the test.

03:52.330 --> 04:01.060
So here we could, for example, test that two numbers are added correctly.

04:01.060 --> 04:03.460
Now, of course, this is kind of a stupid test here.

04:03.460 --> 04:07.210
It will become more useful later, but this is just to introduce you to testing.

04:07.300 --> 04:12.340
So here it should add numbers correctly, could be a description.

04:12.340 --> 04:14.830
And you see this now reads like an English sentence.

04:14.830 --> 04:16.960
It should add numbers correctly.

04:16.960 --> 04:20.200
Theoretically, you can of course put any title you want and here.

04:20.200 --> 04:23.110
But it's a convention to write sentences like this.

04:23.410 --> 04:29.710
The more important part, of course, is the second argument, and this should be a function of function

04:29.710 --> 04:32.830
that now defines your actual test code.

04:32.860 --> 04:39.340
Now later, we'll dare reach out to our own models, our own controllers, and test these, because

04:39.340 --> 04:42.970
that, of course, is the idea that we test our controller functions and so on.

04:42.970 --> 04:46.090
But for now we will write a very simple test here.

04:46.090 --> 04:52.390
We'll add a num one, which maybe is two and a num two, which could be free.

04:52.390 --> 04:55.690
And now we want to test if these two added together are five.

04:55.690 --> 04:58.270
And yes, this is an absolutely stupid test.

04:58.300 --> 04:59.440
Of course they are.

04:59.730 --> 05:04.480
Just to show you how to run your tests, it'll become more helpful later.

05:04.720 --> 05:10.720
So we get number one, we get numb to you and now we want to check if they are added up to five.

05:10.720 --> 05:16.030
And of course, later you might have dynamic values that the user enters and that you transform in your

05:16.030 --> 05:19.660
code and you want to test if your code transformation works correctly.

05:19.660 --> 05:25.390
And then this makes a lot more sense than if you have strongly typed values like you have here.

05:25.780 --> 05:30.970
So how can we now check if our test succeeded?

05:30.970 --> 05:34.450
How can we now define a success condition?

05:34.840 --> 05:37.060
Well, that happens with the help of Chime.

05:37.090 --> 05:43.240
Mocha is responsible for running our tests and for giving us this IT function that defines where we

05:43.240 --> 05:45.130
define our test code.

05:45.130 --> 05:52.510
Chai is responsible for defining our success conditions and for this we just need to import something

05:52.510 --> 05:53.050
from chai.

05:53.050 --> 06:00.760
Here we import a function that is named expect you do this by requiring chai and there the expected

06:00.760 --> 06:01.630
function.

06:02.050 --> 06:08.410
Now there also is a different way of defining our conditions with a should keyword, but we will use

06:08.410 --> 06:13.390
the expected way you can learn about the should way here in the official docs.

06:13.390 --> 06:15.220
In the end, they do exactly the same.

06:15.220 --> 06:17.530
They allow you to define success conditions.

06:17.530 --> 06:25.090
It just differs regarding how you write your test conditions and I like that expect style more, but

06:25.090 --> 06:26.680
you can definitely dive into both.

06:26.680 --> 06:28.090
So how does this now work?

06:28.090 --> 06:33.070
Well, you write expect and then inside of this function call.

06:33.070 --> 06:41.620
So as an argument you pass your code that you want to test or your result that you want to test like

06:41.620 --> 06:44.470
here num one plus num two.

06:44.470 --> 06:47.440
So we expect this addition here.

06:47.590 --> 06:49.990
Now, how can we define what this should be?

06:50.080 --> 06:51.520
Well, again, this is.

06:51.970 --> 06:56.380
Close to defining or to writing normal English sentences.

06:56.800 --> 07:00.790
Chai gives you a couple of properties on this object.

07:00.790 --> 07:02.140
Expect returns.

07:02.140 --> 07:03.820
So expect returns an object.

07:03.820 --> 07:06.190
And there you have properties like two.

07:06.520 --> 07:13.510
And then on two you have another object which gives you things like two equal.

07:13.990 --> 07:18.400
And then equal is a function where you can define the value you expect us to equal.

07:18.400 --> 07:20.890
So this really is something you have to get used to.

07:20.890 --> 07:26.290
But in the end you again write an English sentence with the help of all these helper properties and

07:26.290 --> 07:27.100
methods.

07:27.100 --> 07:30.850
And of course in the official chai docs you will learn about this too.

07:30.850 --> 07:35.830
And there you also learn about all properties you have available.

07:35.830 --> 07:41.830
So if you dive into the guide here or into the API docs, well then of course you can learn all about

07:41.830 --> 07:49.240
expecting and you can see what you can change so that you can say to equal to B or whatever you want.

07:49.840 --> 07:55.660
So here we expect num one plus num one plus one, num two to equal five.

07:55.930 --> 08:02.830
Now with this defined in the start JS file in the test folder, if you run NPM test again, it will

08:02.830 --> 08:09.580
automatically look for the test folder and execute all tests in all files defined in that test folder

08:09.790 --> 08:12.160
and therefore here in the output we see.

08:13.560 --> 08:19.650
A checkmark next to should add numbers correctly, which of course is this test which is now executed

08:19.650 --> 08:20.760
correctly, as you can see.

08:20.760 --> 08:22.860
And that is what you want to see when writing tests.

08:22.860 --> 08:25.850
You want to see that all your tests pass.

08:26.220 --> 08:29.220
Because now, of course, we could define more than one test.

08:29.370 --> 08:37.110
For example, it should not give a result of six or whatever you want to name it.

08:37.110 --> 08:41.010
And now here we could say we expect number one plus number two.

08:42.310 --> 08:45.840
Not to equal six, for example.

08:45.850 --> 08:51.100
So now we're basically checking whether this is not only five, but it's also not six.

08:51.100 --> 08:53.620
So now we have a second test defined.

08:53.620 --> 08:59.200
And now if we rerun NPM test here, well then we get two passing tests.

08:59.380 --> 09:03.460
And now, of course, it's easy to make a test fail if, for example.

09:04.190 --> 09:08.830
Change num one here to free and I now run this again.

09:08.840 --> 09:15.080
Now you see I have a failing test and you see I get an error, I get that it expected six to not equal

09:15.080 --> 09:17.570
six because three plus three now is six.

09:17.570 --> 09:23.450
But we are not expecting this to be six and this is therefore hinting us at the test that failed, giving

09:23.450 --> 09:25.610
us a reason of why it failed.

09:25.610 --> 09:30.680
And therefore, when we're not testing dummy code like this, where we have the reason for to fail written

09:30.680 --> 09:35.630
in the test, but where it might be in our other code which we eventually will test, then this will

09:35.630 --> 09:37.970
allow us to fix our other code.
