WEBVTT

00:02.160 --> 00:07.290
For that, let's just play around with JavaScript and I'm going to brand new empty folder, which I

00:07.290 --> 00:14.580
opened with my IDE Visual Studio code, and in there I'll create a new file and I'll name it played

00:14.580 --> 00:14.790
out.

00:14.790 --> 00:16.920
JS The name is totally up to you though.

00:17.310 --> 00:22.500
Now let me start with some core language features, variables and functions.

00:22.500 --> 00:29.070
And again, you should definitely dive into a core JavaScript resource like the ones I linked in the

00:29.070 --> 00:32.670
second lecture of this module if you are brand new to JavaScript.

00:32.670 --> 00:38.040
So I by now do expect you to know what variables functions are.

00:38.040 --> 00:42.600
I also expect you to be aware of what if statements or loops are.

00:42.630 --> 00:49.380
These are all core things you got to have set by now because they are crucial for JavaScript, no matter

00:49.380 --> 00:52.350
if you're using it in the browser or on the server.

00:53.830 --> 00:56.800
So for variables you might know desc syntax.

00:56.800 --> 01:01.960
With the var keyword you can have one name and for example store max in their right.

01:01.960 --> 01:03.100
This would be a variable.

01:03.100 --> 01:07.930
And now you can use that, for example, to simply output it like this.

01:08.260 --> 01:14.650
And if we now run this file with Node.js by running node play Dodges, this is the command we have to

01:14.650 --> 01:19.120
write in a terminal, navigate it into that project folder.

01:19.120 --> 01:25.900
So into that folder where I'm having this play this file, then I see Max down there, right?

01:25.900 --> 01:28.390
So that is some JavaScript code.

01:28.810 --> 01:32.710
We can also create a number variable H, which now would be a number.

01:32.710 --> 01:34.510
It's not in close to quotation marks.

01:34.510 --> 01:37.000
So this first one is a so called string.

01:37.000 --> 01:38.320
This is a number.

01:38.320 --> 01:40.390
We can also add a third one.

01:42.070 --> 01:45.160
Has hobbies and that would now be a boolean.

01:45.170 --> 01:51.460
These are some core types JavaScript nodes true false are booleans numbers are well numbers.

01:51.460 --> 01:53.290
They can also have decimal places.

01:53.290 --> 01:54.850
These are strings.

01:54.850 --> 02:01.840
And now here I can also define a function with the function keyword summarize user.

02:01.840 --> 02:06.130
This is how you create a function JavaScript and there we could return something.

02:06.130 --> 02:09.550
Functions can return values with the return statement.

02:09.820 --> 02:18.430
They also can get input like user name, user age and user has hobby.

02:18.430 --> 02:24.010
You can name these arguments as these things here are called however you want.

02:24.010 --> 02:29.380
These are now local variables only available inside of the function, not outside of it.

02:29.620 --> 02:31.330
And then you can return.

02:31.930 --> 02:34.600
Name is plus username.

02:35.370 --> 02:39.360
Plus, let's say, some text with a comma, a white space.

02:40.650 --> 02:51.810
Age is wide space user age plus and the user has hobbies and then user has hobby, something like that.

02:51.840 --> 02:57.750
Now here I'm simply returning some text which I'm manually concatenating by hardcoded strings and the

02:57.750 --> 03:00.120
dynamic values I'm getting as an argument.

03:01.330 --> 03:08.650
Now we can also console.log the result of summarise user we call a function by adding parentheses after

03:08.650 --> 03:13.720
the name and now we just have to pass in data we expect here as arguments.

03:13.720 --> 03:18.970
So we need to pass in three arguments here the name The Age and has hobbies.

03:18.970 --> 03:24.250
So the three variables I defined up here, we could have directly accessed them in the function.

03:24.250 --> 03:30.760
Two, By the way, we don't have to take the way of accepting arguments, but this is a pure function

03:30.760 --> 03:36.340
which does not depend on anything from outside the function, but gets all the data it works with as

03:36.340 --> 03:39.640
part of the arguments, which is a nice way of writing functions.

03:41.540 --> 03:46.010
And now if I execute this well, then we get this output here.

03:46.190 --> 03:49.260
Now, this is just a summary of the features you should be aware of.

03:49.280 --> 03:55.130
As I mentioned, I just want you to know, or I just want to be sure that you know how we work with

03:55.130 --> 04:01.010
variables, how we work with functions, how we call functions, and that you understand how parameters

04:01.010 --> 04:05.240
or arguments in the function are used in there and only in there.

04:05.240 --> 04:11.540
We couldn't use user name outside of their because of something called scoping in JavaScript.

04:11.540 --> 04:14.990
We can then call a function like this and pass in the data.

04:14.990 --> 04:21.710
We could hardcoded the data here or refer to variables which have to be available in the scope of this

04:21.710 --> 04:28.190
statement, which is the case for these variables, since they are global variables and these are variables

04:28.190 --> 04:32.930
and functions and how we interact and these are some core features you have to be aware of.

04:32.960 --> 04:35.930
Let's now dive into something more exciting in the next lecture.
