WEBVTT

1
00:00:02.040 --> 00:00:04.930
<v Instructor>So we get this first basic script here,</v>

2
00:00:04.930 --> 00:00:06.800
which we executed with deno.

3
00:00:06.800 --> 00:00:11.730
Let's now write the same code in our app js file for node.

4
00:00:11.730 --> 00:00:14.350
So I wanna store some text in a file.

5
00:00:14.350 --> 00:00:16.210
How does this work?

6
00:00:16.210 --> 00:00:17.430
Well first of all,

7
00:00:17.430 --> 00:00:19.200
I'm setting up my text here,

8
00:00:19.200 --> 00:00:21.400
and then in node's world,

9
00:00:21.400 --> 00:00:23.880
I need the file system core module.

10
00:00:23.880 --> 00:00:26.630
We import this with the require syntax.

11
00:00:26.630 --> 00:00:30.870
So from the fs module we import the file system.

12
00:00:30.870 --> 00:00:32.270
Now here by the way,

13
00:00:32.270 --> 00:00:34.660
I'm getting an error that fs is a module

14
00:00:34.660 --> 00:00:36.190
that's not being found.

15
00:00:36.190 --> 00:00:37.800
That's of course incorrect.

16
00:00:37.800 --> 00:00:39.970
And for me to fix this to temporarily

17
00:00:39.970 --> 00:00:43.580
disable my deno extension.

18
00:00:43.580 --> 00:00:44.980
You might not need to do this.

19
00:00:44.980 --> 00:00:46.670
I need to do it here,

20
00:00:46.670 --> 00:00:49.570
so I will disable it and reload the project

21
00:00:49.570 --> 00:00:51.890
and thereafter this will work here.

22
00:00:51.890 --> 00:00:54.110
So now I got the file system here.

23
00:00:54.110 --> 00:00:56.320
Now to write to a file,

24
00:00:56.320 --> 00:00:59.870
we also got a write file method here,

25
00:00:59.870 --> 00:01:02.690
the writefile method now also wants

26
00:01:02.690 --> 00:01:03.990
a path

27
00:01:03.990 --> 00:01:08.550
which in the simplest form can just be the file name.

28
00:01:08.550 --> 00:01:11.230
And then it wants the data that should be written.

29
00:01:11.230 --> 00:01:13.730
One core difference compared to deno

30
00:01:13.730 --> 00:01:16.120
for this specific method here,

31
00:01:16.120 --> 00:01:19.340
is that the data could be just a string though,

32
00:01:19.340 --> 00:01:22.440
that we can also pass in such a bytes array,

33
00:01:22.440 --> 00:01:25.630
but that it also just can be a string.

34
00:01:25.630 --> 00:01:27.980
So here we could have to node-message.textfile,

35
00:01:30.300 --> 00:01:34.120
and we just pass in the text as a second argument.

36
00:01:34.120 --> 00:01:37.530
Now one crucial difference is that write file,

37
00:01:37.530 --> 00:01:40.880
like this does now not return a promise,

38
00:01:40.880 --> 00:01:44.350
but that instead we pass in a callback here

39
00:01:44.350 --> 00:01:48.060
to have some code that executes once this completes

40
00:01:48.060 --> 00:01:50.410
or that tells us about a potential error

41
00:01:50.410 --> 00:01:52.370
that could have occurred.

42
00:01:52.370 --> 00:01:56.550
However you learn that you can access dot promises here

43
00:01:56.550 --> 00:01:58.890
to then have the promise based versions

44
00:01:58.890 --> 00:02:00.650
of those API is available,

45
00:02:00.650 --> 00:02:03.960
and now write file would give you a promise.

46
00:02:03.960 --> 00:02:07.530
So you can always get a modern feature like a promise here,

47
00:02:07.530 --> 00:02:09.890
and to have the best possible comparison

48
00:02:09.890 --> 00:02:11.210
I'm going to use that.

49
00:02:11.210 --> 00:02:12.870
So I'm going to import the file system

50
00:02:12.870 --> 00:02:16.910
from the promises part of the file system core module,

51
00:02:16.910 --> 00:02:20.320
and therefore now here writefile gives us a promise.

52
00:02:20.320 --> 00:02:21.900
Hence this function will execute

53
00:02:21.900 --> 00:02:23.870
once writing to a file finished

54
00:02:23.870 --> 00:02:28.183
and therefore here I can console log wrote file.

55
00:02:29.130 --> 00:02:32.060
And now we can save the file and execute it.

56
00:02:32.060 --> 00:02:34.510
And for executing it with node,

57
00:02:34.510 --> 00:02:38.630
all we need to do is run node and then the file name.

58
00:02:38.630 --> 00:02:41.320
So the command is just node and the file name

59
00:02:41.320 --> 00:02:45.300
and then that's probably the most striking difference.

60
00:02:45.300 --> 00:02:48.970
We now don't need to specify any permissions

61
00:02:48.970 --> 00:02:52.490
we wanna assign to that execution process.

62
00:02:52.490 --> 00:02:55.400
Instead by default as I mentioned before,

63
00:02:55.400 --> 00:02:57.070
node scripts,

64
00:02:57.070 --> 00:03:00.320
scripts executed with node by default,

65
00:03:00.320 --> 00:03:02.970
have full read and write access.

66
00:03:02.970 --> 00:03:04.800
They can do anything.

67
00:03:04.800 --> 00:03:07.230
And that of course can be an issue

68
00:03:07.230 --> 00:03:09.020
because if you're running a script

69
00:03:09.020 --> 00:03:11.440
from a source which you don't know,

70
00:03:11.440 --> 00:03:14.250
you have to trust that script

71
00:03:14.250 --> 00:03:17.380
or analyze all the underlying source code

72
00:03:17.380 --> 00:03:21.070
to make sure it's not doing anything harmful

73
00:03:21.070 --> 00:03:23.470
with denon that's not the case.

74
00:03:23.470 --> 00:03:25.700
There if you execute a script,

75
00:03:25.700 --> 00:03:29.160
you can rely on it only being able to do the things

76
00:03:29.160 --> 00:03:30.523
you do allow it to do.

77
00:03:31.940 --> 00:03:33.370
Of course if you're executing

78
00:03:33.370 --> 00:03:35.640
some third party script with deno,

79
00:03:35.640 --> 00:03:37.960
you still might have to scenario that

80
00:03:37.960 --> 00:03:42.290
this script needs write permissions to do what it does

81
00:03:42.290 --> 00:03:45.060
and well you then again have to trust it

82
00:03:45.060 --> 00:03:48.020
that it won't abuse those permissions.

83
00:03:48.020 --> 00:03:50.380
Anyways, if we now execute this file,

84
00:03:50.380 --> 00:03:53.400
you see it does finished successfully

85
00:03:53.400 --> 00:03:57.450
and it writes our message to the node message text file.

86
00:03:57.450 --> 00:04:00.870
So this is now the node equivalent of this code,

87
00:04:00.870 --> 00:04:04.500
using some modern node feature here,

88
00:04:04.500 --> 00:04:06.980
but otherwise achieving the same result.

89
00:04:06.980 --> 00:04:10.170
So the key difference here really is just typeScript,

90
00:04:10.170 --> 00:04:11.870
which has built into deno,

91
00:04:11.870 --> 00:04:14.453
and of course that permissions thing.

