WEBVTT

00:02.450 --> 00:05.110
So time to add a new route in the feed.js

00:05.120 --> 00:08.890
file in the routes folder. There

00:08.930 --> 00:13.880
I will add a new get route and that will be a route for a single post.

00:14.120 --> 00:22.780
So the route is get/post and then we need a dynamic parameter, /postID for example because

00:22.930 --> 00:25.130
we'll encode the ID of the post

00:25.130 --> 00:27.870
we want to fetch in the url.

00:28.460 --> 00:30.840
So this is my path,

00:30.860 --> 00:33.210
now we need a fitting controller action,

00:33.410 --> 00:44.360
so let's go to the feed controller and in there, I'll export by get post controller action with request

00:44.360 --> 00:45.200
response

00:45.200 --> 00:45.730
next

00:48.740 --> 00:54.580
and here first of all, let's extract the post ID from the incoming request params.

00:54.580 --> 01:05.880
So there I can get my post ID, post ID here, this property I'm trying to access has to match exactly the

01:05.880 --> 01:13.960
name I assign in my route, so post ID here after the colon. So now I'm extracting, whoops, I'm extracting

01:13.960 --> 01:15.160
that post ID here,

01:15.160 --> 01:18.940
now we have to find a post with that ID in the database.

01:18.940 --> 01:27.360
So let's use our post model and use the find by id method to find a post with this post ID.

01:27.600 --> 01:35.800
We then have a then block or a catch block depending on whether this fails or not. In the catch block,

01:36.010 --> 01:39.930
I'll use that same logic as I used for creating a post,

01:40.210 --> 01:43.330
I check if we have an error status code,

01:43.330 --> 01:46.350
if not I add it and otherwise I just

01:46.350 --> 01:47.590
next my error

01:47.620 --> 01:51.910
and yes you could refactor into a single function which you then always use.

01:52.270 --> 01:56.660
So here I have this error handling code, in the then block here,

01:56.890 --> 02:04.540
I will get my post and first of all I'll check if this is undefined, so if this is not a true-ish value.

02:05.110 --> 02:12.220
If it is, I know that no post was found and then I'll actually throw a new error, so I'll create a new error

02:12.280 --> 02:16.260
object, could not find

02:16.270 --> 02:25.060
post, I'll set the status code to 404 because that is a not found error

02:25.060 --> 02:27.190
and now I'll throw the error.

02:27.250 --> 02:32.530
This can be confusing because I'm inside of then and you learned that you should use next in there

02:32.770 --> 02:38.120
but if you throw an error inside of a then block, the next catch block will be reached

02:38.170 --> 02:41.860
and that error will be passed as an error to the catch block.

02:41.920 --> 02:47.800
So all I do with throwing is I end up in this function and there I do indeed

02:47.800 --> 02:49.150
next the error,

02:49.210 --> 02:51.130
so I just always use that function,

02:51.130 --> 02:52.700
that's all I'm doing,

02:52.900 --> 02:56.510
I still throw an error if I can't find the post.

02:56.530 --> 03:04.240
If I do find it, I will return a response with a status code of 200 which shows that it was a success

03:04.840 --> 03:09.170
or I do return some json data with some message,

03:09.280 --> 03:15.730
you don't have to set the message by the way, this is purely optional of course, where I say post fetched

03:15.730 --> 03:21.000
and of course my post like this, so I'm returning the post I'm fetching here

03:22.070 --> 03:24.920
as a property post in that object.

03:25.400 --> 03:28.990
So now we have that controller action in place,

03:29.000 --> 03:33.550
now if I go back to my routes I can assign that controller to that route here,

03:33.800 --> 03:42.920
so feed controller get post is the action I want to use and this will not work however because in my

03:42.920 --> 03:51.770
frontend, I fetch the wrong post, so I fetch some dummy data because in my feed controller get post,

03:52.040 --> 03:53.380
I'm not using the database,

03:53.480 --> 03:55.930
I'm instead just returning dummy data.

03:56.030 --> 04:01.550
Now since we are using a database now, since we have added a database, we should of course fetch data

04:01.580 --> 04:03.470
from there as well.

04:03.530 --> 04:16.700
So for that, let me use post find to find all posts and then I have an error or a success case, if I have

04:16.700 --> 04:22.490
an error, I'll use that same logic I use down there to add a status code if it does not exist and then

04:22.610 --> 04:24.050
next the error,

04:24.530 --> 04:36.280
if I succeed I get some posts here however. And now I want to return these posts, so I will send a response

04:36.280 --> 04:43.670
with a status code of 200 where I send some json data and that json data will be an object where

04:43.670 --> 04:49.970
again I will add a message which you don't have to, fetched posts successfully

04:50.090 --> 04:57.470
and most importantly I'll add my posts of course and the posts I add here are the posts I fetched with

04:57.740 --> 04:58.580
posts find,

04:58.700 --> 04:59.750
so these posts.

05:02.570 --> 05:08.380
Now we can get rid of that response down there with our dummy response, re-format this

05:08.450 --> 05:13.990
and now we have this logic in place to fetch the actual posts we have in the database.

05:14.080 --> 05:15.660
If we now save that and

05:15.660 --> 05:21.610
we go back to the frontend and reload, it should load that post.

05:21.640 --> 05:23.240
Does that work?

05:23.320 --> 05:28.780
Now of course we will now want to be able to click on view and see that single post for which we already

05:28.780 --> 05:30.340
added the route.

05:30.340 --> 05:32.490
We just need to adjust our frontend code,

05:32.530 --> 05:39.400
so the react code to load that single post and you do that in the source pages feed single post

05:39.400 --> 05:43.720
folder in the singlepost.js file, in there

05:43.810 --> 05:49.930
you have componentDidMount which executes when this page loads essentially where we extract the post

05:49.930 --> 05:57.880
ID from the url in the frontend and now we just need to target the right url here which is of course

05:57.910 --> 06:00.580
http localhost 8080

06:01.420 --> 06:02.740
/feed

06:02.830 --> 06:07.940
/post/ and then that post ID.

06:07.980 --> 06:11.470
With that we have a get request that should get us our post.

06:11.510 --> 06:17.670
If you now save that and you click on view, you should load your post here,

06:17.700 --> 06:20.060
however the image is not displayed.

06:20.070 --> 06:24.810
The reason for that is that we're looking for the wrong url or that we're not using the image

06:24.810 --> 06:26.690
at all to be precise.

06:27.000 --> 06:31.800
In the frontend, in the same componentDidMount function you just worked in,

06:31.860 --> 06:40.110
in this set state block here, you should add an image key and it has to be named image because that is

06:40.110 --> 06:44.840
a key I'm looking for in that frontend application in the other code which I prepared

06:45.300 --> 06:55.440
and there you want to also define that url to your server, so localhost8080/ and then use res

06:55.620 --> 06:57.240
data.

06:57.410 --> 06:58.290
post,

06:58.290 --> 07:08.670
accessing the response data, there the post property which we do use to store our post in, in get post we

07:08.670 --> 07:12.400
have that post property here which holds our post.

07:12.660 --> 07:17.760
So this is what I am accessing now in the frontend and there, image

07:17.820 --> 07:21.100
url, that is the key name, how it is stored in the database,

07:21.150 --> 07:27.540
add a comma thereafter and save that. And now this page should automatically reload and you should see

07:27.540 --> 07:29.240
that duck. Of course

07:29.310 --> 07:30.500
we didn't upload that,

07:30.630 --> 07:33.600
I prepared it but at least you see it.

07:33.600 --> 07:37.300
Now you can go back to the feed and see your posts here,

07:37.560 --> 07:40.580
we'll get off that error message later too by the way.

07:40.590 --> 07:43.500
So with that, we got this in place,

07:43.530 --> 07:46.020
let's now work on image upload next.
