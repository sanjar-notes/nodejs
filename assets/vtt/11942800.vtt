WEBVTT

00:02.090 --> 00:07.300
So we worked on the product model to make the save method more flexible

00:07.580 --> 00:14.270
and now in the admin.js controller in post edit product, there we already have code where we find

00:14.270 --> 00:19.760
a product by id and this will work because find by ID is a method I created in my model,

00:19.760 --> 00:27.390
so here we have the product or maybe we should name it product data because here, I will now create a

00:27.390 --> 00:35.040
new product constant by using my product constructor, so my own product class and there, I will pass

00:35.040 --> 00:47.770
my updated title, my updated price, my updated image url and my updated description and my ID.

00:47.940 --> 00:51.660
Now actually, we don't even need find by ID then anymore,

00:51.660 --> 00:59.510
we can just get rid of that and for now also of that and simply create a new product with all the updated

00:59.510 --> 01:06.050
information and we now also need to pass the product ID, there you just need to make sure that you create

01:06.050 --> 01:08.680
a new mongodb objectid object.

01:08.750 --> 01:17.670
So make sure that at the top of the file, you do actually require mongodb and now you can of course

01:17.670 --> 01:24.420
also create a new constant, name it object ID or whatever you want and extract that objectid constructor

01:24.420 --> 01:27.240
out of mongodb like this

01:27.240 --> 01:33.900
and then you could just write new objectid and reference this basically, so we can now go down to post

01:33.930 --> 01:42.450
edit product and pass a new objectid here with new objectid and wrap that Prod ID you're extracting

01:42.660 --> 01:49.310
from the url here and wrap that or from the body of the request and wrap that into object ID.

01:49.380 --> 01:55.900
Now we have that new product and now we can simply call product save because we just modified the save

01:55.950 --> 01:59.140
method to support both creation and updating.

01:59.550 --> 02:02.620
So let me save all of that

02:02.820 --> 02:04.100
and let's give this a try.

02:05.570 --> 02:13.310
Let's reload that view here maybe, change the price to 19.99 and click update product,

02:13.310 --> 02:16.490
now we get a page not found,

02:16.570 --> 02:23.670
let's ignore that for now and let's instead go back to mongodb compass and click that refresh

02:23.680 --> 02:28.610
icon here. Now that doesn't look like it worked though right,

02:28.610 --> 02:32.490
the price is unchanged but I also did not get an error,

02:32.510 --> 02:33.970
so what's wrong here?

02:34.810 --> 02:40.720
Well you need to go to your admin.js routes again and uncomment this post edit product route

02:41.200 --> 02:44.260
otherwise editing products will not be possible.

02:44.260 --> 02:52.140
So now if we load that product to edit again and we change that price, now this looks much better or at least

02:52.180 --> 03:00.220
partly. If we have a look at mongodb compass, we see now it looks like I made a mistake with the

03:00.220 --> 03:06.400
assignment of values, so my description and I can simply edit this here, my description

03:06.610 --> 03:09.920
now simply was the url and the other way round,

03:10.080 --> 03:13.050
so let me change both and click update here.

03:14.000 --> 03:16.520
Now if we load this page again, it should work

03:16.520 --> 03:19.870
but the most important thing is our method worked.

03:19.880 --> 03:21.230
Now what did I mess up?

03:21.260 --> 03:26.760
If I go to the admin controller, I'm assigning price, image url and description, well that is in

03:26.760 --> 03:27.690
the wrong order,

03:27.720 --> 03:32.790
it should first be the description and then the image url but that was only a little logical mistake

03:32.790 --> 03:33.380
I made.

03:33.630 --> 03:42.650
If I edit this again back to 12.99, you see now this is working and this also works,

03:42.650 --> 03:46.390
let's see how it works if I edit two fields at the same time and

03:46.430 --> 03:47.870
this also works.

03:47.960 --> 03:54.470
So this is how we can update a product with the help of mongodb and with the help of update one.
