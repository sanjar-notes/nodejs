WEBVTT

00:02.180 --> 00:03.980
So let's sum this module up

00:03.990 --> 00:04.700
now.

00:04.860 --> 00:10.950
First of all we had a brief refresher on how the web works and in general, it looks like this, client

00:11.030 --> 00:17.100
so the browser sends a request to the server, the server does some magic, reaches out to a database, works

00:17.100 --> 00:20.210
with files, sends back a response, can be

00:20.220 --> 00:25.200
html, can be something different and sends it back to the client, the browser which then can display

00:25.210 --> 00:25.520
that

00:25.560 --> 00:29.260
and that is the entire flow we also saw in this module.

00:29.400 --> 00:32.150
Now nodejs is the part that runs on the server

00:32.490 --> 00:38.980
and regarding its lifecycle, there is one important concept and that is that so-called event loop.

00:39.540 --> 00:46.500
Nodejs code runs in a non-blocking way which means we only register a bunch of callbacks and events

00:46.530 --> 00:49.790
and nodejs will eventually trigger that code

00:49.890 --> 00:57.510
once a certain task is done, so that the javascript threat is always free to handle new events, new incoming

00:57.510 --> 01:03.360
requests and stuff like that. And node program can exit if there is no more work to do

01:03.480 --> 01:10.470
but on a server, this well should at least never happen because create server registers an event listener

01:10.470 --> 01:12.740
for an event which is never done,

01:12.750 --> 01:19.320
if a new event is triggered, so if a new request is received, this does not mean that node unregisters the event

01:19.320 --> 01:19.930
listener

01:20.040 --> 01:25.580
instead we keep on listening for more requests and that is of course how a server should behave.

01:25.860 --> 01:31.200
So it's this cycle that's important to understand and that we have this loop which always keeps on going,

01:31.200 --> 01:37.470
keeps on waiting for new events and which does something when some event happens and then basically

01:37.470 --> 01:42.990
dispatches some actions to the operating system you could say for example

01:42.990 --> 01:46.380
and then again frees up the threat.

01:46.390 --> 01:53.070
Now this also involves a lot of asynchronous code which we saw with all the callbacks. The javascript

01:53.070 --> 01:54.930
code should be non-blocking,

01:54.960 --> 02:01.920
so we have this callback and event driven approach where we are able to register some code to be executed

02:02.010 --> 02:08.640
in the future instead of running right away and blocking the main threat because this has to be avoided

02:08.730 --> 02:16.230
under all circumstances and nodejs is built around that concept of avoiding this issue.

02:16.230 --> 02:19.280
We also saw how to work with requests and responses

02:19.330 --> 02:28.430
the nodejs way. We saw that we have to parse the requests data which arrives in chunks and that we can use this

02:28.440 --> 02:34.980
concept of streams and buffers which I explained and that we should avoid sending double responses

02:35.130 --> 02:36.750
so that after res

02:36.870 --> 02:44.730
end, you must not send another response and this can happen easily if you forget about that asynchronous nature

02:44.970 --> 02:49.060
and that a line of code you write might not execute immediately.

02:49.200 --> 02:54.490
So depending on where you write it, if it's in an event listener, it will not execute immediately.

02:54.510 --> 02:55.340
That is what I mean

02:55.380 --> 03:02.340
and that is what is important to keep in mind here. We also learn that nodejs is all about using it's

03:02.610 --> 03:04.440
built in functionalities

03:04.650 --> 03:11.400
and whilst there are some global variables or objects or functions we can use, this also means that we

03:11.400 --> 03:18.740
should use its core modules. Core modules are things like the http, the fs or the path module,

03:18.810 --> 03:24.870
there are more and you can learn all about them in the official nodejs docs of course, we'll also use

03:24.870 --> 03:30.960
quite a lot of them throughout this course and these core modules give us a couple of different functionalities

03:31.290 --> 03:38.670
that allow us to basically do whatever we ever could want to do on a server like create a new server

03:38.700 --> 03:41.620
with the help of the http module. They're

03:41.640 --> 03:45.420
imported via the require syntax

03:45.630 --> 03:48.720
and we can only use them in the file into which we import them

03:48.750 --> 03:54.460
and if we want to use them in two different files, we have to import them in both files separately.

03:54.480 --> 04:00.460
Now that leads us to the node module system and this basically works with the help of this require

04:00.510 --> 04:05.260
keyword which pulls some functionality from one of our files

04:05.280 --> 04:13.200
if we start with slash or ./ or from a core or third party module, we haven't used any third party

04:13.200 --> 04:14.470
modules thus far

04:14.480 --> 04:16.230
but we'll also do that soon

04:16.410 --> 04:23.040
and it basically pulls in whatever we export there and stores it in a new variable or constant as we

04:23.040 --> 04:24.810
did it in this module.

04:24.810 --> 04:27.220
And export is an important keyword here,

04:27.240 --> 04:35.560
we do export with the help of module.exports or for multiple exports with the export shortcut

04:35.580 --> 04:37.580
I showed you in the last lectures.

04:38.070 --> 04:40.440
So this is what we learn in this module

04:40.500 --> 04:45.530
and I know that this was a lot of theory or nitty gritty stuff about

04:45.540 --> 04:51.390
nodejs. Doesn't look too easy and beautiful but it'll get way more beautiful from now on,

04:51.540 --> 04:57.780
it is super important to never forget what nodejs is and does it for you though because many courses

04:57.840 --> 05:03.000
right away start with expressjs which we'll also use starting soon

05:03.120 --> 05:08.520
and therefore you never really learn what's happening under the hood which is sad because this is important

05:08.670 --> 05:11.190
and makes you a better node developer.

05:11.240 --> 05:12.760
But with that, let's move on.
