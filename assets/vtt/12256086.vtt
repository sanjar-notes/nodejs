WEBVTT

00:02.350 --> 00:09.430
Now that we learned a lot about how we prepare for deployment, let's finally deploy and for that, I will

00:09.430 --> 00:12.240
use a hosting provider called heroku,

00:12.250 --> 00:13.570
you can simply google for it,

00:13.570 --> 00:15.500
you can get started with it for free,

00:15.580 --> 00:16.790
it's a very popular one

00:16.870 --> 00:24.100
but let me also say that there are dozens, hundreds, thousands of hosting providers you could use and

00:24.100 --> 00:26.100
it's impossible to cover them all,

00:26.110 --> 00:32.140
so I will try my best to show you the general steps of deployment and to explain how it works in

00:32.140 --> 00:33.100
general.

00:33.100 --> 00:39.520
So heroku is what I will use here and I will show you how to deploy to heroku in detail,

00:39.520 --> 00:40.950
I already created an account,

00:40.960 --> 00:44.570
you can do that by simply signing up, again

00:44.590 --> 00:45.860
that is free

00:46.030 --> 00:52.120
but first of all let me explain what heroku is and how we generally work with these hosting providers

00:52.990 --> 00:55.610
because we use a hosting provider here,

00:55.650 --> 00:57.740
heroku is a hosting provider.

00:57.970 --> 01:03.700
The alternative always is that you build your own computer and you set it up such that it is connected

01:03.700 --> 01:10.210
to the Internet, that you expose the right ports and that people can send requests to your computer

01:10.420 --> 01:16.720
which might be running in your room and that is not a solution I recommend unless you really know what

01:16.720 --> 01:17.710
you are doing

01:17.710 --> 01:22.370
otherwise it's very likely to be insecure, not scalable at all,

01:22.390 --> 01:28.450
if your app is doing really well then you will quickly need a new computer, a second computer, a third

01:28.450 --> 01:34.450
computer and it only gets more complex and expensive and therefore, we typically use hosting providers

01:34.600 --> 01:44.170
like heroku but also like AWS for example. There we take our code and we deploy it onto managed spaces

01:44.320 --> 01:51.640
on their computers, also often called virtual servers and this means that these providers have very

01:52.000 --> 01:59.430
large and powerful machines in their data centers and you typically don't rent an entire machine, though

01:59.440 --> 02:00.700
you could do that

02:00.700 --> 02:02.760
but a part on that machine,

02:02.800 --> 02:10.930
so a part of the hard drive and some resources which are then provisioned for your managed space and your

02:10.930 --> 02:16.540
code runs totally separated from the other apps which might be running on the same computer on the

02:16.540 --> 02:17.620
same server,

02:17.800 --> 02:23.800
your app runs separated from them and now you of course want to connect your app running on that virtual

02:23.800 --> 02:26.640
server with your users.

02:26.650 --> 02:33.750
Now typically you don't directly connect your space on that machine to your servers, though that is also

02:33.760 --> 02:35.490
possible on some providers

02:35.620 --> 02:42.370
but instead a lot of providers manage a lot of the heavy lifting for you and they give you their own

02:42.640 --> 02:49.090
managed servers you could say in front of your server where you can conveniently add ssl encryption,

02:49.180 --> 02:55.360
compression, logging or load balancing which means that when you have multiple virtual servers because

02:55.360 --> 03:00.340
your app is doing really doing well and you need more resources, that in such a case incoming requests

03:00.430 --> 03:05.800
are sent to servers with available capacities in an efficient way.

03:06.040 --> 03:12.100
So that is all handled by so-called managed servers which are typically invisible to you which you don't

03:12.100 --> 03:18.130
configure but which are part of the hosting provider package you could say and you just use a nice user

03:18.130 --> 03:23.590
interface provided by the hosting provider to set up how your app behaves

03:23.590 --> 03:27.140
regarding ssl or regarding logging and so on.

03:27.220 --> 03:34.030
Now this all runs in a private network which means that your own virtual server and your code is not directly

03:34.030 --> 03:40.310
exposed to the web but it's exposed to that managed server which then in turn talks to the web and therefore

03:40.300 --> 03:44.050
to your users through a public server gateway

03:44.320 --> 03:50.770
and that essentially is like a door where requests can come in there and then forwarded to your server,

03:50.770 --> 03:52.140
to your virtual server

03:52.150 --> 03:53.970
and the responses are also forwarded.

03:54.960 --> 03:57.790
So this is how this works,

03:57.840 --> 03:59.820
this is how most hosting providers work,

03:59.820 --> 04:01.700
that is what happens behind the scenes,

04:01.770 --> 04:03.480
just important for you to know,

04:03.600 --> 04:06.200
not really a lot of stuff you have to do on that.

04:06.330 --> 04:08.480
Now that is the behind the scenes stuff,

04:08.640 --> 04:12.600
now let me show you how heroku works and how we can deploy with it

04:12.600 --> 04:14.510
and of course that's just one example,

04:14.550 --> 04:19.270
you can use any hosting provider you want for your application.

04:19.290 --> 04:22.770
The general way of deploying your code does not really change.
