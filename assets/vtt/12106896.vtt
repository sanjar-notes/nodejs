WEBVTT

00:02.450 --> 00:05.340
Well speaking of that, let's now use that model.

00:05.420 --> 00:06.850
We're exporting it here,

00:06.950 --> 00:09.530
let's now use it in the feed controller.

00:09.530 --> 00:12.430
There we first of all need to import it,

00:12.530 --> 00:20.060
so here I'll import post by requiring it from my models folder from the post file

00:20.430 --> 00:27.820
and now we can use that post model in create post after we validated the input here.

00:28.580 --> 00:33.810
There I will create a new post with my post model as a constructor,

00:33.870 --> 00:40.890
we pass a javascript object and there we define basically what we do down there, so we can cut that and

00:40.950 --> 00:42.210
move it up here,

00:42.480 --> 00:46.730
I don't need to set createdAt because mongoose will do that for me

00:46.740 --> 00:49.960
thanks to that timestamps option we set here

00:50.310 --> 00:55.440
and of course I don't need to set _id because mongoose will create that for me as well.

00:55.440 --> 00:59.750
Title and content should be passed and the creator as well for the moment.

00:59.790 --> 01:05.780
So now you'll learn that we can just call save on the model to save it to the database

01:05.910 --> 01:12.830
and this will give us a promise or a promise-like object where we can catch any errors

01:13.020 --> 01:15.840
and here I will log the error for now,

01:15.870 --> 01:24.910
we'll later add real error handling of course and I get a result which I also want to log here

01:26.360 --> 01:35.820
and I will also send my response, whoops, in here, in the then block I'll send a response, 201 is the

01:35.820 --> 01:37.070
status code,

01:37.260 --> 01:41.440
the post object here however will be the result object

01:41.610 --> 01:45.030
I get back here because that should be my created post.

01:45.030 --> 01:51.120
If we now save that server side code and we go back to our frontend application, we should need to change

01:51.120 --> 01:52.740
anything in our react code

01:53.010 --> 01:55.720
instead we can just try this,

01:56.040 --> 01:58.140
does this work?

01:58.470 --> 02:01.010
Let's choose an image, upload

02:01.200 --> 02:05.860
still does not work, we'll do this later, checking it

02:06.010 --> 02:07.540
and this seems to fail.

02:09.260 --> 02:13.860
If we go back, I see path image url is required

02:13.900 --> 02:21.670
which makes sense because in my model, I set image url as a required property,

02:21.760 --> 02:27.480
so in my feed controller when I create a new post, I should also add an image url here

02:28.680 --> 02:34.040
and for now that can point to images duck.jpg, we'll later add file upload

02:34.050 --> 02:39.690
as I mentioned. So my mistake, we should add this on the server side, make sure we store an image url

02:39.690 --> 02:42.490
so that we meet the requirements of our model

02:43.660 --> 02:46.280
and now let's try this again.

02:46.750 --> 02:48.480
Does that work?

02:50.860 --> 02:55.880
Take the duck, enter some content, click accept, this looks good

02:55.880 --> 02:57.610
post created successfully

02:57.650 --> 02:59.270
and there we see indeed

02:59.390 --> 03:04.750
this is the data or the post which was stored with the creator, the content, this automatically generated

03:04.760 --> 03:11.590
createdAt and updatedAt timestamp thanks to the timestamps option and the automatically generated ID.

03:11.780 --> 03:12.770
So that is working

03:12.790 --> 03:15.120
and on the server side, I'll also get no error,

03:15.140 --> 03:18.080
I only see that created object being printed

03:18.110 --> 03:19.880
thanks to that console log.

03:20.180 --> 03:21.720
So that is working fine and

03:21.950 --> 03:28.790
now as a next step we can work on serving that image and on accepting image uploads and on handling

03:28.790 --> 03:29.700
that error.
