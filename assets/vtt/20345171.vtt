WEBVTT

1
00:00:02.290 --> 00:00:04.530
<v Instructor>So what's that CORS thing,</v>

2
00:00:04.530 --> 00:00:06.610
and that course problem,?

3
00:00:06.610 --> 00:00:09.810
As I mentioned, I did already cover a CORS earlier

4
00:00:09.810 --> 00:00:12.470
in the course in their rest API section.

5
00:00:12.470 --> 00:00:16.180
So there you'll all define that same information.

6
00:00:16.180 --> 00:00:21.180
In the end CORS, short for cross original resource sharing

7
00:00:21.590 --> 00:00:24.890
is a security mechanism and forced by the browser

8
00:00:24.890 --> 00:00:29.450
that makes sure that server A can't just send

9
00:00:29.450 --> 00:00:32.810
a request to server B and get data from it.

10
00:00:32.810 --> 00:00:35.670
Server B instead needs to allow that.

11
00:00:35.670 --> 00:00:37.420
So if you have a front end application,

12
00:00:37.420 --> 00:00:39.640
running on server A, let's say

13
00:00:39.640 --> 00:00:42.210
our react single page application running

14
00:00:42.210 --> 00:00:46.780
on local host 3000, and we have our other application,

15
00:00:46.780 --> 00:00:48.500
our backend, let's say,

16
00:00:48.500 --> 00:00:52.240
running on server B in this case, our Rest API,

17
00:00:52.240 --> 00:00:54.730
then the communication from A to B

18
00:00:54.730 --> 00:00:57.630
will not be possible just like that.

19
00:00:57.630 --> 00:01:00.660
By default browsers prevent GET, POST, PATCH

20
00:01:00.660 --> 00:01:03.180
and so on requests, if frontend

21
00:01:03.180 --> 00:01:05.750
and backend server are not the same one.

22
00:01:05.750 --> 00:01:09.760
And here on local host, even different ports,

23
00:01:09.760 --> 00:01:11.520
imply different servers.

24
00:01:11.520 --> 00:01:16.520
So local host 3000 is not the same as local host 8,000.

25
00:01:16.570 --> 00:01:19.170
Now this is a default security mechanism

26
00:01:19.170 --> 00:01:21.860
however, we can tell the browser

27
00:01:21.860 --> 00:01:24.310
that we do want to allow access,

28
00:01:24.310 --> 00:01:28.910
and we have to set this setting on the server

29
00:01:28.910 --> 00:01:30.950
where we do host the data.

30
00:01:30.950 --> 00:01:33.230
So on the backend, on the Rest API

31
00:01:33.230 --> 00:01:37.010
there, we can set specific response headers,

32
00:01:37.010 --> 00:01:40.860
to responses we sent back to the front end application

33
00:01:40.860 --> 00:01:44.250
that tell the browser that serves the front end application

34
00:01:44.250 --> 00:01:46.590
that getting that data is okay,

35
00:01:46.590 --> 00:01:49.590
and the front then should be able to proceed.

36
00:01:49.590 --> 00:01:52.290
And it's really important to also keep in mind

37
00:01:52.290 --> 00:01:55.080
that this is just a browser security mechanism,

38
00:01:55.080 --> 00:01:57.870
which is why we had no problems fetching

39
00:01:57.870 --> 00:01:59.950
and storing data with Postman.

40
00:01:59.950 --> 00:02:03.980
This simply doesn't care about this CORS thing.

41
00:02:03.980 --> 00:02:05.240
The browser does, however,

42
00:02:05.240 --> 00:02:07.800
and that's where we're getting a CORS error here.

43
00:02:07.800 --> 00:02:10.910
Now, how can we manipulate our Deno code

44
00:02:10.910 --> 00:02:15.730
to make sure that such requests are possible.

45
00:02:15.730 --> 00:02:18.060
Well, we need to switch to our Deno code

46
00:02:18.060 --> 00:02:20.250
and for that, I'm going to make sure

47
00:02:20.250 --> 00:02:23.340
that my Deno extension is turned on again,

48
00:02:23.340 --> 00:02:28.180
to ensure that I get proper IDE support

49
00:02:28.180 --> 00:02:32.060
and now here, on the backend and the backend code,

50
00:02:32.060 --> 00:02:35.510
I wanna add a new middleware, which essentially makes sure

51
00:02:35.510 --> 00:02:37.510
that every outgoing response

52
00:02:37.510 --> 00:02:41.130
has the proper headers attached.

53
00:02:41.130 --> 00:02:43.440
So for that here, we have our middleware function

54
00:02:43.440 --> 00:02:47.750
with context and next, and with the context object,

55
00:02:47.750 --> 00:02:50.220
we can get access to the response object

56
00:02:50.220 --> 00:02:53.500
and there we can get access to our headers.

57
00:02:53.500 --> 00:02:56.390
And on this headers optic, there is a set method

58
00:02:56.390 --> 00:03:00.350
to set a new header on that outgoing response.

59
00:03:00.350 --> 00:03:03.430
And now there are three essential headers

60
00:03:03.430 --> 00:03:06.930
which we should set on the outgoing responses.

61
00:03:06.930 --> 00:03:11.930
The first header is the Access-Control-Allow-Origin header.

62
00:03:14.860 --> 00:03:16.940
This controls of whichever domains

63
00:03:16.940 --> 00:03:19.720
will be allowed to access our resources.

64
00:03:19.720 --> 00:03:22.140
And here we can set this to star,

65
00:03:22.140 --> 00:03:26.090
which means every domain is allowed to access our resources.

66
00:03:26.090 --> 00:03:28.800
So every other domain may send the request.

67
00:03:28.800 --> 00:03:30.920
Of course, we could also restrict this

68
00:03:30.920 --> 00:03:32.103
to the domains we own.

69
00:03:33.970 --> 00:03:36.280
The other important header, which we need to add,

70
00:03:36.280 --> 00:03:40.380
the second important header, which we set in the same way

71
00:03:40.380 --> 00:03:45.380
is the Access-Control-Allow-Methods header.

72
00:03:45.500 --> 00:03:48.940
This controls, which kind of HTTP methods

73
00:03:48.940 --> 00:03:53.170
can be used for requests being sent to this backend

74
00:03:53.170 --> 00:03:58.170
and here for this API, I want to allow get, post, put,

75
00:04:00.150 --> 00:04:02.210
and then also delete requests,

76
00:04:02.210 --> 00:04:05.510
because these are the four routes we registered.

77
00:04:05.510 --> 00:04:09.740
So here we can add, get, post, put and delete

78
00:04:09.740 --> 00:04:12.933
comma separated to allow for those requests.

79
00:04:14.040 --> 00:04:18.410
Now, the last header which we need to add with headers set

80
00:04:18.410 --> 00:04:23.410
is the Access-Control-Allow-Headers header.

81
00:04:25.350 --> 00:04:28.870
This allows which headers may be set by the frontend

82
00:04:28.870 --> 00:04:30.690
when it requests data.

83
00:04:30.690 --> 00:04:35.690
And there we should allow the content type header, why?

84
00:04:35.990 --> 00:04:39.400
Because on the front end app, so in the frontend app folder,

85
00:04:39.400 --> 00:04:41.800
under source components Todos,

86
00:04:41.800 --> 00:04:46.630
we can see that actually for put and for post requests,

87
00:04:46.630 --> 00:04:50.120
we do a set to content type two application Json,

88
00:04:50.120 --> 00:04:52.700
this is important because this header

89
00:04:52.700 --> 00:04:56.200
on the request that's being sent to our Deno server,

90
00:04:56.200 --> 00:04:59.570
will tell Deno and the Oak framework

91
00:04:59.570 --> 00:05:02.570
that the data attached to this request

92
00:05:02.570 --> 00:05:05.980
will be in the Json format and that matters

93
00:05:05.980 --> 00:05:08.570
because this allows Oak on the backend

94
00:05:08.570 --> 00:05:10.510
to automatically parse that

95
00:05:10.510 --> 00:05:13.520
when we try to get access to the request body.

96
00:05:13.520 --> 00:05:16.020
So to get to this parsing and to make sure

97
00:05:16.020 --> 00:05:19.430
that the incoming request data is transformed from Json

98
00:05:19.430 --> 00:05:22.307
to JavaScript object for that to happen,

99
00:05:22.307 --> 00:05:25.590
we need to add the content type application Json header

100
00:05:25.590 --> 00:05:28.540
on the request sent from the frontend,

101
00:05:28.540 --> 00:05:31.610
and that end turns there for something we need to allow

102
00:05:31.610 --> 00:05:34.100
with the appropriate CORS header here.

103
00:05:34.100 --> 00:05:37.290
And with all of that, we of course need to make sure

104
00:05:37.290 --> 00:05:40.460
that they're after the next middleware in line is reached.

105
00:05:40.460 --> 00:05:44.060
And we do this by calling next, but again, important

106
00:05:44.060 --> 00:05:46.730
I mentioned it in the last course section

107
00:05:46.730 --> 00:05:50.190
in the Oak framework, you should await next

108
00:05:50.190 --> 00:05:52.690
and there for add async here.

109
00:05:52.690 --> 00:05:56.200
If the next middleware in line is a synchronous

110
00:05:56.200 --> 00:05:59.510
and our route middlewares will be asynchronous

111
00:05:59.510 --> 00:06:03.680
because our route middlewares do use async keyword as well

112
00:06:03.680 --> 00:06:05.620
we do have promises in there.

113
00:06:05.620 --> 00:06:08.520
So we should await for those actions to complete

114
00:06:08.520 --> 00:06:10.480
before the response is sent back,

115
00:06:10.480 --> 00:06:13.850
and we do this by awaiting next.

116
00:06:13.850 --> 00:06:17.470
With this out of the way, we can restart our backend server

117
00:06:17.470 --> 00:06:19.750
by repeating does run command.

118
00:06:19.750 --> 00:06:23.400
And if we now go back to the client site application

119
00:06:23.400 --> 00:06:25.810
and we reload local host 3000,

120
00:06:25.810 --> 00:06:27.713
you see the error here has gone.

121
00:06:28.680 --> 00:06:32.600
And if we now add Todo, learn Deno,

122
00:06:32.600 --> 00:06:34.143
this is being added here.

123
00:06:35.460 --> 00:06:37.910
If you click edit, it's loaded here for editing,

124
00:06:37.910 --> 00:06:40.550
and I can add more exclamation marks for example

125
00:06:40.550 --> 00:06:42.300
and here we go.

126
00:06:42.300 --> 00:06:45.870
I can add another Todo like also learn Node

127
00:06:45.870 --> 00:06:47.570
and that's gonna also edit.

128
00:06:47.570 --> 00:06:49.800
And of course I can also delete a Todo,

129
00:06:49.800 --> 00:06:52.890
if I reload the app that also is maintained.

130
00:06:52.890 --> 00:06:55.390
Of course, if I ever shut down the backend server,

131
00:06:55.390 --> 00:06:57.200
all the data is lost though,

132
00:06:57.200 --> 00:07:01.390
because we currently still only save our data in memory.

133
00:07:01.390 --> 00:07:05.810
In this Todos array into Todo routes file here.

134
00:07:05.810 --> 00:07:07.970
Now that's something we'll change next.

135
00:07:07.970 --> 00:07:11.200
How about adding an actual database?

136
00:07:11.200 --> 00:07:13.853
Wouldn't that be more realistic?

