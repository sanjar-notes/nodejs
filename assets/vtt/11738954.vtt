WEBVTT

00:02.490 --> 00:08.640
To use SQL or to interact with SQL from inside node, we need to install a new package and we do

00:08.640 --> 00:15.420
that with npm install of course. Npm install and let me simply bring that up to make it easier to read and

00:15.600 --> 00:21.510
npm install --save because it will be a production dependency, one which is a crucial part of our

00:21.510 --> 00:22.830
application and

00:22.870 --> 00:28.560
the name is MySQL 2, this is simply a later version of well MySQL

00:28.650 --> 00:35.310
one as you might guess and it allows us to write SQL code and execute SQL code in node and interact

00:35.310 --> 00:37.230
with a database.

00:37.230 --> 00:43.900
Now with that installed, we made one important step forward towards using MySQL.

00:44.310 --> 00:52.110
The next step is that we need to connect to our database from inside our application and for that, I

00:52.110 --> 00:57.600
will close my views here and go to the util folder we created in the past,

00:57.730 --> 01:02.790
there we have that path.js file in there which we don't really use anymore but we can also

01:02.790 --> 01:05.290
create a new file in here, the database.js

01:05.340 --> 01:09.270
file and the name is totally up to you by the way. In there,

01:09.270 --> 01:15.300
I want to set up the code that will allow us to connect to the SQL database and then also give us

01:15.300 --> 01:21.420
back a connection object so to say which allows us to run queries. For this I'll

01:21.450 --> 01:26.840
first of all import that MySQL package and store it in a MySQL constant,

01:27.030 --> 01:33.720
so require MySQL 2 is the command I need here and now there are two ways of connecting with a SQL

01:33.720 --> 01:34.810
database.

01:34.860 --> 01:41.970
One is that we set up one connection which we can then use to run queries and we should always close

01:41.970 --> 01:44.250
the connection once we're done with a query and

01:44.250 --> 01:50.630
the downside is that we need to re-execute the code to create the connection for every new query

01:50.850 --> 01:57.310
and there will be a lot of queries because we fetch data, we write data, we delete data, creating new connections

01:57.310 --> 02:02.830
all the time quickly becomes very inefficient both in our code and also regarding the connection to

02:02.830 --> 02:07.670
the database which is established and the performance this may cost.

02:08.050 --> 02:13.360
So a better way is to create a so-called connection pool and by the way, you can learn way more about

02:13.360 --> 02:14.140
this package,

02:14.140 --> 02:17.150
its options regarding how to set up connections and so on

02:17.260 --> 02:22.720
in the official docs for this tool, for this package and you find a link to those docs in the last lecture

02:22.720 --> 02:24.050
of this module.

02:24.220 --> 02:27.210
So to set up such a pool, I'll create a new constant pool,

02:27.220 --> 02:30.610
the name is up to you and I'll use that MySQL object and there

02:30.610 --> 02:37.150
I will call create pool and there you also see that create connection we could use. Now I don't want

02:37.150 --> 02:42.850
a single connection but a pool of connections which will allow us to always reach out to it whenever

02:42.850 --> 02:48.550
we have a query to run and then we get a new connection from that pool which manages multiple connections

02:48.640 --> 02:54.040
so that we can run multiple queries simultaneously because each query needs its own connection and once

02:54.040 --> 02:59.530
the query is done, the connection will be handed back into the pool and it's available again for a new query

02:59.830 --> 03:04.440
and the pool can then be finished when our application shuts down.

03:04.600 --> 03:10.180
So I will call create pool here and I need to pass in a javascript object with some information about

03:10.210 --> 03:11.830
our database engine,

03:11.830 --> 03:18.520
our database host we're connecting to. For that I'll first of all define the host, so the server IP address

03:18.520 --> 03:23.180
or name and that is localhost because it's running on our local machine here.

03:23.350 --> 03:29.140
Then I need to define the username and that by default is root that was given to us during the configuration

03:29.140 --> 03:30.850
process,

03:30.850 --> 03:37.480
I also need to define the exact database name because this gives us access to a database server but that

03:37.480 --> 03:43.150
server typically has multiple databases and here our databases are our schemas,

03:43.240 --> 03:50.870
so we'll take the node complete database here so that the value here simply is node complete. Now with

03:50.900 --> 03:56.210
that, we simply have to enter one more piece of information and that is of course our password.

03:56.210 --> 04:00.620
So here enter a password and then I used this password,

04:00.620 --> 04:04.770
you should of course use the password you assigned during installation.

04:04.790 --> 04:06.030
This will create a pool

04:06.200 --> 04:13.970
and now I can export this pool and I will export it in a special way actually, I will call promise

04:13.970 --> 04:19.910
here because this will allow us to use promises when working with these connections which of course

04:19.910 --> 04:26.300
handle asynchronous tasks, asynchronous data instead of callbacks because promises allow us to write

04:26.330 --> 04:28.330
code in a bit more structured way,

04:28.370 --> 04:31.240
we don't have many nested callbacks,

04:31.250 --> 04:37.030
instead we can use promise chains and you will see what I mean in this module of course.

04:37.070 --> 04:42.530
So now we can always import from the database.js file to get access to that pool and to the connections

04:42.530 --> 04:43.360
in there

04:43.910 --> 04:50.240
and I can show this as an example by simply going to app.js which will of course run when our

04:50.240 --> 04:58.760
application starts up and there let's simply import database, maybe store it in a constant named db by

04:58.760 --> 05:04.330
requiring util database, like this,

05:04.730 --> 05:07.440
so reaching out to that new database file we just created.

05:07.510 --> 05:11.150
This will then be the pool basically or

05:11.560 --> 05:14.770
well the pool which allows us to use a connection in it

05:15.250 --> 05:21.250
and if I now use this let's say here, I can run db

05:21.390 --> 05:27.990
and now we got a couple of methods, one of them is execute which allows us to execute queries,

05:28.010 --> 05:30.630
we also got query but execute is a bit safer

05:30.920 --> 05:32.510
so we'll use that.

05:32.720 --> 05:37.910
We can also end it and we want to end it whenever our application is to shut down

05:38.360 --> 05:41.030
but we don't shut our application down

05:41.030 --> 05:42.060
in this case here

05:42.140 --> 05:43.990
so no need to call end here,

05:44.060 --> 05:51.530
instead we just want to connect or execute a command. And we can execute a command here by writing SQL

05:51.590 --> 05:53.810
syntax as a string.

05:53.810 --> 05:59.820
Now of course that means you need to know SQL and I will teach you a very basic SQL here in this

05:59.820 --> 06:07.340
course. If you plan on using MySQL together with your node app, you definitely have to take a SQL

06:07.340 --> 06:13.490
course which dive into all the depths of the SQL language because that is far beyond the scope of

06:13.490 --> 06:18.560
this course which is of course a node course and not a SQL course but what we could do here is

06:18.920 --> 06:23.850
we could select everything from products

06:23.970 --> 06:26.420
and of course we have no products table yet,

06:26.490 --> 06:32.710
so let's quickly go back to our workbench and here on tables, right click and click create table

06:33.090 --> 06:35.160
and this gives you now the table editor.

06:35.370 --> 06:40.040
The name should now be products and in there, you can add new fields,

06:40.050 --> 06:42.960
remeber that schema thing, you add fields.

06:42.960 --> 06:47.640
So let's work on this and finish this and execute our first little code in the next lecture.
