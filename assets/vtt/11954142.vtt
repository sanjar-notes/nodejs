WEBVTT

00:02.080 --> 00:04.510
So we got a data definition defined,

00:04.570 --> 00:05.950
we got a blueprint,

00:06.070 --> 00:13.920
we got a schema for our product. Mongoose now also works with so-called models and the model is also

00:13.940 --> 00:15.200
what we'll export here,

00:15.220 --> 00:17.520
so I can already say model exports

00:17.620 --> 00:22.060
and now what I want to export is mongoose model.

00:22.060 --> 00:28.750
Now model is a function I call and a model basically is important for mongoose behind the scenes to connect

00:28.900 --> 00:32.770
a schema, a blueprint with a name basically,

00:32.920 --> 00:38.290
so here you give that model a name and that name here would be product. Typically you name it here like

00:38.290 --> 00:43.660
this with a capital starting character and then simply just well the name of the entity this reflects

00:43.720 --> 00:46.510
in your project or in your application.

00:46.510 --> 00:51.910
The second argument then is the schema so in my case that product schema we defined and this model is what

00:51.910 --> 00:57.280
I export because this model is what we'll work with in our code.

00:57.280 --> 01:05.470
So with that model defined here, we can now move over to the admin controller where we have post add product

01:05.500 --> 01:10.630
where we do save a new product and there indeed I want to create a new product

01:10.630 --> 01:14.000
and then I want to be able to save that. Now

01:14.090 --> 01:18.390
for that, we can basically keep the code we have here.

01:18.640 --> 01:25.720
We still import product from our models folder from the product file because I do export a model here

01:26.020 --> 01:33.510
and we can basically use that just in the way I used it here. One adjustment is required though, to the

01:33.510 --> 01:34.970
product constructor

01:35.040 --> 01:38.220
we don't pass multiple arguments like this,

01:38.220 --> 01:45.030
instead we pass one argument only and that one argument is a javascript object where we map the different

01:45.030 --> 01:47.240
values we defined in our schema.

01:47.250 --> 01:53.710
So here I would map the title to the title and you basically now have to go through all the fields you

01:53.710 --> 01:55.030
defined in the schema, the

01:55.030 --> 01:58.690
order does not matter though since it's in a javascript object,

01:58.690 --> 02:07.900
so you then map let's say price to price, you map description to description and you map the image url

02:07.900 --> 02:14.500
to image url and just in case you're wondering, the part on the right side of the colon,

02:14.520 --> 02:21.970
so title, price, description, image url refers to the data you receive in your controller action and

02:21.970 --> 02:27.170
the part on the left side of the colon refers to the keys you defined in your schema,

02:27.190 --> 02:34.760
so to these things. And now with this, this creates a new product based on our model and therefore a

02:34.760 --> 02:41.300
product managed by mongoose you could say and indeed such a product happens to have or such a model happens

02:41.300 --> 02:44.740
to have a save method now provided by mongoose,

02:44.810 --> 02:45.900
that's really important,

02:45.920 --> 02:49.100
this is not defined by us. In the product model,

02:49.160 --> 02:53.080
we define no save method, we did before but this is commented out.

02:53.210 --> 02:58.860
So we're not defining a save method, this save method here is coming from mongoose

02:59.240 --> 03:01.510
and then we can indeed call then on that,

03:01.610 --> 03:06.040
technically we don't get a promise but mongoose still gives us a then method,

03:06.140 --> 03:14.680
it also still gives us a catch method we can call and therefore this code should actually continue to

03:14.680 --> 03:15.630
work.

03:15.640 --> 03:17.340
Let's see if that is the case

03:17.380 --> 03:25.630
and let's head over to our application and click on add product. Now I do get an error from app.js

03:25.630 --> 03:29.400
because there I of course still use my user model,

03:29.440 --> 03:34.570
let me comment that out and let me comment it out here, let me comment out that entire middleware, for

03:34.570 --> 03:38.320
now we have no user and otherwise all requests will break for now so

03:38.350 --> 03:45.160
let's remove all that user related stuff in the app.js file, this middleware and the user model import and with

03:45.160 --> 03:48.930
that removed, let's try reloading that add product page

03:49.130 --> 03:51.820
and obviously we need to import the route again,

03:51.830 --> 03:55.300
so we should do that. Not only the get route but also the post route,

03:55.310 --> 04:02.880
so make sure you re-add both admin add product routes, this was the wrong one, this one is required.

04:04.640 --> 04:12.070
So make sure you have the get and the post and the product route added again because we manipulated these two admin controller

04:12.070 --> 04:14.110
actions and now with that,

04:14.150 --> 04:17.280
finally if I click on add product, this works

04:17.700 --> 04:24.570
and now let's test this, let's test a test product with some price, some image,

04:24.860 --> 04:26.780
does this work?

04:26.780 --> 04:28.280
Click add product,

04:28.280 --> 04:33.960
we get a page not found because we can't load any other pages, that is ok. In the code,

04:34.010 --> 04:35.190
I can't see an error

04:35.210 --> 04:37.660
but I got created product which looks good.

04:38.020 --> 04:40.100
And in compass let's refresh

04:40.100 --> 04:44.630
by clicking that icon on the top left and I connected to the wrong url,

04:44.630 --> 04:45.840
I'll fix that,

04:45.920 --> 04:49.280
therefore I'm connected to the test database instead of the shop database

04:49.280 --> 04:50.860
but theoretically it worked,

04:50.870 --> 04:56.360
theoretically we get a products collection with the product added. Now where is the products collection

04:56.360 --> 05:01.040
coming from you might be wondering by the way because we never defined that name? Well

05:01.070 --> 05:08.210
mongoose takes your model name, so product, turns it to all lowercase and takes the plural form of that

05:08.360 --> 05:10.520
and that will then be used as a collection name,

05:10.520 --> 05:17.420
so this is why our product here has a great impact because it was used for naming this collection

05:17.510 --> 05:19.350
and here we see the data we entered.

05:19.460 --> 05:20.260
So this is working,

05:20.270 --> 05:21.290
that's all great,

05:21.320 --> 05:28.440
I will still drop this collection here and quickly fix my connection settings in app.js

05:28.440 --> 05:31.260
at the bottom of the file. Here

05:31.310 --> 05:33.380
I do connect to the test database,

05:33.410 --> 05:34.810
I don't want to do that,

05:34.970 --> 05:37.510
I'll connect to the shop database instead

05:37.550 --> 05:40.960
just as we did it before. And with this tiny change,

05:41.090 --> 05:47.180
if I now go back to my application and I try adding this again, a book,

05:47.270 --> 05:50.030
now let's use that book url I used before,

05:52.630 --> 05:55.360
must read and click add product,

05:55.360 --> 06:01.210
now this still works in the same way it did before but now if I refresh here, my data is saved in the shop

06:01.290 --> 06:03.560
database and there in the products collection.

06:03.790 --> 06:05.380
So this is looking really good,

06:05.380 --> 06:08.170
we're now able to save data through mongoose.
