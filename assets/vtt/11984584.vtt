WEBVTT

00:01.980 --> 00:05.390
We added a page that allows us to enter a new password.

00:05.400 --> 00:08.280
The new password view here and there.

00:08.280 --> 00:11.450
We will send a post request to slash new password.

00:11.460 --> 00:17.730
Now we need to add that root and controller action as a next step so that the existing user password

00:17.730 --> 00:19.680
can be replaced with the new one.

00:19.920 --> 00:21.870
So back to the off controller.

00:22.590 --> 00:28.380
Let's add a new controller action the post new password action.

00:28.710 --> 00:32.160
And you guessed it, which arguments we have in that function here.

00:33.040 --> 00:35.710
And then in here, what do we need to do?

00:36.070 --> 00:44.290
Well, we need to extract the new password from request body password, and that is request body password.

00:44.290 --> 00:49.510
Because in the new password view, I'm storing the password in a field named password.

00:50.560 --> 00:53.440
And we'll need to extract that user ID here too.

00:53.440 --> 01:00.760
So that user ID is also something user ID is equal to request body user ID.

01:00.760 --> 01:02.470
We need that as well.

01:02.980 --> 01:09.400
I also still want to have that token because otherwise people could start entering random tokens here

01:09.400 --> 01:15.550
and still reach that page and then maybe change users on the back end by entering random user IDs in

01:15.550 --> 01:17.170
that hidden input field as well.

01:17.470 --> 01:22.270
So I want to have that token and therefore a new password.

01:22.660 --> 01:30.790
I'll also add another hidden input field password token and output password token here.

01:30.880 --> 01:35.260
So that is another field and I need to pass that token into my view.

01:35.260 --> 01:36.040
So that is something.

01:36.040 --> 01:39.400
Forget new password for this action here.

01:39.400 --> 01:47.560
I need to pass password token as a variable into the view and it will hold the token I'm extracting

01:47.560 --> 01:51.220
from the URL here and that is the token we originally generated.

01:51.220 --> 01:58.180
So this is not all the past and this is not also something I can extract here the password token.

01:59.820 --> 02:06.570
Request body password token extracted from that password token field here.

02:07.970 --> 02:08.240
Okay.

02:08.240 --> 02:11.480
So now we got these three pieces of information in here.

02:11.990 --> 02:14.030
Now I want to reset my user.

02:14.030 --> 02:21.260
So I will again find one user in my database and I'll find the user where the reset token is equal to

02:21.260 --> 02:29.420
the password token, where the reset token expiration is again greater than.

02:30.370 --> 02:31.610
Date now.

02:31.630 --> 02:37.570
So the same logic as I did up here and where the ID.

02:38.710 --> 02:41.470
Is equal to my user ID.

02:41.950 --> 02:44.620
I'll then again add then and catch.

02:45.490 --> 02:54.990
Log any errors we might be facing here, and then I'll have my user debt fulfills all these criterias.

02:55.660 --> 02:56.920
And then here.

02:57.690 --> 03:01.360
I want to assign a new password to the user.

03:01.380 --> 03:05.290
Now, obviously for that I'll again hash it because that doesn't change.

03:05.310 --> 03:06.900
It still should be hashed.

03:07.140 --> 03:09.630
So I'll again use decrypt.

03:11.000 --> 03:17.060
Hash pass in the new password and my number of salting rounds.

03:17.060 --> 03:17.900
12.

03:18.810 --> 03:25.950
And I will return this year and then add another, then block the hashed password.

03:27.580 --> 03:30.190
Where I can stored it on the extracted user.

03:30.190 --> 03:36.730
However, the user is an argument in this function, but I need it here to be able to access it in this

03:36.730 --> 03:37.930
function as well.

03:37.960 --> 03:45.010
I will create a new variable up there user or reset user.

03:46.170 --> 03:49.650
And it will store user in reset user.

03:49.650 --> 03:54.060
So in that variable, because that variable is defined in this function scope.

03:54.060 --> 04:00.630
So I can use it in this end in this function and now I can use reset user in here too, and I can use

04:00.630 --> 04:05.550
it to call reset user and set the password equal to the new hash password.

04:06.800 --> 04:10.670
And for the reset user, I will also set.

04:11.870 --> 04:20.690
Reset token equal to null and I will also set reset token expiration to null here or not to null.

04:20.690 --> 04:22.430
Let's set it to undefined.

04:22.430 --> 04:25.880
So these fields here are not required anymore.

04:25.880 --> 04:27.860
They don't need to store any values anymore.

04:27.890 --> 04:32.720
Once I'm done, I can call save here and return that.

04:33.530 --> 04:38.030
And here I'll then have my result of that safe operation.

04:38.030 --> 04:46.160
And once we did save, I can now redirect the user back to the login page with the new password.

04:46.700 --> 04:50.420
You could also send a number of mail confirming that reset if you wanted to.

04:50.810 --> 04:52.430
And now if you save this.

04:53.470 --> 04:56.290
Let's reload that password resetting page here.

04:57.800 --> 05:00.040
And let's add a new or enter a new password.

05:00.050 --> 05:03.180
Click update password and I get a page not found.

05:03.200 --> 05:07.850
Which makes sense obviously, because I have my new post route, but I need to register it as a route.

05:07.850 --> 05:09.410
I have my action here, I should say.

05:09.410 --> 05:11.150
I need to register it as a route.

05:11.150 --> 05:21.230
So in the off JJ's file here, we need to add a new post request to new password and execute of controller

05:21.230 --> 05:22.910
post new password there.

05:23.390 --> 05:24.290
That is important.

05:24.290 --> 05:25.370
Safe that.

05:26.210 --> 05:32.960
Then simply go back to the page where you have that token in the URL and to your new password.

05:33.110 --> 05:40.170
Let's also quickly reload our users collection before we hit save and kind of memorize the value.

05:40.190 --> 05:41.660
Here it ends with x.

05:41.660 --> 05:41.930
Y.

05:41.960 --> 05:42.980
W y.

05:44.990 --> 05:46.820
And Click Update Password.

05:47.330 --> 05:55.100
I'm on the login page and now if I reload my users collection, that password here should change.

05:55.550 --> 05:56.230
And it does.

05:56.240 --> 05:57.830
And also the reset token and so on.

05:57.830 --> 05:58.490
It's gone.

05:58.970 --> 06:04.370
I also have no errors here, so it looks like password resetting was successful.

06:04.370 --> 06:07.100
We successfully assigned a new password.

06:08.430 --> 06:12.690
Now if we try going to reset.

06:13.560 --> 06:15.450
With some random token.

06:16.470 --> 06:20.460
Then this will not work and we're not doing proper error handling there.

06:20.460 --> 06:24.810
I'll have a whole module on that because we essentially fail to find a user for that token.

06:24.810 --> 06:25.920
So this all works.

06:25.920 --> 06:30.780
We can't start changing values of random tokens of random users.

06:30.780 --> 06:32.910
So this will not work here.
