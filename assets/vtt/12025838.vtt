WEBVTT

00:02.310 --> 00:04.870
So now that we added our file picker,

00:04.960 --> 00:06.390
let's work on the backend

00:06.490 --> 00:12.910
and for that I'll go to my admin controller which is where I do handle the creation of products,

00:12.910 --> 00:18.060
also the editing of products which we'll work on later but for now, let's focus on adding a product

00:18.070 --> 00:21.100
and here we are extracting data from the incoming requests.

00:21.350 --> 00:26.020
Now I renamed my file picker here to image,

00:26.110 --> 00:32.230
so the input name is now just image and this means that here when I try to retrieve it from the body,

00:32.620 --> 00:41.930
I should also target the image like this or we can keep this name because it will fail anyways. If I

00:41.930 --> 00:48.960
now submit this like that and I click add product, I get invalid value here

00:49.230 --> 00:55.770
and the image url does fail because I do have in my routes, in the admin routes, I do have some validation

00:55.770 --> 00:58.860
in place where I say the image url should be a url

00:59.160 --> 01:07.660
and clearly it is not. So let's remove that validator here for the post add product route and let's try this

01:07.750 --> 01:08.680
again

01:08.740 --> 01:10.690
and now we simply get an error,

01:10.720 --> 01:17.680
so the error handling is working and the error we're getting is simply stemming from the fact that we're

01:17.680 --> 01:21.670
not able to extract our image correctly.

01:21.730 --> 01:28.300
I can show this to you, if I console log image url here in post add product, in this controller

01:28.300 --> 01:35.570
action and I try to submit this, then you don't see anything here.

01:35.910 --> 01:41.640
It fails to log anything there because we failed to extract an image from the request body

01:41.640 --> 01:43.500
and why is that?

01:43.630 --> 01:49.500
Because keep in mind you learned this a little bit earlier in this course, for extracting the content

01:49.590 --> 01:51.490
of our incoming requests, 

01:51.510 --> 01:59.640
we set up a middleware in app.js, we're using a special middleware, this body parser middleware and this

01:59.730 --> 02:06.620
middleware uses or exposes a couple of different parsers and we're using the url encoded parser,

02:06.720 --> 02:10.630
now url encoded data is basically text data.

02:10.650 --> 02:13.920
So if a form is submitted without a file,

02:13.920 --> 02:20.400
so just with text fields no matter if that text field then stores a number, a url or plaintext but

02:20.400 --> 02:23.670
it's all encoded in text when it is submitted.

02:24.000 --> 02:27.320
This format is then called url encoded

02:27.550 --> 02:34.170
and actually we can see that. If we open the developer tools and go to the network tab in there, if I

02:34.170 --> 02:39.420
do click submit here, this failing request, this add product request,

02:39.540 --> 02:46.770
if we have a look at our request headers, we can see that the content type is application and then xwww

02:46.870 --> 02:48.810
form url encoded

02:48.900 --> 02:53.870
and this basically means it tries to put all the data as text into its form body.

02:53.940 --> 02:57.730
We can see that down there, just form data, title, price and so on

02:57.870 --> 03:00.320
and just image, this is invalid,

03:00.330 --> 03:08.940
this is basically an empty text because it can't extract our file as text because a file is binary data.

03:09.060 --> 03:17.230
Now because of that, because of that failing extraction, we need to work with this differently,

03:17.280 --> 03:24.270
we need to parse our data differently and the body parser that we're using here does not give us any

03:24.630 --> 03:31.440
parser, it does not include any parser that could handle file data as well.

03:31.440 --> 03:33.800
We need a new package for that,

03:33.810 --> 03:39.870
so let me quit that server and let's install a new package with npm install --save and the

03:39.870 --> 03:41.890
name of that package is multer.

03:42.210 --> 03:46.980
Multer is another third party package that parses incoming requests

03:46.980 --> 03:51.130
but this package parses incoming requests for files,

03:51.210 --> 03:59.780
so it is able to handle file requests as well or requests with mixed data, with text and file data.

03:59.790 --> 04:06.060
We'll still keep body parser because we still have like for example, our sign up form where we only submit

04:06.270 --> 04:13.260
url encoded data but now we'll have to use a different encoding and that starts with our form.

04:13.260 --> 04:19.230
So back in the view, the edit product view, there I'll change my form here a little bit,

04:19.350 --> 04:24.520
besides the class and action, here I'll also add a new field and

04:24.570 --> 04:33.310
that's the enctype field which I'll set to multipart form data. Application xwww form url

04:33.330 --> 04:34.740
encoded as the default

04:34.830 --> 04:41.760
but now we'll switch to multipart form data which is simply the content type telling the server that

04:41.760 --> 04:49.170
this submission, that this request will not contain plaintext but will contain mixed data, text and binary

04:49.170 --> 04:55.440
data and multer, the package we just installed will be looking for incoming requests

04:55.440 --> 05:03.410
with this type of data and will then be able to parse both the text and our file.

05:03.420 --> 05:08.610
So this is what we get there or what we will need

05:08.610 --> 05:12.980
and now with all that prepared, let's use multer in the next lecture.
