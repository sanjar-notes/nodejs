WEBVTT

00:02.210 --> 00:04.720
So we are using async await everywhere now

00:04.850 --> 00:10.520
and there's one important thing I want to highlight here. For all these mongoose operations which is

00:10.520 --> 00:17.270
the primary thing where we use async await, you have to understand that mongoose actually with operations

00:17.270 --> 00:23.900
like count documents or find does not return a real promise but a promise-like object where you can

00:23.900 --> 00:29.840
use then and catch and also async await, that is supported by mongoose even though behind the scenes

00:29.840 --> 00:31.990
it's not a real promise.

00:32.060 --> 00:37.220
Doesn't matter too much for you to be honest because you use async and await in exactly the same

00:37.220 --> 00:39.800
way you would use it on a real promise

00:39.800 --> 00:42.890
but I also don't want to hide that fact from you.

00:42.950 --> 00:45.820
You could use a real promise by chaining exec

00:45.980 --> 00:51.550
after all these mongoose operations, so after find, after count documents.

00:51.740 --> 00:54.860
If you do that, then you get back a real promise,

00:54.860 --> 01:00.890
we don't really need that here because, well that promise-like object behaves in exactly the way we want. You

01:00.890 --> 01:07.220
do have a real promise with the bcrypt library though, when we hash our password, here we get a

01:07.220 --> 01:08.300
real promise

01:08.360 --> 01:13.350
and as you can see, well you see nothing, you see no difference in the way we use await

01:13.400 --> 01:15.100
and you also had no difference

01:15.170 --> 01:17.480
you previously used then and catch.

01:17.600 --> 01:20.800
So that is what I mean, you don't need to care too much about that,

01:20.810 --> 01:22.860
I still did want to mention it.

01:23.180 --> 01:29.880
More importantly, I want you to take away that async await is a nice alternative to using then

01:30.080 --> 01:33.470
and catch. It's not better, it's not faster,

01:33.470 --> 01:36.260
behind the scenes it's basically the same code.

01:36.320 --> 01:43.940
It can be more readable to you but you must never forget that these still are asynchronous steps,

01:44.120 --> 01:48.730
the javascript code execution behavior doesn't change because of that.

01:49.010 --> 01:51.680
It does not block execution, 

01:51.680 --> 01:56.590
it simply wraps all the code after an await statement in the then block

01:56.600 --> 01:58.190
you would have to write otherwise,

01:58.310 --> 02:01.540
so this runs inside of the implicit then block

02:01.550 --> 02:03.140
this statement creates,

02:03.200 --> 02:05.050
this is how you have to think about that.

02:05.060 --> 02:11.270
So never forget that these are asynchronous operations because that is really important to understand.

02:11.810 --> 02:15.770
And you can absolutely go with the then and catch block we used before,

02:15.830 --> 02:23.720
so with the old promise style if you prefer that, I like it for teaching because it's clearer that we have

02:23.720 --> 02:30.680
some operation to wait for and that the line after that would execute first, here this is less clear

02:30.830 --> 02:37.490
but if you are aware of how async code works, this can simply be a nicer syntax to look at and it's up

02:37.490 --> 02:41.180
to you which syntax you'll use. For the rest of the course,

02:41.180 --> 02:43.860
I'll write new promises or I'll stick to that

02:43.920 --> 02:49.070
async and await syntax for my node application, for the react application

02:49.070 --> 02:52.680
I'll leave the code as it is with then and catch.

02:52.760 --> 02:55.010
You could use async and await there too

02:55.040 --> 03:00.980
but again this is no react course so I will leave it there as it is, for node we'll go with async await.
