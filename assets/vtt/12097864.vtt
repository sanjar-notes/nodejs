WEBVTT

00:02.270 --> 00:03.740
So let's start working on the rest

00:03.740 --> 00:04.710
API again

00:04.850 --> 00:12.410
and for that I'll run npm start in my rest API nodejs project too and that is also the reason why

00:12.410 --> 00:17.440
I'm using different ports by the way. Here I'm starting the application on port 8080,

00:17.510 --> 00:24.920
my frontend application automatically takes port 3000 and this simulates that these two ends

00:24.980 --> 00:28.630
of my application are served by different servers

00:28.640 --> 00:34.790
in the end which is a pretty common scenario since frontend only applications like react can be served

00:34.790 --> 00:41.180
on so-called static hosts which are optimized for applications that only consist of html, javascript

00:41.180 --> 00:47.120
and css and hence you might indeed have two different servers even if you created both the backend

00:47.270 --> 00:48.560
and the frontend.

00:48.620 --> 00:53.000
So we have different ports and therefore we have different domains and therefore we definitely need

00:53.060 --> 00:54.160
our course headers

00:54.200 --> 00:56.050
otherwise nothing would work

00:56.120 --> 00:59.720
and with that, we can now start working on our feed routes.

00:59.750 --> 01:06.110
We actually got two routes already, /posts and /post for creating a new post and for getting

01:06.110 --> 01:07.230
existing posts

01:07.310 --> 01:14.600
and now let's add some logic so to our controller actions to actually return something useful and to

01:14.600 --> 01:17.180
enable the user to create new posts.

01:17.180 --> 01:23.530
Let's maybe start with getting posts because that would allow us see at least some dummy data,

01:23.720 --> 01:31.880
so that is something useful. For that in get posts, we actually already return a list of dummy data posts,

01:31.910 --> 01:35.610
each post has a title and some content.

01:35.610 --> 01:42.410
Now it's of course always up to you how you want your data to look like in an application. In this application

01:42.470 --> 01:44.750
because my frontend also expects it,

01:44.930 --> 01:51.740
I want to have a post which in the end consists of a title which has a user attached to it, a creator

01:51.860 --> 01:58.400
or an author which has a creation date which has an image and which has some content.

01:58.400 --> 02:00.390
This is what I want to output in my frontend

02:00.470 --> 02:04.370
so the data we store on the server should have all these fields in the end.

02:04.370 --> 02:07.330
Now we don't have to start with the full package though,

02:07.340 --> 02:09.760
I already have a title and content here,

02:09.890 --> 02:13.330
now let's maybe add some image url here

02:13.370 --> 02:17.210
and for that I'll create a new images folder

02:17.360 --> 02:21.800
and for the moment I will just copy an image into that folder,

02:21.800 --> 02:28.730
later we'll of course add image upload. I'll copy in my good old duck image which I used before in the

02:28.730 --> 02:31.370
course

02:31.580 --> 02:33.680
and here it is, the lovely duck.jpg

02:33.920 --> 02:36.290
and I want to serve that duck.

02:36.320 --> 02:38.600
So here in image url

02:38.780 --> 02:50.560
I will actually provide images/duck.jpg as a path because that is my local path on the server

02:50.560 --> 02:55.130
here. It's missing my domain and so on, we'll have to attach this on the frontend

02:55.270 --> 03:02.260
but this is now a post as I could serve it. If I now save this, we can actually fetch that data with a get

03:02.260 --> 03:11.020
request to localhost 8080/feed because that is what we have as a filter to reach the feed routes,

03:11.080 --> 03:14.830
so /feed/posts.

03:14.830 --> 03:19.480
Now let's try that out in our frontend application, there

03:19.540 --> 03:29.200
we fetch our posts in a feed.js file in the source pages feed folder, in there you should find a load

03:29.320 --> 03:31.450
posts function.

03:31.450 --> 03:38.620
Load posts is a function that is called by the react code and so on in the end and what we do here is

03:38.870 --> 03:42.310
I also support pagination which we'll add later,

03:42.490 --> 03:51.820
for now I just want to reach out to my url which is http localhost 8080,

03:51.910 --> 03:53.260
written like this

03:54.650 --> 03:59.210
and then /feed/posts like this.

03:59.230 --> 04:02.570
So this route I just talked about in the rest API.

04:02.990 --> 04:05.750
This should fetch all these posts, then

04:05.740 --> 04:09.860
here I just check if the status code is not equal to 200

04:09.910 --> 04:14.830
which would mean that something went wrong and then I throw a new error which is handled in your react

04:14.830 --> 04:16.060
application

04:16.060 --> 04:23.530
otherwise I extract my body and then here, I have my body and I use some react logic to load that body

04:23.530 --> 04:26.590
in the end and to hopefully display it.

04:26.590 --> 04:34.890
If I save that and I go back to my application, I'll get an error regarding the name,

04:34.930 --> 04:36.990
the author name which is missing,

04:37.070 --> 04:44.000
I'm not supporting users yet so this will be a problem for the moment and we'll also get an error regarding

04:44.000 --> 04:45.650
the date eventually.

04:45.680 --> 04:51.880
So to avoid this, we should go back to our controller and add some dummy data for this too.

04:52.040 --> 04:57.290
Let's add a creator object because that is what I'll be looking for in my react code which should be

04:57.290 --> 05:00.560
an object with a name where you can enter any name you want,

05:00.590 --> 05:03.760
later we'll of course connect this to a real user in the database

05:03.950 --> 05:05.380
and let's also add a date

05:05.390 --> 05:10.050
and here you can simply create a new date with, well new date like this.

05:10.070 --> 05:16.580
Last but not least, you also want to add some ID and that should be _id because I'll be looking

05:16.580 --> 05:19.320
for _id in the frontend code

05:19.350 --> 05:20.910
in the react application

05:21.020 --> 05:26.960
because later we'll use mongoose again here and that of course or mongodb in general and that of

05:26.960 --> 05:29.750
course simply adds IDs with _id,

05:29.810 --> 05:33.110
so here you can enter any ID you want.

05:33.110 --> 05:38.690
Now if you save that updated controller code and the server therefore restarts, you can reload and

05:38.690 --> 05:40.020
you'll still get that error

05:40.040 --> 05:43.970
which is related to our status, our user status which we still can't fetch

05:43.970 --> 05:50.670
but if you simply click that away, you see that first post here and that is looking better than before.

05:51.440 --> 05:57.180
The invalid date is a problem because actually the field should be named createdAt, not date, there was

05:57.180 --> 05:59.120
a tiny mistake on my side, on the server

05:59.140 --> 06:00.620
it should be createdAt.

06:00.630 --> 06:04.170
With that if you reload, you'll see this post.

06:04.170 --> 06:05.870
So fetching posts works,

06:05.880 --> 06:09.660
of course it's just dummy data though. To work with real data,

06:09.660 --> 06:16.500
I want to be able to create new posts by clicking new post, so that is something we can add as a next step.
