WEBVTT

00:02.510 --> 00:06.080
So what does mvc stand for or what is it?

00:06.080 --> 00:08.780
It's all about a separation of concerns,

00:08.810 --> 00:16.010
so making sure that different parts of your code do different things and you clearly know which part

00:16.070 --> 00:21.050
is responsible for what. MVC stands for model view controller

00:21.050 --> 00:23.780
so we work with models, views and controllers

00:24.080 --> 00:29.930
and actually for example views, that is something you already know, we already got views in our

00:29.930 --> 00:31.090
project, right.

00:31.130 --> 00:39.860
Models are basically objects or is a part of your code that is responsible for representing your data

00:39.860 --> 00:43.230
in your code and allowing you to work with your data,

00:43.250 --> 00:51.830
so things like saving data, fetching data to or from a file or even if it's just in memory as we're currently

00:51.830 --> 00:52.730
doing it,

00:52.730 --> 00:55.700
this should be handled by models.

00:55.860 --> 01:00.440
The views are responsible for what the user sees in the end,

01:00.440 --> 01:08.270
they are responsible for rendering the right content in our html documents and sending that back

01:08.270 --> 01:09.190
to the user,

01:09.260 --> 01:15.830
so they are decoupled from your application code and are just having some light or minor integrations

01:16.070 --> 01:23.120
regarding the data we inject into our templating engine to generate these views. And the controllers

01:23.360 --> 01:27.270
are now the connection point between the models and your views

01:27.450 --> 01:33.140
because since the views shouldn't care about the application logic and the models do care about how

01:33.140 --> 01:40.130
to save and fetch data and so on, the controllers are the thing working with the models, saving that data

01:40.130 --> 01:42.850
or triggering that save process and so on

01:43.010 --> 01:49.860
and also the part where they then pass that data that was fetched to your views for example.

01:49.880 --> 01:54.790
So the controller is the middleman, it contains the in-between logic.

01:54.830 --> 01:58.540
Now in case you're also wondering how routes fit into this picture,

01:58.640 --> 02:06.290
well routes are basically the things which define upon which path for which http method which controller

02:06.320 --> 02:07.770
code should execute

02:07.850 --> 02:08.820
and as I just said,

02:08.890 --> 02:15.800
the controller is then the thing defining with which model to work and which view to render.

02:15.890 --> 02:17.320
This is the pattern

02:17.330 --> 02:24.950
and in an app with express or built with express as we are doing it which heavily relies on this middleware

02:24.950 --> 02:25.880
concept,

02:25.990 --> 02:33.800
the controllers are also kind of split up across middleware functions or some of the logic might be separated

02:33.800 --> 02:39.950
and moved into another middleware function but we'll see all of that and we'll get there step by

02:39.950 --> 02:40.480
step.

02:40.490 --> 02:46.360
For now, let's simply move back to our project and implement an mvc pattern there.
