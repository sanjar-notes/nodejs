WEBVTT

00:02.490 --> 00:08.880
We added multer and as you can see, multer is able to accept our incoming data, extract the files and

00:08.880 --> 00:16.160
store them for us and then store information about the file upload in this request file object here

00:16.230 --> 00:19.770
which we output which in the end contains this data.

00:19.770 --> 00:25.310
Now all we have to do is we have to ensure that our data gets stored correctly

00:25.530 --> 00:29.530
and for that we specify the destination folder

00:29.820 --> 00:31.100
but we can do more,

00:31.230 --> 00:38.910
we can set the storage key here which gives us way more configuration options than just the dest option.

00:38.910 --> 00:47.610
Now for that, to configure a storage here, I will actually set up a new configuration object, maybe up

00:47.610 --> 00:48.170
there,

00:48.920 --> 00:50.860
file storage, the name is up to you.

00:50.990 --> 00:51.970
It's a constant

00:52.160 --> 00:56.540
and the value will be something I get from the multer package, there

00:56.630 --> 01:03.110
it's the disk storage function. Disk storage is in the end a storage engine which you can use with multer

01:03.320 --> 01:06.100
and there you can pass a javascript object to configure that.

01:06.320 --> 01:11.510
It takes two keys, it takes the destination and it takes the file name.

01:11.510 --> 01:16.900
These are two functions which multer will then call for an incoming file

01:16.970 --> 01:21.750
and these functions then control how that file is handled regarding the place where you store it

01:21.780 --> 01:29.330
and regarding the naming. So destination therefore is a function, we can make it an arrow function which

01:29.420 --> 01:35.210
will be called by multer which receives the request object, the file object and a callback which you have

01:35.210 --> 01:38.200
to call once you're done setting up the destination,

01:38.210 --> 01:41.010
so this is all to interact with multer.

01:41.510 --> 01:50.010
So in there, you can for example call the callback with null as the first argument,

01:50.040 --> 01:54.510
that would be an error message you throw to inform multer that something is wrong with the incoming

01:54.510 --> 01:56.380
file and it should not store it

01:56.430 --> 02:01.860
but if that is null, you tell multer that it's OK to store it and then the second argument is the place

02:01.860 --> 02:04.970
where you do want to store it, like that images folder.

02:05.070 --> 02:07.970
Now file name also is a function,

02:07.980 --> 02:13.320
so it's also an arrow function where we also received the request object, some data about the file and

02:13.320 --> 02:19.860
a callback which we have to call to let multer know how to name it and there, we can also call this

02:19.980 --> 02:22.910
with null to still inform multer,

02:22.920 --> 02:24.980
ok we're fine store it please

02:25.020 --> 02:28.140
and then the second argument is the file name which we want to use

02:28.140 --> 02:30.940
and here we could name it image.png

02:31.110 --> 02:32.810
but of course that would be a bit boring,

02:33.120 --> 02:39.210
instead we can extract file and then there is an original name object which holds the original file

02:39.210 --> 02:40.370
name,

02:40.380 --> 02:44.130
there also is a file name object which holds this random hash

02:44.300 --> 02:50.260
and in the end what we can do here is we can of course combine this. We can for example say I want to ensure that

02:50.340 --> 02:54.060
if we have two images with the same name, they don't overwrite each other.

02:54.060 --> 02:57.970
So I will use that file name which is auto-generated by multer

02:58.320 --> 03:04.330
and then I'll concatenate it maybe with a dash in-between with the original name. With that

03:04.350 --> 03:11.870
I also ensure that I end with that extension and now I set my own filename here by calling that callback.

03:11.880 --> 03:17.430
Now we just need to inform multer that we want to use this storage engine and we do this by setting

03:17.700 --> 03:22.430
this as a value for the storage key in the multer options.

03:22.440 --> 03:26.620
Now with that if I go back and I added my product again,

03:26.730 --> 03:29.120
so the same input, both png elected,

03:30.230 --> 03:36.970
you will see that in those images folder you have undefined boat.png.

03:37.100 --> 03:39.020
Now it's simply undefined here

03:39.140 --> 03:45.830
instead of that random hash because since we did set our own filename with this function here, multer

03:45.830 --> 03:47.510
does not generate that hash

03:47.660 --> 03:52.100
but all we can do for example is we can use the current date,

03:52.370 --> 03:58.550
so new data to ISO string gives us a snapshot of the current date and that should also ensure uniqueness.

03:58.610 --> 04:03.460
If you need more, you can use some third party package that does give you a really unique hash.

04:03.620 --> 04:08.720
But with this we're now storing files with the right extension and a unique name

04:08.780 --> 04:13.700
and this gives us more power because now we can control the path and the filename.

04:13.790 --> 04:19.910
And of course, we can also use that for even more because maybe we want to validate that we only support

04:19.940 --> 04:21.170
certain mime types,

04:21.230 --> 04:25.300
let's say png and jpg but not gifs or pdfs.

04:25.430 --> 04:26.990
Let's do that in the next lecture.
