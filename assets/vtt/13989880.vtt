WEBVTT

00:02.890 --> 00:06.250
Now, first of all, why do I need to quit this process with control?

00:06.280 --> 00:14.440
See, the reason for this is that despite me calling done, Mocha detects that there is still some open

00:14.440 --> 00:20.920
process in the event loop and indeed there is our database connection which we open but never closed.

00:21.340 --> 00:28.180
So one thing we should do here is when we're done with our expectations, we might want to call mongoose

00:28.210 --> 00:31.240
disconnect and only when this is done.

00:31.240 --> 00:34.240
So here in the then callback we call done.

00:34.480 --> 00:39.250
Now this is the first important step, but right now this wouldn't work because we actually have an

00:39.250 --> 00:41.170
overall error in our test case.

00:41.170 --> 00:44.090
Therefore we don't even make it into this then block here.

00:44.110 --> 00:50.500
Instead, our setup right here already fails and frozen error because of that duplicate key because

00:50.500 --> 00:57.040
we hard coding and ID here and we already have a user with that ID in the database and the ID has to

00:57.040 --> 01:00.580
be unique and therefore MongoDB complains when we create it again.

01:01.270 --> 01:03.850
The solution is to clean up once we're done.

01:03.850 --> 01:11.140
So besides disconnecting before we actually disconnect, I want to call user delete many and pass on

01:11.140 --> 01:17.170
an empty object, which means all users are deleted and that is generally not the worst idea.

01:17.200 --> 01:23.260
If you have a test where you set up dummy data, clean up everything after that test so that you can

01:23.260 --> 01:30.490
be sure that you have a clean setup for the next test thereafter and also for the next test run, which

01:30.490 --> 01:31.350
is the issue here.

01:31.360 --> 01:38.050
Here for our second test run, we have no clean setup because we already have that user now with delete

01:38.050 --> 01:38.350
many.

01:38.350 --> 01:45.040
We cleaned it up there, we now have that then lock and there I then want to disconnect and in the then

01:45.040 --> 01:47.890
block there I then want to use done.

01:48.010 --> 01:54.790
Of course we can clean this up a little bit by converting this to one promise chain and we can even

01:54.790 --> 01:56.500
convert this to one promise chain.

01:56.500 --> 01:59.800
But anyways, the code isn't super pretty and we'll fix this soon.

01:59.800 --> 02:04.090
But for now the result should at least be that if we run this again.

02:04.960 --> 02:08.610
Well, it still fails because we still have that an issue initially.

02:08.930 --> 02:11.830
Let me actually go there and manually delete this user.

02:13.300 --> 02:16.570
And now if I run this again, obviously it will succeed.

02:16.570 --> 02:19.110
But now also for subsequent runs, it should work.

02:19.120 --> 02:19.810
So now.

02:21.530 --> 02:22.520
This, uh.

02:24.390 --> 02:27.230
Fails because I have one extra exclamation mark here.

02:27.240 --> 02:28.350
So let me now.

02:29.100 --> 02:32.910
Convert this back to the valid validation here.

02:33.060 --> 02:35.610
Let's now rerun this test here.

02:36.290 --> 02:37.850
And of course, clean.

02:39.310 --> 02:43.540
And of course, refresh here and clean up this user one more time.

02:45.260 --> 02:47.480
So that we have one clean run.

02:48.400 --> 02:50.080
Now if we run NPM test.

02:52.050 --> 02:54.660
Now they all pass and aspergillosis finishes.

02:54.660 --> 02:56.340
But of course this is not perfect.

02:56.340 --> 03:01.500
As you can tell, whenever a test fails, we don't make it into this cleanup phase here because that

03:01.500 --> 03:06.870
will throw an error and therefore we would have to add a catch phrase overall so we don't make it into

03:06.870 --> 03:10.410
this cleanup part here if an expectation fails.

03:10.410 --> 03:14.280
And in general, this is pretty clunky and pretty hard to read code.

03:14.280 --> 03:21.480
And if we have a number test that requires a MongoDB database or our dummy set up, well then we have

03:21.480 --> 03:26.910
to repeat all that code and therefore there is a cleaner solution to all of that.
