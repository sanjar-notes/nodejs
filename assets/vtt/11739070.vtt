WEBVTT

00:02.380 --> 00:04.210
Now that we can add orders,

00:04.210 --> 00:07.470
one thing is missing and that is that we clear the cart,

00:07.570 --> 00:10.660
I want to do this right after we edit the orders.

00:10.660 --> 00:17.050
So down there I need to work with the cart and therefore first of all, I'll store it in a new variable, fetch

00:17.060 --> 00:18.040
cart,

00:18.220 --> 00:19.590
initially it's empty

00:19.650 --> 00:26.230
and here once I got the cart, I'll store the cart in the fetch cart variable so that I can also use

00:26.230 --> 00:27.990
it down there.

00:28.190 --> 00:38.020
Now that cart should essentially drop all its cart items. Now I can use my fetch cart here to call

00:38.020 --> 00:46.030
another method, set products for this cart and set the products to null.

00:46.080 --> 00:52.980
Now let's return this and then add a new then block with the result of this operation where I simply

00:52.980 --> 00:55.140
want to redirect.

00:55.190 --> 00:59.750
Let's give it a try, let's save this and reload the cart page here, click order

00:59.750 --> 01:01.500
now, we're on the orders page,

01:01.580 --> 01:07.430
go back to the cart and we got no products in the cart because if we go into the workbench, we see that

01:07.430 --> 01:14.180
the cart items indeed are empty because we dropped all the items in the cart by setting them to null,

01:14.200 --> 01:17.190
this is how easy we can clean up the cart here.

01:17.210 --> 01:20.000
So with that, we got all that logic done,

01:20.120 --> 01:26.590
the last step I want to do here is that I actually show my orders and we can get rid of the checkout

01:26.590 --> 01:30.680
page here for now because we have no such step at the moment.

01:30.680 --> 01:37.490
So now let's make sure we also retrieve the orders correctly and can display them on our orders page. For

01:37.490 --> 01:37.990
this here,

01:37.990 --> 01:40.480
I'll first of all get my user

01:40.640 --> 01:45.300
and now I'm interested in the orders of this user which I can get with get orders,

01:45.440 --> 01:47.560
a magic method added by sequelize,

01:47.600 --> 01:56.580
thanks to our associations. Here we again get a promise, let's log any potential errors we get

01:56.620 --> 02:00.690
and in the then block, I know that I have my orders.

02:00.880 --> 02:07.330
This is where I want to render my orders page therefore and I will pass a new variable into that

02:07.330 --> 02:08.060
page,

02:08.080 --> 02:16.110
the orders variable which simply stores all the retrieved orders. So with that I got my orders for this

02:16.170 --> 02:17.010
user,

02:17.010 --> 02:22.050
now let's go to the respective view in the views folder,

02:22.260 --> 02:26.730
here's the orders.ejs file which always shows nothing there.

02:26.730 --> 02:33.000
Now obviously that's not what I always want to show, instead I only want to show nothing there or no

02:33.000 --> 02:34.290
orders placed yet,

02:34.440 --> 02:35.370
whatever you like

02:35.460 --> 02:37.040
if we got no orders,

02:37.170 --> 02:46.820
so I'll first of all add a normal ejs statement where I check if orders length is smaller or equal than zero,

02:46.840 --> 02:49.650
then we probably have no orders,

02:49.660 --> 02:55.260
so in this case I want to display nothing there.

02:57.580 --> 03:01.000
Now else and that is of course an important part,

03:01.060 --> 03:06.750
let's also close that statement of course with the closing curly brace,

03:06.750 --> 03:12.790
else I want to output my orders and for now I'll do this in a very ugly way with an unordered list of list

03:12.820 --> 03:15.840
items which I repeat for every order,

03:16.120 --> 03:23.960
so again ejs time to loop through all orders with forEach for example. Now forEach

03:23.990 --> 03:29.270
as you know takes an anonymous function which gives us access to every order

03:29.270 --> 03:36.500
then we repeat this code here for every order and then here, we close the curly brace and the bracket

03:36.860 --> 03:41.980
of our forEach method, we can add a semi-colon if you want

03:41.980 --> 03:45.170
and now this is executed for every order we got.

03:45.190 --> 03:50.030
Now every order we got has a couple of products that belong to the order,

03:50.100 --> 04:01.120
so for every order I have here, I will output a h1 tag with the ID, order.Id, output like this and

04:01.170 --> 04:07.130
below that another nested unordered list with more list items where I loop through the products belonging

04:07.130 --> 04:08.350
to the order,

04:08.360 --> 04:13.130
so here I'll have order and then it's order item,

04:13.190 --> 04:26.390
that is our connected model so to say, forEach because that will be a list of all the related items

04:26.500 --> 04:31.280
and here I get my item.

04:31.530 --> 04:41.580
Let's close this here and let's also close the forEach syntax then down there

04:41.720 --> 04:47.820
and now this list item is repeated for every item in this order and there I simply want to output

04:48.750 --> 04:53.770
the title, so output item title.

04:53.940 --> 05:01.770
Keep in mind this is a product so it will have a title and then maybe in normal parentheses, I'll output

05:02.790 --> 05:07.890
item quantity and this will not work,

05:07.890 --> 05:15.490
I can already tell you that. If I save that, I get another error actually

05:15.560 --> 05:20.380
and that is simply coming from the fact that I deleted one route, the checkout route,

05:20.390 --> 05:21.840
we need to delete it here too

05:21.860 --> 05:24.570
so I deleted the action, we need to delete the route too

05:24.920 --> 05:31.430
but still if I reload the orders page now, this will just crash here because I have an ejs syntax

05:31.460 --> 05:32.350
error though,

05:32.660 --> 05:33.980
let's quickly fix that.

05:36.240 --> 05:38.930
Ok here for item quantity, you need to close that

05:39.140 --> 05:47.390
but even after this change, this will not work now because order is not defined because that should be

05:47.450 --> 05:58.960
orders forEach but now because we can't loop through order item here, this does not work.

05:59.080 --> 06:08.220
And to understand this, let's have a look at our shop.js controller file and let's output orders here

06:08.230 --> 06:13.080
and let's see what exactly we get. For this let's now reload the page,

06:13.130 --> 06:17.410
it will still break of course but now we can have a look at the output there,

06:17.520 --> 06:26.410
we want to scroll up. There is what we log with this line, console log orders and there we can see that

06:26.440 --> 06:32.630
we do have an array of orders but an order does not have an order item key,

06:33.690 --> 06:37.310
this is not provided by sequelize.

06:37.430 --> 06:46.940
If we also want to fetch the related products to an order, we have to pass an object here where we set

06:48.320 --> 06:54.110
include to an array with the field products or the element products as a string.

06:54.110 --> 07:04.230
Now why products? Because in app.js, we associate an order to many product, products of course

07:04.440 --> 07:11.990
and if we have a look at our model, the product model has the name product. Sequelize pluralizes this and

07:11.990 --> 07:17.460
then we can use a concept called eager loading where we basically instruct sequelize

07:17.510 --> 07:23.300
hey if you are fetching all the orders, please also fetch all related products already and give me back

07:23.300 --> 07:24.760
one array of orders

07:24.800 --> 07:28.160
that also includes the products per order.

07:28.250 --> 07:34.240
Now this only works of course because we do have a relation between orders and products as set up in

07:34.240 --> 07:38.310
app.js here and now we can load both together.

07:38.510 --> 07:41.900
This will still not make our template work immediately

07:42.170 --> 07:45.500
but now we got orders with more data in them.

07:45.530 --> 07:51.200
Each order will now have a products array and with that in mind, we can go back to our view here, to the

07:51.200 --> 07:58.010
orders view and tweak that. We can loop through the orders and every order will have an ID, that's fine.

07:58.010 --> 08:05.020
Now our order will still not have a order item but it will have a products list and now we can loop

08:05.060 --> 08:11.450
through all the products and each item which is now simply a product and therefore we can name it as such

08:11.450 --> 08:18.620
to make this clear, each product of course has a title which we can output and it does not have a quantity

08:18.620 --> 08:26.460
but the product will now have an order item key which then stores the quantity for that product

08:26.510 --> 08:36.910
in that order. And now if we reload this page, we do see our orders with the nested products in there,

08:37.040 --> 08:42.140
not the most beautiful presentation you have for sure but this is how it actually works.

08:42.140 --> 08:47.480
We also see there is one dummy order that was created accidentally in between with no products and we

08:47.480 --> 08:53.540
can always verify this by looking into the database, we get four order items related to orders with

08:53.540 --> 09:02.420
the ID 9 and 11 in the orders, we got 9, 10 and 11 so indeed there is the order with the ID 10 which has

09:02.420 --> 09:03.520
no items.

09:03.560 --> 09:05.080
We can simply clear it by

09:05.300 --> 09:06.870
right clicking on it here,

09:06.980 --> 09:08.270
delete row,

09:08.600 --> 09:16.000
apply apply and close and now if we reload the orders page, it's gone and we only see these two orders.

09:16.370 --> 09:19.680
So this is now working and now we get the full flow,

09:19.760 --> 09:25.250
we got a user who is related to created products, we can edit the products, we can delete the products,

09:25.730 --> 09:27.990
we can add products to the cart.

09:28.010 --> 09:32.230
We can then also create an order based on the data in our cart,

09:32.390 --> 09:35.760
we can view product details and so on.

09:35.780 --> 09:38.770
So this is all working fine as it should

09:39.200 --> 09:42.920
and with that, we get the set up we need for now.

09:42.920 --> 09:48.440
This gave you an introduction to sequelize and definitely dive into the official docs to play around

09:48.440 --> 09:51.420
with that and learn more about it and how it works.
