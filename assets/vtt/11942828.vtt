WEBVTT

00:02.180 --> 00:05.170
Now whilst we're able to add product to the cart

00:05.180 --> 00:11.720
now with this code, let's make sure we can also display them when fetching them, when going to the cart's

00:11.720 --> 00:17.060
page here, to this page because right now we don't support this page because we still have that route

00:17.060 --> 00:22.580
commented out and we've got no logic to fetch all cart items anyways. So time to go into the controllers

00:22.580 --> 00:27.480
folder into the shop.js file where we do have the get cart route.

00:27.500 --> 00:32.160
Now this request user get cart thing will not work anymore,

00:32.450 --> 00:33.930
so let's make it work.

00:34.040 --> 00:38.040
Let's go back to the user model and in there we have add to cart,

00:38.210 --> 00:42.150
let's now also call or add a get cart method,

00:42.350 --> 00:44.600
you could name it however you want of course.

00:44.600 --> 00:48.840
The idea here is that we do indeed return the cart items,

00:48.950 --> 00:54.490
so that in the controller we have the cart items there and we can start outputting them, in the end what

00:54.510 --> 00:57.100
we need as you can tell is just the products, right,

00:57.110 --> 01:01.840
so we want to have a list of the products with the respective quantities.

01:01.890 --> 01:06.520
Now get cart exists on the user who already has this cart property,

01:06.540 --> 01:09.100
this is the mongodb way of thinking about relations,

01:09.120 --> 01:14.760
we don't need to reach out to a cart collection because there is no such collection, instead

01:14.760 --> 01:18.380
here we can simply return this cart and that's it,

01:18.380 --> 01:20.410
this gives us access to the user cart.

01:20.450 --> 01:25.490
Obviously we could have directly accessed the cart property on the user if we wanted to. You could add more

01:25.490 --> 01:27.980
logic to transform it or anything like that

01:28.250 --> 01:34.700
but in the shop.js controller, I can now already call get cart and have the cart

01:34.860 --> 01:37.270
therefore. Now on that cart

01:37.290 --> 01:44.610
I can't call get products though but I don't need to because the products are also already included in

01:44.610 --> 01:47.460
the cart or at least their references,

01:47.490 --> 01:47.750
right

01:47.760 --> 01:52.850
because what I'm storing in the user model with add to cart is the ID of every product,

01:52.860 --> 01:59.100
this is what we store. Now and that is exactly something we can change in get cart, instead of just returning

01:59.110 --> 01:59.910
this cart,

01:59.940 --> 02:06.060
it would be interesting to return a fully populated cart, so a cart with all the product details which

02:06.060 --> 02:08.790
we also require. And to do this,

02:08.790 --> 02:12.060
we of course have to reach out to the database again,

02:12.060 --> 02:19.650
so let's get access to our database client and let's return the result of a database operation where

02:19.650 --> 02:25.740
I do reach out to the products collection now because I have all the user data, I have all the cart data,

02:25.830 --> 02:29.650
now I need to fill it with some live from the products database

02:29.970 --> 02:36.460
and there I want to find all products that are in my cart.

02:36.620 --> 02:37.930
Now how can I do that?

02:38.730 --> 02:44.730
Well for this, we can use a special query syntax mongodb supports. In find I can tell, I can say

02:44.790 --> 02:48.630
I want to find all products where _id is equal to

02:48.840 --> 02:53.510
and now I don't pass an ID here because I'm not looking for a single ID

02:53.580 --> 02:59.010
instead I pass an object because this allows me to use some special mongodb query operators of

02:59.010 --> 03:04.350
which there are many covered in detail in my mongodb course or in the official docs of course but

03:04.370 --> 03:11.340
we are looking for the $in operator. And this operator takes an array of IDs and therefore

03:11.400 --> 03:17.520
every ID which is in the array will be accepted and will get back a cursor which holds references to

03:17.610 --> 03:21.770
all products with one of the IDs mentioned in this array.

03:21.810 --> 03:24.610
So all we need to do is construct such an array,

03:24.830 --> 03:29.830
so product IDs can be constructed by using this cart items

03:29.940 --> 03:35.210
and remember, this is an array of objects that look like this,

03:35.220 --> 03:38.320
so objects that have a product ID and the quantity.

03:38.440 --> 03:41.160
Now we're only interested in the product ID here,

03:42.050 --> 03:44.090
so I'll simply map this,

03:44.090 --> 03:52.830
this is a default javascript function, I'll map this to transform every item in there and I simply want to

03:52.830 --> 03:55.040
return the product ID.

03:55.140 --> 04:02.160
So what I'm doing is I'm mapping an array of items where every item is a javascript object into an array

04:02.280 --> 04:09.280
of just strings, of just the product IDs and this is then stored in this new product IDs constant. This

04:09.280 --> 04:09.790
is

04:09.800 --> 04:16.320
then my array which I want to use here to tell mongodb give me all elements where the ID is

04:16.320 --> 04:19.080
one of the IDs mentioned in this array here.

04:19.410 --> 04:22.690
So this gives me a cursor with all the matching products,

04:22.800 --> 04:29.200
now I'll again use toArray to quickly get that converted to a javascript array and then I'll add a then

04:29.220 --> 04:30.050
method.

04:30.330 --> 04:36.150
So in this then method, I'll have all my product data for the products that were in my cart.

04:36.150 --> 04:43.020
Now of course we want to add the quantity back to every product because that is something that is important

04:43.020 --> 04:43.700
to us,

04:44.450 --> 04:47.540
now how can we get that information back into there?

04:47.840 --> 04:48.530
Well in this

04:48.530 --> 04:56.820
then block, I'll again return a mapped version of my data, so a mapped version of my products array where

04:56.880 --> 04:59.070
every product will be converted

04:59.160 --> 05:05.400
a little bit. I'll return a new object for every product which is fine because every product is an object

05:05.850 --> 05:08.170
and I'll distribute all the existing properties,

05:08.220 --> 05:14.310
so I want to keep all the data I retrieved but then I'll add a new quantity property and that quantity

05:14.310 --> 05:17.710
property of course needs to be populated with data

05:17.850 --> 05:21.110
I know or I have on that product.

05:21.540 --> 05:27.840
Now we of course have the products stored in the cart of this user,

05:28.020 --> 05:36.710
so what I can do is I can use this cart and make sure you use arrow functions here to ensure that this inside

05:36.710 --> 05:40.960
of this function still refers to the overall class, with normal functions

05:40.970 --> 05:51.830
it would not, so use this cart in here, access my items and simply find the item with that ID at hand here.

05:51.890 --> 06:05.750
So here I'll have my cart item again and I'll return true if that item has a product ID toString, that

06:05.750 --> 06:13.080
is equal to the product _id to string of the product we just fetched from the database.

06:13.190 --> 06:18.960
So this can look confusing but in the end I have an array of products here fresh from the database,

06:19.100 --> 06:25.280
then I want to transform this which I'm doing with map, map takes a function that executes on every element

06:25.280 --> 06:29.560
and products which describes how to transform this element, here

06:29.570 --> 06:35.660
I'm basically returning the new value which is an object where I still have all the old product properties

06:36.020 --> 06:41.990
but I add a new quantity property and to get the right quantity for that given product, I reach out to

06:41.990 --> 06:42.560
my cart

06:42.560 --> 06:44.660
items which exist on that user

06:44.960 --> 06:53.000
and I again use a built in javascript method, find to look at all elements in cart items with this function

06:53.000 --> 07:00.920
here and then identify the one product where the product ID I'm storing in my cart items matches the

07:00.920 --> 07:04.020
ID of the product I have fetched from the database

07:04.070 --> 07:09.620
and since with map I'm going through all these products, this will also vary for every run.

07:09.620 --> 07:12.040
Now the last thing is this whole thing here,

07:12.080 --> 07:13.320
the whole find method

07:13.460 --> 07:18.280
in the end just gives me the product object,

07:18.500 --> 07:20.710
I want to get the quantity though.

07:21.620 --> 07:27.100
So now from the cart items I have, I extract a quantity for the given product.

07:27.290 --> 07:36.260
And now with that code, get cart should return products which are enriched with all the data that is stored

07:36.260 --> 07:40.640
in a product's collection because in users in the cart we'll only store the reference

07:40.790 --> 07:45.080
and this is what we need to do in mongodb if we then have a connection between two collections

07:45.080 --> 07:49.070
with a reference, we need to merge them manually as we are doing it here

07:49.220 --> 07:55.370
and with that merging being done manually here, we can now use that data.

07:55.570 --> 08:00.350
So get cart should now return a cart with all the information we need,

08:00.380 --> 08:07.990
so on the user we can call get cart and then we know we get back some products here, so we can delete

08:08.180 --> 08:09.320
that here

08:10.160 --> 08:17.120
as well as this and then render our view with the products we fetched.

08:17.230 --> 08:19.980
Now on that view, so the shop cart

08:19.990 --> 08:25.840
view here, we just need to make sure we output our products correctly because we cycle through them

08:26.440 --> 08:28.240
but now due to the way how we merge this,

08:28.270 --> 08:35.260
every product will itself already have the quantity here and whenever we use .id, we should have

08:35.470 --> 08:38.860
_id as you learned.

08:38.870 --> 08:45.110
Let's see if that works by going to our routes folder and there the shop.js file and let's add that

08:45.110 --> 08:46.510
get cart route again.

08:47.480 --> 08:53.220
So I'll reload this cart page here and this is looking pretty good,

08:53.450 --> 08:55.920
now let me add a new product,

08:55.960 --> 09:06.730
third with some image and some description. Now this exists, not in the cart though unless I add it to

09:06.730 --> 09:07.650
the cart.

09:07.690 --> 09:11.680
Once I do that and I go to the cart, we see it there too.

09:11.710 --> 09:16.350
Now the one thing that is still not working is that if I do add a cart item, we're stuck,

09:16.360 --> 09:17.950
let's fix this in the next lecture.
