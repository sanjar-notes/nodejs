WEBVTT

00:02.230 --> 00:08.020
In the last lectures we learned how to spin up that server and that we get a request object with information

00:08.020 --> 00:12.940
about the incoming requests and the response object that we can use to send back a response,

00:13.090 --> 00:15.860
let's now connect both, requests and response.

00:16.000 --> 00:21.640
Instead of printing some request data to the console which of course doesn't do much for us,

00:21.640 --> 00:27.940
let's instead start writing a very simple web server that does different things depending on which route

00:28.000 --> 00:29.080
we enter,

00:29.080 --> 00:33.040
so depending on which slash whatever part we enter here.

00:33.100 --> 00:36.750
So let's say for slash nothing,

00:36.880 --> 00:45.000
we want to load a page where the user can enter some data which we then store in a file on the server

00:45.010 --> 00:54.750
once it is sent. We can do this by first of all parsing the url. I'm storing it in a new constant and I

00:54.750 --> 00:56.940
do this by accessing request

00:56.950 --> 01:02.590
url, remember that was something like slash, /test, whatever we entered.

01:02.590 --> 01:10.140
I will then add an if statement and check if url is equal to just slash and only this will match,

01:10.180 --> 01:17.110
by the way the triple equal sign means that this will only be true if url is both a string and has

01:17.110 --> 01:21.040
that value.

01:21.040 --> 01:27.880
So now here if that is the case, I want to return a response which holds some html that gives the user an

01:27.910 --> 01:34.830
input form and a button that will send a new request in return and that will not be a get request

01:34.830 --> 01:35.980
by the way.

01:35.980 --> 01:42.630
So let's do this step by step, let's copy this code here and put it into this if statement

01:43.130 --> 01:51.000
and here I will write a html document with a head, maybe a different title, enter message

01:51.140 --> 01:57.810
and the body will now not hold a h1 tag but instead a form,

01:57.850 --> 02:03.740
this is a default html element of course with an input of type text

02:03.740 --> 02:10.410
let's say and a button and this will be super ugly because we have no styling but it's about the

02:10.410 --> 02:11.700
functionality for now,

02:12.550 --> 02:19.240
the button tag must be closed by the way. The button will be of type submit so that it submits the form

02:19.240 --> 02:23.260
and that will be some default html behavior we're using here

02:23.290 --> 02:29.890
where a button with type submit in a form element will send a new request and we'll configure that request

02:29.920 --> 02:30.890
in a second.

02:31.150 --> 02:34.100
Let's first give the button a caption, send

02:34.540 --> 02:42.160
and now on that form element here, we add an action which is basically the url this request which will

02:42.160 --> 02:49.420
be generated automatically should be sent to and I will use /message here and this will automatically

02:49.420 --> 02:50.610
target the host

02:50.620 --> 02:55.090
it's running on, so localhost in our case here, localhost 3000

02:55.090 --> 02:57.310
to be precise

02:57.310 --> 02:58.810
and then we define the method,

02:59.020 --> 03:06.310
the http method that should be used and there we previously saw if we expand this, that we get a get request

03:06.340 --> 03:08.820
which is the default if we enter a url,

03:08.950 --> 03:16.240
well here we are not entering a url instead we want to send a so-called post request. There is a limited

03:16.240 --> 03:25.210
set of http words you can use, get and post are the two most important ones. A get request is automatically

03:25.210 --> 03:25.510
sent

03:25.510 --> 03:33.490
when you click a link or enter a url, a post request has to be set up by you by creating such a form,

03:33.490 --> 03:37.670
there also are some other ways by using javascript but we'll ignore them for now.

03:37.900 --> 03:43.150
So in html we create such a form and we defined that the method should be post and this will send a

03:43.150 --> 03:49.750
post request to /message and the cool thing about form is it will not just send such a request,

03:49.810 --> 03:56.320
it will also look into the form, detect any inputs or related elements like selects

03:56.350 --> 03:57.310
we might have

03:57.730 --> 04:05.500
and if we give that input a name which we should, message, it will also automatically put that message

04:05.830 --> 04:09.550
into the request it sends to our server.

04:09.550 --> 04:16.930
So now here when we visit just localhost 3000 slash nothing, we will return a response where

04:16.930 --> 04:19.990
we render this html code.

04:19.990 --> 04:27.310
Now let's also put a return statement in front of res end. This is not required to return a response

04:27.670 --> 04:34.480
but to return from this anonymous function and to not continue this code because we return prior to

04:34.480 --> 04:34.690
it

04:34.750 --> 04:41.110
and this will quit the function execution. And we must do this because I told you that after res end,

04:41.380 --> 04:46.100
we must not call any other res writes or res set headers

04:46.300 --> 04:51.610
but this what happens if we not return because then it would just continue execution with these lines.

04:51.610 --> 04:52.510
I don't want that, 

04:52.630 --> 04:54.380
if we make it into the if statement,

04:54.490 --> 04:55.890
we should also quit here,

04:55.930 --> 05:03.370
we should exit out of this function. With this let's restart the server by quitting it with control c and

05:03.370 --> 05:04.970
restarting it with node app.js

05:05.070 --> 05:11.220
and let's reload this page on localhost 3000 slash nothing

05:11.520 --> 05:17.750
and we see my input and the send button here.

05:17.930 --> 05:21.180
Again not super pretty but it's working.

05:21.310 --> 05:25.630
Now let's make sure that if we enter something and we hit send,

05:25.960 --> 05:30.940
we see this, that we now not only see this but that something else happens.

05:30.940 --> 05:38.770
By the way we do see this because now the url is /message and /message does not make

05:38.770 --> 05:41.850
it into this if statement and therefore this code runs.

05:42.040 --> 05:43.460
But we want to do something else

05:43.540 --> 05:45.670
so let's do that in the next lectures.
