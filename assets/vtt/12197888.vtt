WEBVTT

00:02.460 --> 00:06.880
We edit our first graphql query which allowed us to get data,

00:07.170 --> 00:12.920
let's now add a query that allows us to save data. And for that,

00:13.050 --> 00:22.230
why don't we start with our frontend which we used and make sure that we can actually sign up users

00:22.260 --> 00:27.970
so that we can create users because that sounds like a mutation to me. For that,

00:28.230 --> 00:33.760
first of all let me clean up my frontend. I'm not using socket.io error there anymore,

00:33.900 --> 00:36.540
so in the feed.js file, at the top

00:36.540 --> 00:43.350
remove that open socket import and then let's remove that logic from componentDidMount where I created

00:43.350 --> 00:48.180
my socket connection and let's also remove add post and update post,

00:48.270 --> 00:52.830
I'll do that differently later. After changing this,

00:52.840 --> 00:58.750
let's go to app.js which is where we do sign up and we want to make sure that for the sign up

00:58.750 --> 00:59.380
handler,

00:59.500 --> 01:01.490
we now reach one of our mutations

01:01.690 --> 01:04.370
and for that, we first of all need to create it.

01:04.420 --> 01:06.550
Now how do we create a mutation?

01:06.730 --> 01:09.330
I'll get rid of this resolver, we'll later add

01:09.340 --> 01:10.730
query resolvers again,

01:10.930 --> 01:13.900
for now I will get rid of my query here,

01:13.900 --> 01:21.790
for now I only need a mutation and we add that in our schema by adding mutation here and then just as with

01:21.790 --> 01:28.650
the query, we define a type which you could name mutation or root mutation, whatever you want

01:29.140 --> 01:31.750
and there you now define the different mutations

01:31.810 --> 01:33.100
you want to allow,

01:33.100 --> 01:38.790
so here I'll just point at the root mutation. And in the root mutation,

01:38.820 --> 01:40.320
I'll add one which I'll name

01:40.410 --> 01:45.840
create user. You could name it sign up, you can name it whatever you want.

01:45.840 --> 01:53.190
Now that mutation here will actually require some input, some arguments and that is a different syntax

01:53.190 --> 01:55.010
which you now haven't seen before,

01:55.080 --> 01:59.400
you can add parentheses after your query name

01:59.700 --> 02:05.010
and this allows you to specify arguments that have to be given to that resolver that will run in the

02:05.010 --> 02:05.970
end.

02:06.000 --> 02:09.940
And here we could define that we need some user input data

02:10.350 --> 02:12.720
and now we need to define the type of that data,

02:12.720 --> 02:14.550
so how does this data look like?

02:14.790 --> 02:20.040
Well first of all, we could of course accept the title of type string and then another argument which

02:20.040 --> 02:26.130
is, not the title, the email of type string and then another argument which is the password of type string,

02:26.460 --> 02:27.820
that would work too

02:28.110 --> 02:34.920
or we bundle it in one object which we expect and for that object, we can create a new type and we don't

02:34.920 --> 02:41.110
do this with the type keyword but there is a special keyword for data that is used as an input,

02:41.160 --> 02:47.600
so for data that is used as an argument and that is the input keyword and you can now name this however

02:47.610 --> 02:48.150
you want,

02:48.260 --> 02:52.170
I'll name it user data and there,

02:52.260 --> 02:55.750
how does my user data look like or my let's name it

02:55.750 --> 02:58.510
user input data maybe,

02:58.510 --> 02:59.840
how does that look like?

03:00.280 --> 03:07.210
Well that will be an object which has an email field which is a string that is required,

03:07.220 --> 03:10.670
I need that to be a string and I need that field to be there,

03:11.570 --> 03:19.720
I also will get a name which is a string and a password.

03:19.720 --> 03:25.100
Now this is the data type I'll use here for my argument, create user

03:25.480 --> 03:30.520
and now the question just is what do I get back after a user was created?

03:30.520 --> 03:33.460
Well there I want to get back a user object.

03:33.460 --> 03:39.810
So for that I'll define a new type, not an input but a normal type which I'll name user.

03:40.170 --> 03:43.840
There I'll have an _id field which will be an ID type,

03:43.990 --> 03:49.750
it's a special type provided by graphql which simply signals that this is unique and well, treated as

03:49.750 --> 03:50.750
an ID.

03:51.240 --> 03:54.510
I'll then also have the username which is a string,

03:54.880 --> 03:57.510
I'll have the email which is a string,

03:57.880 --> 04:03.820
I have the password which is a string which I don't require let's say because I don't necessarily need

04:03.820 --> 04:13.230
to return that, I'll have a status which is a string and I'll have my posts, now that will be an array

04:13.240 --> 04:20.220
and for that I also need to define how my posts should look like, so let me define another type here,

04:20.410 --> 04:23.770
the post type and that will have an ID,

04:25.100 --> 04:28.790
that will then also have a title of course,

04:28.790 --> 04:35.490
a post will also have a content, a post will then also have an image url

04:38.690 --> 04:42.370
and of course you might notice some similarities to my mongoose models.

04:42.380 --> 04:46.150
There I also defined how the data will look like and how it is connected,

04:46.190 --> 04:51.620
we're essentially doing the same here because this will allow us to then retrieve that data efficiently. 

04:51.620 --> 04:58.850
So now I have my post image url, we also will have a creator which is a user object and we'll

04:58.850 --> 05:00.650
have the createdAt field.

05:00.680 --> 05:03.110
Now graphql does not know dates

05:03.140 --> 05:07.170
so I'll use a string here and the same for updatedAt.

05:07.190 --> 05:15.280
Remember we'll get these two fields because in the mongoose model for the post, we enabled timestamps.

05:15.380 --> 05:23.010
Ok, so that is the post model. We needed that because in the user type, we now will have an array of posts

05:23.090 --> 05:28.040
and this is how you tell graphql that you have an array of something, you enclose it in square

05:28.040 --> 05:37.190
brackets and that user data is now what I want to return here when I create a user. That is the schema

05:37.190 --> 05:38.130
defined,

05:38.150 --> 05:40.580
let's now work on the resolver for that.
