WEBVTT

00:02.310 --> 00:08.100
Now that we created our account here and we learned that we'll use git, the next step is on heroku to use

00:08.120 --> 00:14.950
its cli, its command line interface and that of course now is heroku specific. On other hosting providers,

00:15.000 --> 00:23.160
you might simply be able to drag and drop your code, let's say as a zip file into some part of the dashboard

00:23.160 --> 00:26.090
user interface of your hosting provider to deploy it.

00:26.280 --> 00:30.380
heroku just doesn't use such a drag and drop alternative, instead

00:30.400 --> 00:36.670
heroku uses that command line interface which allows you to run your code or to deploy your code through

00:36.800 --> 00:39.110
the command line by typing on commands.

00:39.210 --> 00:42.100
So let's download heroku cli here,

00:42.600 --> 00:48.450
make sure to follow the instructions on the page that opens in case you're facing any problems, here

00:48.450 --> 00:51.100
you also get informed that you require git

00:51.120 --> 00:54.760
so definitely make sure to check that out as well if you have problems.

00:54.870 --> 01:02.250
Now I'll go with my MacOS version there and then I will quickly walk through the installer there and install

01:02.370 --> 01:05.150
heroku on my system.

01:05.170 --> 01:10.450
Once you did install it, the next step is to run this command and you run this in your normal terminal

01:10.480 --> 01:11.870
or command prompt,

01:11.860 --> 01:16.120
I'm here in my code, in my node project but you can run it from anywhere

01:16.300 --> 01:19.610
and there I will type heroku login,

01:19.630 --> 01:23.580
this should now work and you can now login with your account data,

01:24.100 --> 01:31.690
so with the same data you used to login on the website. Now once you did login the next step is to turn

01:31.690 --> 01:32.900
your codebase,

01:32.950 --> 01:39.820
so your project you have been working on into a git repository so that you can add heroku as a remote git

01:39.820 --> 01:42.010
repository and deploy to it,

01:42.130 --> 01:44.930
you can do that with these commands here. Now

01:45.010 --> 01:51.990
I already have a git repository here so I will omit the git init command and I will just use heroku

01:52.000 --> 01:58.840
git remote -a and then the name of my project and this will essentially add it as a remote project

01:59.020 --> 02:06.190
and also set my remote project url as a remote repository on this local codebase

02:06.220 --> 02:12.800
because this then allows me to run these commands to create a new commit, a new so-called snapshot which

02:12.820 --> 02:17.580
you need and then this push command to push my code to heroku.

02:17.950 --> 02:21.120
Now I set heroku as a remote branch,

02:21.130 --> 02:27.870
next in your package.json file of your project, you want to add a new entry, the engines entry

02:28.390 --> 02:33.520
anywhere maybe above the scripts and there add node and now set the version of

02:33.550 --> 02:35.390
nodejs you are using.

02:35.440 --> 02:41.660
You can detect that by running node -v in your project folder or anywhere on your computer actually and

02:41.840 --> 02:44.410
you see for me it's 10.9.0,

02:44.410 --> 02:50.890
you might be using a different version, simply enter it here and this will now use that version when

02:50.890 --> 02:53.860
it installs that on that remote server

02:53.860 --> 02:56.640
we are going to deploy it to. Now

02:56.650 --> 03:02.560
additionally in app.js, for heroku you may want to make sure you are using compression because heroku

03:02.830 --> 03:08.110
does not offer you to set up compression on the fly, other hosting providers do that,

03:08.170 --> 03:10.910
this one does not do it so do it on your own.

03:10.930 --> 03:18.190
Also make sure that you are not trying to read in our certificate and private key here for SSL, so comment

03:18.220 --> 03:22.990
that out because these files will not be deployed because we'll not use SSL

03:22.990 --> 03:30.520
here, you should not be spinning up your own https server because we will do that through heroku's managed

03:30.520 --> 03:38.340
server or you would do it through heroku's managed server, so spinup a normal http server instead.

03:38.350 --> 03:39.740
Now with that changed,

03:39.740 --> 03:44.290
make sure that you also add a new file and that is heroku specific,
 
03:44.310 --> 03:50.810
the procfile without a file extension and there, you simply add web:node app.js

03:50.990 --> 03:58.910
and this will instruct heroku to execute your app.js file when it tries to run your application.

03:58.950 --> 04:03.540
Now for different hosting providers, this might differ of course and there you simply have to check their

04:03.540 --> 04:09.570
documentation to find out how you'll let them know which script or which command they should execute

04:09.570 --> 04:12.590
to run your app. With all that set up,

04:12.630 --> 04:14.260
make sure you add a

04:14.340 --> 04:18.770
.gitignore file because this will tell git which folders

04:18.780 --> 04:26.400
it should not actually include in its snapshots and there, the node modules folder is important, all your

04:26.400 --> 04:30.370
third party packages are stored there and we won't deploy that

04:30.390 --> 04:35.470
because that will just increase the size of data we have to transmit over the wire,

04:35.490 --> 04:42.180
instead this will automatically be recreated on heroku because heroku and that is the case for all

04:42.180 --> 04:48.620
hosting providers pretty much do install your dependencies on the server after you deploy your code

04:48.750 --> 04:51.620
because keep in mind that in the package.json,

04:51.630 --> 04:57.420
we of course have a list of all the third party packages we're using and the versions we need.

04:57.420 --> 05:03.310
So this will be taken by the hosting provider and it will install all these packages on the server then 

05:03.650 --> 05:09.450
ad that is why we always used npm install --save because that added such entries to the package.json

05:09.570 --> 05:10.390
file

05:10.410 --> 05:18.450
which now can be used during deployment. With all that added, create a new snapshot by typing git add .

05:18.720 --> 05:24.960
and then git commit -m and there any message you want between double quotation marks and I will

05:24.960 --> 05:29.600
simply type prepare it for deployment,

05:29.670 --> 05:31.640
close that and hit enter

05:31.890 --> 05:40.210
and now you simply run git push heroku master and you hit enter and this will now upload all your code

05:40.240 --> 05:45.260
to heroku and there also as you see, install all your dependencies,

05:45.310 --> 05:50.830
that is what it's doing now and it should automatically detect that it's a node application because

05:50.830 --> 05:52.760
you have a package.json file,

05:52.900 --> 05:57.660
so you should not be getting any errors here and it will now step by step

05:57.700 --> 06:02.340
spin up your server and install the dependencies and so on.

06:02.350 --> 06:08.080
Now with that, you can go back to your dashboard and click on overview there and you should see that succeeded

06:08.090 --> 06:10.700
build and you can now click on open app.

06:10.770 --> 06:16.630
This will open your app in a new tab and most likely, this will not really succeed

06:17.020 --> 06:23.500
and the reason for that is that we deployed our application but now if you type heroku

06:25.790 --> 06:31.940
logs in your terminal, you will see what went wrong

06:33.380 --> 06:41.860
and to be precise in the error message, you will see that it failed to connect to the database and that

06:41.860 --> 06:47.290
makes sense because all our node environment variables which we rely on, for example to connect to the

06:47.290 --> 06:53.590
database are now not set anymore because in the procfile, we instruct heroku to just execute the app.js

06:53.590 --> 06:54.670
file

06:54.670 --> 06:59.830
and this will not pass the environment variables, only one environment variable is passed by default

06:59.830 --> 07:01.920
by heroku and that is actually node

07:01.930 --> 07:04.060
env, this will be set to production,

07:04.060 --> 07:09.250
that is something they do for you but all the other environment variables are not set.

07:09.250 --> 07:16.420
Now we have to do that on our own by simply grabbing these names and going back to our dashboard and there

07:16.630 --> 07:17.510
on the dashboard, so

07:17.530 --> 07:23.710
you want to go to settings for your app and then go to config vars and there you can now add your

07:23.710 --> 07:30.670
own config vars which are essentially the environment variables that are passed into your application.

07:30.670 --> 07:35.430
You simply add them here step by step as key value pairs,

07:35.530 --> 07:41.980
so all the data we previously passed in as part of our start script, we now pass it here as environment

07:41.980 --> 07:47.950
variables, mongo user, mongo password, also of course the default database,

07:47.950 --> 07:49.510
let's add it here,

07:49.510 --> 07:57.230
that was shop and also the stripe key where you should use your production ready stripe key of course

07:57.280 --> 08:04.210
as you learned, not the testing key necessarily, now if you click add, this is added too

08:04.320 --> 08:09.540
and now we have all these environment variables added here. Now this alone won't do the trick though,

08:09.560 --> 08:15.390
we also need to change something on our mongodb set up in our case here because we are using

08:15.390 --> 08:19.110
that hosted mongodb atlas solution if you remember

08:19.230 --> 08:26.740
and that of course now depends on the database you are using and there, you have to remember that under

08:26.740 --> 08:31.440
security, you had to whitelist IPs which are allowed to connect,

08:31.470 --> 08:36.170
now you need to whitelist the IP of your running application.

08:36.520 --> 08:43.180
And the thing about heroku and its basic version here is that we don't have a static IP assigned to our

08:43.270 --> 08:44.260
project,

08:44.260 --> 08:46.130
instead it's a dynamic range.

08:46.240 --> 08:52.540
Now attached you find some resources that help you, for example assign a static IP. If you have such a

08:52.540 --> 08:53.290
range,

08:53.380 --> 08:56.360
we only can do one thing on add IP address,

08:56.440 --> 08:58.180
we can allow access from anywhere,

08:58.180 --> 09:04.960
keep in mind we are still secure by username and password but still for a better set up, I would recommend

09:04.960 --> 09:08.390
that you also ensure that you assign a static IP.

09:08.470 --> 09:14.560
As I mentioned, you'll find some helpful resources on that attached to this lecture or depending on

09:14.560 --> 09:15.940
your hosting provider, 

09:16.030 --> 09:20.290
you might be using a hosting provider that gives you a single ID anyways.

09:21.990 --> 09:27.150
Running mongodb on the same server as your web project is not really an alternative because a

09:27.150 --> 09:34.070
database server is also not very trivial to set up especially if it should be able to scale and so on.

09:34.080 --> 09:40.560
Now with that changed, go back to your overview dashboard of your app and restart your server there by

09:40.560 --> 09:44.920
going to more restart all dynos, a dyno is essentially that

09:44.970 --> 09:52.880
virtual server and thereafter let's try reloading our application here and now there, you should

09:52.880 --> 09:54.530
see a running app.

09:54.920 --> 09:59.110
You should of course also be able to login and all that fun stuff,

09:59.150 --> 10:03.630
so essentially you should be able to interact with it just as you were able to do with it locally

10:03.650 --> 10:05.370
but now it's running remotely

10:05.450 --> 10:09.360
and as you can see, it's automatically served via https.

10:09.380 --> 10:14.320
Now on heroku in case you want to stick to that hosting provider, you can also change things,

10:14.420 --> 10:19.430
you can use your own domain, your own SSL certificate and all that fun stuff

10:19.520 --> 10:20.870
but this is it for now,

10:20.870 --> 10:23.660
this is the essential setup I want to show you here.
