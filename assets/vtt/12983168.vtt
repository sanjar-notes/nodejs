WEBVTT

00:02.020 --> 00:08.590
I'm in a new project here and I will start with NPR Minute and as before answer everything with the

00:08.590 --> 00:14.920
default settings and then NPM install with DASH Safe Express because we need that.

00:14.920 --> 00:21.100
And EJ's and I will also add body parser because I will need to parse that incoming body.

00:21.100 --> 00:27.070
And that is an important step which you also learn about earlier in this course hit enter and thereafter

00:27.070 --> 00:33.640
you can also of course install node mod and I will do that with safe depth node on here so that I can

00:33.640 --> 00:37.150
add a script to restart the server whenever I change my code.

00:37.450 --> 00:45.220
Speaking of that, let's add an app JS file to have a place to start our server and our express application.

00:45.400 --> 00:52.240
And in the package adjacent file I will add a start script where I simply run node app.

00:52.240 --> 00:58.540
JS Excuse me, not node but node mod of course, because I want to have all restarting with that.

00:58.540 --> 01:06.880
Let's go into the app JS file and create a normal express app by importing express y, I require express.

01:07.600 --> 01:09.350
And then you learned how this works.

01:09.370 --> 01:18.520
We can create an app with app and execute express as a function and simply call app list and free 1000

01:18.520 --> 01:20.110
to bring up that node server.

01:20.140 --> 01:24.550
This is a very minimal express application that doesn't do anything.

01:25.000 --> 01:29.960
Now I will have a couple of routes and you can create a routes folder for that.

01:29.980 --> 01:36.430
I will handle them in this app JS file, but I will create a views folder for my templates.

01:36.850 --> 01:39.280
Now let's start by adding the routes.

01:39.370 --> 01:42.060
I'll add my routes like this.

01:42.070 --> 01:43.600
I will have to get routes.

01:43.600 --> 01:48.820
So two pages and one post route, the route which is triggered when I submit that form.

01:49.240 --> 01:51.850
The first get route is for just slash.

01:52.000 --> 01:54.190
And there I want to render a view.

01:54.190 --> 01:58.660
Of course I want to render the page which holds the form I mentioned in the assignment tasks.

01:58.930 --> 02:06.250
I will also have a slash users route and there I also get my rest request rest next function.

02:06.250 --> 02:13.330
And here I will also render a view and this will be the view where I output the entered usernames.

02:13.900 --> 02:17.580
Now, last but not least, here is a post route and you can name this however you want.

02:17.590 --> 02:19.270
I'll name it add user.

02:19.630 --> 02:22.790
And in here I don't want to render a view.

02:22.810 --> 02:24.940
Instead I want to redirect.

02:25.390 --> 02:30.970
So here I will call, rest, redirect and redirect to just slash excuse me, to slash users, which

02:30.970 --> 02:32.770
is where we can see the entered users.

02:33.100 --> 02:35.140
So this is my basic setup here.

02:35.170 --> 02:37.990
Now we need to add a templating engine.

02:38.110 --> 02:44.060
Now, I already installed edges, but I will show the solution for all three engines you saw.

02:44.080 --> 02:49.480
So I will also add express handlebars and pug.

02:49.600 --> 02:53.380
And I will start with pie, just as I did in this module.

02:53.770 --> 02:55.330
So for that.

02:56.250 --> 03:05.850
Let's register this as a view engine by setting this global view engine variable or setting in our app.

03:06.030 --> 03:12.180
And then I set this to pack, which works out of the box because Express supports this out of the box.

03:12.690 --> 03:15.690
I get that views folder and that is the default.

03:15.690 --> 03:22.800
So the following setting can be omitted, but I'll still set my views to the views folder so that Express

03:22.800 --> 03:24.180
knows where to find them.

03:24.600 --> 03:33.090
Now in the views folder I will now add my index dot pack file and you can name this file however you

03:33.090 --> 03:33.450
want.

03:33.450 --> 03:38.070
This will basically be for my starting page and my users dot.

03:39.800 --> 03:40.850
Pike file.

03:41.300 --> 03:46.120
I will also add a layout folder and in there have my main layout pack.

03:46.190 --> 03:47.810
That name also is up to you.

03:48.140 --> 03:55.070
Now in main layout I will create a html five template already thanks to my ID generated in the pack

03:55.070 --> 04:01.910
format and I strongly recommend using an ID that supports emit and pack files like Visual Studio code

04:01.910 --> 04:03.320
that's out of the box.

04:03.740 --> 04:06.710
And now in there we got our nice document.

04:06.710 --> 04:12.680
We probably want to output the title dynamically here and we can do this with the help of Pack, remember

04:12.680 --> 04:13.280
and Pack.

04:13.280 --> 04:18.230
This was the syntax for outputting a single value and it will output page title here.

04:18.260 --> 04:21.140
This is some data I have to pass into my templates.

04:21.140 --> 04:22.070
Then of course.

04:23.010 --> 04:28.860
Now this is my basic setup, and you can add more, you can add styles, you can add scripts, whatever

04:28.860 --> 04:29.400
you want.

04:29.430 --> 04:34.950
Now, one thing I will add here and that's the last thing, is a very basic navigation here.

04:34.950 --> 04:38.630
And I will not even style it in a in any way.

04:38.640 --> 04:46.230
I will just have some navigation where I do have an anchor tag which leads to just slash and I'll have

04:46.230 --> 04:48.870
another anchor tag which leads to users.

04:48.870 --> 04:51.210
And I will of course give these some text.

04:51.210 --> 04:54.570
So here I will have enter user.

04:55.050 --> 05:01.800
Then I want to have like a pipe separator between my two links here and I will then have users here.

05:01.800 --> 05:06.990
So that's a very basic navigation obviously, and you can improve that with styling if you want.

05:07.710 --> 05:08.600
This is the layout.

05:08.610 --> 05:14.700
Now let's go to the index pack file and there we could extend that layout with the extents keyword.

05:14.700 --> 05:21.000
So here I will extend layouts and then main layout pack like this.

05:21.510 --> 05:24.740
Now we will automatically take this.

05:24.750 --> 05:31.440
I now just need to define a block in here and I will do this next to the header with the block keyword

05:31.440 --> 05:32.550
for my content.

05:32.550 --> 05:36.420
So this is done in the main layout in index pack.

05:36.420 --> 05:42.780
We then also refer to that block content, define what should be inserted into this block.

05:42.930 --> 05:50.520
And there I want to have a forum which leads to add user because remember that is my post route which

05:50.520 --> 05:52.470
I target or which I want to target.

05:52.890 --> 05:59.880
So add user like this and then also set the method to post, make sure to use a comma here to separate

05:59.880 --> 06:07.560
these two attributes and in the form also keep this very simple add the input of type text and also

06:07.560 --> 06:10.650
add a button of type submit.

06:10.650 --> 06:14.310
And on the button I'll put some text where I say add user.

06:15.000 --> 06:21.330
So this is a very basic setup for the index pack file and I'll copy that over to the user's pack file

06:21.330 --> 06:25.950
where I for now will simply output users in each one tag.

06:27.040 --> 06:31.550
Now with all these files added, let's go back to app JS and in here.

06:31.570 --> 06:34.300
Let's make sure we render the appropriate views.

06:34.450 --> 06:41.890
So for just slash, I want to render the index file here and I will inject an object which then in turn

06:41.890 --> 06:45.700
holds the data I want to inject into my view.

06:45.850 --> 06:50.650
And right now I don't output anything except for the page title in the layout.

06:50.830 --> 06:55.330
So we should make sure that we set this page title here and here.

06:55.330 --> 06:58.570
You can set it to add user or whatever you want.

06:58.780 --> 07:06.670
And for the users page here I will output the user's pack file and remember that you omit the file extension

07:06.670 --> 07:13.690
here and I will also pass in a page title here so that this can be used for the layout for this page.

07:13.960 --> 07:16.060
And there I'll just say users.

07:16.790 --> 07:16.940
Okay.

07:17.090 --> 07:22.220
So with all that prepared, let's run NPM start and see if that works.

07:22.430 --> 07:28.630
If you now enter localhost 3000, you should see this page and you can also go to users here.

07:28.640 --> 07:34.460
So my navigation works and if I now enter some user here, I'm forwarded to the user's page.

07:34.640 --> 07:35.960
So this is working.

07:35.960 --> 07:40.340
Let's now make sure we manage that data and output our users array.

07:40.340 --> 07:45.470
And for that I will follow the temporary approach I showed you in this module already.

07:45.680 --> 07:51.500
I will create a new constant users, which is an array and I will work with that array here.

07:51.500 --> 07:56.930
And keep in mind that this data is shared across requests and across users of your page.

07:56.930 --> 08:03.230
So not really something you would use in production for saving any data that well shouldn't be shared.

08:03.770 --> 08:07.040
So here users is now the array which I'll use.

08:07.280 --> 08:07.730
Whoops.

08:07.730 --> 08:10.130
Not here though in the post route of course.

08:10.370 --> 08:13.790
So here users and I want to push a new user onto it.

08:13.910 --> 08:14.930
Now important.

08:14.930 --> 08:21.950
We want to use the value the user enters into the form and for that we need to do adjustments.

08:22.610 --> 08:28.040
The first one is that an index pack for the input we need to assign a name.

08:28.040 --> 08:34.490
This is required so that the auto generated request has a key value pair where the key is the name by

08:34.490 --> 08:37.100
which we then can extract the entered value.

08:37.220 --> 08:40.520
So here name will be username.

08:40.520 --> 08:42.530
You can take any name you want here.

08:43.480 --> 08:45.970
With that added in the post drought.

08:45.970 --> 08:47.590
Here we can.

08:48.770 --> 08:55.610
Extract it, but to extract it, we need to do one other thing and that is we need to import the body

08:55.610 --> 08:56.480
parser.

08:56.690 --> 09:05.030
So let's import body parser here by requiring it from the body parser package like this.

09:05.600 --> 09:08.510
Remember, we did install the body parser here.

09:09.490 --> 09:12.370
And let's register it as a middleware.

09:12.370 --> 09:14.410
And we did this early in the course, too.

09:14.440 --> 09:20.800
You simply execute body parts as a function, and to avoid warnings, you need to pass in a configuration

09:20.800 --> 09:23.560
object where you set extended to false.

09:24.740 --> 09:31.280
With this set up, we got some logic or some help that will parse the incoming data for us.

09:31.370 --> 09:38.720
And now here we can push a new object where we set the name of the user equal to request.

09:38.900 --> 09:43.190
And then there is this special body property which holds the parsed body.

09:43.430 --> 09:50.990
And then there we will have a username key because username is the name we gave our input here.

09:52.170 --> 09:59.250
Now if that this user should get saved and that array, we now just need to output it here in our users

09:59.250 --> 09:59.850
page.

10:00.330 --> 10:07.920
And for that let's simply add a new property to the object we're passing to the template, so to say.

10:08.160 --> 10:09.810
And let's also name this users.

10:09.810 --> 10:13.560
You can give this any name you want though, and it will refer to users.

10:13.560 --> 10:15.780
So this can be confusing the value here.

10:15.780 --> 10:17.940
This user is part after the colon.

10:17.940 --> 10:19.440
That is our array here.

10:19.440 --> 10:25.950
The array where we add an element in the post root users here is simply the key by which we'll be able

10:25.950 --> 10:28.110
to use that data in the template.

10:28.770 --> 10:35.910
So now we can go into the user's template and use it and therefore here maybe below the H1 tag, I'll

10:35.910 --> 10:40.620
add an unordered list and in that list I now want to loop through all my users.

10:41.220 --> 10:48.450
We do that with the special each keyword, and then we define a variable name which holds the extracted

10:48.450 --> 10:49.890
user for each iteration.

10:49.920 --> 10:52.080
You can name this user or whatever we want.

10:52.350 --> 10:58.050
And then simply in users and users here of course, has to match the name.

10:58.050 --> 11:01.710
You gave your data here, so before the colon.

11:02.620 --> 11:09.880
Now we are in a loop here and we can output a list item where I simply print user name and there should

11:09.880 --> 11:18.400
be a dot name because in the post route we add a user as an object where the entered user name is stored

11:18.400 --> 11:19.810
in a name property.

11:20.560 --> 11:24.250
So with all that out of the way, I have an error yet.

11:24.280 --> 11:26.980
Body parts are you are ll encoded.

11:27.010 --> 11:28.510
Is the function you have to execute.

11:28.510 --> 11:30.880
Not body parts or itself is the function.

11:30.880 --> 11:33.820
But body parts are dot you are ll encoded.

11:34.570 --> 11:35.850
A little bit of oversight.

11:35.860 --> 11:38.170
You're on my side, so make sure you get this right.

11:38.170 --> 11:42.010
That is also the same syntax we used before in this course.

11:42.340 --> 11:48.550
And now with that, let's go to the entry user page and I'll enter Christian here.

11:49.360 --> 11:53.200
And click add user and we see user name here.

11:53.950 --> 11:59.470
Yeah, which of course makes sense because if I want to output something dynamic and not just text,

11:59.470 --> 12:06.460
I have to wrap it in my output, add value syntax with hash tag and then curly braces.

12:06.460 --> 12:09.250
So this is the correct syntax in the user spec file.

12:09.250 --> 12:18.190
And with that now if I reload this page, I see Christian and if I add more values here, we also see

12:18.190 --> 12:18.730
that.

12:18.850 --> 12:22.300
So this is now working and this is the solution with Puck.

12:22.480 --> 12:30.370
Now in the next step I'll delete this and re implement it with handlebars to implement this with handlebars,

12:30.400 --> 12:34.900
I'll keep that folder structure and I'll also keep the files around for reference.

12:35.080 --> 12:41.140
But now I will register handlebars as the engine and for handlebars you'll learn that you need to import

12:41.140 --> 12:41.440
it.

12:41.440 --> 12:48.400
So let's add that import here by requiring express handlebars and that we need to register this as an

12:48.400 --> 12:49.060
engine.

12:49.210 --> 12:56.170
So with app engine we can register that and now you can register it as well as a shortcut basically,

12:56.170 --> 12:58.570
which you already want to use as a file extension.

12:58.780 --> 13:07.240
And there I will execute express handlebars as a function and now we can use HBS as our view engine

13:07.240 --> 13:11.650
here, and we can create HBS files which will be handled by render.

13:11.950 --> 13:14.760
Now the general logic then is the same as for PAC.

13:14.770 --> 13:16.930
Of course, just a syntax differs.

13:16.930 --> 13:26.200
So let's create user start HBS and index dot HBS and also our main layout HBS.

13:26.530 --> 13:34.090
Now maybe you'll remember that for the layout we had to pass some configuration to the Express HBS function

13:34.090 --> 13:34.540
here.

13:34.840 --> 13:38.770
We had to set the default layout to Main.

13:40.010 --> 13:41.000
Layout here.

13:41.330 --> 13:47.510
The layout directory can be set but doesn't have to be set actually because we're using the views layouts

13:47.510 --> 13:50.270
folder, which is the default folder it will look in.

13:50.600 --> 13:55.310
But then we also need to set extension name to HBS.

13:55.340 --> 14:02.150
If we're not using the default of handlebars and we're not using that, we're using HBS with that set

14:02.150 --> 14:02.360
up.

14:02.360 --> 14:08.120
This should all work and now we can create an HTML five skeleton in the layout here.

14:08.660 --> 14:12.470
Now the documents title is something we want to output dynamically.

14:12.470 --> 14:15.020
Just as with PAC and for handlebars.

14:15.020 --> 14:21.440
Remember we had to double curly brace syntax so here we can again output date page title and this will

14:21.440 --> 14:25.430
now pull that from the data we're passing into the template.

14:26.000 --> 14:30.680
Now handlebars was a bit less flexible than Park was.

14:30.680 --> 14:33.470
We could not define blocks here.

14:33.470 --> 14:40.880
Instead, in the layout we have triple curly braces and then body in there, and this will serve as

14:40.880 --> 14:45.920
the single hook we can use where all the other content will be injected into.

14:46.970 --> 14:50.960
So if this set up, we can still set up a header just as we did it in Puck.

14:50.960 --> 14:53.450
So above that rendering hook.

14:53.450 --> 14:57.500
Here, I'll add a header in which I'll then.

14:58.150 --> 15:00.880
Just as I did it here at two links.

15:00.880 --> 15:08.710
So I'll have an anchor tag which leads leads to enter user and then I'll have like a pipe symbol and

15:08.710 --> 15:13.000
another anchor tag which leads to users like that.

15:13.000 --> 15:18.760
And of course, as before, you can tweak this style, this whatever you want, this is the layout and

15:18.760 --> 15:24.820
it will automatically be used because we set it as the default layout and all the other part we enter

15:24.820 --> 15:29.800
into our our HBS files will then be injected here into this body hook.

15:30.430 --> 15:38.020
So now in index HBS, which holds that form, I simply do add that form which leads to add user and

15:38.020 --> 15:39.850
sends a post request.

15:41.330 --> 15:46.730
And in there I now want to have my input of type text with a name of username.

15:46.730 --> 15:52.490
And that is important of course, because we're trying to extract that username here and add a button

15:52.490 --> 15:58.460
which is of type submit to submitted form and send that request where I say add user.

15:59.200 --> 16:01.750
Now that is set up just as we set it up in Pug.

16:01.960 --> 16:09.060
Let's now move on to the users page and there we have H one and H one tag and then an unordered list.

16:09.070 --> 16:11.110
So let's recreate it here.

16:11.140 --> 16:13.570
Users unordered list.

16:13.990 --> 16:17.350
And now I want to add or output my list.

16:17.560 --> 16:21.520
That also reminds me of a thing I forgot in pack the conditional output.

16:21.520 --> 16:21.940
Right.

16:22.510 --> 16:28.090
Well, let me quickly show you that the conditional output and pack would simply work by adding if.

16:28.090 --> 16:31.030
And then let's check if users length greater zero.

16:31.330 --> 16:40.780
If that is the case, we render that if that's not the case else we render no users found.

16:40.780 --> 16:42.580
Sorry for that little interruption.

16:42.580 --> 16:46.580
This is how we would render if statements in pack with that.

16:46.600 --> 16:49.090
Back to HBS there.

16:49.090 --> 16:50.560
I don't want to forget this.

16:50.560 --> 16:52.270
So let's start with the if statement.

16:52.480 --> 16:54.160
Remember block statements.

16:54.160 --> 17:02.080
So statements that wrap HTML code, use a hash tag if or hash tag else syntax here.

17:02.080 --> 17:07.120
So here it's a if statement and then you can't have conditions like user's length.

17:07.120 --> 17:09.970
Greater zero handlebars doesn't support this.

17:10.210 --> 17:18.160
Instead, we need some value like has users which we actually set up in our node express code.

17:18.400 --> 17:26.260
So for this route, the users route we need to pass in this additional field has users which holds the

17:26.260 --> 17:33.100
result of that check where I see users or check users length and see if users length is greater than

17:33.100 --> 17:33.790
zero.

17:33.790 --> 17:41.230
So the result here is true or false and will be stored in has users and has users is then be forwarded

17:41.230 --> 17:43.210
or injected into our template.

17:43.210 --> 17:45.550
And therefore we can now use that code.

17:45.850 --> 17:49.810
And then you also need to close that block, by the way, like this.

17:50.390 --> 17:55.610
So now anything between the opening and closing statement here is rendered conditionally, and that

17:55.610 --> 18:02.060
will be the unordered list where I now need another block statement to output my list of users again

18:02.060 --> 18:05.990
with the double curly braces and then hashtag each.

18:05.990 --> 18:07.670
That is what you use for a loop.

18:07.670 --> 18:16.640
And then here I simply loop through my users users because that is the key I am passing into my template

18:16.640 --> 18:17.060
here.

18:18.560 --> 18:23.630
So now I'm looping for that and we need to close that block to like this.

18:24.320 --> 18:27.980
And now the question just is, how do I access my user?

18:28.160 --> 18:34.850
Well, I want to output a list item and I do output my value then with the normal output of value syntax

18:34.850 --> 18:36.380
with double curly braces.

18:36.680 --> 18:45.020
And in there, the individual value for each iteration of this loop is stored in the this keyword.

18:45.020 --> 18:52.190
So I can say this name because again, this is the property where the entered user name will be stored

18:52.190 --> 18:53.210
in here.

18:54.860 --> 18:56.430
So now I got this set up.

18:56.450 --> 18:59.270
Now I also want to render a LS case here.

18:59.330 --> 19:02.570
So let me also add else just like this.

19:02.900 --> 19:06.620
And here I simply say no users found.

19:07.810 --> 19:10.330
So this is now the handlebars set up.

19:10.330 --> 19:11.740
Let's see if it works.

19:11.740 --> 19:14.920
If I reload this page, I see no user found.

19:15.370 --> 19:18.160
If I enter hands here, I see hands.

19:18.430 --> 19:22.630
And if I enter Helena, here I see Helena.

19:22.720 --> 19:24.490
So this is not working again.

19:24.490 --> 19:31.480
And this is the solution with handlebars, with our tiny addition of how it is solved with pack for

19:31.480 --> 19:32.380
the if statement.

19:32.980 --> 19:35.680
With Handlebars and puck out of the way.

19:35.710 --> 19:39.550
Let's solve this a third time with Aegis.

19:39.730 --> 19:43.240
And for this in Atreus, we need to change the app engine.

19:43.420 --> 19:45.760
I'll copy out that HBS engine.

19:45.760 --> 19:47.140
Then we could leave that.

19:47.560 --> 19:49.360
It doesn't hurt if we define this.

19:49.360 --> 19:53.290
I'll just not use it because I'll use edges for this.

19:53.290 --> 19:58.750
We don't need to define the engine because EJ's is a package which is supported out of the box.

19:58.870 --> 20:01.330
You just need to make sure you installed edges.

20:01.330 --> 20:10.210
But we did this and now we just need to create our Edge's files so users dot Edge's and indexed on Edge's

20:10.660 --> 20:17.200
now Edge's dozens of port layouts but it supports partials or includes, if you remember, so we can

20:17.200 --> 20:18.580
create a new folder name.

20:18.580 --> 20:21.190
It includes you could name it differently.

20:21.430 --> 20:23.590
And now let's see what is shared.

20:23.620 --> 20:30.490
Well, if we have a look at the layouts we used before, basically this entire part here is shared and

20:30.490 --> 20:32.080
the end of the document is shared.

20:32.080 --> 20:35.710
So this is the only part which is not shared across pages.

20:36.160 --> 20:43.180
Well, therefore it includes we can again add a hat to Edge's file and maybe an end to Edge's file.

20:43.870 --> 20:52.990
And then we can take this part from the HBS file all above body and add this to head edges.

20:53.230 --> 20:59.260
Obviously, we need to replace that syntax here with Edge's syntax, and if you remember that was smaller,

20:59.260 --> 21:04.390
then percentage equals page title to output a value in place.

21:05.550 --> 21:13.770
And of course all the for the end of our template, we copy the closing body and HTML tag and add this

21:13.770 --> 21:16.290
to end as well.

21:16.290 --> 21:24.270
And with this added here, we can now go on to index edges and start by including the head for this.

21:24.270 --> 21:31.800
You added the normal Edge's tag, but then with a minus to add an escaped HTML code and there we use

21:31.800 --> 21:37.080
to include keyword and go to includes and then head Edge's.

21:37.780 --> 21:40.890
And we can already do that for the body of the document too.

21:40.900 --> 21:45.430
So includes and has like that.

21:45.910 --> 21:51.910
Now in between comes the content of this page, which is this form which I can just copy from the handlebars

21:51.910 --> 21:52.390
page.

21:52.420 --> 21:55.780
It doesn't contain any special syntax which we would have to change.

21:56.500 --> 22:00.350
We can copy that entire code and move it over to users edges.

22:00.430 --> 22:03.070
But of course, in there we output something different.

22:03.310 --> 22:11.020
We first of all have our H1 tag where we say users, but then I want to output if statement and in one

22:11.020 --> 22:18.130
branch of the if statement my loop now if statement is written by using a normal edge's tag with neither

22:18.130 --> 22:21.640
a minus nor equal sign, but just like this.

22:22.090 --> 22:30.760
And then I check if users length is greater than zero, I also add an opening curly brace and once I'm

22:30.760 --> 22:36.580
done with the block of HTML code, I add another Edge's tag with a closing curly brace.

22:36.940 --> 22:39.500
And in between we have our HTML code.

22:39.520 --> 22:45.820
Now that HTML code is this unordered list which I can just copy from the HBS file.

22:46.330 --> 22:47.980
Let's move it in there.

22:48.700 --> 22:51.820
But of course, this looping syntax has to change.

22:52.150 --> 22:59.680
There we again use edges to simply create a for loop, and now you can again use a for off loop, as

22:59.680 --> 23:00.940
we did in this module.

23:00.970 --> 23:03.700
I will mix it up and use a for each loop.

23:03.700 --> 23:09.650
Still a normal JavaScript function for each tags a function.

23:09.670 --> 23:16.120
You can also use an arrow function here which gets the user injected automatically, and that should

23:16.120 --> 23:18.070
be users for each, by the way.

23:18.100 --> 23:22.930
So that function here which you pass to for each, is executed for you by JavaScript.

23:22.930 --> 23:26.800
For each iteration it gives you the user you're currently looking at.

23:27.130 --> 23:32.560
Then I have that arrow next generation JavaScript and the opening curly brace.

23:32.860 --> 23:40.900
And once we're done here again, I have my Edge's text and here I have to close that curly brace and

23:40.900 --> 23:46.600
that record here from for each we have to close that to and you can add this semicolon but you don't

23:46.600 --> 23:47.290
need to.

23:48.010 --> 23:57.190
Now in here to output that I have my equal syntax here so the please output this inline syntax and there

23:57.190 --> 23:58.510
I refer to user.

23:58.510 --> 24:04.360
So this user I get passed into this function for every iteration and then name.

24:05.980 --> 24:10.780
Now before we see if that works, let's also add a else statement here.

24:11.110 --> 24:17.800
So after this closing curly brace of the if statement, I'll add Al's open a new curly brace and close

24:17.800 --> 24:20.140
that eventually to once we're done.

24:21.070 --> 24:26.530
And in that Alex BLOCK, I will simply say no users found like this.

24:27.350 --> 24:30.770
So now we should, in theory, have everything we need.

24:31.190 --> 24:33.340
Let's reload this page.

24:33.350 --> 24:34.730
No users found.

24:35.410 --> 24:37.360
And let's enter hands again.

24:37.360 --> 24:38.920
And this is looking pretty good.

24:39.130 --> 24:42.900
And of course, it should also work if we add another user.

24:42.910 --> 24:46.660
So this is now the assignment solved with edges.

24:47.020 --> 24:50.770
So now you saw all these templating engines in action.

24:50.770 --> 24:54.550
Again, you hopefully got a bit more used to them.

24:54.670 --> 25:00.250
And I can only encourage you to, of course, keep on practicing with them in your own projects.
