WEBVTT

1
00:00:01.908 --> 00:00:03.555
<v Instructor>Now to a real database,</v>

2
00:00:03.555 --> 00:00:07.387
I'll use MongoDB and I do already cover MongoDB

3
00:00:07.387 --> 00:00:08.605
throughout this course.

4
00:00:08.605 --> 00:00:10.688
I have whole sections dedicated to it,

5
00:00:10.688 --> 00:00:13.033
so check out these sections if anything

6
00:00:13.033 --> 00:00:15.548
is unclear about MongoDB.

7
00:00:15.548 --> 00:00:20.025
It's a no SQL database and we can install it locally.

8
00:00:20.025 --> 00:00:22.587
On mongodb.com you will find instructions

9
00:00:22.587 --> 00:00:26.660
on how to do that, but you can also try it for free

10
00:00:26.660 --> 00:00:28.896
and get started with MongoDB atlas,

11
00:00:28.896 --> 00:00:31.870
which is basically a cloud service,

12
00:00:31.870 --> 00:00:34.736
a cloud hosting service for a MongoDB database

13
00:00:34.736 --> 00:00:37.870
and you can get started with it for free.

14
00:00:37.870 --> 00:00:39.406
Just fill out this form here,

15
00:00:39.406 --> 00:00:41.856
create an account and once you did that,

16
00:00:41.856 --> 00:00:43.848
you will be walked through a wizard

17
00:00:43.848 --> 00:00:47.000
to create a new MongoDB cluster.

18
00:00:47.000 --> 00:00:48.727
If you do walk through the creation wizard

19
00:00:48.727 --> 00:00:51.197
for the first time, just make sure that you use

20
00:00:51.197 --> 00:00:53.832
the free tier option in all the places

21
00:00:53.832 --> 00:00:55.336
where you have a choice.

22
00:00:55.336 --> 00:01:00.062
Again, I do cover this in the MongoDB course module already.

23
00:01:00.062 --> 00:01:04.170
Now, once you did create a cluster and you logged in,

24
00:01:04.170 --> 00:01:06.341
you'll be greeted with something like this.

25
00:01:06.341 --> 00:01:08.461
Now first of all, you should make sure

26
00:01:08.461 --> 00:01:12.159
that under database access, you have at least one user

27
00:01:12.159 --> 00:01:15.851
and you'll then need to set a password here,

28
00:01:15.851 --> 00:01:18.781
which you memorize because we'll need that

29
00:01:18.781 --> 00:01:22.291
to connect on our fronted application.

30
00:01:22.291 --> 00:01:24.839
In addition under network access,

31
00:01:24.839 --> 00:01:28.397
make sure that you add your current IP address here

32
00:01:28.397 --> 00:01:31.038
to make sure that your local application

33
00:01:31.038 --> 00:01:35.170
is able to send requests to your cluster.

34
00:01:35.170 --> 00:01:36.691
And once you did all that,

35
00:01:36.691 --> 00:01:38.850
we can connect our Deno app.

36
00:01:38.850 --> 00:01:42.091
To do that, we'll use another third party module

37
00:01:42.091 --> 00:01:46.193
because there turns out to be a MongoDB module.

38
00:01:47.720 --> 00:01:49.349
Here it is, the Mongo module.

39
00:01:49.349 --> 00:01:52.269
The Mongo module makes connecting and working

40
00:01:52.269 --> 00:01:56.629
to and with a Mongo database very, very easy.

41
00:01:56.629 --> 00:01:58.800
You get some basic documentation here

42
00:01:58.800 --> 00:02:01.230
but in the end, this is just a wrapper

43
00:02:01.230 --> 00:02:04.709
for the native Rust MongoDB library

44
00:02:04.709 --> 00:02:07.861
and Rust is simply a programming language,

45
00:02:07.861 --> 00:02:10.960
which is being used by Deno under the hood.

46
00:02:10.960 --> 00:02:12.416
So, Deno is built with Rust

47
00:02:12.416 --> 00:02:14.599
and you typically don't need to care about this

48
00:02:14.599 --> 00:02:17.210
but here it matters because that means

49
00:02:17.210 --> 00:02:20.990
that the MongoDB library for Rust also works with Deno.

50
00:02:20.990 --> 00:02:24.090
All you need is a wrapper and this package here,

51
00:02:24.090 --> 00:02:27.349
this module here, deno_mongo, is such a wrapper.

52
00:02:27.349 --> 00:02:28.932
So, you will just be able to use it

53
00:02:28.932 --> 00:02:32.097
in types with code without worrying about anything else.

54
00:02:32.097 --> 00:02:34.270
Now, when it comes to using it,

55
00:02:34.270 --> 00:02:36.131
we can copy this import here,

56
00:02:36.131 --> 00:02:40.628
here you also see a version being locked in, in the URL,

57
00:02:40.628 --> 00:02:42.313
which is always a good idea.

58
00:02:42.313 --> 00:02:44.955
It ensures that this code will also work in month

59
00:02:44.955 --> 00:02:46.125
or two from now.

60
00:02:46.125 --> 00:02:48.525
So, I will copy this URL here

61
00:02:48.525 --> 00:02:52.845
and now with that copied, we wanna use it in the place

62
00:02:52.845 --> 00:02:55.635
where we want to connect to the database.

63
00:02:55.635 --> 00:02:58.532
Now it's up to you where you wanna do that.

64
00:02:58.532 --> 00:03:00.965
I'll add a new folder, Helpers

65
00:03:00.965 --> 00:03:03.752
and in there add a db.ts file.

66
00:03:03.752 --> 00:03:06.853
And I'll put my database management logic in there.

67
00:03:06.853 --> 00:03:11.853
This is an optional pattern but one I'd like to use here.

68
00:03:11.918 --> 00:03:16.057
So, now I import Mongo client from this Mongo library here

69
00:03:16.057 --> 00:03:20.530
in the db.ts file and you'll now see how we can connect

70
00:03:20.530 --> 00:03:22.243
with these lines here.

71
00:03:22.243 --> 00:03:25.278
And with this line, we then also establish a connection

72
00:03:25.278 --> 00:03:29.013
to a database and then even to a specific collection.

73
00:03:29.013 --> 00:03:31.573
As you learned in the Mongo course section,

74
00:03:31.573 --> 00:03:35.593
MongoDB works with collections and documents.

75
00:03:35.593 --> 00:03:39.751
I'll copy these three lines here, over into db.ts

76
00:03:39.751 --> 00:03:42.304
and with that we first of all instantiate

77
00:03:42.304 --> 00:03:44.483
the imported Mongo client,

78
00:03:44.483 --> 00:03:47.100
then we use this client object

79
00:03:47.100 --> 00:03:48.701
to connect with a URL

80
00:03:48.701 --> 00:03:51.410
and now here we need to provide the URL

81
00:03:51.410 --> 00:03:53.581
to our MongoDB cluster.

82
00:03:53.581 --> 00:03:54.989
So, back on the cluster,

83
00:03:54.989 --> 00:03:59.320
if you click on connect and then connect your application,

84
00:03:59.320 --> 00:04:00.181
we get that URL.

85
00:04:00.181 --> 00:04:03.691
So, we can just copy this full URL

86
00:04:03.691 --> 00:04:05.770
and then insert it here.

87
00:04:05.770 --> 00:04:10.421
Now, we need to insert our data for the username

88
00:04:10.421 --> 00:04:14.541
and for the password and you don't need to copy my password,

89
00:04:14.541 --> 00:04:16.977
it will be changed when you're watching this.

90
00:04:16.977 --> 00:04:20.868
So, insert your username and your password here,

91
00:04:20.868 --> 00:04:24.300
then you can remove this db name thing here

92
00:04:24.300 --> 00:04:29.300
and just have mongodb.net? and then those query parameters

93
00:04:29.851 --> 00:04:32.820
and with that the client will go ahead

94
00:04:32.820 --> 00:04:35.411
and connect to this URL.

95
00:04:35.411 --> 00:04:38.760
Thereafter, we can switch to a specific database

96
00:04:38.760 --> 00:04:40.611
by calling database on the client

97
00:04:40.611 --> 00:04:42.349
and that's something I'll do here.

98
00:04:42.349 --> 00:04:45.021
And I'll connect to the todos database,

99
00:04:45.021 --> 00:04:46.291
however, the name is up to you,

100
00:04:46.291 --> 00:04:50.043
maybe name it todo-app, really up to you.

101
00:04:52.443 --> 00:04:55.641
And I'll also rename this file to, db_client.

102
00:04:55.641 --> 00:04:59.392
As a side note, the official Deno style guide recommends

103
00:04:59.392 --> 00:05:02.923
that your file names should be, well named like this.

104
00:05:02.923 --> 00:05:05.888
If you multiple words that you wanna combine together,

105
00:05:05.888 --> 00:05:08.432
you should use a underscore, not a dash.

106
00:05:08.432 --> 00:05:11.043
In Node, you would typically use a dash,

107
00:05:11.043 --> 00:05:13.512
in Deno, they want you to use a underscore.

108
00:05:13.512 --> 00:05:15.251
Technically, it makes no difference

109
00:05:15.251 --> 00:05:18.690
but of course here, I wanna follow the Deno style guide,

110
00:05:18.690 --> 00:05:20.794
so I'll use db_client.

111
00:05:20.794 --> 00:05:24.330
Back to the database though, with that we're setting up

112
00:05:24.330 --> 00:05:27.344
our database here and now we want to make sure

113
00:05:27.344 --> 00:05:30.981
that we can use this database from outside this file.

114
00:05:30.981 --> 00:05:33.338
To ensure that this is possible,

115
00:05:33.338 --> 00:05:37.259
I'll create a new function here,

116
00:05:37.259 --> 00:05:41.743
getDb and I'll return my database here.

117
00:05:43.406 --> 00:05:46.980
Now, why am I using this approach?

118
00:05:46.980 --> 00:05:49.077
I'm using this approach because I'll also wrap

119
00:05:49.077 --> 00:05:54.077
the other functionality here into a connect function.

120
00:05:54.448 --> 00:05:55.593
The reason for that is,

121
00:05:55.593 --> 00:05:58.728
that now I wanna export both connect and getDB

122
00:05:58.728 --> 00:06:02.197
and we can then call connect from inside app.ts for example

123
00:06:02.197 --> 00:06:05.884
and getDB from inside todos to get access to the DB.

124
00:06:05.884 --> 00:06:07.368
For this pattern to work,

125
00:06:07.368 --> 00:06:12.368
I'll just make sure that I set up my DB as a variable

126
00:06:12.782 --> 00:06:14.888
and set the type to database,

127
00:06:14.888 --> 00:06:19.660
which is a type you can also import from the mod.ts file

128
00:06:19.660 --> 00:06:22.200
from the Mongo library.

129
00:06:22.200 --> 00:06:25.821
And then I assign a value here to DB in line 11,

130
00:06:25.821 --> 00:06:27.693
instead of the connect function

131
00:06:27.693 --> 00:06:32.053
and we always return the latest DB object here in getDb.

132
00:06:32.053 --> 00:06:33.683
I use this pattern to make sure

133
00:06:33.683 --> 00:06:35.872
that whenever we reach out to the database,

134
00:06:35.872 --> 00:06:40.872
we really are guaranteed to get connected database.

135
00:06:42.642 --> 00:06:45.808
Now, we can export this connect function

136
00:06:45.808 --> 00:06:50.469
and export getDb and now in app.ts, I wanna call connect.

137
00:06:50.469 --> 00:06:53.665
So therefore here, I'll go to app.ts

138
00:06:53.665 --> 00:06:58.190
and import connect in curly braces

139
00:06:58.190 --> 00:07:02.467
from ./helpers/db_client.ts

140
00:07:02.467 --> 00:07:04.459
and then simple call connect,

141
00:07:04.459 --> 00:07:07.808
maybe here before we set up the application,

142
00:07:07.808 --> 00:07:09.456
wherever you want.

143
00:07:09.456 --> 00:07:12.157
We need the curly brace import here

144
00:07:12.157 --> 00:07:14.568
because connect is a named export

145
00:07:14.568 --> 00:07:16.707
and you'll learn more about named exports

146
00:07:16.707 --> 00:07:19.597
in the modern JavaScript with Node section.

147
00:07:19.597 --> 00:07:21.555
In the end, this is a named export

148
00:07:21.555 --> 00:07:24.012
because we have the export keyword right in front

149
00:07:24.012 --> 00:07:25.939
of the function declaration

150
00:07:25.939 --> 00:07:30.300
and we're exporting multiple things in this file by name,

151
00:07:30.300 --> 00:07:32.483
because we have multiple export statements.

152
00:07:33.821 --> 00:07:35.526
So this is how we import connect,

153
00:07:35.526 --> 00:07:38.720
we then execute it and this should be it.

154
00:07:38.720 --> 00:07:40.288
And now in todo.ts,

155
00:07:40.288 --> 00:07:45.288
we can also import something from the Helpers folder,

156
00:07:46.530 --> 00:07:51.130
db_client.ts and that something is the getDb function

157
00:07:51.130 --> 00:07:53.220
and now we can continue with that

158
00:07:53.220 --> 00:07:56.013
and we can call this function whenever we wanna get access

159
00:07:56.013 --> 00:07:58.653
to the database and then we can use the database

160
00:07:58.653 --> 00:08:01.620
to store data, get data and so on.

161
00:08:01.620 --> 00:08:03.163
So, let's do that next.

