WEBVTT

00:02.290 --> 00:07.110
So I defined my basic set up for a new node express rest API.

00:07.330 --> 00:13.590
We have a route in its controller and now of course we need to return some data there,

00:13.630 --> 00:20.830
so instead of the controller, in get posts we want to return some data because you learned rest APIs

00:20.830 --> 00:22.810
are all about data.

00:22.990 --> 00:29.290
We will not call res render in here because we will not render a view, you will not see me call res

00:29.320 --> 00:35.940
render anymore again because rest APIs simply don't render views because they don't return html

00:35.950 --> 00:44.020
and a rendered view is html. Instead we'll do something we already saw in the async request module of

00:44.050 --> 00:45.260
this course,

00:45.370 --> 00:53.260
we will return a json response. Json is a method provided by expressjs that allows us to conveniently

00:53.260 --> 00:59.680
return a response with json data, with the right headers being set and so on. We can pass a normal

00:59.680 --> 01:06.690
javascript object to json and it will be converted to the json format and sent back as a response to

01:06.730 --> 01:09.100
the client who sent the request

01:09.100 --> 01:15.580
and there, we can send anything you want, like post which could be an array of posts where we have a title,

01:15.850 --> 01:18.460
first post and some content,

01:18.460 --> 01:21.450
this is the first post

01:21.450 --> 01:23.230
and of course I'm just making up things here,

01:23.230 --> 01:25.360
this is of course just some dummy data.

01:25.690 --> 01:31.300
So we call res json and this will send a json response.

01:31.300 --> 01:35.770
Now when sending json responses, we also want to send the status code explicitly,

01:35.950 --> 01:41.590
200 would be the default but we'll also work with different status codes throughout this module and we want

01:41.590 --> 01:43.720
to be clear about the status code

01:43.750 --> 01:50.140
our response has so that in the client we have an easy way of handling it because you always have to remember

01:50.440 --> 01:57.640
that the client now has to render the user interface based on your response and therefore especially

01:57.730 --> 02:04.330
error codes are super important to pass back to the client so that the client can just have a look at

02:04.330 --> 02:06.560
the status code and find out

02:06.670 --> 02:13.900
should I render my normal user interface because the requests suceeded or did I get an error

02:14.010 --> 02:17.840
and I want to render an appropriate error interface.

02:18.170 --> 02:22.830
Previously in the course we sent the whole interface so the client didn't have to worry about that,

02:22.840 --> 02:24.240
now the client has to

02:24.300 --> 02:27.750
and therefore setting the right status code is important.

02:28.890 --> 02:35.280
Now with that, we have some logic in place to return some dummy data, with npm start

02:35.310 --> 02:39.760
we can now start up our server here and now we have it running

02:39.900 --> 02:41.700
and now we can visit a browser

02:41.910 --> 02:48.450
and for now we can simply enter localhost 8080/feed/posts,

02:48.450 --> 02:53.090
so this path we defined and you should get some json data here.

02:53.190 --> 02:55.590
If you open your developer tools

02:59.320 --> 03:05.990
and you go to the network tab in there and you reload that page, you also see that request here

03:06.020 --> 03:09.590
and if you inspect it, you of course see the response body

03:09.590 --> 03:15.620
but if you have a look at the headers, you see that in the response headers we see that application

03:15.620 --> 03:23.210
json was set automatically by our server because we used that json method and we indeed get back

03:23.210 --> 03:26.700
the content we defined here, we can see it here too.

03:26.750 --> 03:29.220
So this is a quick and easy way of testing this.

03:29.240 --> 03:32.420
Now obviously our users would never visit it like this,

03:32.450 --> 03:36.040
they could if we don't require authentication at least

03:36.260 --> 03:39.470
but this is of course not how we intend our API to be used,

03:39.590 --> 03:46.190
instead we'll build a user interface that will then use this behind the scenes and render a beautiful

03:46.190 --> 03:49.030
UI automatically with that data.

03:49.070 --> 03:53.590
So directly accessing the data like this is of course not the plan.

03:53.990 --> 04:01.220
Now before I come back to the user interface part though, let me show you how we can easily and conveniently

04:01.220 --> 04:05.680
test our rest API even without entering this into the browser

04:06.050 --> 04:07.460
and for that let me do something which

04:07.490 --> 04:09.080
you couldn't enter into the browser,

04:09.170 --> 04:11.640
let's define a post route.

04:11.690 --> 04:17.090
So besides being able to get posts, we typically would also have some routes that allow us to add

04:17.090 --> 04:18.380
new posts.

04:18.380 --> 04:29.000
Now if we quickly think about our different http methods, then for posting new posts, post would be a great

04:29.240 --> 04:30.260
http method.

04:30.260 --> 04:33.770
We could also use put, that would not necessarily be wrong,

04:33.800 --> 04:40.190
put would also be a valid method to be used for creating a resource but especially when we're talking

04:40.190 --> 04:45.200
about posts and not something like user data which only exists once but posts,

04:45.200 --> 04:51.170
there might be multiple posts and therefore adding or appending sounds good to me and hence I want to

04:51.170 --> 04:57.110
use the post method instead of put. If we were to manage the user data here, then maybe put might be better

04:57.170 --> 05:01.130
because there we indeed create or overwrite the resource.

05:01.430 --> 05:07.570
So post it is and hence I will name this post post which sounds a bit strange,

05:07.610 --> 05:09.320
it's just my naming convention,

05:09.350 --> 05:14.720
I have the http method first and then basically the object that's gets created.

05:14.720 --> 05:16.240
You could name this totally different,

05:16.280 --> 05:20.980
you could name this create post if you want to,

05:21.200 --> 05:23.580
let's maybe name it like this because it's clearer

05:24.080 --> 05:27.370
then I have my normal function, that of course does not change

05:27.380 --> 05:31.880
and here, we would of course reach out to the database. We'll do so soon,

05:31.940 --> 05:39.410
for now I'll just note that we have to create that in the database and I will just return the response

05:39.500 --> 05:41.890
assuming that we did create a post.

05:42.020 --> 05:49.640
So I'll send back a json response and there we might be having a message like posts created successfully

05:50.210 --> 05:52.680
and we send back some post data

05:52.910 --> 05:57.340
and now that is at least data I want to parse from the incoming request.

05:57.560 --> 05:59.810
So I expect to get a title let's say

06:00.050 --> 06:02.360
and I still parse that on the request body,

06:02.360 --> 06:08.690
so essentially what we always did throughout this course and I might be extracting a content too, also from

06:08.690 --> 06:12.350
request body, just what we did throughout the course.

06:12.350 --> 06:17.820
And here I return the created post with an ID that was generated automatically let's say

06:18.170 --> 06:20.650
as mongodb does it for us, here

06:20.660 --> 06:25.820
I'm just doing it with some dummy code and the title which I received and the content and this could

06:25.820 --> 06:29.830
just be the confirmation that it was stored in the database successfully

06:29.900 --> 06:34.090
which of course it wasn't thus far but which we'll add. Now

06:34.220 --> 06:38.770
first of all, I also want to set a special status code here with the status method,

06:38.960 --> 06:41.290
I want to set it to 201.

06:41.350 --> 06:42.900
The default would be 200

06:42.980 --> 06:47.720
and this would not be horribly wrong but 201 is the better status code to use

06:47.810 --> 06:55.140
if you want to tell the client success a resource was created. Just 200 is just success,

06:55.200 --> 06:58.340
201 also indicates that we created a resource

06:58.370 --> 07:00.790
and of course we did here at least in theory

07:01.040 --> 07:04.050
so manually setting this makes a lot of sense.

07:04.160 --> 07:07.290
With that we're sending this success code,

07:07.340 --> 07:17.250
now what is missing? Well a way of parsing that data. I did install body parser in an earlier lecture but

07:17.250 --> 07:18.790
we also need to set it up

07:18.870 --> 07:25.820
and now here's one important thing. You need to remember that we are working with incoming json data,

07:25.860 --> 07:33.630
we expect our clients to communicate with our API, with requests that contain json data just as we

07:33.630 --> 07:40.570
return json data. Json data is the data format we want to use both for requests and for responses

07:41.010 --> 07:44.780
and therefore I will use my body parser of course,

07:44.850 --> 07:46.360
that's why I installed it,

07:46.560 --> 07:49.790
so let's require it here in our app.js file

07:50.310 --> 07:54.740
but when I initialize it, I initialize it differently than what we used it for

07:54.740 --> 08:01.620
in the majority of the course because there I initialized it by calling url encoded and configuring

08:01.620 --> 08:02.510
that.

08:02.580 --> 08:11.810
Now this is great for data formats or for requests that hold data in the format of xwww form url

08:11.830 --> 08:13.150
encoded,

08:13.200 --> 08:16.340
you might remember we saw that in earlier lectures too.

08:16.680 --> 08:24.220
Now this is the default data that data has if submitted through a form post request.

08:24.260 --> 08:25.450
We don't need that here

08:25.460 --> 08:28.410
however, we don't need form data,

08:28.430 --> 08:30.310
we have no form data

08:30.320 --> 08:37.940
instead we want to use body parser with the json method which is able to parse json data from incoming

08:37.940 --> 08:38.650
requests.

08:38.810 --> 08:46.450
So this is good for application json as is the official name that you will find in the header

08:46.580 --> 08:52.070
and this is how the data will be appended to the request that reaches our server.

08:52.160 --> 08:58.370
So we need this middleware to parse incoming json data so that we are able to extract it on the body

08:58.580 --> 09:04.360
because that will be added by our body parser, this body field on the incoming request.

09:04.400 --> 09:08.550
With that we can extract all that data but how can we now test this?

09:08.810 --> 09:15.530
We can't create a form in which we submit because then we would be back to xwww form url encoded

09:15.530 --> 09:21.590
data and it would not be a realistic test because you just don't use forms like this when working with

09:21.590 --> 09:23.330
rest APIs,

09:23.330 --> 09:29.500
instead you can use a very handy special tool and that is postman.

09:29.560 --> 09:34.220
Now we will build or work with a real frontend very soon,

09:34.220 --> 09:34.940
no worries,

09:34.940 --> 09:42.100
so we'll not be stuck to some helping tool for the rest of this course but it's still a very useful API

09:42.110 --> 09:44.360
development tool which you should be aware of.

09:44.390 --> 09:50.390
It's free to use and you can simply google for it to get it from getpostman.com, there you can

09:50.390 --> 09:53.570
just download postman and walk through the installer.

09:53.660 --> 09:55.220
Again you don't need to pay,

09:55.220 --> 09:56.500
you don't need to sign up,

09:56.510 --> 09:59.420
it might ask you for that but you don't need to.

09:59.470 --> 10:06.020
Once you did load it, you'll end up on a starting page like this you can just close that window and you'll

10:06.020 --> 10:08.990
then end up in a user interface like this one.

10:08.990 --> 10:13.490
Now you can read the official postman docs to learn about all the things you can do but in the end what

10:13.490 --> 10:15.030
you can do is you can enter a

10:15.050 --> 10:21.320
url here, then choose your different http methods and you see more than I showed you but you won't

10:21.320 --> 10:22.790
need most of them,

10:22.820 --> 10:26.000
they're not required for typical crud operations.

10:26.090 --> 10:29.990
So you can choose your method here and then send a request,

10:30.200 --> 10:36.300
you can also add your own headers and you will see the response in the area below this.

10:36.320 --> 10:44.660
So here I can send a request to localhost 8080 which is where my node server runs on and then

10:44.750 --> 10:48.060
feed/host,

10:48.140 --> 10:51.770
this should be the route I want to reach this controller on.

10:51.830 --> 10:54.320
Now for that I first of all need to create the route.

10:54.560 --> 11:06.230
So in my feed routes file, I'll add a post route for /posts where I use the feed controller create post

11:06.350 --> 11:07.430
action,

11:07.430 --> 11:13.240
so this will be reached through a post request to feed/posts.

11:13.450 --> 11:18.530
Let's configure such a request here, feed/posts, this is exactly where I'm sending it to

11:18.820 --> 11:23.220
and now I just need to switch to the post method.

11:23.260 --> 11:28.570
Now with that switched, I also need to be able to send some data and you see that the body tab now got

11:29.290 --> 11:36.850
enabled, with get it was disabled because get requests can't hold a body, post requests can. Here you

11:36.850 --> 11:40.740
can now choose your format and we don't need any of these,

11:40.750 --> 11:42.190
instead I'll choose raw 

11:42.310 --> 11:46.920
and then there in the dropdown, json, application json.

11:47.140 --> 11:49.440
So now here we can write some json data

11:49.540 --> 11:55.390
and json has a format where you have two surrounding curly braces and then you have key value pairs

11:55.600 --> 12:00.850
where if you're writing it manually, the keys have to be wrapped in double quotation marks.

12:00.850 --> 12:03.730
So here we can see what we expect to get,

12:03.790 --> 12:07.360
we expect to get a title and we expect to get a content,

12:07.420 --> 12:10.550
so we want to pass these two fields to our server.

12:10.810 --> 12:15.270
So here we can pass the title and this can be my first post

12:17.510 --> 12:22.730
or actually my second post because we use the first one as a dummy post in our get route and then

12:22.730 --> 12:31.390
here, we have the content, this is the content of my first post or of my second post of course.

12:31.430 --> 12:34.850
So this is now my request,

12:34.850 --> 12:42.770
we can now click send and we get back a response which looks good because it's the response I defined in

12:42.770 --> 12:48.020
my controller action with this message and the post that was created

12:48.020 --> 12:53.540
and this is now the data we would typically use in our receiving client.

12:53.540 --> 12:59.300
You also see the headers that were sent on the response, these were set automatically by express especially

12:59.300 --> 13:06.650
application json matters of course and this is now how we can test all our endpoints because we can

13:06.650 --> 13:12.620
just enter them here and then switch the http methods, pass any extra headers or bodies we might need

13:12.920 --> 13:15.700
and therefore we get everything we need to test our API.

13:15.920 --> 13:21.080
Still we will also work with a real frontend so that we have something beautiful to look at and to

13:21.080 --> 13:22.680
see that in a real app

13:22.880 --> 13:25.050
but this is a tool you will use a lot

13:25.050 --> 13:26.030
when working with rest

13:26.030 --> 13:26.620
APIs.
