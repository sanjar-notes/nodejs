WEBVTT

1
00:00:02.300 --> 00:00:04.930
<v Instructor>I mentioned one other modern feature</v>

2
00:00:04.930 --> 00:00:06.970
which we can use a node now,

3
00:00:06.970 --> 00:00:09.230
which I didn't use throughout this entire course.

4
00:00:09.230 --> 00:00:12.610
And that would be promises in core APIs.

5
00:00:12.610 --> 00:00:13.650
And that's important.

6
00:00:13.650 --> 00:00:16.220
I did use promises throughout the course,

7
00:00:16.220 --> 00:00:20.730
we have whole modules dedicated to promises and async await.

8
00:00:20.730 --> 00:00:24.270
So you absolutely should know what promises are,

9
00:00:24.270 --> 00:00:26.930
how they work and why we use them by now.

10
00:00:26.930 --> 00:00:30.000
We use them because a lot of third party libraries

11
00:00:30.000 --> 00:00:34.090
and also our own code can of course utilize promises

12
00:00:34.090 --> 00:00:38.220
to handle potentially asynchronous operations.

13
00:00:38.220 --> 00:00:42.210
Now there is one part of the node apps we wrote thus far,

14
00:00:42.210 --> 00:00:44.610
which doesn't really leverage promises

15
00:00:44.610 --> 00:00:48.280
and that would be the core APIs baked into node.

16
00:00:48.280 --> 00:00:50.870
I'm talking about things like read file

17
00:00:50.870 --> 00:00:53.240
from the file system module.

18
00:00:53.240 --> 00:00:56.250
There we use this callback based approach.

19
00:00:56.250 --> 00:00:58.230
And the reason for that is very simple,

20
00:00:58.230 --> 00:01:01.190
when Node.js was created,

21
00:01:01.190 --> 00:01:03.760
promises simply weren't a thing,

22
00:01:03.760 --> 00:01:07.080
they didn't land in mainstream JavaScript yet,

23
00:01:07.080 --> 00:01:12.080
that's why Node.js and its core APIs are callback based.

24
00:01:12.520 --> 00:01:14.940
Now, of course, here, we're using a different approach

25
00:01:14.940 --> 00:01:16.930
of sending the file back anyways.

26
00:01:16.930 --> 00:01:19.580
But if we switch back to the previous approach,

27
00:01:19.580 --> 00:01:21.430
and if you had some operation

28
00:01:21.430 --> 00:01:24.010
that needs to read a file or do anything else

29
00:01:24.010 --> 00:01:26.210
with a core node module,

30
00:01:26.210 --> 00:01:29.310
you might wish to be able to use a promise

31
00:01:29.310 --> 00:01:30.980
instead of this callback approach

32
00:01:30.980 --> 00:01:33.610
which you're forced to use unfortunately,

33
00:01:33.610 --> 00:01:35.330
while there are good news,

34
00:01:35.330 --> 00:01:38.280
a lot of core APIs baked into node

35
00:01:38.280 --> 00:01:41.543
now also have promise support.

36
00:01:42.460 --> 00:01:44.890
Again, we can dive into the official docs,

37
00:01:44.890 --> 00:01:48.010
and there if you check out the file system documentation

38
00:01:48.010 --> 00:01:50.870
we'll find one interesting thing.

39
00:01:50.870 --> 00:01:54.300
Data we find all the methods we can use on the file system,

40
00:01:54.300 --> 00:01:55.750
that's all nice,

41
00:01:55.750 --> 00:01:58.903
but if we scroll down further,

42
00:02:01.010 --> 00:02:04.420
we see that there is a fs Promises API.

43
00:02:04.420 --> 00:02:08.020
And essentially, that's all the file system features here,

44
00:02:08.020 --> 00:02:11.490
now available in a promise based version.

45
00:02:11.490 --> 00:02:15.410
So for example, we also have a write file method now,

46
00:02:15.410 --> 00:02:18.650
which actually embraces promises

47
00:02:18.650 --> 00:02:21.730
so that we can use promises with these core APIs.

48
00:02:21.730 --> 00:02:24.140
And a lot of the built in core APIs

49
00:02:24.140 --> 00:02:26.820
have such a promise version.

50
00:02:26.820 --> 00:02:28.330
How do we use that?

51
00:02:28.330 --> 00:02:30.170
Well, we need to import the file system

52
00:02:30.170 --> 00:02:31.670
slightly differently.

53
00:02:31.670 --> 00:02:36.670
Instead of from fs, we import from fs/promises.

54
00:02:37.010 --> 00:02:39.160
And that's all, if you by the way

55
00:02:39.160 --> 00:02:44.020
use the old D require import syntax, it's the same.

56
00:02:44.020 --> 00:02:46.350
So there you can also use promises

57
00:02:46.350 --> 00:02:48.800
even if you're not using the other import syntax

58
00:02:48.800 --> 00:02:49.940
I showed you here.

59
00:02:49.940 --> 00:02:51.800
Actually, I have to step in here.

60
00:02:51.800 --> 00:02:53.490
This is not correct.

61
00:02:53.490 --> 00:02:56.080
You would import it like this,

62
00:02:56.080 --> 00:02:58.020
if you use the other import syntax.

63
00:02:58.020 --> 00:03:00.350
You access the promises proper key

64
00:03:00.350 --> 00:03:02.740
on the imported file system object.

65
00:03:02.740 --> 00:03:04.850
And this promises property

66
00:03:04.850 --> 00:03:07.050
exposes the file system object

67
00:03:07.050 --> 00:03:10.900
with all those file system methods using promises.

68
00:03:10.900 --> 00:03:13.470
This is the proper way of importing it.

69
00:03:13.470 --> 00:03:15.910
Now, since we use the different import syntax,

70
00:03:15.910 --> 00:03:18.570
I unfortunately wrote this incorrect syntax here.

71
00:03:18.570 --> 00:03:21.670
Keep in mind if you would use that upper import syntax,

72
00:03:21.670 --> 00:03:23.290
it's this year,

73
00:03:23.290 --> 00:03:24.570
this is how you would get access

74
00:03:24.570 --> 00:03:29.240
to those promise based API's not this.

75
00:03:29.240 --> 00:03:30.370
Just a little addition here

76
00:03:30.370 --> 00:03:33.130
which I recognized after I recorded this.

77
00:03:33.130 --> 00:03:34.930
Sorry for the inconvenience here.

78
00:03:34.930 --> 00:03:36.050
In this module of course,

79
00:03:36.050 --> 00:03:38.363
we're using this syntax anyways though.

80
00:03:39.850 --> 00:03:43.320
Now with that, we got the file system object available.

81
00:03:43.320 --> 00:03:45.580
And we can call read file on that

82
00:03:45.580 --> 00:03:49.380
but this read file method now returns a promise,

83
00:03:49.380 --> 00:03:54.080
which eventually will resolve to the data

84
00:03:54.080 --> 00:03:56.780
where to the err or data we're getting back.

85
00:03:56.780 --> 00:03:59.250
So now we can grab this call back

86
00:03:59.250 --> 00:04:03.000
and remove it from here and remove that third argument.

87
00:04:03.000 --> 00:04:05.340
And instead use then and catch

88
00:04:05.340 --> 00:04:07.840
or async await whatever you prefer,

89
00:04:07.840 --> 00:04:10.550
just as you learned it throughout this course.

90
00:04:10.550 --> 00:04:12.230
And that's of course pretty nice

91
00:04:12.230 --> 00:04:15.490
because now we can use all the promise advantages,

92
00:04:15.490 --> 00:04:18.690
like promise chaining to escape callback hell,

93
00:04:18.690 --> 00:04:22.010
on core APIs like this one as well.

94
00:04:22.010 --> 00:04:23.900
One adjustment we need to make though,

95
00:04:23.900 --> 00:04:25.630
now since we're using promises,

96
00:04:25.630 --> 00:04:28.650
of course in the ven method, we never get an error,

97
00:04:28.650 --> 00:04:30.470
here we just get the data.

98
00:04:30.470 --> 00:04:32.440
If we would want to handle errors,

99
00:04:32.440 --> 00:04:34.380
we would have to add a catch method

100
00:04:34.380 --> 00:04:37.060
and then here we can handle any error

101
00:04:37.060 --> 00:04:39.740
we might get when we try to reach that file.

102
00:04:39.740 --> 00:04:42.970
So that is how we could transform this code to promises now,

103
00:04:42.970 --> 00:04:45.953
and they offer if we now start this server here.

104
00:04:46.800 --> 00:04:49.190
We again see our file being served here,

105
00:04:49.190 --> 00:04:51.060
we see our page being loaded,

106
00:04:51.060 --> 00:04:53.050
but now with the promise based version

107
00:04:53.050 --> 00:04:55.780
of this core node module.

108
00:04:55.780 --> 00:05:00.330
Now just as the new import syntax, it's 100% optional.

109
00:05:00.330 --> 00:05:02.550
It's not better than the average approach,

110
00:05:02.550 --> 00:05:04.310
you might simply prefer it

111
00:05:04.310 --> 00:05:06.510
because you might prefer promises,

112
00:05:06.510 --> 00:05:10.000
especially if you chain multiple promises for example.

113
00:05:10.000 --> 00:05:12.580
And therefore this is definitely all the feature

114
00:05:12.580 --> 00:05:14.580
which I didn't want to hide from you

115
00:05:14.580 --> 00:05:16.630
and which I just wanted to show you here.

