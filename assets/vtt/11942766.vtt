WEBVTT

00:02.110 --> 00:09.130
So I still want to have a function which I can call to connect and therefore, this function still is

00:09.130 --> 00:11.430
looking good to me in general.

00:11.440 --> 00:18.240
One thing I want to do is I'll add a throw error here so that I also throw the error again when we fail here

00:18.520 --> 00:23.650
but besides that, I'm happy with having mongo connect here but I'll change something, I'll not

00:23.660 --> 00:27.060
return the client in my callback here

00:27.130 --> 00:33.010
instead I'll add a variable, _db, the underscore is only here to signal that this will only

00:33.010 --> 00:34.900
be used internally in this file

00:34.960 --> 00:36.460
but you don't have to name it like this,

00:36.460 --> 00:39.070
you could also have normally, just like db

00:39.550 --> 00:42.070
and initially this will be undefined.

00:42.130 --> 00:46.440
Now here in the then block, I will store a value in there,

00:46.660 --> 00:55.660
I will store access to the database here and if I leave it like this, what we will do is we will connect

00:55.660 --> 01:01.570
to the test database by default because that is what we specify here in our connection string. So I will

01:01.570 --> 01:06.850
connect to shop here and then this will give us access to the shop database to which we automatically

01:06.850 --> 01:10.540
connect and you could also enter the database name here

01:10.780 --> 01:15.670
to overwrite this and connect to a different database than you were connected to initially but I'll not

01:15.670 --> 01:19.880
enter anything and just connect to that database. As a side note,

01:19.990 --> 01:27.010
unlike in SQL we never need to create that database or the tables, the collections in there ahead

01:27.010 --> 01:34.660
of time. It will be created on the fly when we first access it which is again fitting that flexibility

01:34.780 --> 01:40.780
theme mongodb gives us. In SQL we had to prepare everything in advance, at least when not using

01:40.780 --> 01:45.210
sequelize which also had to do that but it did it for us, here

01:45.340 --> 01:50.390
we don't need to do anything, we're just telling mongodb hey connect me to the shop database

01:50.470 --> 01:55.510
and if that database doesn't exist yet, mongodb will create it as soon as we start writing

01:55.510 --> 01:56.410
data to it.

01:56.680 --> 01:59.010
So that's just a little side note, here

01:59.020 --> 02:08.550
I do store a connection to my database in the db variable. And with that stored, now in my callback

02:08.560 --> 02:18.360
I don't need to return it but I will add another function here, I'll name that get db and here I

02:18.360 --> 02:27.420
will simply check if db is set, so if it's not undefined and in this case I'll return db, so I will

02:27.420 --> 02:29.970
return access to my database

02:30.000 --> 02:32.560
otherwise I'll essentially not do anything here,

02:32.640 --> 02:34.180
so I'll return undefined,

02:34.290 --> 02:37.360
we could also throw an error,

02:37.490 --> 02:39.190
no database

02:39.620 --> 02:41.270
found, something like this.

02:43.030 --> 02:49.690
Now here, I also want to export that so I'll not just export Mongo connect but instead, I'll just use a

02:49.690 --> 02:52.380
different syntax you learned about, exports mongo

02:52.540 --> 03:01.570
connect equals Mongo connect and I'll also have exports get db which equals get db, like this.

03:01.580 --> 03:06.700
So now I'm exporting two methods, one for connecting and then storing the connection to the database

03:07.060 --> 03:12.520
and therefore, this will keep on running and I have one method where I return access to that connected

03:12.520 --> 03:16.200
database if it exists and mongodb behind the scenes

03:16.200 --> 03:21.910
will even manage this very elegantly with something called connection pooling where mongodb will

03:21.910 --> 03:28.550
make sure it provides sufficient connections for multiple simultaneous interactions with the database,

03:28.570 --> 03:31.430
so this is really a good pattern we should follow.

03:31.540 --> 03:34.790
Now with that changed, we still can connect,

03:34.840 --> 03:38.940
one thing I need to adjust though is in the app.js file where I do connect,

03:39.070 --> 03:43.060
I'll not get declined anymore because we don't return it in the callback anymore,

03:43.090 --> 03:45.230
so now we just know we are connected

03:45.310 --> 03:47.130
but there is nothing else we can do.

03:47.320 --> 03:53.240
But one thing I will be able to do is in product.js where I create my product model, there

03:53.260 --> 04:00.660
I don't just can connect the connection now but I can import get db and that of course is very useful

04:00.700 --> 04:07.630
because that means I do import this by accessing get db here because this means that I now can

04:07.630 --> 04:13.720
call this function to get access to my database and therefore I can use it to well interact with the

04:13.720 --> 04:14.830
database.

04:14.830 --> 04:18.620
Now let's use that database connection starting in the next lecture.
