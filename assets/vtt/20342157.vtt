WEBVTT

1
00:00:02.070 --> 00:00:03.830
<v Instructor>So there are two more routes</v>

2
00:00:03.830 --> 00:00:05.570
which I want to register here

3
00:00:05.570 --> 00:00:07.280
and the first extra route

4
00:00:07.280 --> 00:00:10.113
is a put route to /todo/:todoid.

5
00:00:15.760 --> 00:00:19.170
The idea is that requests reaching this route

6
00:00:19.170 --> 00:00:20.853
simply replace a todo.

7
00:00:21.720 --> 00:00:24.470
So here we also get our three arguments

8
00:00:24.470 --> 00:00:27.110
but now in here I wanna override that todo.

9
00:00:27.110 --> 00:00:29.817
A todo, which I identify by this todoId.

10
00:00:30.660 --> 00:00:34.730
So the tid for todoId

11
00:00:34.730 --> 00:00:35.790
can be extracted from

12
00:00:35.790 --> 00:00:40.347
req.params and then they're simply

13
00:00:40.347 --> 00:00:44.030
.todoId, which is available because

14
00:00:44.030 --> 00:00:45.890
we got this here.

15
00:00:45.890 --> 00:00:49.490
And with that, I want to find the index

16
00:00:49.490 --> 00:00:52.110
of that todo in my todos array

17
00:00:53.200 --> 00:00:56.350
so we get our todoIndex here.

18
00:00:56.350 --> 00:00:57.970
We're reaching out to todos,

19
00:00:57.970 --> 00:00:59.880
and there we can call findIndex

20
00:00:59.880 --> 00:01:02.060
to find the index of some element

21
00:01:02.060 --> 00:01:04.330
and this takes a function which executes

22
00:01:04.330 --> 00:01:09.180
on every array item, so on every todo item therefore.

23
00:01:09.180 --> 00:01:11.730
I want to return true if the todoItem

24
00:01:11.730 --> 00:01:14.360
I'm currently looking at has an id

25
00:01:14.360 --> 00:01:16.730
that's equal to my extracted tid here,

26
00:01:16.730 --> 00:01:19.023
so to this todoId I extracted from the URL.

27
00:01:20.170 --> 00:01:22.430
That will give me the todoIndex

28
00:01:22.430 --> 00:01:24.860
of the todo I want to update.

29
00:01:24.860 --> 00:01:29.860
I'll now check if todoIndex is greater or equal than zero,

30
00:01:30.250 --> 00:01:32.870
otherwise we didn't find a valid index,

31
00:01:32.870 --> 00:01:34.670
and if it is I want to continue,

32
00:01:34.670 --> 00:01:38.950
otherwise, I will return a response

33
00:01:38.950 --> 00:01:41.560
where I set the status code to 404

34
00:01:41.560 --> 00:01:43.010
because we weren't able to find

35
00:01:43.010 --> 00:01:46.240
a todo with that index, and I sent back a message

36
00:01:46.240 --> 00:01:51.240
where I say "Could not find todo for this id"

37
00:01:52.140 --> 00:01:54.280
or whatever you want to return.

38
00:01:54.280 --> 00:01:55.560
In this if block however,

39
00:01:55.560 --> 00:01:58.490
we know that have a valid todo.

40
00:01:58.490 --> 00:02:02.050
So here I want to reach out to my todos

41
00:02:02.050 --> 00:02:05.447
for that todoIndex and replace the todos

42
00:02:05.447 --> 00:02:08.120
stored there with a new object.

43
00:02:08.120 --> 00:02:10.290
Now again, here are types of complaints

44
00:02:10.290 --> 00:02:12.770
if I just would keep the code as it is

45
00:02:12.770 --> 00:02:16.420
because an empty object is not a valid todo

46
00:02:16.420 --> 00:02:19.780
and that's great, that's exactly the support we want.

47
00:02:19.780 --> 00:02:24.780
So here we can now set the id to either a brand new id

48
00:02:25.380 --> 00:02:28.410
or we keep the existing todo's id

49
00:02:28.410 --> 00:02:30.270
to just update the text.

50
00:02:30.270 --> 00:02:31.840
That's what I'm going to do

51
00:02:31.840 --> 00:02:34.010
by reaching out to the existing todo

52
00:02:34.010 --> 00:02:36.160
and then there, I'll just get the id

53
00:02:36.160 --> 00:02:40.180
and keep that id and just update the text

54
00:02:40.180 --> 00:02:41.770
to the request body text,

55
00:02:41.770 --> 00:02:43.893
which I now got on the incoming request.

56
00:02:45.050 --> 00:02:46.550
With that, we updated the todo

57
00:02:47.400 --> 00:02:50.933
and then I wanna return response status 200

58
00:02:53.300 --> 00:02:55.930
and also reply with a message

59
00:02:55.930 --> 00:02:58.230
where I say "Updated todo"

60
00:02:58.230 --> 00:03:01.800
and maybe I'll return all my todos here.

61
00:03:01.800 --> 00:03:03.970
Side note, I forgot to return

62
00:03:03.970 --> 00:03:06.220
a response here in the post request.

63
00:03:06.220 --> 00:03:08.140
Of course I want to do that here as well.

64
00:03:08.140 --> 00:03:11.070
Set the status code to 201 to confirm

65
00:03:11.070 --> 00:03:12.970
that something was inserted

66
00:03:12.970 --> 00:03:16.047
and then maybe a message of "Added todo."

67
00:03:19.580 --> 00:03:22.040
Return the new todo which we did add

68
00:03:22.040 --> 00:03:23.850
and maybe even return the overall

69
00:03:23.850 --> 00:03:25.550
todos array if we want to.

70
00:03:25.550 --> 00:03:27.010
Of course, it's up to you which kind

71
00:03:27.010 --> 00:03:28.443
of data you want to return.

72
00:03:29.680 --> 00:03:32.240
Side note, you need to add the return keyword

73
00:03:32.240 --> 00:03:34.640
in front of this response here

74
00:03:34.640 --> 00:03:38.370
to avoid that this response and code runs as well.

75
00:03:38.370 --> 00:03:40.860
We only want to send back one response

76
00:03:40.860 --> 00:03:42.520
and therefore we need to return

77
00:03:42.520 --> 00:03:45.400
to avoid that this code executes as well.

78
00:03:45.400 --> 00:03:47.940
And with that, we added the put route.

79
00:03:47.940 --> 00:03:50.560
Now it's time for the delete route.

80
00:03:50.560 --> 00:03:53.340
So on the router, we can register a delete route,

81
00:03:53.340 --> 00:03:58.070
maybe for /todo/:todoId, so similar to the put route,

82
00:03:58.070 --> 00:03:59.623
just with a different word.

83
00:04:00.660 --> 00:04:04.110
There we also get the request,

84
00:04:04.110 --> 00:04:06.583
response, and this next function.

85
00:04:07.590 --> 00:04:09.530
Then in here, we of course want

86
00:04:09.530 --> 00:04:12.770
to update the todos to get rid of one.

87
00:04:12.770 --> 00:04:14.670
For that, I'll convert my todos array

88
00:04:14.670 --> 00:04:17.920
from a const to a variable with the let keyword

89
00:04:17.920 --> 00:04:21.130
to ensure that we actually can override it

90
00:04:21.130 --> 00:04:23.180
with a brand new array because I want

91
00:04:23.180 --> 00:04:26.530
to get rid of a todo by creating a new array

92
00:04:26.530 --> 00:04:29.693
which is the old array minus the deleted array.

93
00:04:31.110 --> 00:04:33.320
For that, we can simply set todos

94
00:04:33.320 --> 00:04:37.493
equal to todos.filter to filter out a todo.

95
00:04:38.790 --> 00:04:41.410
For that, it runs a function on every todo

96
00:04:41.410 --> 00:04:45.220
and if we return true in that function, we keep the todo.

97
00:04:45.220 --> 00:04:47.713
If we return false, we delete it.

98
00:04:48.868 --> 00:04:53.868
I want to return false if the todoItem.id

99
00:04:54.060 --> 00:04:58.133
is not equal to the request params todoId

100
00:05:00.130 --> 00:05:02.240
because if this is equal, I know it's the todo

101
00:05:02.240 --> 00:05:05.430
I wanna delete so I want to return false

102
00:05:05.430 --> 00:05:08.140
for that match, hence this exclamation mark here,

103
00:05:08.140 --> 00:05:10.190
to make sure that the new todos array

104
00:05:10.190 --> 00:05:13.563
does not contain the todo with this todoId here.

105
00:05:15.600 --> 00:05:16.590
And that's all.

106
00:05:16.590 --> 00:05:18.950
Now we can send back a response

107
00:05:21.010 --> 00:05:24.660
where we say "Deleted todo"

108
00:05:24.660 --> 00:05:25.960
and maybe if you want to,

109
00:05:25.960 --> 00:05:27.663
return the entire array of todos.

110
00:05:28.580 --> 00:05:30.370
So that's a very simple REST API

111
00:05:30.370 --> 00:05:32.530
with four routes which allow us to

112
00:05:32.530 --> 00:05:37.483
get, create, update, and delete our todos.

113
00:05:38.670 --> 00:05:40.620
Now, let's also test this

114
00:05:40.620 --> 00:05:42.500
and see whether everything works

115
00:05:42.500 --> 00:05:44.530
before we then work a little bit more

116
00:05:44.530 --> 00:05:47.710
on the project structure and how we split our code

117
00:05:47.710 --> 00:05:49.130
and before I also share

118
00:05:49.130 --> 00:05:51.130
some other information about TypeScript.

