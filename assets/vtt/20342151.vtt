WEBVTT

1
00:00:02.180 --> 00:00:03.490
<v Instructor>With the basics out of the way,</v>

2
00:00:03.490 --> 00:00:07.670
let's turn this into a very basic REST API.

3
00:00:07.670 --> 00:00:11.550
For that, I'll actually add a routes folder again,

4
00:00:11.550 --> 00:00:13.580
and in there have my basic routes

5
00:00:13.580 --> 00:00:14.870
and now let's say we're building

6
00:00:14.870 --> 00:00:17.860
a very simple to do app REST API.

7
00:00:17.860 --> 00:00:20.810
Certainly not the most exciting thing we can build,

8
00:00:20.810 --> 00:00:24.640
but a great practice for Node Express and TypeScript.

9
00:00:24.640 --> 00:00:28.510
So here I have my todos.ts file,

10
00:00:28.510 --> 00:00:30.853
and in there I now import,

11
00:00:32.070 --> 00:00:35.040
express from 'express',

12
00:00:35.040 --> 00:00:37.030
to then create that router here

13
00:00:37.030 --> 00:00:39.550
by calling express router right?

14
00:00:39.550 --> 00:00:41.910
That's what you'll learn throughout this course.

15
00:00:41.910 --> 00:00:44.540
Well, actually now with this new import syntax,

16
00:00:44.540 --> 00:00:46.700
we can actually also change it slightly

17
00:00:46.700 --> 00:00:49.610
and import router like that,

18
00:00:49.610 --> 00:00:51.430
between curly braces from 'express'

19
00:00:51.430 --> 00:00:53.950
and then just call it like this.

20
00:00:53.950 --> 00:00:57.290
So instead of importing the entire express object

21
00:00:57.290 --> 00:00:59.380
and then extracting what we want,

22
00:00:59.380 --> 00:01:00.880
this is a import syntax

23
00:01:00.880 --> 00:01:04.190
which automatically only imports what we need.

24
00:01:04.190 --> 00:01:08.230
So again, a little advantage we gain by using TypeScript,

25
00:01:08.230 --> 00:01:10.450
because this arguably is shorter

26
00:01:10.450 --> 00:01:12.283
than what we had to write before.

27
00:01:13.140 --> 00:01:15.090
Now when we wanna export something

28
00:01:15.090 --> 00:01:20.090
we also now don't have to do module exports equal router,

29
00:01:20.270 --> 00:01:24.640
but instead we can just export default router.

30
00:01:24.640 --> 00:01:26.170
And this will export router

31
00:01:26.170 --> 00:01:29.240
as the default export in this file.

32
00:01:29.240 --> 00:01:32.700
The default export then simply is what we can import

33
00:01:32.700 --> 00:01:37.700
an app.ts with todosRoutes from './routes/todos';

34
00:01:43.480 --> 00:01:45.670
This import syntax will always pick

35
00:01:45.670 --> 00:01:47.620
the default export of a file

36
00:01:48.870 --> 00:01:51.110
and you can name it here however you want,

37
00:01:51.110 --> 00:01:54.160
this doesn't have to be the name you used for exporting,

38
00:01:54.160 --> 00:01:56.673
it can be a different name, as you see here.

39
00:01:58.270 --> 00:02:01.020
We can then of course, as before,

40
00:02:01.020 --> 00:02:06.000
use our todosRoutes as middleware with the use method.

41
00:02:06.000 --> 00:02:07.700
And now back in the route's file

42
00:02:07.700 --> 00:02:10.160
we can register the routes we need.

43
00:02:10.160 --> 00:02:12.460
So here we can add a get route.

44
00:02:12.460 --> 00:02:14.390
Let's say with the pop slash,

45
00:02:14.390 --> 00:02:16.480
that should just fetch all todos.

46
00:02:16.480 --> 00:02:18.660
So we got the request, the response

47
00:02:18.660 --> 00:02:20.680
and this next function

48
00:02:20.680 --> 00:02:22.560
and we can work with that here.

49
00:02:22.560 --> 00:02:23.780
And now what's really nice,

50
00:02:23.780 --> 00:02:27.770
is that again we get auto completion on all those things.

51
00:02:27.770 --> 00:02:31.520
TypeScript knows the types of this request parameters,

52
00:02:31.520 --> 00:02:34.820
of the response parameter and of the next parameter.

53
00:02:34.820 --> 00:02:37.740
It knows which kind of data we get there,

54
00:02:37.740 --> 00:02:39.960
and hence it's able to support us

55
00:02:39.960 --> 00:02:42.420
and therefore the IDE is able to support us

56
00:02:42.420 --> 00:02:44.840
when we work with those values.

57
00:02:44.840 --> 00:02:47.840
So for example here for getting data,

58
00:02:47.840 --> 00:02:50.200
we might wanna return our todos.

59
00:02:50.200 --> 00:02:53.490
So let's say we're managing the todos here,

60
00:02:53.490 --> 00:02:58.490
simply in such a constant and therefore only in memory,

61
00:02:58.540 --> 00:03:01.090
because it's just a dummy example here.

62
00:03:01.090 --> 00:03:04.350
Then we could simply call response,

63
00:03:04.350 --> 00:03:07.610
status 200, json

64
00:03:08.460 --> 00:03:10.940
and there simply return our todos

65
00:03:10.940 --> 00:03:14.070
on a todos property in that object

66
00:03:14.070 --> 00:03:16.110
which we're sending back.

67
00:03:16.110 --> 00:03:18.000
Now here we're now getting a complaint

68
00:03:18.000 --> 00:03:20.050
by TypeScript in the IDE,

69
00:03:20.050 --> 00:03:23.450
and we would also get this if we tried to compile this code.

70
00:03:23.450 --> 00:03:24.940
And that is that.

71
00:03:24.940 --> 00:03:28.830
The variable todos is implicitly of type any array

72
00:03:28.830 --> 00:03:31.130
and its true, we're not specifying

73
00:03:31.130 --> 00:03:34.260
which kind of data will end up in this array eventually.

74
00:03:34.260 --> 00:03:35.990
And that's something we wanna do.

75
00:03:35.990 --> 00:03:38.950
As I explained in the previous lectures as well

76
00:03:38.950 --> 00:03:42.030
because this allows us to write cleaner code

77
00:03:42.030 --> 00:03:44.060
where we avoid mistakes

78
00:03:44.060 --> 00:03:46.930
by passing an incomplete data for example.

79
00:03:46.930 --> 00:03:48.490
We can avoid such mistakes

80
00:03:48.490 --> 00:03:52.090
by making it very clear which kind of data we want here.

81
00:03:52.090 --> 00:03:53.470
So lets implement this

82
00:03:53.470 --> 00:03:57.193
and continue with the entire REST API in the next lectures.

