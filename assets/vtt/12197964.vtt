WEBVTT

00:02.120 --> 00:08.150
Now that we're able to fetch our posts through graphql, let's add pagination again.

00:08.150 --> 00:10.190
How does that work with graphql?

00:10.580 --> 00:12.900
Turns out not too difficult.

00:12.920 --> 00:18.700
We start on our graphql schema again because there, we'll need to change something on our posts query

00:18.920 --> 00:22.240
because it is the post query where we want to add pagination right,

00:22.250 --> 00:25.500
we want to be able to paginate through all the posts.

00:25.650 --> 00:32.120
Therefore the posts query needs an argument, it needs an argument that allows us to define the page we

00:32.120 --> 00:34.580
are on and I'll name that page,

00:34.610 --> 00:38.270
you can name it however you want and this will be of type integer.

00:38.270 --> 00:46.830
Now with that argument added in the schema, in our resolver we can implement pagination. There

00:47.050 --> 00:55.300
in my posts resolver, my arguments now will have that page property, so I can retrieve it with destructuring

00:55.990 --> 00:59.290
and after checking whether I'm authenticated or not,

00:59.290 --> 01:05.750
I now need to setup pagination or I need to find out which page I'm on and use that.

01:05.900 --> 01:14.890
Now first of all, I'll quickly check if page is not set because if it is not set, so if it is undefined, I'll

01:14.890 --> 01:15.960
set it equal to 1

01:16.040 --> 01:17.780
so that I always start on page 1

01:17.810 --> 01:26.360
in case I don't specify any other page. As a next step, we can define the per page variable which is two

01:26.590 --> 01:28.850
as it was in our rest API scenario,

01:28.960 --> 01:33.370
you could theoretically also fetch this as an argument, I'll hardcode it here

01:33.910 --> 01:38.920
for simplicity reasons because this was primarily something we would have to manage in the frontend

01:39.040 --> 01:43.060
with a dropdown offering the user different page sizes and so on.

01:43.120 --> 01:46.150
So I'll hardcode it here and now we have per page,

01:46.150 --> 01:47.530
we have the current page,

01:47.740 --> 01:53.530
now we can use that here when we find the posts. And you already learned that you can paginate with

01:53.530 --> 02:01.170
skip and limit, so skip and limit is what you can add here and in skip, you want to skip your current

02:01.170 --> 02:04.980
page minus one times per page.

02:04.980 --> 02:11.170
So if you're on page two you have two minus one which is one obviously and you skip one times two,

02:11.190 --> 02:15.420
so the first two items, the two items that were on page 1.

02:15.500 --> 02:20.930
You don't just want to skip though, you also want to limit and you limit the result set to the amount

02:20.930 --> 02:24.040
of pages, of items you want to render per page

02:24.170 --> 02:31.160
by adding per page as an argument here. And that is it, this is pagination in place on the server side.

02:31.160 --> 02:41.540
Now in the frontend there, we already have some logic for the pagination if we go to load posts and there

02:41.940 --> 02:46.060
I do already get my page variable,

02:46.170 --> 02:53.820
now I just need to send that with my query and for that on the posts query, I can set page equal to

02:54.210 --> 02:59.340
well the page I calculate up there, since this is a number

02:59.340 --> 03:03.420
I also don't need to wrap that in double quotation marks.

03:03.420 --> 03:04.790
Let me save all that,

03:04.790 --> 03:10.350
also make sure the backend code is saved and let's reload our frontend application.

03:10.560 --> 03:12.210
For that I should restart the server

03:17.240 --> 03:21.650
and indeed here, I got pagination in place.

03:21.650 --> 03:27.070
And when I add a new post to make sure that it does not show up as a third element

03:27.110 --> 03:33.920
when we only want to have two, I will go back to my react code and there to the finish edit handler

03:35.090 --> 03:38.830
and here in set state where you find that unshift statement,

03:39.080 --> 03:43.290
simply add update posts pop in front of that.

03:43.400 --> 03:44.130
And that is all,

03:44.150 --> 03:47.370
this will remove one element and add the new one at the beginning

03:47.660 --> 03:49.250
and now let's give this a try,

03:49.370 --> 04:02.820
let's add another duck, choose the duck image, also very lovely, accept this and here is the another duck, another

04:02.970 --> 04:03.900
cup,

04:03.920 --> 04:04.700
here is the rest

04:08.640 --> 04:11.650
and this is exactly the data we find in the database too.

04:11.660 --> 04:16.650
We got tWo another ducks just in case you got confused.

04:16.650 --> 04:17.840
So this is working,

04:17.880 --> 04:22.980
let's now work on the image upload because that obviously is something very interesting which we haven't

04:22.980 --> 04:24.240
touched on thus far

04:24.270 --> 04:25.920
for our graphql API.
