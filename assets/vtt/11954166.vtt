WEBVTT

00:02.070 --> 00:06.020
We worked on the admin side and on the basic product,

00:06.040 --> 00:12.130
let's now add a user again and let's see how we can add a user model, how we can connect it to a product

00:12.220 --> 00:13.290
and so on.

00:13.650 --> 00:17.160
For that I'll go to my user.js file in the models folder

00:17.440 --> 00:26.470
and first of all, I want to import mongoose here by requiring mongoose, like that.

00:26.830 --> 00:29.670
So let's now work on the user schema.

00:30.010 --> 00:37.480
Well first of all, we need define the schema, so the user schema. The user schema is defined by using something

00:37.480 --> 00:39.870
from the mongoose package which you don't have to

00:39.880 --> 00:43.010
but I will store in a separate constant,

00:43.180 --> 00:48.480
so mongoose schema. With that we can call new schema down there

00:48.800 --> 00:54.440
and I pass a javascript object to that constructor and in that object, we describe how a user should

00:54.440 --> 00:55.810
look like.

00:55.820 --> 01:02.750
Now here I will say that I want to have a name where the type of data will be a string and this will

01:02.750 --> 01:04.940
be required.

01:05.550 --> 01:08.950
As a next field, I want to have an email as well,

01:08.950 --> 01:15.620
this will be of type string and this will also be required like that.

01:15.640 --> 01:23.080
Now we also used a cart before and I still want to embed the cart into my user document, that hasn't

01:23.080 --> 01:25.430
changed just because we use mongoose.

01:25.720 --> 01:32.200
So we'll add my cart here and now in that cart, that will be an embedded document and we can define

01:32.260 --> 01:33.610
it just like that,

01:33.640 --> 01:37.640
I will add items here and items will be an array

01:37.690 --> 01:43.510
and this is how you define that you want to store an array in here, you simply create an array and then

01:43.510 --> 01:45.940
you add, what is inside of this array?

01:45.940 --> 01:52.600
You could say an array of strings if you have an array of strings or numbers or booleans or an array

01:52.600 --> 01:56.170
of well documents, that of course is also possible.

01:56.170 --> 02:03.840
Now I want to have an array of documents where I have a product ID which I'll configure with this document

02:03.840 --> 02:09.810
here, I'll come back to that and I'll have a quantity and the quantity I'll configure that right away will

02:09.810 --> 02:16.660
have a type of number and is required.

02:16.740 --> 02:18.720
Now what's the product ID here

02:18.720 --> 02:26.290
though? The product ID will have a type of and now I need to get something from the schema, there

02:26.310 --> 02:31.800
we have a types field and there we got all these special types like object ID,

02:31.860 --> 02:38.280
so I'm telling mongoose that this will actually store an objectid because it will store a reference

02:38.280 --> 02:43.440
to a product and that this also is required.

02:44.280 --> 02:49.050
Now that is a bit of a more complex schema therefore because we have an embedded document and we have

02:49.050 --> 02:51.940
an array of then even embedded documents

02:52.080 --> 02:54.040
but this is how a user should look like.

02:54.090 --> 03:03.070
Now just as before, I'll export this by calling mongoose model, give this a name and the name will be

03:03.070 --> 03:03.570
user

03:03.610 --> 03:09.280
hence this will be stored in a users collection because mongoose will automatically take the plural

03:09.340 --> 03:14.550
lowercase version of that as a collection name and I pass my user schema here.

03:14.560 --> 03:19.670
Ok so now we get everything we need to inform mongoose how a user should look like,

03:19.690 --> 03:26.410
now of course I want to work with a user. And for that I'll go back to the app.js file and I will

03:26.410 --> 03:28.280
actually create a user here

03:29.340 --> 03:36.990
before we start listening. For that let me import the user model again in app.js

03:37.180 --> 03:45.070
and with that import added, I can create a new user by simply calling new user and just as before, I pass

03:45.070 --> 03:53.680
a javascript object where I configure it, where I assign a name, where I assign an email and where I also

03:53.680 --> 04:00.650
need to set my cart and that cart will have an array of, well empty items.

04:00.970 --> 04:03.030
So this is my user,

04:03.080 --> 04:07.580
I can then call user save and this will be done when I start my server.

04:07.940 --> 04:14.110
So here after it restarted we should have a user already, if we refreshed the overall database server,

04:14.210 --> 04:21.000
we indeed see our users and there we see one user with that nested data.

04:21.010 --> 04:24.740
So now with that user created, it's that ID I'm interested in,

04:24.790 --> 04:31.740
so let me copy that ID and go back to the app.js file and comment this middleware back in. Here

04:31.810 --> 04:34.030
I again will find a user by ID,

04:34.060 --> 04:40.580
I just need to paste in that ID of that user we just created. Find by ID is a method provided by mongoose

04:40.600 --> 04:41.950
so this will work,

04:42.010 --> 04:48.880
we get back the user here then and then I can simply store that user in my request and keep in mind, this

04:48.880 --> 04:55.510
is a full mongoose model so we can call all these mongoose model functions or methods on that user

04:55.510 --> 04:59.380
object and therefore also on the user object which I do store here.

04:59.860 --> 05:08.030
So this should work, if I now save this for every incoming request, it should actually give us that user.

05:08.080 --> 05:12.880
Now one issue is that with every restart of the server, we also create a new user

05:13.090 --> 05:14.900
as you can see here,

05:14.990 --> 05:24.390
so let me delete that new user because I have my user creation code down there and I don't check whether

05:24.390 --> 05:26.010
I want to create one or not.

05:26.010 --> 05:36.530
So what I'll quickly do is I will first of all see if we do have a user with user find one and find

05:36.530 --> 05:43.400
one with if I give it no arguments will always give me back the first user it finds and then here in

05:43.400 --> 05:52.100
the then block, I will have my user object and only if this is undefined so if it is not set, only then

05:52.400 --> 05:54.970
I will create a new user.

05:55.340 --> 06:04.140
So therefore now if I refresh this we shouldn't have a new user, if I however delete that first user

06:04.140 --> 06:13.160
here and I therefore temporarily get rid of that let's say and I save and it restarts, now if refresh

06:13.160 --> 06:19.460
my users collection I do have a new user and now I just need to grab that ID and paste it back in here

06:19.610 --> 06:23.300
and now we get a set up where I don't constantly create new users.

06:23.300 --> 06:27.500
Ok so this is how we add a user model and how we basically use it

06:27.500 --> 06:32.040
but now of course we want to use it in conjunction with the products model and with the products.

06:32.040 --> 06:33.920
So let's do that in the next lecture.
