WEBVTT

00:02.200 --> 00:07.550
We added validation and we see that a failing validation and hence a thrown error

00:07.570 --> 00:15.640
as we're doing it here leads to a response that actually has null in the data it gives us back but

00:15.640 --> 00:21.630
that has an errors key with an array of all the errors it gathered.

00:21.740 --> 00:23.730
If you open the network tab by the way

00:25.390 --> 00:26.240
and you re-execute

00:26.240 --> 00:31.130
that, you also see that it sets a status code of 500.

00:31.170 --> 00:31.900
Now that's nice

00:31.920 --> 00:35.370
but sometimes you want to add more detailed information.

00:35.400 --> 00:37.700
You can set your own status code though

00:37.800 --> 00:40.600
but we could add more information to the errors

00:40.610 --> 00:47.990
we return and to do that, you can go to your app.js file and there where you configure your graphql

00:47.990 --> 00:49.200
API,

00:49.620 --> 00:56.580
you can add another configuration option which is called format error and this is actually a method

00:56.610 --> 01:04.020
which receives the error detected by graphql and allows you to return your own format.

01:04.020 --> 01:09.520
Now if you just return error, you keep the default format which is exactly the format we see here

01:09.840 --> 01:11.430
but you can change that of course.

01:11.760 --> 01:19.740
You can check if in your error here, you don't have the original error field,

01:19.750 --> 01:25.150
so if you don't have that hence the exclamation mark at the beginning. Original error will be set

01:25.150 --> 01:31.570
by express graphql when it detects an error thrown in your code, either by you or some third party

01:31.570 --> 01:32.440
package.

01:32.590 --> 01:37.690
If you have a technical error, let's say a missing character in your query here or anything like that,

01:38.170 --> 01:40.860
then it will not have that original error

01:40.930 --> 01:48.280
and if we don't have that, then I'll just return the error that was generated by graphql but if I do

01:48.280 --> 01:56.290
have my original error, well then I can extract useful information from it that I can add in other places

01:56.920 --> 02:04.240
and that is what we can do in the resolver now. Let's say validation fails, on the error that gets created

02:04.240 --> 02:05.030
here,

02:05.110 --> 02:11.830
I could add a data field which is my array of errors which I populate here with my validation error

02:11.860 --> 02:13.730
messages.

02:13.780 --> 02:20.510
I could also add a code here which I set to 422 or I come up with my own coding system,

02:20.530 --> 02:28.690
I don't have to use http status codes here. And now in app.js, I can retrieve all of that from the

02:28.690 --> 02:32.760
original error, so I can get my data from error,

02:32.850 --> 02:34.420
original error data

02:34.660 --> 02:40.120
and that might be undefined for thrown errors that don't set it but that's ok.

02:40.720 --> 02:47.050
I can retrieve my message directly from the error because that is already pulled out of the error

02:47.370 --> 02:57.290
by graphql and in case that should be undefined somehow, I can set this to an error occured and I

02:57.290 --> 03:04.660
can get my code from the original error again, there I named that code too

03:04.900 --> 03:09.240
and I could set this to a default value of 500.

03:09.250 --> 03:16.360
Now with all that pulled out, I can return my own error object here where I have a message just like the

03:16.360 --> 03:22.510
original one but where I then also add my status field which contains my code and a data field which

03:22.510 --> 03:23.560
contains my data

03:23.560 --> 03:27.390
and you can name all these fields in exactly the way you want.

03:27.580 --> 03:31.240
And now with that and all the files saved here,

03:31.570 --> 03:33.880
if I hit enter again or play again,

03:34.000 --> 03:40.310
now I see I get a different error output with the data I added and this can be very useful

03:40.330 --> 03:43.400
and this is how you can handle errors in graphql.
