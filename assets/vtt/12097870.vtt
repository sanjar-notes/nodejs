WEBVTT

00:02.530 --> 00:08.440
So validation in the database is missing. Now I'll start by adding validation here and for that,

00:08.460 --> 00:15.070
I'll quit my server side npm start process because I need to install a new package and I'll use the same

00:15.070 --> 00:18.890
package which I used in the validation module of this course. Therefore

00:18.910 --> 00:24.250
you should definitely watch that module to learn how validation works because I'll not repeat everything

00:24.250 --> 00:24.690
here,

00:24.700 --> 00:27.250
we already learned it after all.

00:27.400 --> 00:32.350
So here I'll just install that package which was express validator,

00:32.350 --> 00:38.340
that is a package that helps us with implementing validation into our node express applications.

00:38.710 --> 00:44.550
After that is installed, you can restart npm start and now do you remember how you add it?

00:44.560 --> 00:46.740
Have a look at this module I just mentioned

00:46.750 --> 00:54.850
if you don't. You go to your routes and there, you add some middleware which does that validation. For

00:54.850 --> 00:55.130
that, you

00:55.150 --> 01:04.800
first of all need to import something from the express validator package and there from the

01:04.890 --> 01:11.550
/check sub-package and that something is either the check method or the body method to check the request

01:11.550 --> 01:13.670
body or with the check method

01:13.680 --> 01:16.620
also the headers, the query parameters and so on,

01:16.950 --> 01:23.460
I want to check the request body here. Now for a get route, validation makes no sense because no data is

01:23.460 --> 01:24.130
submitted

01:24.180 --> 01:31.080
but for the post route it makes sense and there I'll add an array of middleware that will be applied

01:31.170 --> 01:34.200
which will be related to validation. There

01:34.230 --> 01:40.180
for example I will use body to check the title field.

01:40.260 --> 01:44.070
Now the title field can be validated in any way you want,

01:44.070 --> 01:52.990
I can tell you that on the frontend however, I am validating that title field and you can see that in the

01:52.990 --> 02:01.750
components, feed feed edit component, that I am validating this to have a minimum length of five characters

02:01.840 --> 02:06.250
and to be non-empty which is of course the case if it is at least five characters long,

02:06.400 --> 02:09.060
the content also has to be five characters long.

02:09.280 --> 02:13.450
So that's just a little side note on what I'm doing on the frontend and the backend should of course

02:13.480 --> 02:16.450
meet that same pattern.

02:16.450 --> 02:24.190
So my body title will first of all be trimmed to not have any whitespace in there and then I'll use

02:24.200 --> 02:30.980
the isLength validator with an object to set a minimum length of five.

02:31.000 --> 02:38.380
Now this is the title, now after a comma, I'll add my next middleware where I will validate the content,

02:38.380 --> 02:42.030
we can also trim that and basically set the same validator,

02:42.040 --> 02:49.060
obviously you can be more creative than that but I just want to re-iterate how validation works and

02:49.060 --> 02:54.950
really show you that it works in exactly the same way in rest APIs because you build a normal

02:55.000 --> 02:57.170
node in express application in the end,

02:57.340 --> 02:59.690
that does not change here.

02:59.770 --> 03:07.600
So with that, we added these two validation steps for our incoming data, for title and the content and now

03:07.600 --> 03:14.740
we can implement some logic to send an error if our server side validation logic is not met. For this

03:15.490 --> 03:21.160
we go to our controller, to the feed.js file in our controllers folder and there we also need to import

03:21.160 --> 03:23.940
something from that express validator package,

03:24.220 --> 03:29.050
so here I also require express validator/check

03:29.260 --> 03:36.120
and that something which I am importing here is the validation result function. With that imported

03:36.190 --> 03:37.560
in create post,

03:37.570 --> 03:45.130
we can simply create a new errors constant and use that validation result function on the request, it

03:45.130 --> 03:49.190
will then automatically extract any errors that validation package

03:49.210 --> 03:55.190
gathered and we can check if not errors is empty which means we have errors.

03:55.210 --> 04:02.050
If that is not empty, we have errors and then I will return a response with a status code of 422 which

04:02.050 --> 04:08.330
is of course our validation failed status code where I send some json data

04:08.530 --> 04:14.040
and there you can have a message of validation failed,

04:14.130 --> 04:22.650
validation failed, entered data is incorrect or whatever you want, it will be on your frontend to

04:22.650 --> 04:29.060
do something with that message or not and you could add the errors here by using that errors constant

04:29.340 --> 04:35.980
and then using the array method to extract an array of errors and also add this to the json object.

04:36.060 --> 04:39.640
So with that, we're returning this response if validation fails.

04:39.750 --> 04:46.440
Now thanks to our client side validation, with the correct rules we could not reproduce that because

04:46.440 --> 04:50.520
I'm already checking for a minimum length of 5 on the frontend

04:50.700 --> 04:56.410
but if we increase the title minimum length to 7 for now on the server,

04:56.580 --> 05:02.760
now if I go back to the frontend and I enter a title which is only 5 characters long and therefore

05:02.880 --> 05:07.980
long enough for the client side validation but too short for the server side validation which is of

05:07.980 --> 05:08.880
course a mismatch

05:08.880 --> 05:11.770
you don't want to have in a real app but it's great for testing,

05:11.940 --> 05:13.060
if I do that and I

05:13.200 --> 05:18.050
accept here, I actually get an error, creating or editing a post failed,

05:18.090 --> 05:20.880
that is an error message I'm just showing on the frontend.

05:21.150 --> 05:28.920
But if you have a look at our console log in the dev tools, we see a 422 error here and if we click

05:28.920 --> 05:36.030
on that we're taken to the network tab, we see that read request and if we inspect that, we see our response

05:36.030 --> 05:41.550
here and that indeed has that message we sent on the server side, validation failed and so on and it

05:41.550 --> 05:45.870
has this errors array where we see that the title failed.

05:45.900 --> 05:50.400
So you see that the server side validation is working and that is all I wanted to show you here,

05:50.520 --> 05:56.190
of course I revert back to 5 characters minimum length on the server now too so that the client side

05:56.190 --> 06:00.150
validation logic and the server side logic are in line

06:00.390 --> 06:05.730
otherwise we would have very bad user experiences because users get the feedback that their input is

06:05.730 --> 06:08.420
correct and then the server would throw an error.

06:08.760 --> 06:17.280
So with that, we added validation for this post route and now we can move on to adding a database.
