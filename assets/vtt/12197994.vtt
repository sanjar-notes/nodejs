WEBVTT

00:02.110 --> 00:04.590
That was a lot of content on graphql

00:04.650 --> 00:09.420
and as I mentioned, you could fill an entire course just on graphql

00:09.610 --> 00:15.730
and indeed there are courses on it. The official docs on graphql.org are a great place to dive

00:15.730 --> 00:17.830
deeper because they're really good

00:17.830 --> 00:23.170
and there you can learn more about all the features graphql offers, including its more advanced features.

00:23.800 --> 00:25.570
In this introductory module,

00:25.570 --> 00:31.270
I hopefully gave you a good overview over the graphql core concepts and how you build a graphql

00:31.300 --> 00:32.790
API with node

00:32.860 --> 00:40.540
and in this case, with the expressjs framework. You learned that graphql allows you or is a technique

00:40.570 --> 00:47.380
to build a stateless client independent API, just as we did it with the rest API but that it offers a higher

00:47.380 --> 00:54.810
flexibility than the rest APIs typically do because you expose a custom query language to your client.

00:54.970 --> 01:00.550
A graphql API is made up of queries which you would compare to your get requests in rest

01:00.550 --> 01:08.560
APIs. Mutations, that would be your post, put, patch and delete requests in rest APIs and possibly

01:08.560 --> 01:09.810
all subscriptions,

01:09.820 --> 01:12.040
something I didn't cover in this module.

01:12.090 --> 01:16.950
You use these constructs to exchange data and to manage data

01:17.170 --> 01:23.470
and the important and characteristic thing about graphql APIs is that

01:23.470 --> 01:30.520
they only expose one endpoint to the client and that is a post request to /graphql

01:30.530 --> 01:35.320
typically, it has to be a post request though, that is something you can't avoid

01:35.590 --> 01:42.130
and all requests are directed there and then in the request body of that post request, you use the graphql

01:42.180 --> 01:46.190
query language to describe the query you want to execute

01:46.270 --> 01:52.740
or the mutation you want to execute. The server parses that incoming query expression and then calls

01:52.750 --> 01:58.050
the appropriate resolvers to execute the logic you wrote and return the appropriate data

01:58.120 --> 02:05.120
or do the appropriate manipulation. Graphql and that is also important is of course not limited to reactjs

02:05.120 --> 02:07.000
frontend applications,

02:07.000 --> 02:13.150
you can use it with any frontend application, be that a mobile app, a single page app with any framework

02:13.270 --> 02:14.650
or whatever you have,

02:14.650 --> 02:16.900
it's not limited to react.

02:17.170 --> 02:24.070
Now when we compare it to rest, then we have to understand that rest APIs are not strictly worse,

02:24.130 --> 02:28.130
they might still be the perfect solution for your next project.

02:28.150 --> 02:34.200
They are especially great for static data requirements so where you don't need that additional flexibility

02:34.270 --> 02:41.890
and then you have a very clearly structured and explicit way of defining your endpoints and defining

02:42.130 --> 02:43.420
the possibilities

02:43.450 --> 02:50.620
your API offers. So for file uploads or scenarios where you simply don't need that flexibility because

02:50.620 --> 02:53.000
you always get the same kind of data,

02:53.080 --> 02:59.260
there rest APIs might still be the perfect solution. In other scenarios, graphql might be better

02:59.320 --> 03:05.750
because you get a higher flexibility due to that exposed full query language your client can use

03:05.890 --> 03:12.790
and I also want to highlight that both rest and graphql APIs can be implemented with any framework

03:12.910 --> 03:16.920
and actually even with any server side language. You are not limited to

03:16.930 --> 03:18.730
nodejs and on

03:18.730 --> 03:19.710
nodejs,

03:19.810 --> 03:24.370
you are of course not limited to express and that is really important.

03:24.370 --> 03:30.040
The core concepts you learned here and a lot of the logic you applied will actually be the same no matter

03:30.040 --> 03:34.010
which framework you use or no matter which server side language you use.
