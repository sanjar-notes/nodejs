WEBVTT

00:02.230 --> 00:08.590
Now with response headers added, let's make sure we serve optimized assets and for that, we can use another

00:08.590 --> 00:09.660
package.

00:09.850 --> 00:15.550
If you google for node compression, you'll find that expressjs compression middleware package

00:15.820 --> 00:19.860
which makes it easy for you to add compression to your application.

00:19.960 --> 00:24.850
It's actually super easy but you can learn all about the configurations you could add if you wanted

00:24.850 --> 00:27.170
to here in this official documentation

00:27.310 --> 00:33.490
but if you want to add it in a very simple and standardized way, you just run npm install --save

00:33.940 --> 00:42.750
compression, like this, the package is called compression and after you installed it, you go to your app.js file

00:43.290 --> 00:51.950
and there, just as we imported helmet, we'll import compression by requiring it here and we then add it

00:52.040 --> 00:53.650
as a middleware.

00:53.690 --> 00:59.630
So let's maybe add it right after helmet here by running compression as a function as well.

00:59.630 --> 01:04.850
Now you can configure it as mentioned in the official docs but you can also just run it like this.

01:04.850 --> 01:10.890
And now for that to see an effect, I'll comment this out and save and the node server therefore reloads

01:11.000 --> 01:14.090
and now I open the network tab and I'll reload my page.

01:14.090 --> 01:19.390
Now these are the size of the assets we're downloading, especially have a look at main.css and main.js,

01:19.390 --> 01:25.010
obviously these are not super big but still this is the size of assets as we download them by

01:25.010 --> 01:26.650
default.

01:26.690 --> 01:33.320
Now I'll comment that back in, that extra package and save it and now if I reload that page, you will

01:33.320 --> 01:39.620
see that these assets got a bit smaller and obviously this will matter more if you have more frontend assets

01:39.710 --> 01:42.710
in your application that you need to serve.

01:43.010 --> 01:48.590
So this is compression in action and this is worth considering especially in apps where you have a lot

01:48.590 --> 01:54.290
of css and javascript code you are serving to your users or in general where a lot of files are served

01:54.290 --> 01:55.860
to your users, by the way

01:55.940 --> 02:01.520
image files are not compressed here because that actually makes it longer to load them

02:01.520 --> 02:03.670
but this is a nice addition.

02:03.740 --> 02:10.940
I also want to note that again, most hosting providers you might want to use have some support of compression

02:10.940 --> 02:16.530
built in or might at least offer this compression support which you can conveniently add there.

02:16.640 --> 02:22.250
So then they will compress assets on the fly and you don't have to do it with your own middleware and

02:22.300 --> 02:24.190
then you actually shouldn't do it

02:24.320 --> 02:29.240
but in case your hosting provider does not support it or you're building your own server, then this is

02:29.240 --> 02:31.190
a nice middleware which you can add.
