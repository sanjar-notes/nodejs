WEBVTT

1
00:00:02.250 --> 00:00:03.730
<v Instructor>Now, for that attached,</v>

2
00:00:03.730 --> 00:00:06.050
you find the application we built

3
00:00:06.050 --> 00:00:08.440
in the last course section.

4
00:00:08.440 --> 00:00:10.840
However, with one difference.

5
00:00:10.840 --> 00:00:13.750
There is a new frontend-app folder in there,

6
00:00:13.750 --> 00:00:17.520
and, in there, you find a basic React application

7
00:00:17.520 --> 00:00:21.530
which will be ready to talk to our Deno server.

8
00:00:21.530 --> 00:00:25.160
Now, I'm not writing this application from scratch with you

9
00:00:25.160 --> 00:00:27.380
because this course is not about React.

10
00:00:27.380 --> 00:00:29.100
It's about node in the end,

11
00:00:29.100 --> 00:00:32.280
and now also about Deno, I guess.

12
00:00:32.280 --> 00:00:34.810
Therefore, you get this finished application,

13
00:00:34.810 --> 00:00:37.310
and in order to start and use it,

14
00:00:37.310 --> 00:00:39.780
make sure that you open up a terminal,

15
00:00:39.780 --> 00:00:42.510
navigate it into this extracted folder

16
00:00:42.510 --> 00:00:43.810
which you find attached,

17
00:00:43.810 --> 00:00:47.410
and then cd into the frontend-app folder.

18
00:00:47.410 --> 00:00:48.710
So, with this cd command,

19
00:00:48.710 --> 00:00:50.980
move into that frontend-app folder.

20
00:00:50.980 --> 00:00:53.870
And, in there, first of all, run npm install

21
00:00:53.870 --> 00:00:57.520
to install all the dependencies of this provided project.

22
00:00:57.520 --> 00:01:00.890
This will then generate this node_modules folder

23
00:01:00.890 --> 00:01:03.140
in the frontend-app folder.

24
00:01:03.140 --> 00:01:05.100
Thereafter, run npm start,

25
00:01:05.100 --> 00:01:08.310
and this will now spin up a simple development server

26
00:01:08.310 --> 00:01:11.610
for this front-end application, and that's important.

27
00:01:11.610 --> 00:01:14.170
This will now not start our Deno server,

28
00:01:14.170 --> 00:01:18.010
it will start a standalone development-only server

29
00:01:18.010 --> 00:01:20.280
for this front-end application.

30
00:01:20.280 --> 00:01:22.950
It's essentially the same pattern we used

31
00:01:22.950 --> 00:01:27.310
in the REST API and GraphQL modules of this course,

32
00:01:27.310 --> 00:01:28.980
if you remember that.

33
00:01:28.980 --> 00:01:32.440
Now, this should automatically open up a new tab

34
00:01:32.440 --> 00:01:34.660
on localhost:3000.

35
00:01:34.660 --> 00:01:37.220
If it didn't, you can simply do it manually.

36
00:01:37.220 --> 00:01:40.060
And here, you got this React application

37
00:01:40.060 --> 00:01:43.660
which will try to communicate to our Deno server.

38
00:01:43.660 --> 00:01:45.280
Though, of course, at the moment,

39
00:01:45.280 --> 00:01:48.330
at least for me, this server is not up and running,

40
00:01:48.330 --> 00:01:51.340
and, therefore, if we open up the developer tools,

41
00:01:51.340 --> 00:01:54.490
we see that we got an error being printed here.

42
00:01:54.490 --> 00:01:58.120
We're not able to get results from the server, essentially,

43
00:01:58.120 --> 00:02:01.730
and therefore we're not able to render any todos here.

44
00:02:01.730 --> 00:02:05.180
Well, that is something we can fix, of course.

45
00:02:05.180 --> 00:02:07.890
Keep that development React server running,

46
00:02:07.890 --> 00:02:09.730
and open a new terminal,

47
00:02:09.730 --> 00:02:12.850
so that you got that other process still running,

48
00:02:12.850 --> 00:02:15.650
and now, in your main project folder,

49
00:02:15.650 --> 00:02:17.820
so now longer in frontend-app,

50
00:02:17.820 --> 00:02:20.000
but in your main project folder,

51
00:02:20.000 --> 00:02:21.590
run your Deno app.

52
00:02:21.590 --> 00:02:24.210
For that, I'll cd into the deno folder,

53
00:02:24.210 --> 00:02:28.720
and then, with deno run --allow-net,

54
00:02:28.720 --> 00:02:31.950
I can run the app.ts file.

55
00:02:31.950 --> 00:02:34.860
Now, this will spin up the Deno server,

56
00:02:34.860 --> 00:02:37.740
but now I get a address in use error.

57
00:02:37.740 --> 00:02:41.410
And the reason for that is that our Deno application here

58
00:02:41.410 --> 00:02:44.290
also wants to run on port 3000,

59
00:02:44.290 --> 00:02:47.950
and that's where the React app runs already.

60
00:02:47.950 --> 00:02:49.450
The fix is simple.

61
00:02:49.450 --> 00:02:51.950
I'll switch Deno to port 8000,

62
00:02:51.950 --> 00:02:54.170
that's also a common development port,

63
00:02:54.170 --> 00:02:56.400
and therefore now, if we rerun this command,

64
00:02:56.400 --> 00:02:59.253
it should compile and run this successfully.

65
00:03:00.160 --> 00:03:02.480
If you now reload the application,

66
00:03:02.480 --> 00:03:05.580
you still get that error though.

67
00:03:05.580 --> 00:03:08.940
Now, the reason for that is that in the React application,

68
00:03:08.940 --> 00:03:11.180
we need to make one tiny adjustment,

69
00:03:11.180 --> 00:03:14.320
and, for that, you don't need to know React, no worries.

70
00:03:14.320 --> 00:03:16.500
In the frontend-app source folder,

71
00:03:16.500 --> 00:03:21.290
under components, Todos.js, you'll find a bunch of URLs,

72
00:03:21.290 --> 00:03:25.240
and they always point at localhost:3000.

73
00:03:25.240 --> 00:03:27.170
Change this to 8000 now

74
00:03:27.170 --> 00:03:29.930
because that's where our server is running on.

75
00:03:29.930 --> 00:03:32.113
So, change all those occurrences,

76
00:03:33.060 --> 00:03:35.530
and save that Todos.js file.

77
00:03:35.530 --> 00:03:38.780
This will now restart the React server,

78
00:03:38.780 --> 00:03:41.380
and you now can already see the Middleware log

79
00:03:41.380 --> 00:03:44.470
at the bottom here, which means that a request reached

80
00:03:44.470 --> 00:03:46.420
our Deno server.

81
00:03:46.420 --> 00:03:49.720
And indeed it did, but now we're getting a different error.

82
00:03:49.720 --> 00:03:51.660
We're getting a CORS error.

83
00:03:51.660 --> 00:03:55.380
And to fix that, we need to understand what CORS is.

84
00:03:55.380 --> 00:03:57.710
I did cover it before in the course.

85
00:03:57.710 --> 00:04:00.170
I'll give you a brief refresher here.

86
00:04:00.170 --> 00:04:01.970
And, once we understood that,

87
00:04:01.970 --> 00:04:04.723
we can fix it in our Deno application code.

