WEBVTT

00:02.470 --> 00:08.500
Now there's one thing which I also want to cover in this module and that are the http status codes, which

00:08.500 --> 00:11.350
codes do we have and why do we use them?

00:11.440 --> 00:13.890
Let me first of all start with what the codes are

00:13.930 --> 00:19.740
therefore. The codes are simply extra information we pass to the browser which helps the browser understand

00:19.840 --> 00:22.230
if an operation succeeded or not.

00:22.480 --> 00:28.630
If you're writing an application with a lot of client side javascript or a mobile app and you will fetch

00:28.660 --> 00:32.540
only data instead of complete html pages, something we'll do in the rest

00:32.540 --> 00:39.100
module later, status codes also allow you to understand if an error happened, which kind of error because

00:39.100 --> 00:43.540
you typically map certain kinds of errors to certain kinds of status codes.

00:43.600 --> 00:45.810
For example you have 200 status codes,

00:45.850 --> 00:48.020
most importantly 200 and 201,

00:48.040 --> 00:50.170
these are always success status codes,

00:50.170 --> 00:52.790
they indicate that the operation simply succeeded.

00:53.080 --> 00:58.960
You have 300 status codes which simply indicates that a redirection happened.

00:58.960 --> 01:05.710
You have 400 status codes which show you that something happened because an error was done by the client,

01:06.010 --> 01:08.820
for example incorrect data was entered into a form,

01:08.920 --> 01:11.880
well then we return this 422 error code

01:11.950 --> 01:18.280
if you remember correctly and we have 500 status codes which indicate that a server side error occurred.

01:18.280 --> 01:24.910
Now here are some examples, you can find a full, a link with a full list in the lecture after this one. For success

01:24.910 --> 01:32.240
cases we have 200 and 201, the difference is that we use 201 typically when we created a resource on the server,

01:32.240 --> 01:38.980
so in the database, it's not a must but it's a pattern you can use and you see often. 300 like 301

01:39.100 --> 01:43.430
simply is a code that is used in combination with redirection to inform us

01:43.500 --> 01:51.100
whether for example this resource moved permanently or just temporary thing, whatever. The 400 codes,

01:51.580 --> 01:57.450
there we have 401 if we are not authenticated, 403 which you could translate with not authorized

01:57.490 --> 02:03.820
so you might be authenticated but you were still not allowed to do that specific operation, 404 for a

02:03.820 --> 02:10.680
page that's not found, 422 which we often use for invalid input and a couple of other error codes and for

02:10.690 --> 02:11.310
500,

02:11.320 --> 02:16.890
the most common one is 500 which indicates hey there was a server side error but you got also other codes

02:16.900 --> 02:21.540
for timeout and so on, again in the next lecture you find a full list.

02:21.550 --> 02:25.200
Now let's quickly scan through our code. If we have a look at our code,

02:25.210 --> 02:26.990
let's start with the admin controller,

02:27.220 --> 02:29.220
we rarely set a status code.

02:29.320 --> 02:36.610
The default then always is 200 which is fine for this case but for creating a new product, it would be

02:36.610 --> 02:41.550
better if we not just render 422 when validation fails

02:41.590 --> 02:46.740
which is correct but that when we succeeded, we also return 201.

02:46.810 --> 02:50.740
The thing just as if we succeeded, we redirect which will use a 300 code

02:50.830 --> 02:56.300
but later when we dive into creating restful APIs which is a different kind of node app where

02:56.320 --> 03:00.460
we don't return html but just data, there you will see the

03:00.580 --> 03:04.670
201 code coming back, here it doesn't really make sense.

03:04.960 --> 03:11.960
Now forget added product again, we're fine with 200 and we're fine with 200 here.

03:13.760 --> 03:21.660
If we did fetch data and we do load the page and if we try to save or update a product, then we get our

03:21.660 --> 03:24.100
validation error with 422

03:24.270 --> 03:31.590
and if we succeed or in all cases here, we redirect which again will use 300 automatically.

03:31.650 --> 03:35.250
So all these codes here are pretty fine, pretty decent,

03:35.250 --> 03:41.530
one of the most important things, we're in good practice at least is that we do use 422 for validating.

03:42.000 --> 03:50.580
Now we also have isAuth.js where I do redirect when we are trying to do something where I'm not logged

03:50.580 --> 03:51.350
in.

03:51.360 --> 03:59.130
Now again since I'm redirecting, I'm sending a 300 status code but of course we could add status 401 here

03:59.430 --> 04:01.800
to kind of also make clear what the problem is

04:01.860 --> 04:05.600
but it will be overwritten with a 300 code due to redirect, 

04:05.610 --> 04:09.060
so it does not make a lot of sense and that is fine here.

04:09.060 --> 04:14.490
Later again when we have a restful API where we don't redirect because we don't route around on the

04:14.490 --> 04:22.590
server, then we'll use that 400 code. And for that reason that we now most of the time redirect or directly

04:22.590 --> 04:23.610
render a page,

04:23.730 --> 04:26.100
we don't set that many status codes here,

04:26.100 --> 04:30.530
we'll see them later again as I mentioned and we see some codes at least, also in error.js

04:30.600 --> 04:36.770
where I set 404 and 500. And these status codes not mean that our app crashes,

04:36.780 --> 04:38.440
that's important to understand,

04:38.670 --> 04:44.530
instead if I do enter some invalid route here, I do get page not found

04:44.580 --> 04:51.960
and if we open the chrome developer tools with the network tab and I reload, we see that here, this 404

04:52.020 --> 04:53.090
code can be seen,

04:53.100 --> 04:59.520
it's also marked as read because chrome is intelligent and detects that anything which is not a 200 or

04:59.520 --> 05:04.790
300 code is an error but error does not mean that it crashes.

05:04.790 --> 05:09.790
This still renders a valid page in the end, we just pass that extra information of

05:09.840 --> 05:14.470
hey here's the page but you see that page because something went wrong

05:14.820 --> 05:16.800
and chrome knows this too,

05:16.800 --> 05:22.980
for example tell us in the developer tools and later when we create that restful API I referring to, we'll

05:23.040 --> 05:28.920
also benefit from that because there we do have a more direct interaction with our requests because

05:28.920 --> 05:30.920
we don't render new pages all the time

05:31.050 --> 05:35.010
and then we can get useful information out of these status codes.

05:35.130 --> 05:39.400
So that is http status codes and how they are related with errors,

05:39.450 --> 05:46.090
your key takeaway is a status code does not mean that the request failed or that the app crashed.

05:46.110 --> 05:51.480
We had some problem and now we're returning information with the problem to the client

05:51.570 --> 05:55.370
and that is also a way of gracefully handling errors.
