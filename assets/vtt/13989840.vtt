WEBVTT

00:02.150 --> 00:08.060
I kind of answered why we want to test already, but I really want to make this clear again, testing.

00:08.060 --> 00:14.690
So and with data, I mean, automated tests allows us to automatically test everything and there is

00:14.690 --> 00:19.820
a star behind that because we only test what we define, so only the tests we write.

00:19.820 --> 00:26.060
But in theory it allows you to test everything in your application after every code adjustment, after

00:26.060 --> 00:27.350
every code change.

00:27.680 --> 00:33.740
Therefore, it's easy to detect breaking changes, even in places you might not have expected to break

00:33.740 --> 00:35.570
upon your latest change.

00:35.720 --> 00:42.260
And with the automated tests, we ensure that we have predictable, clearly defined testing steps.

00:42.530 --> 00:48.950
Our tests obviously always run in the exact same way since we define all the steps in code, and that

00:48.950 --> 00:53.450
of course ensures that we can rely on the scenario always being the same.

00:53.480 --> 00:57.980
If you're manually testing your app, you might think you're doing the same thing as you did the last

00:57.980 --> 01:02.450
time, but in reality, you might not be doing that because you forgot a step.

01:02.450 --> 01:04.250
So that is why you should test.

01:04.250 --> 01:08.090
How do you then set up your node project for testing?

01:09.640 --> 01:12.100
No matter what you're building with no charges.

01:12.100 --> 01:17.350
So no matter if you're building a page where you render views on the server, if you are building a

01:17.350 --> 01:23.590
rest API or if you're building a GraphQL API, you want to run tests automatically.

01:23.590 --> 01:26.410
So you want to run code that tests your code.

01:26.410 --> 01:29.080
And for that you typically need a couple of tools.

01:29.320 --> 01:32.470
You need a tool that executes your test code.

01:32.560 --> 01:38.260
Sounds pretty simple, but you need that and it should not only execute your code, it should also give

01:38.260 --> 01:43.510
you a nice output that tells you whether your tests all passed or if a test failed.

01:43.870 --> 01:46.330
So that is the first tool we need.

01:46.480 --> 01:52.300
The second tool then is one that does not just run our code, but that also allows us to define certain

01:52.300 --> 01:54.130
conditions that have to be met.

01:54.130 --> 01:56.500
So we want to assert certain results.

01:56.500 --> 02:02.530
You want to find out if certain scenarios well succeeded, if tests succeeded.

02:02.530 --> 02:06.250
We wanted to find what success means in a certain test.

02:06.250 --> 02:09.040
So we want to validate the test outcome.

02:09.310 --> 02:14.320
Now for running the tests, there are different tools for all these steps, but for running these tests,

02:14.320 --> 02:20.830
one popular framework is MOCA and we'll use MOCA in this module here too.

02:20.830 --> 02:24.010
And for asserting the results and defining conditions.

02:24.100 --> 02:28.870
Chae is a popular choice and we'll use that in this module too.

02:28.900 --> 02:34.720
There are alternatives like Jest, but MOCA and GI are really popular, exist for a long time.

02:34.720 --> 02:40.240
There are a lot of tutorials out there for you to dive deeper and therefore I will also use them here.

02:40.570 --> 02:43.840
You're certainly not doing anything wrong when sticking to these tools.

02:44.200 --> 02:50.440
Now, as you will see throughout this module, there will also be one ever tool we need when it comes

02:50.440 --> 02:57.970
to managing side effects or working with external dependencies or certain complex scenarios.

02:58.330 --> 03:05.380
There we'll use Sinon, which is a tool that allows us to create steps or mocks, and I will come back

03:05.380 --> 03:07.090
to what that is later.

03:07.210 --> 03:13.600
Now with that all out of the way, I'd say let's install our basic testing tools and let's set up our

03:13.600 --> 03:20.110
testing environment and then also write our first test so that we can gradually walk through our node

03:20.110 --> 03:23.410
application and see how we could test it.
