WEBVTT

1
00:00:02.220 --> 00:00:05.210
<v Tutor>So let's see how that types thing works.</v>

2
00:00:05.210 --> 00:00:08.680
For that, let me create an index HTML file

3
00:00:08.680 --> 00:00:13.050
with a base HTML skeleton like this

4
00:00:13.050 --> 00:00:14.680
and in there,

5
00:00:14.680 --> 00:00:17.070
I'll not spend too much time on the styling.

6
00:00:17.070 --> 00:00:20.823
I'll simply add an input of type number,

7
00:00:22.290 --> 00:00:24.960
and a another input of type number,

8
00:00:24.960 --> 00:00:27.550
and a button where

9
00:00:27.550 --> 00:00:29.090
I say add.

10
00:00:29.090 --> 00:00:30.910
and when we click this button,

11
00:00:30.910 --> 00:00:33.390
the two values entered into these two inputs

12
00:00:33.390 --> 00:00:34.850
should be added up,

13
00:00:34.850 --> 00:00:35.880
and should be output

14
00:00:35.880 --> 00:00:38.530
in this paragraph below the button.

15
00:00:38.530 --> 00:00:40.620
Now again, this will be a very ugly

16
00:00:40.620 --> 00:00:41.453
and simple page,

17
00:00:41.453 --> 00:00:43.393
but it's about TypeScript here.

18
00:00:44.780 --> 00:00:49.390
Now let's add a little app.ts file, .ts because

19
00:00:49.390 --> 00:00:52.010
we're going to write some TypeScript code in there.

20
00:00:52.010 --> 00:00:55.730
Now we need to install the TypeScript compiler.

21
00:00:55.730 --> 00:00:58.080
Now with Deno we didn't need to install it

22
00:00:58.080 --> 00:01:00.010
but now we do need to install it.

23
00:01:00.010 --> 00:01:03.030
Because we're not going to execute this code with Deno ,

24
00:01:03.030 --> 00:01:05.350
I want to execute it in the browser instead,

25
00:01:05.350 --> 00:01:06.183
and as I mentioned,

26
00:01:06.183 --> 00:01:08.530
the browser doesn't run TypeScript.

27
00:01:08.530 --> 00:01:11.540
So we need to convert TypeScript to JavaScript,

28
00:01:11.540 --> 00:01:14.050
and for that, we need to TypeScript compiler.

29
00:01:14.050 --> 00:01:14.940
As a side note,

30
00:01:14.940 --> 00:01:18.680
Deno also needs to convert it, there decompiler,

31
00:01:18.680 --> 00:01:22.020
the TypeScript compiler is just built into Deno.

32
00:01:22.020 --> 00:01:24.340
But we can install the compiler standalone

33
00:01:24.340 --> 00:01:26.210
by following the instructions we find

34
00:01:26.210 --> 00:01:28.310
on typeScriptlang.org,

35
00:01:28.310 --> 00:01:30.150
and the instructions are very simple.

36
00:01:30.150 --> 00:01:32.470
In the terminal on our system,

37
00:01:32.470 --> 00:01:35.651
we run npm install - g typeScript,

38
00:01:35.651 --> 00:01:37.510
and on Mac and Linux,

39
00:01:37.510 --> 00:01:39.570
you might need to add sudo in front of this

40
00:01:39.570 --> 00:01:41.420
to get the right permissions.

41
00:01:41.420 --> 00:01:44.770
Now, the npm command will only work though,

42
00:01:44.770 --> 00:01:47.280
if you installed Node.js.

43
00:01:47.280 --> 00:01:49.110
So make sure you do that first

44
00:01:49.110 --> 00:01:53.160
and from nodejs.org ,you simply install the latest version.

45
00:01:53.160 --> 00:01:55.180
This gives you an installer both

46
00:01:55.180 --> 00:01:57.000
on Mac OS and Windows.

47
00:01:57.000 --> 00:01:58.560
You can walk through the installer

48
00:01:58.560 --> 00:02:00.530
and once installation finished

49
00:02:00.530 --> 00:02:03.233
you'll be able to run this npm install command.

50
00:02:04.140 --> 00:02:07.470
If you do so, you might be prompted for your password,

51
00:02:07.470 --> 00:02:08.303
and then after this,

52
00:02:08.303 --> 00:02:10.030
we'll install TypeScript.

53
00:02:10.030 --> 00:02:14.170
The TypeScript compiler globally on your system.

54
00:02:14.170 --> 00:02:15.560
and once it is installed,

55
00:02:15.560 --> 00:02:16.821
you can always run tsc ,

56
00:02:16.821 --> 00:02:20.460
which is a command which now is available,

57
00:02:20.460 --> 00:02:22.910
and then the filename you want to compile ,

58
00:02:22.910 --> 00:02:26.400
and this will convert this file to a JavaScript file,

59
00:02:26.400 --> 00:02:29.480
which is why you now also see app.js,

60
00:02:29.480 --> 00:02:31.160
and it's a JavaScript file,

61
00:02:31.160 --> 00:02:33.273
which I'm now going to import here,

62
00:02:34.550 --> 00:02:38.203
into my HTML file, app.js

63
00:02:38.203 --> 00:02:41.410
and I'll add to defer to make sure this only executes

64
00:02:42.479 --> 00:02:43.810
once the entire body has been parsed.

65
00:02:43.810 --> 00:02:46.010
But now we're not going to work in app.js,

66
00:02:46.010 --> 00:02:48.113
but we're going to work in app.ts.

67
00:02:48.950 --> 00:02:50.850
Now when working with Deno,

68
00:02:50.850 --> 00:02:54.900
you won't see those js files because they are generated

69
00:02:54.900 --> 00:02:57.280
and stored behind the scenes you could say.

70
00:02:57.280 --> 00:02:58.529
We only see it here because

71
00:02:58.529 --> 00:03:01.100
this is a very basic project where

72
00:03:01.100 --> 00:03:02.910
we control everything on our own

73
00:03:02.910 --> 00:03:05.150
with help of the compiler.

74
00:03:05.150 --> 00:03:07.420
So now in app.ts,

75
00:03:07.420 --> 00:03:10.700
let's add this add function here,

76
00:03:10.700 --> 00:03:11.533
num1, num2,

77
00:03:13.950 --> 00:03:17.080
and return num1 plus num2 like this

78
00:03:17.080 --> 00:03:18.530
and then First of all,

79
00:03:18.530 --> 00:03:20.460
we can call it of course,

80
00:03:20.460 --> 00:03:21.873
as I showed it before,

81
00:03:23.660 --> 00:03:28.470
with strings, and with numbers just like that.

82
00:03:28.470 --> 00:03:29.800
Now if I save this,

83
00:03:29.800 --> 00:03:31.453
and I compile this again,

84
00:03:32.540 --> 00:03:34.760
we can open this page in the browser

85
00:03:34.760 --> 00:03:37.610
by simply opening this HTML file,

86
00:03:37.610 --> 00:03:40.110
and now to see something in the console here,

87
00:03:40.110 --> 00:03:43.600
we just have to log our results here.

88
00:03:43.600 --> 00:03:46.370
So console.log the result here,

89
00:03:46.370 --> 00:03:50.850
and console.log the result here.

90
00:03:50.850 --> 00:03:51.750
Once we do that,

91
00:03:51.750 --> 00:03:53.253
let's recompile this.

92
00:03:54.470 --> 00:03:56.560
Reload, and we see seven and 16,

93
00:03:56.560 --> 00:03:59.203
and that's the same behavior we saw before.

94
00:04:00.080 --> 00:04:03.910
Now, where does TypeScript now help us?

95
00:04:03.910 --> 00:04:07.120
Let's dive into type definitions in the next lecture

