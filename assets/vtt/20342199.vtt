WEBVTT

1
00:00:02.310 --> 00:00:04.913
<v ->So, what is Deno?</v>

2
00:00:05.783 --> 00:00:08.590
Deno is a JavaScript runtime

3
00:00:08.590 --> 00:00:12.820
based on Chrome's V8 JavaScript engine.

4
00:00:12.820 --> 00:00:15.960
And if you think about that sentence,

5
00:00:15.960 --> 00:00:17.230
if you read it,

6
00:00:17.230 --> 00:00:19.820
it might sound quite familiar,

7
00:00:19.820 --> 00:00:23.260
that's the same thing Node.js is.

8
00:00:23.260 --> 00:00:27.000
Node.js also is a JavaScript runtime

9
00:00:27.000 --> 00:00:30.820
based on Chrome's V8 JavaScript engine.

10
00:00:30.820 --> 00:00:34.500
So, is Deno the same thing?

11
00:00:34.500 --> 00:00:35.620
Well, let's see.

12
00:00:35.620 --> 00:00:38.590
Deno, since it is that JavaScript runtime,

13
00:00:38.590 --> 00:00:41.910
allows us to run JavaScript outside of the browser,

14
00:00:41.910 --> 00:00:43.320
just like Node.

15
00:00:43.320 --> 00:00:46.950
But now there are a couple of key features in Deno,

16
00:00:46.950 --> 00:00:49.270
which don't exist like that in Node,

17
00:00:49.270 --> 00:00:53.150
for example, Deno is not only a JavaScript runtime

18
00:00:53.150 --> 00:00:57.720
but actually a JavaScript and TypeScript runtime.

19
00:00:57.720 --> 00:01:00.570
Now I do have a whole module,

20
00:01:00.570 --> 00:01:03.380
where I show you that you can use TypeScript

21
00:01:03.380 --> 00:01:05.440
with Node.js as well.

22
00:01:05.440 --> 00:01:07.930
The key difference is that for Node,

23
00:01:07.930 --> 00:01:12.090
Node itself, the Node executable is only capable

24
00:01:12.090 --> 00:01:14.400
of executing JavaScript code,

25
00:01:14.400 --> 00:01:17.060
TypeScript code needs to be compiled

26
00:01:17.060 --> 00:01:19.290
to JavaScript code first.

27
00:01:19.290 --> 00:01:22.740
Deno on the other hand is also an executable,

28
00:01:22.740 --> 00:01:25.450
which is capable of executing JavaScript code,

29
00:01:25.450 --> 00:01:27.160
but it's also capable

30
00:01:27.160 --> 00:01:29.960
of executing uncompiled TypeScript code,

31
00:01:29.960 --> 00:01:34.240
because Deno has its own built in TypeScript compiler.

32
00:01:34.240 --> 00:01:39.240
Now, in addition, Deno supports URL imports out of the box,

33
00:01:39.440 --> 00:01:43.920
and modern JavaScript features like promises are embraced.

34
00:01:43.920 --> 00:01:46.450
Now, I do you also have that module,

35
00:01:46.450 --> 00:01:48.980
on modern JavaScript with Node

36
00:01:48.980 --> 00:01:51.600
and there you learn that you can also import

37
00:01:51.600 --> 00:01:55.550
in a different way than used in the majority of the course

38
00:01:55.550 --> 00:01:58.250
and that you can use promises for example, on

39
00:01:58.250 --> 00:02:00.030
some of the built in features

40
00:02:00.030 --> 00:02:03.810
but unlike Node, Deno embraces this concept

41
00:02:03.810 --> 00:02:06.020
out of the box from very start

42
00:02:06.020 --> 00:02:09.460
simply because it's newer than Node.

43
00:02:09.460 --> 00:02:12.890
There also is something about these URL imports

44
00:02:12.890 --> 00:02:15.050
that differs significantly from how

45
00:02:15.050 --> 00:02:17.560
you manage dependencies and Node projects,

46
00:02:17.560 --> 00:02:19.780
but I will come back to that later.

47
00:02:19.780 --> 00:02:22.890
And last but not least one other key difference

48
00:02:22.890 --> 00:02:25.490
and one other key feature of Deno

49
00:02:25.490 --> 00:02:28.990
is that it's secure by default.

50
00:02:28.990 --> 00:02:31.360
Now, if you read it like this, this sounds horrible, right?

51
00:02:31.360 --> 00:02:34.160
It sounds like Node is not secure,

52
00:02:34.160 --> 00:02:36.610
and that's not the case.

53
00:02:36.610 --> 00:02:39.270
I'll come back to what I mean with secure

54
00:02:39.270 --> 00:02:42.320
and which specific aspect this is about

55
00:02:42.320 --> 00:02:44.040
throughout this module, and you will see

56
00:02:44.040 --> 00:02:45.750
that it's not that horrible,

57
00:02:45.750 --> 00:02:49.580
but that it still might be a nice feature to have.

58
00:02:49.580 --> 00:02:52.440
So let's maybe now get started with Deno,

59
00:02:52.440 --> 00:02:55.450
let's write some code so that we get a feeling for it

60
00:02:55.450 --> 00:02:57.070
and let's then step-by-step

61
00:02:57.070 --> 00:03:00.550
find out what the differences are compared to Node

62
00:03:00.550 --> 00:03:03.390
how you can build apps with Deno,

63
00:03:03.390 --> 00:03:06.663
and in the end, let's find out whether you should switch.

