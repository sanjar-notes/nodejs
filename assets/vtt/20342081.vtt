WEBVTT

1
00:00:02.120 --> 00:00:04.210
<v Instructor>Now the new import export syntax</v>

2
00:00:04.210 --> 00:00:09.210
becomes interesting once we use some node J-S globals.

3
00:00:09.510 --> 00:00:10.980
Now what do I mean by that?

4
00:00:10.980 --> 00:00:12.300
Let me show you.

5
00:00:12.300 --> 00:00:15.680
I'm sending back the content of my my page html file

6
00:00:15.680 --> 00:00:18.710
and I'm doing this by reading it in with the file system.

7
00:00:18.710 --> 00:00:22.340
We can absolutely do that, it works as you can tell,

8
00:00:22.340 --> 00:00:25.660
but we could also send back the file in a different way.

9
00:00:25.660 --> 00:00:30.080
The response object exposed by express also has a send file

10
00:00:30.080 --> 00:00:34.140
method and this one's a file which it should send back.

11
00:00:34.140 --> 00:00:36.750
The thing just is if you just specify

12
00:00:36.750 --> 00:00:39.830
the file name like this it will not work.

13
00:00:39.830 --> 00:00:42.570
Then I'll restart the server and I reload here

14
00:00:42.570 --> 00:00:45.050
you see I get an error that the path

15
00:00:45.050 --> 00:00:47.790
must be absolute in the end.

16
00:00:47.790 --> 00:00:50.420
Now we learned how we can build an absolute path

17
00:00:50.420 --> 00:00:52.960
throughout this course because we had various places

18
00:00:52.960 --> 00:00:56.180
in our code where we needed such an absolute path.

19
00:00:56.180 --> 00:01:01.180
We can import path from path so from the path core module

20
00:01:01.460 --> 00:01:03.950
and then we construct such a absolute path

21
00:01:03.950 --> 00:01:07.300
by calling path join and then we concatenate

22
00:01:07.300 --> 00:01:09.500
the different path segments.

23
00:01:09.500 --> 00:01:12.250
We typically start with dirname here

24
00:01:12.250 --> 00:01:16.050
and then any folder into which we might wanna go.

25
00:01:16.050 --> 00:01:17.900
In this case we have no such folder

26
00:01:17.900 --> 00:01:20.430
and then the file name which we wanna work with

27
00:01:20.430 --> 00:01:21.970
if we need a file name.

28
00:01:21.970 --> 00:01:24.020
In this case we do so this would be the place

29
00:01:24.020 --> 00:01:27.130
where we now add my page html but the key thing

30
00:01:27.130 --> 00:01:29.890
is that we have dirname first which is basically

31
00:01:29.890 --> 00:01:32.370
the path to the current working directory

32
00:01:32.370 --> 00:01:36.140
so to your directory here in which your app files lie

33
00:01:36.140 --> 00:01:40.140
and path join then constructs one long absolute path

34
00:01:40.140 --> 00:01:43.130
from this path and this path so it in the end

35
00:01:43.130 --> 00:01:48.070
combines both path segments into one long absolute path.

36
00:01:48.070 --> 00:01:49.896
The problem with that if we run it

37
00:01:49.896 --> 00:01:54.896
is that if I now reload I get dirname is not defined.

38
00:01:55.410 --> 00:01:58.310
Now dirname underscore underscore dirname

39
00:01:58.310 --> 00:02:01.750
of course was a global variable reused multiple times

40
00:02:01.750 --> 00:02:04.830
throughout the course and it just worked.

41
00:02:04.830 --> 00:02:09.830
With the modern ES module syntax, it does not work anymore

42
00:02:09.990 --> 00:02:14.220
because there are no globals anymore with this syntax.

43
00:02:14.220 --> 00:02:17.600
So these global variables like dirname or file name

44
00:02:17.600 --> 00:02:20.900
which you could use with the other import export syntax

45
00:02:20.900 --> 00:02:24.893
with the require function, that does not exist here anymore.

46
00:02:25.870 --> 00:02:29.510
Now of course this is you could say a known issue

47
00:02:29.510 --> 00:02:32.180
and if you search for dirname in the ES module's

48
00:02:32.180 --> 00:02:35.160
documentation here you see that indeed

49
00:02:35.160 --> 00:02:37.300
these variables are not available here

50
00:02:37.300 --> 00:02:39.240
but you also see a workaround, how you can

51
00:02:39.240 --> 00:02:41.860
still get your dirname back.

52
00:02:41.860 --> 00:02:46.840
What we need is more imports from core node modules

53
00:02:46.840 --> 00:02:48.770
and then we can construct our own

54
00:02:48.770 --> 00:02:52.210
dirname variable in the end based on

55
00:02:52.210 --> 00:02:56.310
this special pseudo global variable

56
00:02:56.310 --> 00:02:59.400
we can access you could say so let's do that.

57
00:02:59.400 --> 00:03:03.893
Let's first of all add those two imports here to our file.

58
00:03:05.290 --> 00:03:07.730
Here I'm importing dirname from path

59
00:03:07.730 --> 00:03:10.530
and actually as you can see this is a named import.

60
00:03:10.530 --> 00:03:13.080
Now we already do import something from path

61
00:03:13.080 --> 00:03:14.530
and we'll be importing the end to this

62
00:03:14.530 --> 00:03:18.550
entire path object which exposes all its methods.

63
00:03:18.550 --> 00:03:20.980
Alternatively it just turns out

64
00:03:20.980 --> 00:03:25.230
that the path module does two things.

65
00:03:25.230 --> 00:03:27.900
It exports the entire path object

66
00:03:27.900 --> 00:03:31.720
so that we can import it like this basically as a default

67
00:03:31.720 --> 00:03:35.440
but alternatively it also exports all the methods

68
00:03:35.440 --> 00:03:40.440
we can call on path as standalone named functions.

69
00:03:40.500 --> 00:03:43.960
So I could also just import join from here

70
00:03:43.960 --> 00:03:46.600
and then also dirname in addition.

71
00:03:46.600 --> 00:03:49.160
Alternatively I could have also imported path

72
00:03:49.160 --> 00:03:53.510
and some named import side by side with this syntax.

73
00:03:53.510 --> 00:03:56.670
So first your default import and then separated

74
00:03:56.670 --> 00:04:00.400
with a comma the named imports this would all be possible.

75
00:04:00.400 --> 00:04:02.410
And to show you this syntax I'll stick

76
00:04:02.410 --> 00:04:03.853
to this approach here.

77
00:04:05.070 --> 00:04:07.810
Then I also import from the URL module

78
00:04:07.810 --> 00:04:10.830
and now we can construct our own

79
00:04:10.830 --> 00:04:13.640
variables by copying this code.

80
00:04:13.640 --> 00:04:15.310
Now what does this code do?

81
00:04:15.310 --> 00:04:18.850
Import dot meta dot URL is basically a globally

82
00:04:18.850 --> 00:04:21.730
available variable you could say

83
00:04:21.730 --> 00:04:25.080
which gives you the path to this file name.

84
00:04:25.080 --> 00:04:28.400
So to the response handler J-S file name

85
00:04:28.400 --> 00:04:32.270
and the file URL to path function just converts

86
00:04:32.270 --> 00:04:35.960
that URL to a path with which the path

87
00:04:35.960 --> 00:04:37.850
package then is able to work.

88
00:04:37.850 --> 00:04:41.430
And the dirname function provided by the path package

89
00:04:41.430 --> 00:04:44.860
just takes such a path to the current file

90
00:04:44.860 --> 00:04:47.620
to basically give you the path to the current folder

91
00:04:47.620 --> 00:04:51.850
in which this file sits and with that we rebuilt

92
00:04:51.850 --> 00:04:56.070
our dirname variable now not available globally

93
00:04:56.070 --> 00:04:58.960
but rebuildable with this approach.

94
00:04:58.960 --> 00:05:02.040
And hence if we save that and restart the application

95
00:05:02.040 --> 00:05:05.340
now we can reload this page and we now send back

96
00:05:05.340 --> 00:05:08.090
a file with the send file method.

97
00:05:08.090 --> 00:05:10.030
Now why did I show you this?

98
00:05:10.030 --> 00:05:12.400
Because it's important to be aware of the fact

99
00:05:12.400 --> 00:05:15.730
that those global variables which you can use

100
00:05:15.730 --> 00:05:17.950
with the other import export syntax

101
00:05:17.950 --> 00:05:20.750
are not available with this new syntax

102
00:05:20.750 --> 00:05:23.550
but that you also understand how you can

103
00:05:23.550 --> 00:05:26.160
rebuild them and still use them.

104
00:05:26.160 --> 00:05:31.160
And that's the modern E-S modules import export syntax.

105
00:05:31.420 --> 00:05:36.330
As I mentioned multiple times using it is 100% optional.

106
00:05:36.330 --> 00:05:39.510
It is the syntax you know from browser side applications

107
00:05:39.510 --> 00:05:42.430
though from modern client side apps therefore.

108
00:05:42.430 --> 00:05:46.360
So hence you might feel inclined to also using here a node.

109
00:05:46.360 --> 00:05:49.090
Sticking to the other syntax which I used through

110
00:05:49.090 --> 00:05:52.560
the majority of this course is of course fine though.

111
00:05:52.560 --> 00:05:55.340
There is a reason why I used that other syntax

112
00:05:55.340 --> 00:05:57.890
and the reason is that this new syntax

113
00:05:57.890 --> 00:06:01.150
as I also mentioned already is experimental

114
00:06:01.150 --> 00:06:04.460
at the moment as the node team says itself

115
00:06:04.460 --> 00:06:08.050
in the official docs and that the vast majority

116
00:06:08.050 --> 00:06:11.820
of node projects out there will use that other syntax.

117
00:06:11.820 --> 00:06:13.460
So if you're joining a team working

118
00:06:13.460 --> 00:06:14.930
on some node project you need

119
00:06:14.930 --> 00:06:17.630
to be aware of that other syntax.

120
00:06:17.630 --> 00:06:20.760
Nonetheless this modern syntax is also pretty nice

121
00:06:20.760 --> 00:06:24.623
and it's not too difficult to switch to it as you can tell.

