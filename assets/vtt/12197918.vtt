WEBVTT

00:02.290 --> 00:09.070
Now we added our first mutation and a mutation of course also means that we store data in the database.

00:09.250 --> 00:15.420
When something like this happens, we want to ensure that the data we store is valid and previously in

00:15.440 --> 00:23.560
the rest API and also in the normal node express application where we render views, we use express validator

00:23.560 --> 00:30.450
for that and we added that as a middleware on our routes. With graphql, this is not an option because

00:30.450 --> 00:31.950
we only have one route,

00:31.950 --> 00:38.910
this one, this is the only endpoint we have and we certainly don't want to validate all requests in exactly

00:38.910 --> 00:40.220
the same way.

00:40.800 --> 00:47.950
So to change that and to adjust it to our needs, we want to move validation into our resolvers.

00:48.000 --> 00:54.510
There we have our endpoints and there is the place where we can now validate our incoming request data.

00:55.650 --> 01:02.750
To do validation there, I'll install a new package with npm install and then --save

01:03.060 --> 01:09.480
and that is called validator and that by the way is the package which express validator used behind the

01:09.480 --> 01:16.160
scenes, we can use that directly in our code now. So in my resolvers file,

01:16.420 --> 01:25.120
I will import that validator object provided by the validator package and now in create user, we can add

01:25.120 --> 01:29.330
some validation logic with simple if statements.

01:29.360 --> 01:33.930
For example I can check if I don't have a valid email,

01:34.130 --> 01:35.960
so not validator

01:35.960 --> 01:42.350
and then isEmail and you got the same rules as with express validator because as I mentioned, it builds

01:42.440 --> 01:50.220
up on this validator package and then I check if user input email is not an email address

01:50.510 --> 01:56.340
and if that is the case, then I want to store that error. So I'll create my own errors array here

01:56.340 --> 01:58.100
and that's just one way of handling this,

01:58.100 --> 02:00.140
you could find a different pattern of course

02:01.180 --> 02:04.550
and I will push a new error onto this array

02:04.640 --> 02:11.030
and for me here and that again is only my implementation, an error will be an object where I have a

02:11.030 --> 02:17.190
message, for example e-mail is invalid.

02:17.200 --> 02:19.720
Now let's say we don't just want to validate the e-mail,

02:19.930 --> 02:25.870
we also want to check whether our password is there and if it's too short.

02:25.870 --> 02:29.440
So if validator is empty

02:32.460 --> 02:40.290
user input password, then we have a problem because then we got no values for the password or we also

02:40.350 --> 02:42.280
have a problem if it's not empty

02:42.450 --> 02:45.990
but if the length is not long enough.

02:45.990 --> 02:54.300
So if the length for the password is not fitting the criteria we specify in the second argument to isLength

02:54.300 --> 03:00.400
which is an object where we can set a min and max key and I'll set min to 5.

03:00.720 --> 03:07.630
So if we enter a password that is empty or not long enough,

03:07.790 --> 03:11.620
so if it is not long enough, we need to add an exclamation mark here,

03:12.970 --> 03:15.610
then we make it into this if statement here

03:15.790 --> 03:18.160
and then we also have a problem and there

03:18.180 --> 03:26.050
I also want to push an error onto my errors array and there I'll add a message of password too short.

03:28.820 --> 03:32.470
Now this is just one way of implementing this,

03:32.480 --> 03:38.990
now after having all these if checks, I can check if my errors array has a length that is greater than zero

03:38.990 --> 03:48.470
which means I do have errors and if I do, I'll create my own new error object where I throw invalid

03:48.770 --> 03:53.150
input or where I report invalid input

03:53.150 --> 03:56.950
and now I throw that error.

03:56.970 --> 03:58.630
Now let's give that a try. 

03:59.020 --> 04:07.540
If I now try to add an email address which is not an e-mail address and I hit play here, I indeed see

04:07.540 --> 04:12.760
my invalid input message and that is how we can add validation.

04:12.760 --> 04:17.920
What if we now want to pass more data with our error message here?
