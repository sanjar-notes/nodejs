WEBVTT

00:02.330 --> 00:07.580
We're now using socket.io to successfully update and create posts,

00:07.640 --> 00:11.260
now let's of course also align the deletion of posts

00:11.520 --> 00:16.720
and for that, let's first of all go back to the backend code, to the feed controller and find our

00:16.790 --> 00:19.110
delete post methods here,

00:19.130 --> 00:22.010
there it is. Now just as before,

00:22.030 --> 00:24.610
I want to emit an event once we're done deleting.

00:24.890 --> 00:32.510
So I will do that right before I send my response here let's say. I will use io, get io to get that

00:32.510 --> 00:40.640
connection and then I will emit to the posts channel and I will keep my pattern of defining what happened

00:40.640 --> 00:48.130
to my posts inside of the data package I'm emitting. So in here, I'll add my action which I'll name delete or

00:48.130 --> 00:55.690
where I have a value of delete I should say and then my post field here is just a post ID, whoops, written

00:55.940 --> 00:58.300
like that which in this delete post function

00:58.300 --> 01:02.730
I am extracting up there, so I'm passing that ID through that event

01:02.740 --> 01:05.280
I'm now emitting through socket.io,

01:05.680 --> 01:07.900
that is what happens on the backend.

01:07.930 --> 01:10.570
Now let's move on to the frontend, to the react

01:10.570 --> 01:14.660
code of course and there just as before,

01:14.740 --> 01:18.170
we want to do something when we deleted a post and I'll keep it simple,

01:18.220 --> 01:20.260
I'll simply reload the page here.

01:20.260 --> 01:25.130
You could of course implement some code here that simply finds that post and change it and just deletes it

01:25.270 --> 01:30.500
but I'll keep it relatively simple and just load the entire page.

01:30.740 --> 01:40.040
If we scroll down a little bit to the delete post handler, here we can therefore also comment out this

01:40.430 --> 01:46.580
code and instead just call this load posts to reload, not the page but reload the posts.

01:46.580 --> 01:51.500
Essentially this will make sure that pagination also is considered correctly

01:51.860 --> 01:59.030
and now if I scroll up again to componentDidMount where I have my other listeners for socket.io, I'll check

01:59.030 --> 02:05.570
if the data action might be delete which is the latest action we're emitting on the server and then

02:05.600 --> 02:09.890
I just call this load posts to basically load all posts again.

02:10.880 --> 02:17.220
Now this is my frontend code and now if I go back to my application and I do delete another

02:17.270 --> 02:22.830
doc here, it reloads and it also reloaded the posts on the page as you see.

02:22.850 --> 02:29.570
So now we're also orchestrating deletion to happen across multiple clients through socket.io.
