WEBVTT

00:02.300 --> 00:05.920
We've got all the core features that are related to authentication

00:05.960 --> 00:14.420
implemented, now I want to work on the user experience a little bit at least. Right now when we login and

00:14.420 --> 00:20.660
we for example try to login with invalid credentials where we don't find the email or the password

00:20.660 --> 00:25.870
does not match or we try to create a user for whom the email already exists,

00:26.060 --> 00:31.980
then we are just redirected without any error message being shown on the page.

00:32.000 --> 00:37.670
Now I will dive deeper into how to validate user input in the validation module of the course but here

00:37.760 --> 00:43.620
we're not talking about validation so much but really about giving some feedback to the user in general.

00:43.760 --> 00:50.060
Now when rendering views with the render method as we are doing it here, including data that should be

00:50.060 --> 00:53.870
rendered on the page was simple, by the way isAuthenticated

00:53.930 --> 00:57.390
can be deleted here because we always include this as a local and

00:57.500 --> 01:00.120
that is the case for all our routes

01:00.140 --> 01:01.120
as a side note,

01:01.400 --> 01:08.450
so you can remove that isAuthenticated thing from all render methods but this is not really what I wanted

01:08.450 --> 01:11.700
to do here, it's a little side thing we can do though.

01:11.870 --> 01:18.710
The main thing is that it's easy to pass data to our views inside of the render method as you can see,

01:18.950 --> 01:24.570
it was never a problem to get our data into the views there.

01:24.720 --> 01:31.770
However it is a huge problem if we want to pass some data into the rendered view when we are redirecting

01:31.810 --> 01:38.500
as we are doing it here because upon a redirect, technically a new request is started, a new request to

01:38.620 --> 01:40.690
/login in this case

01:40.690 --> 01:48.280
and on that new request, we don't know that we got here because the user entered an invalid e-mail or

01:48.280 --> 01:51.780
anything like that, when we triggered this new request

01:51.920 --> 01:58.060
this is treated in the same way as a request that was triggered by clicking on the login button in our menu.

01:58.240 --> 02:02.410
So we have no way of finding out if we want to display an error message or not

02:02.530 --> 02:08.080
and hence in the render method of get login where we show that login page, we don't know if we want

02:08.080 --> 02:10.630
to include some error message.

02:10.630 --> 02:18.880
Now to solve that problem and store some data before we redirect which we then use in the brand new request

02:18.910 --> 02:20.840
that is triggered by the redirect,

02:21.070 --> 02:30.350
how could we do that? Well you learned if you want to store data across requests, you need a session.

02:30.580 --> 02:32.520
So we can use a session for that

02:32.650 --> 02:37.950
but of course I don't want to store the error message in the session permanently,

02:37.960 --> 02:45.090
I want to add something to the error message, kind of flash it onto the session

02:45.290 --> 02:51.200
and once the error message was then used, so once we pulled it out of the session and did something with

02:51.200 --> 02:53.610
it, I want to remove it from the session

02:53.690 --> 02:59.550
so that for subsequent requests, this error message is not part of the session anymore

02:59.810 --> 03:04.910
and for this, we can use another package which makes this really easy.

03:04.970 --> 03:09.620
We install that with npm install --save and then the package is called connect

03:09.620 --> 03:12.900
-flash, if you hit enter,

03:13.010 --> 03:21.010
this gets downloaded and added to your project, you can restart the server thereafter

03:21.150 --> 03:24.360
and now connect flash is really simple to use.

03:24.360 --> 03:31.350
First of all we initialize in our app.js folder, file, in there we install it or we import it just

03:31.350 --> 03:33.020
as we import other packages,

03:33.210 --> 03:38.160
you can store it in a constant which you name however you want, I'll name it flash and I will require

03:38.250 --> 03:45.080
connect flash here. Now flash then needs to be registered

03:45.080 --> 03:48.100
you could say, initialized, I'll do this here at the bottom,

03:48.140 --> 03:53.870
you need to do it after you initialized the session, so certainly after this middleware, there I will

03:53.870 --> 03:58.050
call use and I will simply call flash as a function here.

03:58.100 --> 04:05.930
Now we can use that flash middleware anywhere in our application on the request object.

04:05.960 --> 04:07.380
So now let's save that and

04:07.550 --> 04:13.160
let's head over to auth.js and let's say here when we're logging in and we don't find a user with that

04:13.190 --> 04:18.760
e-mail which is the problem here, we want to flash an error message into our session and

04:18.980 --> 04:22.060
we do this now with request and there will be a flash method

04:22.070 --> 04:32.030
now added by this package. This flash message now simply takes a key under which this message will be

04:32.030 --> 04:32.660
stored,

04:32.660 --> 04:34.730
we could name this error

04:35.270 --> 04:36.760
and then the message

04:36.760 --> 04:43.380
and in this case this would be invalid e-mail or password.

04:43.390 --> 04:46.150
Now you could also say just invalid e-mail,

04:46.240 --> 04:49.600
some people advocate not being as clear as people can

04:49.600 --> 04:52.860
otherwise guess which part of the credentials was wrong,

04:52.900 --> 04:56.520
I'd argue they can test this anyways by trying to sign up with that e-mail

04:56.650 --> 05:01.000
but whatever you want, you can output or flash such an error message.

05:01.000 --> 05:04.150
Now with that it's in session and it's in there until we use it.

05:04.390 --> 05:08.800
Now we want to use it here when we do render the login page, here

05:08.830 --> 05:14.650
I want to include an error message variable let's say

05:14.980 --> 05:20.710
and that error message variable will simply pull that by using request flash again

05:20.740 --> 05:25.450
and here we now just access the key for which we want to get the message.

05:25.450 --> 05:28.290
So in my case that key is what I specified here,

05:28.410 --> 05:29.130
error,

05:29.430 --> 05:32.100
so now I can pull that message out with error.

05:32.110 --> 05:38.560
So whatever I stored in error will now be retrieved and stored in error message and thereafter, this information

05:38.680 --> 05:40.510
is removed from the session.

05:41.300 --> 05:48.290
So now error message will be set and will hold a value only if we have an error flashed into our session

05:49.150 --> 05:56.770
and therefore we can now move over to our view, to the login view and display the error message here.

05:56.860 --> 06:00.280
Let's say above all of that I add a div

06:00.310 --> 06:05.200
and for now let's make this really simple and just output our error message,

06:05.260 --> 06:11.560
so here error message is the variable in which I'm storing it.

06:11.560 --> 06:14.720
Obviously I want to check if that exists before I render this,

06:14.770 --> 06:20.610
so I will wrap this with some ejs if statement where I check if error message,

06:20.680 --> 06:26.830
this will not be treated as true if it's simply not defined so if we simply are not able to retrieve

06:26.830 --> 06:27.710
anything

06:28.090 --> 06:31.240
and then let's try to output it like this,

06:31.240 --> 06:32.900
let's see if that works.

06:33.040 --> 06:38.070
If I go back to my application and I reload that login page, that seems to work

06:38.170 --> 06:40.490
and now let me enter an invalid email

06:41.540 --> 06:50.810
and indeed I see invalid e-mail or password. If I do enter a valid email but an invalid password, I don't

06:50.810 --> 06:55.980
see that because there I don't flash anything onto my session yet.

06:56.030 --> 06:57.700
So this is working,

06:57.800 --> 07:00.100
now let's quickly reformat that,

07:00.410 --> 07:01.690
I'll do that in next lecture,

07:01.700 --> 07:06.550
you can skip it and download the finished formatted code if you want to and thereafter, let's add this

07:06.620 --> 07:07.970
in other useful places too.
