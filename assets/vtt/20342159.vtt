WEBVTT

1
00:00:02.680 --> 00:00:04.090
<v Instructor>To test this entire API,</v>

2
00:00:04.090 --> 00:00:06.510
we first of all need to compile it.

3
00:00:06.510 --> 00:00:08.660
And we can just run TSC for that,

4
00:00:08.660 --> 00:00:10.010
since this will compile all the

5
00:00:10.010 --> 00:00:11.763
TypeScript files in this project.

6
00:00:13.170 --> 00:00:15.660
So you see that this completes without errors.

7
00:00:15.660 --> 00:00:16.860
One important note,

8
00:00:16.860 --> 00:00:18.620
is that in the models folder,

9
00:00:18.620 --> 00:00:22.030
you'll see the todo JS file is pretty empty here.

10
00:00:22.030 --> 00:00:23.520
And the reason for that is that

11
00:00:23.520 --> 00:00:26.740
interfaces are a pure TypeScript feature.

12
00:00:26.740 --> 00:00:29.240
Which helps TypeScript during compilation,

13
00:00:29.240 --> 00:00:31.800
but which generate no actual code.

14
00:00:31.800 --> 00:00:34.610
Because this feature doesn't create anything

15
00:00:34.610 --> 00:00:37.270
that would exist in JavaScript.

16
00:00:37.270 --> 00:00:39.490
Therefore, we essentially have an empty file here

17
00:00:39.490 --> 00:00:41.940
without anything in it in the end,

18
00:00:41.940 --> 00:00:43.630
if you take a closer look.

19
00:00:43.630 --> 00:00:44.940
But our code still works,

20
00:00:44.940 --> 00:00:47.080
because that todo interface

21
00:00:47.080 --> 00:00:49.940
is only used as a type definition in the other files.

22
00:00:49.940 --> 00:00:51.710
Like here, for example.

23
00:00:51.710 --> 00:00:52.810
And that's a feature which

24
00:00:52.810 --> 00:00:54.730
doesn't exist in JavaScript anyways,

25
00:00:54.730 --> 00:00:55.640
that's what I mean,

26
00:00:55.640 --> 00:00:58.440
it only matters during compilation.

27
00:00:58.440 --> 00:01:00.730
We disregard all those JavaScript files,

28
00:01:00.730 --> 00:01:03.420
and we can now just run them as we're used to.

29
00:01:03.420 --> 00:01:06.570
So here I can just run Node app JS,

30
00:01:06.570 --> 00:01:09.500
and this will spin up our Node Web Server.

31
00:01:09.500 --> 00:01:13.200
And we can now test our REST API with Postman,

32
00:01:13.200 --> 00:01:15.403
as we did it before in this course as well.

33
00:01:16.610 --> 00:01:18.830
Which in case you haven't seen it before,

34
00:01:18.830 --> 00:01:20.930
you can download from Postman.com.

35
00:01:20.930 --> 00:01:24.393
It's a tool that can help you with testing REST API's.

36
00:01:25.600 --> 00:01:26.510
And with that opened,

37
00:01:26.510 --> 00:01:29.290
we can send requests to our running web server.

38
00:01:29.290 --> 00:01:31.730
Which I started with Node app JS,

39
00:01:31.730 --> 00:01:33.900
and that's important Node app JS,

40
00:01:33.900 --> 00:01:36.420
not app TS, but app JS.

41
00:01:36.420 --> 00:01:39.160
We can only execute JavaScript code with Node.

42
00:01:39.160 --> 00:01:41.980
Node is not capable of running TypeScript code.

43
00:01:41.980 --> 00:01:45.400
It's only capable of running JavaScript code.

44
00:01:45.400 --> 00:01:47.740
Therefore, we needed to compile the TypeScript code

45
00:01:47.740 --> 00:01:49.110
to JavaScript first,

46
00:01:49.110 --> 00:01:50.820
to then run the JavaScript code.

47
00:01:50.820 --> 00:01:53.810
So that we during development can use TypeScript,

48
00:01:53.810 --> 00:01:56.480
but Node still executes JavaScript.

49
00:01:56.480 --> 00:01:57.590
So with that up and running,

50
00:01:57.590 --> 00:01:59.460
we can now send the request.

51
00:01:59.460 --> 00:02:02.640
I'm running on localhost 3000,

52
00:02:02.640 --> 00:02:06.410
So therefore, to localhost 3000,

53
00:02:06.410 --> 00:02:08.220
we can send a GET request like this.

54
00:02:08.220 --> 00:02:10.270
And this gives us all the todo's

55
00:02:10.270 --> 00:02:11.870
And you'll see I get back a response,

56
00:02:11.870 --> 00:02:14.480
but of course we have no todo's yet.

57
00:02:14.480 --> 00:02:16.410
So let's send another request,

58
00:02:16.410 --> 00:02:19.280
a POST request to create a new todo.

59
00:02:19.280 --> 00:02:22.183
To localhost 3000/todo.

60
00:02:27.340 --> 00:02:28.633
This once's a request body,

61
00:02:28.633 --> 00:02:32.550
which should be raw and then JSON.

62
00:02:32.550 --> 00:02:33.920
And in that request body,

63
00:02:33.920 --> 00:02:35.690
if we take a look at that route,

64
00:02:35.690 --> 00:02:37.358
we try to extract the text.

65
00:02:37.358 --> 00:02:40.820
So we should make sure that this text exists there.

66
00:02:40.820 --> 00:02:43.840
So here I'll set a text field in this JSON data

67
00:02:43.840 --> 00:02:45.860
I attached to the outgoing request.

68
00:02:45.860 --> 00:02:48.900
And that could be my first todo.

69
00:02:48.900 --> 00:02:51.240
Make sure you write valid JSON here,

70
00:02:51.240 --> 00:02:53.390
with the opening and closing curly brace,

71
00:02:53.390 --> 00:02:55.910
and then your properties between double quotes,

72
00:02:55.910 --> 00:02:57.440
and then on the right side of the colon,

73
00:02:57.440 --> 00:02:58.970
your values.

74
00:02:58.970 --> 00:03:00.040
And if we send this,

75
00:03:00.040 --> 00:03:03.373
I get back to 201 response with the todo

76
00:03:03.373 --> 00:03:06.743
that was created and the new todos array.

77
00:03:07.770 --> 00:03:10.500
I will now also send a second todo,

78
00:03:10.500 --> 00:03:13.830
by just sending the request again with changed data.

79
00:03:13.830 --> 00:03:15.890
And if we now send the GET request again,

80
00:03:15.890 --> 00:03:18.680
we now see that we got those todos here.

81
00:03:18.680 --> 00:03:20.200
Only in memory of course,

82
00:03:20.200 --> 00:03:23.490
so that data will be lost whenever we shut down this server.

83
00:03:23.490 --> 00:03:26.220
But to play around with TypeScript and get those basics,

84
00:03:26.220 --> 00:03:27.270
that's enough.

85
00:03:27.270 --> 00:03:28.670
Throughout the course you'll learn

86
00:03:28.670 --> 00:03:31.703
how you can work with files and databases and so on.

87
00:03:33.340 --> 00:03:35.370
So let's now try the other requests as well.

88
00:03:35.370 --> 00:03:40.370
Let's set a PUT request to localhost 3000/todo/.

89
00:03:42.290 --> 00:03:44.270
And now we need a todo ID.

90
00:03:44.270 --> 00:03:48.690
So now we'll just grab this ID here, for example,

91
00:03:48.690 --> 00:03:50.233
and add that to the URL.

92
00:03:51.750 --> 00:03:53.380
And then add a body

93
00:03:53.380 --> 00:03:55.823
which should be of type JSON of course,

94
00:03:56.840 --> 00:03:58.793
where I add a new text.

95
00:04:00.410 --> 00:04:01.243
So here I'll say,

96
00:04:01.243 --> 00:04:05.770
updated todo as a text and send this, it works.

97
00:04:05.770 --> 00:04:07.760
And if we now fetch all todos again,

98
00:04:07.760 --> 00:04:10.653
we of course see the updated todo here as well.

99
00:04:12.890 --> 00:04:17.780
Now we can simply copy that URL and send a last request,

100
00:04:17.780 --> 00:04:21.080
a DELETE request here to that same URL.

101
00:04:21.080 --> 00:04:24.950
So localhost 3000/todo, and then the ID of the todo.

102
00:04:24.950 --> 00:04:27.770
No data attached, just a DELETE request.

103
00:04:27.770 --> 00:04:30.870
If I send it, I get back my success response.

104
00:04:30.870 --> 00:04:32.620
And of course, if we get all todos,

105
00:04:32.620 --> 00:04:34.580
we see that it was deleted.

106
00:04:34.580 --> 00:04:36.100
So the API works.

107
00:04:36.100 --> 00:04:39.540
And that's now an API built with TypeScript and Node.

108
00:04:39.540 --> 00:04:42.180
Now, I'm not entirely done with it yet though.

109
00:04:42.180 --> 00:04:44.719
Let me quit the server with Ctrl + C.

110
00:04:44.719 --> 00:04:46.620
And let's dig a bit deeper

111
00:04:46.620 --> 00:04:49.010
into this TypeScript Node project,

112
00:04:49.010 --> 00:04:50.360
and what we can do with it.

