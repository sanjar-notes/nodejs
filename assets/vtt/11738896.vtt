WEBVTT

00:02.340 --> 00:06.460
We're now working on the cart and right now, we don't have a cart,

00:06.480 --> 00:08.310
we got a product but not a cart,

00:08.580 --> 00:11.920
let's now add a new model here, the cart.js file

00:11.970 --> 00:19.050
because the cart is like a separate entity in our project you could say. Therefore I'll again export

00:19.080 --> 00:21.540
a class here and I'll name that class cart,

00:21.600 --> 00:26.740
so that is pretty similar to what I do in product, there I export the class product

00:26.750 --> 00:29.370
but now it's class cart

00:29.690 --> 00:33.080
and now we have to think about how we want to manage that cart.

00:33.080 --> 00:39.220
Now obviously we want to have a cart that holds all the products that we added

00:39.280 --> 00:44.630
and we also want to group products by id and increase their quantity in case we add a product more

00:44.630 --> 00:45.980
than once.

00:46.010 --> 00:55.000
So to do all of that, I will first of all create a constructor here which allows us to create a new cart.

00:55.020 --> 01:02.810
Now when this cart is created, I'll add a products property here which should be an array

01:02.940 --> 01:09.120
and there I imagine having some objects in there which do maybe hold information like the ID and important,

01:09.270 --> 01:12.150
also the quantity of this product.

01:12.180 --> 01:18.210
We can also add an information like total price which initially is zero let's say and this of course increase

01:18.210 --> 01:21.190
with every product we add.

01:21.300 --> 01:27.840
Now what we need on this cart though is a way to add and remove our products

01:27.850 --> 01:36.050
obviously. Now the problem we have is the cart itself is not really an object we'll constantly recreate,

01:36.380 --> 01:42.200
not for every new product that we add we want to have a new cart, instead there always will be

01:42.200 --> 01:48.160
a cart in our application and we just want to manage the products in there. So the approach

01:48.180 --> 01:50.560
I want to take will actually be a different one,

01:50.610 --> 01:57.300
I don't really add a constructor instead I'll add a static method, add product like this.

01:57.300 --> 02:04.440
Now this will take the ID of the product I want to add and the goal here will be to then fetch the

02:05.160 --> 02:13.650
old or previous cart from our file for now, analyze that and see if we already have that product,

02:15.040 --> 02:27.100
find existing product and then add new product or increase the quantity. That is what I plan to do,

02:27.150 --> 02:30.550
so let's start with adding the logic for fetching a cart from a file.

02:30.780 --> 02:33.920
For this I'll import the file system here

02:34.230 --> 02:38.310
and also the path helper here,

02:38.460 --> 02:39.010
whoops, path

02:39.010 --> 02:45.310
to construct a good path. Now in product.js, we see how that path should be constructed so we can copy

02:45.310 --> 02:50.990
that basically, go to products, to cart.js and then add it here.

02:51.010 --> 02:54.650
Now the difference is that the file will now be named cart.json

02:54.700 --> 03:01.840
and in there we'll store an object that represents our cart and then here, in this part here for adding

03:01.840 --> 03:08.680
a product, I want to use the file system to read a file and that will be the file at this path so

03:08.680 --> 03:15.400
my cart.json file and we have a callback where I either get an error or or the file content.

03:15.400 --> 03:16.440
Now if we have an error,

03:16.450 --> 03:20.320
we know that the file doesn't exist yet and therefore we got no cart yet.

03:20.320 --> 03:25.940
So if we got an error then our cart will have to be created otherwise

03:25.960 --> 03:31.160
we know that we, well get an existing cart.

03:31.240 --> 03:32.680
So here I'll add a new cart

03:32.680 --> 03:38.290
first of all which will have products that are an empty array and maybe that total quantity we were

03:38.290 --> 03:42.250
talking about, the total price excuse me which is zero.

03:42.790 --> 03:47.770
And therefore if we don't have an error, again that inverse logic, if we don't have an error

03:47.950 --> 03:50.620
then we know we got an existing cart,

03:50.620 --> 03:57.810
so in this case my cart should be equal to the parsed file content. We'll store it as json so I'll

03:57.850 --> 04:00.490
parse that with that json helper.

04:00.490 --> 04:06.160
So now at this point after the if statement, we know that we will have a cart and now we can analyze

04:06.160 --> 04:08.410
it and add a product,

04:08.440 --> 04:13.270
so let's analyze the cart and see if the product we're trying to add already exists.

04:13.270 --> 04:19.420
So we'll search for the existing product by taking our cart products in there,

04:19.420 --> 04:22.180
remember we'll have products in the cart which is an array

04:22.600 --> 04:25.640
and by then finding an element in there.

04:25.660 --> 04:29.860
So again we'll loop through all the products and have a look at each of them, each prod,

04:29.950 --> 04:36.130
so in each product we'll have a look and we'll see if the product ID matches the ID of the product we try

04:36.130 --> 04:37.450
to add.

04:37.510 --> 04:43.090
Now if we got an existing product already, then we simply want to increase that quantity.

04:43.360 --> 04:49.900
So let's say we assume that each product object that gets stored in there is not just a product object

04:50.110 --> 04:57.280
having the data in our product model but also that it has an extra quantity field.

04:57.280 --> 05:02.950
Now if we have an existing product, then I want to create a new product and for this I'll create a new variable,

05:04.300 --> 05:06.430
updated product

05:06.670 --> 05:11.620
and here in this if statement, so if we have an existing product, I'll use updated product 

05:11.700 --> 05:15.930
and now next generation javascript with the object spread operator,

05:16.240 --> 05:22.300
I'll take all the properties of the existing product and add them to a new javascript object

05:22.750 --> 05:30.880
and then on that updated product, I'll set the quantity equal to the old quantity plus one.

05:31.000 --> 05:33.780
So I'll simply increment the quantity by one

05:33.820 --> 05:39.430
and since I distributed all properties of existing product into updated product, the quantity will be

05:39.430 --> 05:44.010
available there already because it was available in existing product.

05:44.020 --> 05:48.490
Now if we have a new product, I'll set updated product equal to

05:48.730 --> 05:53.210
and I should put that into an else block,

05:53.310 --> 05:56.700
so if we have a new one, I will set updated product equal to

05:59.600 --> 06:06.750
a new javascript object where I add information for that product and that will be my ID let's say.

06:06.950 --> 06:12.950
So ID will be equal to the ID I'm getting as an argument and I'll set the quantity to one because

06:12.950 --> 06:19.730
we added just one. Now the remaining thing is that I want to update the price of the cart.

06:19.740 --> 06:26.250
Now we got the cart here with the total price and the total price will always rise by the price of

06:26.250 --> 06:27.870
the product we added.

06:28.260 --> 06:31.010
Now I don't have that information in here though,

06:31.260 --> 06:40.140
so I expect to get it as an argument, product price and therefore here after this if else block, I can say cart

06:40.290 --> 06:46.620
total price equals cart total price plus product price right because we want to, price because we

06:46.620 --> 06:48.070
want increase that.

06:48.270 --> 06:52.220
So now we got our product added,

06:52.390 --> 06:53.520
we found it

06:53.670 --> 06:59.100
and we also analyzed it and added a new product, increase the quantity,

06:59.100 --> 07:09.480
now we just need to save the cart back to our file. And of course the cart should now also contain the

07:09.480 --> 07:12.000
updated product, that's also important.

07:12.090 --> 07:13.720
So we updated the price thus far,

07:13.720 --> 07:15.630
let's now also update the products,

07:15.630 --> 07:19.300
so the products on our cart should equal the old products

07:19.320 --> 07:22.260
and here again I'll use a next gen javascript feature

07:22.260 --> 07:25.850
by spreading the existing products of the cart,

07:26.040 --> 07:29.770
so this will now be an array with all the old cart products

07:29.980 --> 07:33.260
and now the question is what do I want to do?

07:33.630 --> 07:36.690
Well if we are creating a product for the first time,

07:36.720 --> 07:43.600
so if I'm in this else block, then I simply will add the updated product as a new additional product.

07:43.600 --> 07:48.660
However if I got an existing product here, I don't want to add a new product

07:48.660 --> 07:56.850
instead I want to replace the old one and to do that, I need to find out where in my old products this

07:56.970 --> 07:58.770
existing product was located,

07:58.770 --> 08:05.170
so which position it had. To do this I'll get the index instead of the product,

08:05.220 --> 08:12.690
so here I'll have the existing product index and then I'll add my existing product which is simply cart

08:12.780 --> 08:16.620
products at this existing product index,

08:16.620 --> 08:17.950
so one extra step

08:18.060 --> 08:24.080
but this now allows me to use that index to replace the item in our cart products here.

08:24.540 --> 08:32.310
So there, I will set cart products equal to cart product,

08:32.310 --> 08:38.950
so first of all copying the old array just as we're doing it down there

08:39.160 --> 08:42.720
but then I'll not add updated products, instead

08:44.940 --> 08:53.040
I will set cart products and overwrite existing product index, so at this position I will replace

08:53.040 --> 08:55.670
the element with my updated product.

08:55.670 --> 09:01.900
So now the updated product is either replaced or added to the cart products and the price is updated,

09:02.040 --> 09:09.310
now we can save it back and for this, we can use the file system write file and write it to that path

09:09.750 --> 09:15.160
and then of course also define what we want to put there

09:15.210 --> 09:17.550
and I want to write my cart into the path,

09:20.100 --> 09:23.010
obviously in a stringified

09:23.010 --> 09:25.020
version, so as json

09:25.110 --> 09:30.300
and then here I have a callback where I might get an error which I want to output so that I see if I

09:30.300 --> 09:31.820
do have one and which one it is

09:31.830 --> 09:35.330
if I got one and then I am done.

09:35.340 --> 09:39.690
So this is now an add product method that hopefully does the trick,

09:39.870 --> 09:41.520
let's simply try it out.

09:41.760 --> 09:44.340
So for this, let's go to the shop controller

09:44.490 --> 09:47.610
and in post cart, I want to add my product.

09:47.820 --> 09:52.720
This of course means here first of all I need to get the product because I need its price too,

09:52.920 --> 10:01.230
so I will use product find by ID for my product ID and then I have this callback where I get my product,

10:01.230 --> 10:06.660
so here that is the product that is retrieved from the products database so to say, from the products

10:06.660 --> 10:07.470
file

10:07.800 --> 10:11.880
and once I have this, I can use the product information to update my cart.

10:12.180 --> 10:15.140
So in here, I now want to use my cart model.

10:15.390 --> 10:21.930
First of all, let's import it, cart by requiring it from the models folder and there from the cart

10:21.960 --> 10:31.430
folder and with it being imported, let's go down to post cart and say cart add product and now cart

10:31.470 --> 10:38.190
the model basically serves as a utility model you could say, we're not instantiating it

10:38.220 --> 10:46.200
instead were using this static function and I'll use add product to pass in my prod ID and also my, here

10:46.460 --> 10:47.030
product

10:47.040 --> 10:53.700
that is what I'm retrieving from the product file, my product price because that is also information that

10:53.700 --> 10:54.680
I need in there.

10:56.540 --> 11:03.000
With that let's see if that works by going back to our app here and clicking add to cart,

11:03.220 --> 11:08.330
now looks good because we're logging the error here and if we see null that means there was no error

11:08.560 --> 11:15.500
and now we got cart.json and in there, I got products which is an array of products with an ID and the quantity

11:16.340 --> 11:21.290
and the price is stored as a string which is a bit suboptimal here I have to say, so we'll have to

11:21.290 --> 11:22.440
work on that

11:22.610 --> 11:24.810
but besides that, this is looking good.

11:24.920 --> 11:32.300
Now if I add another product or the same product again, then we see indeed the quantity was increased,

11:32.390 --> 11:37.180
the price is misbehaving because it's stored as a string and therefore concatenated,

11:37.400 --> 11:43.720
so we'll have to do something about that. In cart.js the price we're extracting, it's stored as a string

11:43.730 --> 11:45.770
in our product model,

11:45.770 --> 11:49.010
so what we have to do is here when we work on the price,

11:51.830 --> 11:57.030
I have to add a plus in front of product price to convert that string to a number

11:57.350 --> 12:05.080
and now if we quickly delete cart.json to start from scratch and I add my element to the cart again

12:06.570 --> 12:09.310
and I do that again and we now look into cart.json,

12:09.330 --> 12:12.350
now this is looking better.

12:12.420 --> 12:15.410
So this is now working, this is our cart model added

12:15.570 --> 12:22.830
but with that let's go back to our routing topic which we had in this module and let's see what query

12:22.830 --> 12:27.180
parameters are and how they can help us with editing a product.
