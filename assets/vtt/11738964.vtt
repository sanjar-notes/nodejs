WEBVTT

00:02.360 --> 00:08.400
So we're executing a query here with execute on our pool, on the products table we just created and I

00:08.400 --> 00:15.910
added then and catch. These are functions we can chain onto the result of the execute call,

00:15.930 --> 00:21.540
so they will execute on whatever this gives us back and this whatever is some so-called promise.

00:21.540 --> 00:26.340
Now a promise is a basic javascript object not specific to node,

00:26.340 --> 00:32.790
it's also available in javascript in the browser which allows us to work with asynchronous code. Instead

00:32.790 --> 00:39.600
of using callbacks which we could also use with the MySQL package, promises allow us to write more structured

00:39.600 --> 00:45.930
code because instead of having a nested anonymous function here as a second argument, we simply have

00:46.360 --> 00:50.970
a then block which will then get the anonymous function to execute.

00:50.970 --> 00:52.070
Now the advantage is

00:52.080 --> 00:53.660
we can also write it like this

00:53.700 --> 00:55.480
and now we have very readable code

00:55.590 --> 01:00.960
instead of having a nested code here and that nested code especially becomes a problem if we have more

01:01.050 --> 01:04.830
and more asynchronous tasks depending on each other.

01:04.860 --> 01:10.530
Now we also don't just have then, we also have catch and this also has a function which executes in case of

01:10.530 --> 01:11.520
an error,

01:11.520 --> 01:17.940
so for example if the database connection fails or something like this. We get the error object here

01:18.090 --> 01:23.170
and this is just a modern javascript syntax where we get one argument and then we handle it here

01:23.370 --> 01:28.410
and I can simply log it with the console so that we at least see what the error was.

01:28.410 --> 01:33.850
Now we hopefully end up here and we probably get an argument here too,

01:34.020 --> 01:35.530
let's name it result for now

01:35.610 --> 01:38.250
and let's also log result here then

01:38.550 --> 01:40.160
and now let's see what we get.

01:40.290 --> 01:46.440
If I run npm start to bring up that server again, this immediately executes because it's part of the

01:46.440 --> 01:47.820
app.js file

01:47.820 --> 01:54.370
and if we have a look at this, we see this is the object we got back and in this object, we essentially also see the

01:54.390 --> 01:57.250
data that was retrieved here. The

01:58.180 --> 02:05.080
data we do get back has a format of an array with a nested array where the first nested array seems

02:05.080 --> 02:13.270
to depict our data, the rows it fetched and the second array seems to hold some metadata about the table

02:13.270 --> 02:14.950
we fetched it from.

02:14.950 --> 02:18.060
So result basically is an array with two nested elements, 

02:18.160 --> 02:25.900
so we can also logout results 0 and result 1 here and if we now save this and therefore our server restarts,

02:27.780 --> 02:29.360
we have almost the same output

02:29.460 --> 02:37.210
but now it's not a nested array but here we have the first object we retrieved, the row we got

02:37.410 --> 02:38.800
and then this ends here,

02:38.800 --> 02:42.350
here is the closing square bracket and then here we get the second log,

02:42.390 --> 02:45.460
so this is the result one with the metadata.

02:45.720 --> 02:49.010
This is what we get back and this should allow us to work with our data.

02:49.020 --> 02:54.840
Now obviously we don't just want to work with dummy data but let's now see how we can adjust our models

02:54.840 --> 02:58.340
to interact with our database instead of local files.
