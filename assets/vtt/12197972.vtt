WEBVTT

00:02.260 --> 00:04.230
Now that we can load a single post,

00:04.240 --> 00:06.880
let's make sure we can also edit a post

00:06.940 --> 00:13.870
and as always, that journey starts on the backend. There in the schema, we want to add a new mutation

00:14.110 --> 00:17.000
because obviously editing a post is a mutation,

00:17.740 --> 00:18.640
I'll name it

00:18.640 --> 00:23.710
update post and I expect to get the ID of the post

00:23.710 --> 00:32.220
I want to edit and then some post input which is my post input data, so the exact same data I expected

00:32.230 --> 00:38.690
to get for creating a new post. As a result I will return the updated post.

00:38.890 --> 00:41.230
So this is my schema,

00:41.260 --> 00:51.660
now onto the resolvers where I will add update post as an async function again where I get my arguments,

00:51.660 --> 00:58.750
I will have the ID and the post input and the request object.

00:58.960 --> 01:00.420
So this is my update post

01:00.460 --> 01:02.930
resolver, in there

01:02.960 --> 01:06.680
I first of all want to check the authentication status and throw an error

01:06.700 --> 01:08.330
if the user has not authenticated

01:08.410 --> 01:14.230
hence we can copy the code from our other resolver functions where we had a similar check and then I'll

01:14.260 --> 01:22.840
first of all get my post by using await and post find by id and using that ID I extract as an argument.

01:22.840 --> 01:25.610
I'll also populate that with the creator

01:25.620 --> 01:30.440
so that we have the full user data when we return the update post,

01:30.520 --> 01:38.970
then I'll check if we don't find a post and I can copy that check from up there to return an error

01:39.050 --> 01:45.740
in that case and if we do have a post, well then I want to check if the user who tries to edit it is the

01:45.740 --> 01:48.850
user who created it and for that, I'll check

01:48.860 --> 01:54.680
if post creator_id toString,

01:54.680 --> 01:57.370
if that is equal to request user ID

02:01.360 --> 02:04.260
and that also convert it to a string.

02:04.600 --> 02:07.620
If these two match, then I know this user is the creator,

02:07.690 --> 02:08.860
if they don't match,

02:08.860 --> 02:14.890
so if I add an exclamation mark here, then know someone tries to edit the post who is not authorized to do

02:14.890 --> 02:20.020
so. And in this case, I'll again create an error,

02:20.080 --> 02:24.330
not authorized, could be the error message we throw,

02:24.400 --> 02:30.740
I'll add a code of 403 and I'll throw that error and then we can continue.

02:31.240 --> 02:40.430
If we are the right user however, we can now edit the post and set the title equal to post input title,

02:40.570 --> 02:44.260
we could now also add validation by the way and we should,

02:44.260 --> 02:50.820
so I can scroll up to my create post function and grab that validation logic,

02:51.040 --> 02:57.490
all the logic beginning from the empty array being set up to the errors being checked and that is something

02:57.490 --> 03:00.430
I also want to do before I start editing my post

03:00.440 --> 03:01.510
title and so on

03:01.750 --> 03:04.340
but now here I know that the input is valid.

03:04.450 --> 03:07.810
So now I will edit my title,

03:08.110 --> 03:16.250
I will edit my content and I will now also edit my image url

03:16.250 --> 03:22.790
if it changed and that is not guaranteed because the user did not select a new image, the image will

03:22.790 --> 03:26.680
not have changed. So I'll check if post image image

03:26.720 --> 03:30.630
url is unequal to undefined

03:30.830 --> 03:35.150
and now this has to be checked against a text because it will be converted to text,

03:35.150 --> 03:39.350
by the way I'm sending it on the frontend. So if this is undefined,

03:39.380 --> 03:48.140
then I will continue but if it is not undefined, then I'll also override the image url with the

03:48.200 --> 03:50.360
new image url of course,

03:50.510 --> 03:59.110
otherwise I will not touch the image url and then I'll have my updated post by awaiting for

03:59.110 --> 04:05.590
post save and I will then return my updated post here or some data.

04:05.590 --> 04:17.620
I will return my updated post doc data and again replace the ID with updated post ID toString and

04:17.680 --> 04:26.370
the same for the dates, createdAt will be replaced with updated post createdAt to ISO string and updatedAt

04:26.380 --> 04:33.990
will be replaced with updated post updatedAt to ISO string,

04:33.990 --> 04:39.790
so this is the response I want to send back to my client here.

04:39.860 --> 04:43.780
With that we get a resolver in place, we hopefully get everything in place we need,

04:43.780 --> 04:52.800
let's now go on to our react application and there in feed.js, we need to find finish edit handler.

04:54.110 --> 04:55.280
So if we scroll down,

04:58.900 --> 05:08.780
in this function, in the finish edit handler function, we will always send our image to that endpoint,

05:09.110 --> 05:15.030
though of course it could be the case that there is no image to append if no new image was chosen

05:15.170 --> 05:16.310
but that will be fine,

05:16.310 --> 05:21.570
we do handle that scenario in our endpoint right, in post image,

05:21.590 --> 05:26.380
we check for the existence of a file and we send a response if no file was provided.

05:26.840 --> 05:29.640
So thereafter here we continue

05:29.810 --> 05:36.350
and we'll have a file path though that file path might very well be undefined and that is why in my

05:36.380 --> 05:39.700
graphql API, I check for it being undefined.

05:39.980 --> 05:47.090
We could handle this in different ways of course, we could alternatively simply keep the old file path

05:47.140 --> 05:49.160
here then if this is undefined

05:49.160 --> 05:53.320
but I will go with this approach and then we send the graphql query.

05:53.330 --> 06:00.500
Now of course it will not always go to create post though, it might also be that we edit a post.

06:00.710 --> 06:08.390
So I'll check if this state edit post is true-ish which means we are editing and then I'll set graphql

06:08.410 --> 06:10.550
query to a different query,

06:10.620 --> 06:21.200
so to an object where my query then looks differently. I will copy this query in general so I'll copy

06:21.200 --> 06:30.570
all the code between my opening and closing back ticks, like this

06:30.710 --> 06:38.920
but of course I'm targeting update post here and not create post, so I'm targeting this mutation here

06:39.920 --> 06:42.530
and there, I also need to pass in different data.

06:42.590 --> 06:44.610
I need to pass in my ID

06:48.740 --> 06:55.280
which I get from this state edit post_id,

06:55.580 --> 06:58.530
I still pass in the post input as before,

06:58.550 --> 07:08.200
that did not change and I still want to get the same data back, so that also does not change.

07:08.260 --> 07:13.750
Then we send that request and in the handler of the request,

07:13.900 --> 07:18.710
I already have some logic that should handle this correctly if we are updating.

07:19.090 --> 07:22.150
So let's save that all and let's give it a try,

07:22.270 --> 07:30.240
let's reload and let's edit another duck and add a couple of exclamation marks without adding a new image

07:30.430 --> 07:33.640
and I get an error here.

07:33.860 --> 07:37.010
In general though, it looks like it worked,

07:37.010 --> 07:41.420
I have my exclamation marks here and the image, the old one is also still there,

07:41.420 --> 07:42.680
I can also still view that

07:42.710 --> 07:46.870
and here I see the change too. Now regarding that error,

07:46.870 --> 07:52.230
well that is related to how we extract data from the response, we access create post

07:52.330 --> 07:59.920
but of course if we send an update post request, then this field in which our response data is stored

08:00.070 --> 08:03.100
will be named update post and not create post.

08:03.460 --> 08:05.290
Therefore here and we can

08:05.290 --> 08:06.650
by the way validate this here,

08:06.670 --> 08:08.770
it's stored in update post.

08:08.770 --> 08:16.270
Therefore what we can do is we can add a new variable, response data field or whatever you want to name

08:16.270 --> 08:16.630
it

08:16.840 --> 08:23.170
and by default that should be create post because creating a post also is our default query up there.

08:24.400 --> 08:35.380
But then I'll add an if check and I'll see if this state edit post is true-ish

08:35.490 --> 08:41.750
in which case the data field where I want to extract the data will be update post

08:41.760 --> 08:47.880
and now we just need to use that variable here to dynamically retrieve our data and we can do that by

08:47.880 --> 08:56.310
selecting all these create post instances here with the first dot and replace them with square brackets

08:56.550 --> 09:03.420
where we pass in res data field and this will now use the value inside of res data field to access,

09:03.660 --> 09:08.520
well property with the name of that value on our data object.

09:08.520 --> 09:16.380
And now if we reload, we should be able to remove the exclamation marks and try out choosing a cup as

09:16.380 --> 09:17.480
an image here,

09:17.490 --> 09:22.750
accept, no error and we see the cup here too.

09:22.800 --> 09:29.900
So this all seems to work, the status and deleting of posts are the remaining things that don't work.
