WEBVTT

00:02.640 --> 00:06.060
Adding products is also very simple.

00:06.060 --> 00:12.000
We got our admin.js controller where we do interact with the product in the way of creating it,

00:12.120 --> 00:13.670
here post add product,

00:13.680 --> 00:19.470
we create a new product and call save and I essentially want to leave that code as it is with one tiny

00:19.470 --> 00:20.510
change.

00:20.520 --> 00:27.310
So first of all, we have to go to the product.js file in the models folder and there, the save method is

00:27.330 --> 00:30.540
not doing anything at the moment.

00:30.560 --> 00:35.700
Now what it should do is it should reach out to the database and save the data there,

00:35.720 --> 00:42.260
so again I'll use my db constant, the one up here which gives me access to my database pool, to my connection

00:42.260 --> 00:45.860
pool and I'll call execute to execute a query.

00:45.860 --> 00:54.350
Now with SQL, we saw select for getting data, for inserting data there is the insert into command

00:55.100 --> 01:00.380
and there, we then define the table where we want to insert something and I'll use the products table here

01:01.100 --> 01:04.780
followed by brackets where we list the different fields

01:04.790 --> 01:06.780
we want to insert value into.

01:06.800 --> 01:13.850
So we have the title, the price, the image url and the description and important, you need to make sure

01:14.090 --> 01:20.580
that the fields you define here match the field names you defined in your table, in the database,

01:20.750 --> 01:27.040
you don't need to specify the ID because that should be generated automatically by the database engine.

01:27.050 --> 01:27.900
Now we're not done,

01:27.920 --> 01:33.000
this only defines where do we want to insert something, the what is missing,

01:33.110 --> 01:37.770
we now need the values keyword followed by brackets with the values.

01:38.070 --> 01:47.120
Now to safely insert values and not face the issue of SQL injection which is an attack pattern where

01:47.140 --> 01:54.680
users can insert special data into your input fields in your webpage that runs as SQL queries,

01:54.800 --> 02:00.080
we should use an approach where we just use question marks, one for each of the fields we insert data

02:00.080 --> 02:07.100
into separated with commas and then there is a second argument we pass to execute with the values

02:07.100 --> 02:09.810
that will be injected instead of these

02:09.860 --> 02:10.810
question marks,

02:10.820 --> 02:16.690
so the order of the elements we add here to this array is the order of arguments here.

02:16.980 --> 02:21.740
And we don't do this on our own because this MySQL package we're using here

02:21.890 --> 02:28.850
will then safely escape our input values to basically parse it for a hidden SQL commands and remove

02:28.850 --> 02:29.830
them,

02:29.840 --> 02:35.990
so now this is an extra security layer. And here I want to insert this title because the first question

02:36.010 --> 02:38.840
mark will be inserted as a value for title,

02:38.870 --> 02:41.320
so the first element here should be the title,

02:41.720 --> 02:43.620
second one will be the price,

02:43.670 --> 02:52.500
so here we should have this price followed by this image url and this description. This allows me

02:52.500 --> 02:54.380
to insert elements there

02:54.570 --> 03:01.500
and again I will simply return the promise that execute yields. That allows us to go back to the admin.js

03:01.500 --> 03:09.810
file, to the controller and on save, I can then add then and catch again, in catch I'll just log the

03:09.800 --> 03:10.480
error

03:10.650 --> 03:14.850
but in then, I don't care so much about the result,

03:14.850 --> 03:24.100
I just want to make sure that I only redirect inside this function, so only redirect once the insert completed.

03:24.110 --> 03:32.630
Now with that, we can save all our files and if we now try to insert a second product with some dummy url

03:32.630 --> 03:34.800
which of course will not work,

03:34.820 --> 03:43.430
9.99 and some description and we click add product here, we are redirected and this is looking

03:43.430 --> 03:44.380
pretty good

03:44.840 --> 03:51.890
and if we have a look at our database and click that refresh button here, we see our entry, so our new

03:51.890 --> 03:54.260
entry with an auto-generated ID.

03:54.860 --> 03:56.200
So this is working,

03:56.210 --> 04:00.350
we now are able to also insert data into our database.

04:00.500 --> 04:06.020
Now as a next step, let's make sure we can click the details icon here and therefore retrieve data for

04:06.020 --> 04:09.830
a single document or a single entry in our database.
