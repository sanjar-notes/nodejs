WEBVTT

00:02.280 --> 00:06.330
Rest and spread are important syntax to know.

00:06.720 --> 00:12.000
Now I want to dive into another important feature and that is the structuring.

00:12.540 --> 00:19.080
Now let me comment out this code down there and let's begin with Object D structuring.

00:19.470 --> 00:25.680
I got my personal object and now let's say we have some code where I only need to name.

00:26.190 --> 00:29.910
So I have a new function print name, let's say.

00:30.240 --> 00:36.660
And that actually takes the full person object because for whatever reason we write wrote it like this,

00:36.660 --> 00:45.990
or we simply have a function where we are able to get multiple arguments or a full object because some

00:45.990 --> 00:48.480
third party package always gives us that person.

00:48.480 --> 00:49.860
We can't change that.

00:49.860 --> 00:55.890
So we get the person here and I only want to console.log person that name.

01:00.370 --> 01:02.800
Now that is totally fine of doing it like this.

01:03.040 --> 01:05.740
I can now execute a print name here.

01:05.770 --> 01:10.390
Now I need to pass person here now to avoid naming confusion.

01:10.390 --> 01:11.050
Confusion?

01:11.050 --> 01:13.270
You can name this here however you want.

01:13.270 --> 01:16.060
So here we could name it person data.

01:16.060 --> 01:17.950
And inside here we use person data.

01:17.950 --> 01:20.470
So that function does not use that person.

01:20.470 --> 01:22.510
It just expects any person data.

01:22.510 --> 01:26.560
We then call that function and pass in that person as an argument.

01:26.980 --> 01:31.750
And now if they execute that file, I see Max here.

01:31.930 --> 01:34.450
This is stemming from this line here.

01:34.810 --> 01:37.270
Now, of course, we can absolutely do it like that.

01:37.690 --> 01:43.090
And we always get person data because again, let's say this is a function which is actually called

01:43.090 --> 01:47.140
by some third party package, which is a pattern you see quite a bit throughout this course.

01:47.950 --> 01:54.760
Now, therefore, we can't change the data we get, but in this function here we are only interested

01:54.760 --> 01:55.810
in the name.

01:56.170 --> 02:03.340
We can then use a syntax or a feature called Object D structuring where we add curly braces here in

02:03.340 --> 02:03.880
the.

02:04.900 --> 02:09.190
Argument list and we then specify the property of the incoming object.

02:09.190 --> 02:11.320
We are interested in name.

02:11.470 --> 02:14.260
That is this property we have here.

02:14.950 --> 02:18.970
Then this will be pulled out of the incoming object.

02:18.970 --> 02:25.600
The other properties will be dropped for this function and it will be stored in a variable named name,

02:25.600 --> 02:27.220
which we then can use in there.

02:27.490 --> 02:29.440
So now if I execute this again.

02:31.760 --> 02:37.850
I also see Max, but now we're using this de structuring syntax and we can pull out the FF too if you

02:37.850 --> 02:38.570
want to.

02:38.810 --> 02:40.460
Or the grid function.

02:40.820 --> 02:42.260
So that all works.

02:42.260 --> 02:50.030
And that is just a syntax we can use that allows us to write a bit of a more understandable code where

02:50.030 --> 02:55.490
we are very clear about what we need from the incoming object and which then gets stored in a local

02:55.490 --> 02:58.520
variable that we can just use in this function.

02:58.700 --> 03:03.440
And you can of course not just use the structuring inside of a function, you can always use it outside

03:03.440 --> 03:03.920
of there.

03:03.920 --> 03:11.660
You can create a new constant here, for example, and then the syntax will look like this curly braces

03:11.690 --> 03:16.220
equals person, curly braces on the left side of the equals sign or something.

03:16.220 --> 03:21.110
We don't see that often in JavaScript because typically it's wrong, but for the structuring it's correct.

03:21.260 --> 03:27.890
And then here we can have the name and the H and this will create two new constants which hold the values

03:27.890 --> 03:29.210
stored in name and H.

03:29.210 --> 03:37.910
So these names here have to match the property names of the person and now we can console, log name

03:37.910 --> 03:39.470
and h like this.

03:39.740 --> 03:41.900
If I now re executed file.

03:41.930 --> 03:48.800
This output here is coming from this console log and the values we're outputting here are retrieved

03:48.800 --> 03:51.410
via object D structuring.

03:53.880 --> 03:56.940
Now, there's also not just object restructuring.

03:56.940 --> 03:59.400
You can also restructure, erase.

03:59.490 --> 04:01.530
So if we go back to the hobbies.

04:02.190 --> 04:03.270
What you have here.

04:04.000 --> 04:06.610
Well, then, if we would want to structure that.

04:07.810 --> 04:10.490
We can also create a cost.

04:10.510 --> 04:13.780
You could also use led, by the way, the same for the object restructuring.

04:13.780 --> 04:23.650
If you plan on changing it, you could use a cost for hobby one and hobby two wrapped in square brackets.

04:26.190 --> 04:28.170
And then assign this to hobbies.

04:28.290 --> 04:37.530
And now if you console.log hobby one and you console log hobby two and you execute that file again,

04:37.710 --> 04:40.030
you see the two hobbies being printed there.

04:40.050 --> 04:45.330
Please note there are no square brackets around them in the console log because we're not logging in

04:45.330 --> 04:46.830
array here we are logging.

04:46.830 --> 04:50.160
Q Individual values, which we got via.

04:51.350 --> 04:53.060
Air raid restructuring.

04:54.230 --> 05:01.340
Unlike the object restructuring here, you can choose any names you want because in a race your elements

05:01.340 --> 05:02.510
have no names.

05:02.510 --> 05:05.420
They are instead pulled out by position.

05:05.420 --> 05:07.640
So this will always be the first element.

05:07.640 --> 05:10.640
This will be the second element in objects.

05:10.640 --> 05:13.250
You pull them out by name, by property name.

05:13.610 --> 05:17.510
So that is the structuring and this is also something used in this course.

05:17.510 --> 05:24.890
It simply allows us to access elements in objects or arrays quickly by their name or position and to

05:24.890 --> 05:25.700
drop.

05:25.700 --> 05:27.140
And that does not mean delete.

05:27.140 --> 05:28.250
They're not getting deleted.

05:28.250 --> 05:32.390
They're just not used in our function or whatever we're writing.

05:32.390 --> 05:38.750
So to drop the data, we don't need in that specific code snippet we're working on.
