WEBVTT

00:02.400 --> 00:09.930
Now we got a running application. Now that is how we deploy our application to heroku, heroku is just

00:09.930 --> 00:11.980
one possible hosting provider

00:12.000 --> 00:14.570
so definitely explore alternatives,

00:14.610 --> 00:20.610
check out the documentation for your favorite hosting provider to learn the exact steps on how to get

00:20.610 --> 00:24.810
your code onto it and which additional configuration you might need to do,

00:24.870 --> 00:30.650
that always differs a bit but it never differs that you need to get your code onto that server there

00:30.720 --> 00:35.450
and spin up your node server and pass your environment variables, that is always the same,

00:35.490 --> 00:38.910
so check out the docs for your favorite hosting provider.

00:39.180 --> 00:42.270
Now this of course was our shop application,

00:42.270 --> 00:46.190
it was not the rest API and not the graphql API

00:46.500 --> 00:54.000
but there, I will not show you specific deployment videos because actually deploying these does not differ.

00:54.350 --> 00:54.800
There

00:54.930 --> 01:00.600
we still have a normal node server right, a node express application so we can deploy it in exactly the

01:00.600 --> 01:01.430
same way.

01:01.680 --> 01:05.940
The only thing that will differ is that we can't really click open app anymore,

01:06.030 --> 01:11.780
well we can but then on the starting page, we'll not see much because there are no server side rendered

01:11.800 --> 01:12.480
views,

01:12.720 --> 01:19.920
instead we'll have an API running where we can send requests to and will then be our frontend application

01:20.040 --> 01:23.730
or our mobile application where we have to adjust the

01:23.890 --> 01:30.780
url to send the request to our now running hosted application and not to localhost anymore.

01:31.350 --> 01:38.400
So there in your application, you'll have to exchange your urls here and use your hosted domain

01:38.550 --> 01:39.940
and not localhost

01:39.960 --> 01:41.420
but that is the only thing

01:41.550 --> 01:46.710
and then the frontend app or the mobile app is deployed differently anyways.

01:46.860 --> 01:53.730
A mobile app is sent to your users through the app stores, a frontend application as this one built with

01:53.730 --> 02:00.600
react typically is deployed as a static web application and that is something you can learn in my react,

02:00.630 --> 02:02.430
angular and so on courses.

02:02.610 --> 02:08.820
You simply build this project with the build script you can find in package.json, in this case it

02:08.820 --> 02:15.990
would be npm run build and this will then spit out a new folder with all the built and optimized code

02:16.380 --> 02:17.210
and more on that

02:17.250 --> 02:22.890
in the respective courses on these frameworks, why that is required and so on, you learned all about that there.

02:23.160 --> 02:24.650
And then you would take that code,

02:24.660 --> 02:31.890
in this case in the build folder and ship that to a static web post like for example AWS S3

02:32.250 --> 02:38.190
and then serve your app on a totally different server than your node application is running on because

02:38.190 --> 02:45.450
as you learned many times in this course, there is no strong relation between your node API and your frontend

02:45.540 --> 02:47.610
mobile app, whatever it is.

02:47.610 --> 02:49.560
So that is how you would deploy that.
