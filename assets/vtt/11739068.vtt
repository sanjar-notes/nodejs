WEBVTT

00:02.500 --> 00:11.530
Time to add the checkout button. For that I'll go into my cart view here and in the cart view, I'll add a

00:11.530 --> 00:20.070
button below all my list items, so below the unordered list here but still in the first if block, I'll add it

00:20.070 --> 00:28.520
inside a form and that button will get a class button where it will have a caption of order

00:28.520 --> 00:30.950
now let's say, it will be of

00:31.830 --> 00:40.410
type submit and the form will have an action that leads to let's say create order, the name is up to

00:40.410 --> 00:41.000
you,

00:41.140 --> 00:46.680
whoops no comma here and a method of post.

00:46.840 --> 00:53.000
If I save this, we can go back to the cart page and reload it,

00:53.020 --> 00:57.060
now we got no product in there because I recreated all table so

00:57.070 --> 01:01.640
let's quickly add a new product and let's add it to the cart.

01:02.020 --> 01:03.040
Now it's not centered,

01:03.070 --> 01:09.420
let's do that by wrapping our form with a div which gets the centered helper class

01:09.540 --> 01:11.770
I defined earlier,

01:11.800 --> 01:14.840
so it's already part of your css files,

01:14.920 --> 01:22.390
save this and now we have the order now button here, let's also maybe add a horizontal line to have some

01:22.390 --> 01:29.290
space. And with that set up here which is good for me now, I want to click that button to move the cart

01:29.410 --> 01:31.900
items into order items

01:31.960 --> 01:40.290
so to say, so to create an order with all the elements in there. And to see this, I'll add a second product

01:40.290 --> 01:41.370
here real quick

01:41.370 --> 01:43.990
so that we have one more item,

01:44.130 --> 01:45.900
one and more items in the cart.

01:45.990 --> 01:51.470
So now order now should create a new order with these two items and clear the cart.

01:51.510 --> 01:56.690
Let's go to shop.js and make sure we have an action for creating a new order,

01:56.730 --> 02:09.010
so here I will go there and exports post order which has the normal middleware function as we know it,

02:09.010 --> 02:12.820
I'll also create the new route for this to handle a post request

02:12.820 --> 02:20.870
to this order route, so a post request to /create order. For that let's go to routes

02:20.940 --> 02:31.060
shop.js and let's register a new route here, router post create order and there, I'll use my

02:31.060 --> 02:36.520
shop controller post order, this new action I just added which doesn't do anything yet.

02:37.490 --> 02:46.560
So post order here should now take all the cart items and move them into an order. For this, let's first

02:46.560 --> 02:55.430
of all get all the cart items by accessing the request user and then calling get cart. This gives me access

02:55.430 --> 02:57.720
to the cart as we did it before,

02:58.190 --> 03:01.370
so here I'll console log any errors I might have

03:01.550 --> 03:08.360
and then here, I simply have access to the cart. Now with access to the cart, we can get access to all the products

03:08.360 --> 03:13.750
in there with cart get products and this will return all products by default,

03:14.000 --> 03:26.630
so now here I can call then, products and I can simply console log my products here if I want.

03:26.680 --> 03:29.960
If we now click this button, it won't do anything here

03:30.250 --> 03:36.970
but in the console, we can see the products that were retrieved and we see that the products that were

03:36.970 --> 03:42.820
retrieved are the products here which also have that cart item attribute which in turn gives us information

03:42.820 --> 03:45.800
about the cart item in this in-between table.

03:46.270 --> 03:47.150
So this is looking good,

03:47.170 --> 03:49.120
we got access to the products,

03:49.150 --> 03:56.860
now the idea is that we move the products into a newly created order. For this let's import the order

03:56.890 --> 03:57.530
model here

03:57.550 --> 04:05.470
first of all, so time to import order here from the order file.

04:05.610 --> 04:09.950
By the way, we don't need the cart import here because we never directly use the cart model,

04:10.020 --> 04:15.410
we always do so through the user model but we'll need the order model here

04:15.510 --> 04:16.980
or do we?

04:17.550 --> 04:22.770
Well just as a cart is related to user, so is an order,

04:22.770 --> 04:28.740
so we don't even need that import, we can clear both cart and order because we'll create a new order as

04:28.740 --> 04:31.450
an order that is associated to a user.

04:31.470 --> 04:39.030
So in post order here, we can now call request user and just as we create a cart for that user in app.js

04:39.030 --> 04:48.000
with create cart, we can now call create order for that user.

04:48.210 --> 04:51.110
Now this gives us an order but we don't just need the order,

04:51.120 --> 04:54.270
we also need to associate our products to that order,

04:54.630 --> 05:04.190
so here I'll return request user create order. And with the order created, and here I'll again do this nested,

05:04.220 --> 05:08.560
you can always restructure it to not use a nested promise here though if you want

05:08.720 --> 05:15.410
but here I will get my created order and now I want to associate my products to that order and that

05:15.410 --> 05:25.340
can be done easily by calling order add products and passing my products here. Now important, we need

05:25.340 --> 05:31.690
to specify true and set the quantity here correctly too

05:32.240 --> 05:38.090
but now which value would we assign there because we get different quantities for all the products?

05:38.150 --> 05:40.280
The approach is a little different,

05:40.340 --> 05:41.950
we don't pass it like this,

05:41.990 --> 05:50.180
we just pass products to add products but each product needs to have a special key, a special field which

05:50.180 --> 05:53.260
is then understood by sequelize. Now

05:53.270 --> 05:59.750
to assign that special field I'm talking of, the products we pass in here have to be modified and we

05:59.750 --> 06:01.570
can do this with the map method,

06:01.640 --> 06:10.010
a default javascript method that runs on an array and returns a new array with slightly modified elements.

06:10.580 --> 06:16.400
We add a function here that is executed for every element in the array and takes the element as an input

06:16.760 --> 06:19.240
and returns the modified version.

06:19.380 --> 06:27.470
I'll return products here in the end but before I do so, I do edit it slightly, a new property which sequelize

06:27.470 --> 06:30.710
will look for named order item.

06:30.710 --> 06:33.500
Now the name here is important to get this right.

06:33.650 --> 06:40.310
If in your order item model, you define this name, that is the name you have to use, if you chose a different

06:40.310 --> 06:40.600
name,

06:40.600 --> 06:42.010
you have to use the different name.

06:42.020 --> 06:46.500
So here I have order item with a lower case o and a capital I

06:46.510 --> 06:50.990
and therefore here, I have product order item written in the same way.

06:50.990 --> 06:56.260
This now stores a javascript object where I configure the value for this in-between table,

06:56.420 --> 07:02.140
so here I simply define quantity which is the value I need to store in between

07:02.180 --> 07:06.200
and I set this equal to product cart item,

07:06.200 --> 07:08.050
this is the related table

07:08.210 --> 07:11.150
I have due to my cart, quantity.

07:11.210 --> 07:15.110
So I get the quantity from the cart and store that for the order item,

07:15.140 --> 07:17.380
this then gets returned here, 

07:17.540 --> 07:21.500
so now in the end I have an array of products with all the old product data

07:21.530 --> 07:28.880
but also this new information regarding the quantity for my order and add products will pick this up

07:29.330 --> 07:32.860
and add the products to the order with that quantity.

07:32.870 --> 07:34.280
This is what's happening here,

07:34.520 --> 07:46.380
now we can return order add products here and add a new then block here where I get any result and in here,

07:46.410 --> 07:52.710
I will then redirect to orders. With that set up,

07:52.730 --> 08:01.560
let's go back and reload our cart page, if we click order now, I'm on the orders page where we never display

08:01.560 --> 08:06.740
anything but we should be able to see some data if we load the orders table,

08:06.740 --> 08:14.490
there is one order and order items also has the respective elements that belong to the order with

08:14.490 --> 08:16.140
the right quantities.
