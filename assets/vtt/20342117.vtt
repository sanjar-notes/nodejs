WEBVTT

1
00:00:02.210 --> 00:00:04.270
<v Instructor>Okay let's now wire up our function</v>

2
00:00:04.270 --> 00:00:06.020
to our formula.

3
00:00:06.020 --> 00:00:08.810
For that, I'll add IDs to those inputs,

4
00:00:08.810 --> 00:00:09.963
num1 and num2,

5
00:00:12.640 --> 00:00:14.300
so that in our app.ts file,

6
00:00:14.300 --> 00:00:16.811
we can get access to those elements.

7
00:00:16.811 --> 00:00:19.310
Num1Element is for example,

8
00:00:19.310 --> 00:00:22.011
accessed with document getElementById, num1.

9
00:00:22.011 --> 00:00:24.840
That's some default JavaScript code,

10
00:00:24.840 --> 00:00:26.690
which we can run in TypeScript.

11
00:00:26.690 --> 00:00:29.290
And that's the next important takeaway.

12
00:00:29.290 --> 00:00:31.730
TypeScript builds up on JavaScript.

13
00:00:31.730 --> 00:00:34.290
This means that any JavaScript code,

14
00:00:34.290 --> 00:00:36.290
works in TypeScript files.

15
00:00:36.290 --> 00:00:38.920
You can learn TypeScript by simply sticking

16
00:00:38.920 --> 00:00:42.940
to what you know and then you add types step by step,

17
00:00:42.940 --> 00:00:45.060
maybe you find some place where you can use

18
00:00:45.060 --> 00:00:47.590
some advanced TypeScript feature you heard about.

19
00:00:47.590 --> 00:00:48.460
But in a nutshell,

20
00:00:48.460 --> 00:00:51.270
you can always just write JavaScript code

21
00:00:51.270 --> 00:00:55.470
and it will work because TypeScript builds upon JavaScript.

22
00:00:55.470 --> 00:00:58.663
All JavaScript code is supported in TypeScript.

23
00:01:00.430 --> 00:01:03.920
Therefore, we can use this regular JavaScript code

24
00:01:03.920 --> 00:01:06.250
for selecting the num1Element.

25
00:01:06.250 --> 00:01:10.370
We can duplicate this to get access to the num2Element.

26
00:01:10.370 --> 00:01:12.920
We can get access to our button element

27
00:01:12.920 --> 00:01:16.110
by reaching out to the button with document querySelector

28
00:01:16.110 --> 00:01:18.403
and selecting the first button which we find.

29
00:01:19.350 --> 00:01:22.700
And then we can add a listener, an eventListener

30
00:01:23.901 --> 00:01:27.110
to button element by calling addEventListener on it.

31
00:01:27.110 --> 00:01:28.803
Add a click event listener.

32
00:01:31.290 --> 00:01:33.500
And to find a function that should execute

33
00:01:33.500 --> 00:01:35.530
when the button is clicked.

34
00:01:35.530 --> 00:01:37.580
Now something interesting you see here,

35
00:01:37.580 --> 00:01:42.000
is that my ID knows that I can call addEventListener

36
00:01:42.000 --> 00:01:43.920
on the button element.

37
00:01:43.920 --> 00:01:45.550
To ask this might be clear,

38
00:01:45.550 --> 00:01:47.500
we know that we select a button

39
00:01:47.500 --> 00:01:49.460
and we know that the button DOM element

40
00:01:49.460 --> 00:01:51.690
has the AddEventListener method.

41
00:01:51.690 --> 00:01:56.690
But why does my ID notice in the end because of TypeScript,

42
00:01:57.020 --> 00:01:59.870
because it knows that when we select a button

43
00:01:59.870 --> 00:02:01.550
with querySelector,

44
00:02:01.550 --> 00:02:04.083
what we'll get back is an HTMLButtonElement.

45
00:02:05.330 --> 00:02:08.340
If I hover over a button element you see here,

46
00:02:08.340 --> 00:02:12.130
that's something which is called the inferred type.

47
00:02:12.130 --> 00:02:15.450
We didn't define this type explicitly.

48
00:02:15.450 --> 00:02:18.940
I didn't add colon HTMLButtonElement here,

49
00:02:18.940 --> 00:02:20.350
though I could.

50
00:02:20.350 --> 00:02:22.180
But we don't need to do this here,

51
00:02:22.180 --> 00:02:25.550
because TypeScript is able to infer types.

52
00:02:25.550 --> 00:02:27.790
And it's really smart regarding that.

53
00:02:27.790 --> 00:02:30.470
it's able to find out which type of value

54
00:02:30.470 --> 00:02:33.160
will eventually be stored in this constant

55
00:02:33.160 --> 00:02:35.510
because of this code here.

56
00:02:35.510 --> 00:02:37.223
And that's pretty nice of course.

57
00:02:38.150 --> 00:02:41.150
So it knows will eventually have a button in there

58
00:02:41.150 --> 00:02:44.970
and that's why it knows that we can call addEventListener.

59
00:02:46.296 --> 00:02:48.187
Now here inside the event listener,

60
00:02:48.187 --> 00:02:49.510
I now want to extract the values

61
00:02:49.510 --> 00:02:52.100
from num1 and num2 element.

62
00:02:52.100 --> 00:02:56.713
So here I got my num1 are reaching out to num1Element.

63
00:02:58.090 --> 00:03:02.753
And then there I want to access the value property.

64
00:03:04.130 --> 00:03:06.573
Now my ID does not like this here.

65
00:03:07.470 --> 00:03:11.210
The reason for that is, that not every HTML element

66
00:03:11.210 --> 00:03:13.280
has a value property.

67
00:03:13.280 --> 00:03:15.970
Input elements have value properties,

68
00:03:15.970 --> 00:03:18.510
paragraphs for example, don't.

69
00:03:18.510 --> 00:03:21.130
So we need to convince TypeScript

70
00:03:21.130 --> 00:03:24.950
that what we get access to here will be an input.

71
00:03:24.950 --> 00:03:26.840
For the button, it knew that it's a button

72
00:03:26.840 --> 00:03:29.400
because we query select by the button tag.

73
00:03:29.400 --> 00:03:31.130
Here, we select by ID,

74
00:03:31.130 --> 00:03:33.580
so TypeScript has no chance of knowing

75
00:03:33.580 --> 00:03:36.530
which kind of element it will have those IDs.

76
00:03:36.530 --> 00:03:38.840
But we can do something else related to types

77
00:03:38.840 --> 00:03:41.280
which is called type costing.

78
00:03:41.280 --> 00:03:43.020
If we as a developer

79
00:03:43.020 --> 00:03:48.020
know with certainty that something is of a certain type,

80
00:03:48.170 --> 00:03:50.360
we can use the special ask keyword

81
00:03:50.360 --> 00:03:52.230
which is added by TypeScript

82
00:03:52.230 --> 00:03:54.820
to tell TypeScript that what we select here

83
00:03:54.820 --> 00:03:56.600
will be off that type.

84
00:03:56.600 --> 00:04:00.790
And here it will be off the HTMLInputElement type.

85
00:04:00.790 --> 00:04:03.540
We can do this on both these elements.

86
00:04:03.540 --> 00:04:05.823
Now these types here, HTMLInputElement,

87
00:04:07.025 --> 00:04:08.420
HTMLButtonElement.

88
00:04:08.420 --> 00:04:10.620
These are general types

89
00:04:10.620 --> 00:04:12.890
which are built into TypeScript so to say.

90
00:04:12.890 --> 00:04:14.220
You can always use them

91
00:04:14.220 --> 00:04:16.070
just like you can use number ends on.

92
00:04:16.070 --> 00:04:18.070
These are some general DOM types

93
00:04:18.070 --> 00:04:20.970
which are available in TypeScript.

94
00:04:20.970 --> 00:04:24.020
And with that now, we can access value here,

95
00:04:24.020 --> 00:04:25.880
because now we know that there will be

96
00:04:25.880 --> 00:04:29.450
a value property on this DOM object.

97
00:04:29.450 --> 00:04:32.963
We also get num2 with num2Element.value.

98
00:04:33.870 --> 00:04:35.950
And now we can call add,

99
00:04:35.950 --> 00:04:37.670
or we can get our result

100
00:04:37.670 --> 00:04:41.040
by calling add and passing in num1 and num2.

101
00:04:41.040 --> 00:04:44.210
And now again, TypeScript saves our --.

102
00:04:44.210 --> 00:04:46.310
This is the bug I mentioned earlier,

103
00:04:46.310 --> 00:04:48.290
which would be easy to introduce.

104
00:04:48.290 --> 00:04:50.700
You get the value entered by the user.

105
00:04:50.700 --> 00:04:52.630
And since user enters numbers here,

106
00:04:52.630 --> 00:04:55.380
you expect that you get numbers here.

107
00:04:55.380 --> 00:05:00.380
But value actually always returns a string here.

108
00:05:00.450 --> 00:05:02.760
That's the return type of this property.

109
00:05:02.760 --> 00:05:05.200
It's the type of value stored in this property.

110
00:05:05.200 --> 00:05:10.173
And this is always under all circumstances, a string.

111
00:05:11.090 --> 00:05:13.440
Now here we need numbers.

112
00:05:13.440 --> 00:05:16.710
So here, the fix is easy, we converted this.

113
00:05:16.710 --> 00:05:19.830
But now we are forced to make that conversion

114
00:05:19.830 --> 00:05:23.572
and we can't forget or overlook it.

115
00:05:23.572 --> 00:05:25.360
And that's all TypeScript is about in a nutshell.

116
00:05:25.360 --> 00:05:27.803
We are forced to write cleaner code.

117
00:05:28.720 --> 00:05:32.400
Well, and then I can console log the result here.

118
00:05:32.400 --> 00:05:37.400
With all of that, let's again run TSC app.ts,

119
00:05:37.810 --> 00:05:39.760
this compiles to code.

120
00:05:39.760 --> 00:05:41.390
If we have a brief look at the code,

121
00:05:41.390 --> 00:05:43.650
you'll see the -- operators gone,

122
00:05:43.650 --> 00:05:45.170
all the types are gone.

123
00:05:45.170 --> 00:05:46.530
So does this JavaScript code

124
00:05:46.530 --> 00:05:48.180
we could have written on our own,

125
00:05:48.180 --> 00:05:51.700
but this is no code which was checked in advanced

126
00:05:51.700 --> 00:05:55.230
during development here in our TypeScript version.

127
00:05:55.230 --> 00:05:58.220
And now if I reload here, and I enter five and 11,

128
00:05:58.220 --> 00:06:02.937
we get 16 and not unintended 115 or 511,

129
00:06:04.140 --> 00:06:08.033
because now we were forced to add this type conversion here.

