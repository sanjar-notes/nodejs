WEBVTT

00:02.150 --> 00:08.290
So in the last lecture, you saw how you can extend mongoose with your own functionality and that is

00:08.290 --> 00:09.490
really powerful.

00:10.470 --> 00:15.420
Now obviously, also check the official docs, there under schema

00:15.420 --> 00:17.420
you can learn way more about that,

00:17.430 --> 00:19.290
this is the technique we just used,

00:19.290 --> 00:24.900
we added an instance method, you can add more about that and all the nice features you can add to your

00:24.930 --> 00:25.900
own schemas

00:25.950 --> 00:26.800
and models,

00:26.880 --> 00:32.380
so definitely check that out for all the details that could be interesting to you.

00:32.430 --> 00:37.830
Now here I want to work on the route that allows us to load the cart and this is a nice practice for

00:37.830 --> 00:38.340
you again,

00:38.340 --> 00:43.590
feel free to pause the video at this point and go ahead and try to implement this on your own before we

00:43.790 --> 00:44.930
then do it together.

00:47.220 --> 00:48.610
Were you successful?

00:48.930 --> 00:50.140
Well let's go to the shop.js

00:50.140 --> 00:55.280
file in the controllers folder and we're looking for the get cart method here.

00:55.290 --> 01:02.790
Now there we have request user get cart and get cart is a method we defined in the past which does

01:02.790 --> 01:04.410
not exist by default,

01:04.440 --> 01:07.290
mongoose does not give us this method.

01:07.530 --> 01:11.550
So we again have to revisit our user model and in there,

01:11.560 --> 01:18.210
let's have a look at get cart, how we defined it in the past. In the past we simply reached out to our

01:18.210 --> 01:19.590
cart items,

01:19.590 --> 01:26.810
we got all the product IDs and then we had a look at the products collection to find all the products

01:26.810 --> 01:30.070
in there, convert this to array and return the products,

01:30.080 --> 01:36.270
so essentially get cart gave us an array of all the products in the cart.

01:36.380 --> 01:39.980
Now with mongoose, this is a bit easier,

01:40.010 --> 01:43.730
we already have our nested cart items array

01:43.870 --> 01:49.550
and if we have a look at compass, we see the items are objects where we have the product ID

01:49.550 --> 01:55.290
and now we simply need to populate the product ID with all the data we are interested in.

01:57.560 --> 02:04.370
So in shop.js in get cart, I will not call get cart on my user

02:04.440 --> 02:11.700
instead we can call populate on the user to fetch data even though we already fetch the user,

02:11.700 --> 02:20.620
we can also call populate on that and tell mongoose to fetch data for, now which path is it?

02:20.850 --> 02:31.640
Well for cart.items.productid, let me console log my products here to see if that works.

02:31.640 --> 02:33.740
Now we also need to add that route again,

02:33.740 --> 02:39.160
so in the shop.js file in the routes folder, let's add that get cart route again

02:39.410 --> 02:46.100
and with that changed, let me load the cart page and I get an error

02:46.110 --> 02:51.150
and the reason for that is populate does exist but actually it does not return a promise,

02:51.160 --> 02:53.360
so calling then on it would not work,

02:53.410 --> 03:01.540
we have to chain exec populate after that and then we'll get a promise,

03:01.540 --> 03:03.340
so then we should be able to call then.

03:03.490 --> 03:12.500
So now with that, let's log products, save that and reload that page, now I get no products in cart

03:12.500 --> 03:19.220
but if I go back, well we see actually what we have here is the full user object which makes sense because

03:19.220 --> 03:20.810
we're not just fetching products,

03:20.810 --> 03:22.460
we still work with the full user,

03:22.730 --> 03:24.290
so that is a tiny change

03:24.320 --> 03:31.280
so let's actually use or log the user cart items here to see if that was still populated with all the

03:31.280 --> 03:35.320
item data and I'll temporarily create an empty products array

03:35.330 --> 03:37.760
so the rest of the code does not fail

03:38.150 --> 03:42.050
and now let's save that and reload the cart page one more time.

03:42.190 --> 03:50.770
If I now go back, you see indeed here what I log, user cart items now is an array of items where the product

03:50.800 --> 03:53.740
ID is populated with the product data.

03:53.770 --> 03:58.030
So now it works a bit different than before but it still gives us the data we need,

03:58.300 --> 04:09.420
so here products now actually is user cart items and that is what I pass to my view but I will need

04:09.420 --> 04:14.830
to look into my view now because the structure changed a bit compared to before. The cart.ejs

04:14.870 --> 04:17.210
file is what we need to edit

04:17.310 --> 04:23.580
and in there, we loop through all products which is fine but remember that our product data will then be

04:23.580 --> 04:30.630
nested in a product ID field and you could also rename this to just product in your schema therefore

04:30.660 --> 04:35.270
which makes a bit more sense I guess but I still have product ID here,

04:35.310 --> 04:41.040
so the title is not available on the top level object which would be this object but on the nested product

04:41.100 --> 04:42.240
ID object.

04:42.240 --> 04:49.040
So here we have to say p.productid.title. The quantity is on the top level object

04:49.040 --> 04:56.000
so this is fine, the product ID again can be found on the product ID nested or embedded document

04:56.000 --> 04:57.020
though.

04:57.110 --> 05:04.280
So with that, let's save that and let's now reload the cart page and indeed we see our cart item here

05:04.310 --> 05:04.740
now.

05:04.850 --> 05:09.950
So this is looking better, now we're able to populate our cart with data.
