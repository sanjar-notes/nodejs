WEBVTT

00:02.400 --> 00:06.290
On the frontend in the finish edit handler function, in the feed.js

00:06.300 --> 00:08.670
file, there

00:08.940 --> 00:10.970
I'll ignore the image upload for now,

00:11.250 --> 00:17.720
I want to now reach my graphql endpoint and create a new user. For that

00:17.760 --> 00:23.910
first of all I will get rid of this code because I will not send this request to different urls

00:23.940 --> 00:26.420
anymore and I'll not use different methods,

00:26.430 --> 00:33.690
it's always the same url and the same method, localhost8080 graphql and the method simply is

00:33.940 --> 00:35.450
post.

00:35.550 --> 00:37.940
The body is also not my form data

00:38.220 --> 00:44.460
but here I'll create a new query with let because this will change when we edit the post later and my

00:44.460 --> 00:46.700
query here is graphql

00:46.870 --> 00:56.310
query, my query here is defined as before, query and then this is a multi-line string with back ticks,

00:57.030 --> 01:03.280
it then actually is a mutation and the mutation is create post. To that

01:03.450 --> 01:07.200
I need to send the data I did on my graphiql user interface,

01:07.380 --> 01:16.320
so actually I can copy that here, move that over there and now replace these hardcoded values with

01:16.320 --> 01:17.740
dynamic values.

01:18.030 --> 01:26.870
So here for the title I will pass post data title, for the content

01:26.980 --> 01:31.920
I will pass post data content and for the image

01:31.990 --> 01:34.240
I'll keep that to some url for now

01:34.270 --> 01:35.640
until we have a real image.

01:38.400 --> 01:40.650
I get back the ID and title,

01:40.670 --> 01:48.460
now let me first of all send this in a stringified version, the graphql query and then let's do something

01:48.460 --> 01:49.700
with the response.

01:49.720 --> 01:53.390
Now again this way of handling it will not really work,

01:53.680 --> 02:00.250
so let's instead copy the code we use an app.js where I check for errors on the extracted

02:00.250 --> 02:01.990
response body and

02:02.200 --> 02:04.330
therefore I do it here,

02:04.450 --> 02:11.380
then I log my response data and you see I'm interested in the ID title, content, creator and createdAt

02:11.380 --> 02:11.850
here,

02:11.920 --> 02:15.140
so I should actually retrieve all of that.

02:15.190 --> 02:20.390
So in my query I get the ID, title, content, image

02:20.430 --> 02:28.720
url, creator and createdAt date.

02:29.020 --> 02:37.430
By the way, the creator if you have a look at my schema is again a more complex object,

02:37.480 --> 02:38.930
it's a user object.

02:39.080 --> 02:43.350
So for the creator, we need to be more specific and that is the cool thing about graphql,

02:43.360 --> 02:45.860
we can really drill into the data and here

02:45.910 --> 02:48.780
let's say I'm only interested in the name and indeed I am,

02:48.850 --> 02:50.860
I don't care about the ID or email.

02:50.980 --> 02:57.040
In this scenario here, I want the name so that I can render that onto the screen next to my posts and this

02:57.040 --> 03:03.190
shows the power of graphql really well, we get exactly the data we need. Well

03:03.210 --> 03:08.950
now with that, we send the post request. Here for extracting the data, we'll have some problems

03:09.120 --> 03:14.060
but first of all let's focus on what we log to the console and see if that works.

03:14.660 --> 03:23.120
So back to our application, I am still logged in because I have a valid token and I do still attach

03:23.120 --> 03:24.440
this token by the way here

03:24.710 --> 03:27.690
but we also need another header,

03:27.860 --> 03:33.530
we need to add the content type and set that to application json, that is required

03:33.980 --> 03:35.670
so make sure you add this

03:36.020 --> 03:41.110
and now back in the application, click new post, add a duck,

03:41.180 --> 03:44.280
you have to choose the image here even though it's not uploaded

03:44.300 --> 03:49.600
otherwise you can't submit and then I'll add my lovely duck.

03:49.770 --> 03:52.690
And here I get an error which was expected

03:52.910 --> 03:57.760
but I also see a console log which actually doesn't look too bad.

03:58.070 --> 04:03.260
I do have all the data I entered and we can now have a look at mongodb

04:03.260 --> 04:11.420
compass and there if I refresh this and look into my post collection, I indeed see a post

04:11.420 --> 04:14.300
with the data I entered, with that creator

04:14.300 --> 04:16.110
ending with aa1 and

04:16.240 --> 04:21.780
if I have a look at my users, I see that it's that user and there on the posts,

04:21.830 --> 04:28.850
I am unfortunately missing my post. So that is one thing I will need to tweak but the rest is already

04:28.850 --> 04:30.170
working really well.

04:30.200 --> 04:32.650
Now let's make sure we add that post here too

04:32.810 --> 04:38.390
and then of course let's make sure we extract the data on the frontend correctly so that we also render

04:38.390 --> 04:39.920
that post. For that

04:39.920 --> 04:43.990
by the way, we'll also have to make sure we load all posts initially though.
