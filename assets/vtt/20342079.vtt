WEBVTT

1
00:00:02.420 --> 00:00:04.250
<v Instructor>With that I got a simple</v>

2
00:00:04.250 --> 00:00:06.700
starting project for you.

3
00:00:06.700 --> 00:00:10.100
Here you'll find it attached to this lecture.

4
00:00:10.100 --> 00:00:12.840
There, we got a packaged up json file,

5
00:00:12.840 --> 00:00:15.310
where I simply installed express.

6
00:00:15.310 --> 00:00:16.620
We've got the app.js file

7
00:00:16.620 --> 00:00:18.480
where I'm importing express,

8
00:00:18.480 --> 00:00:21.640
where I'm also importing the core file system module

9
00:00:21.640 --> 00:00:23.630
that's part of node.js,

10
00:00:23.630 --> 00:00:26.470
and where I then create a very simple express application

11
00:00:26.470 --> 00:00:29.050
that does just one thing.

12
00:00:29.050 --> 00:00:31.170
For incoming get requests

13
00:00:31.170 --> 00:00:34.190
it reads this my page HTML file,

14
00:00:34.190 --> 00:00:36.870
which contains some HTML code

15
00:00:36.870 --> 00:00:41.430
and it returns the content read in from that file

16
00:00:41.430 --> 00:00:44.750
with the sent method back to the client.

17
00:00:44.750 --> 00:00:49.150
So if we now run this application by running the app.js file

18
00:00:51.160 --> 00:00:54.400
and we visit localhost 3000,

19
00:00:54.400 --> 00:00:58.960
we'll see the content often as HTML file on the screen.

20
00:00:58.960 --> 00:01:01.360
Definitely not a very fancy application,

21
00:01:01.360 --> 00:01:04.380
but it's not about the content here or the application.

22
00:01:04.380 --> 00:01:06.410
It's about those new features,

23
00:01:06.410 --> 00:01:07.480
which I want to show you,

24
00:01:07.480 --> 00:01:11.140
and let's start with the ES modules feature.

25
00:01:11.140 --> 00:01:14.210
Here we are using the import syntax you're used to.

26
00:01:14.210 --> 00:01:16.940
We're importing with the require function.

27
00:01:16.940 --> 00:01:21.940
Now, let's also quickly see how we export it, thus far.

28
00:01:22.360 --> 00:01:24.833
If I would create a new file here,

29
00:01:25.730 --> 00:01:28.990
response-handler.js, for example,

30
00:01:28.990 --> 00:01:31.150
and I take this function here

31
00:01:31.150 --> 00:01:33.220
and cut it out of the app.js file

32
00:01:33.220 --> 00:01:35.413
and define it in there,

33
00:01:37.230 --> 00:01:41.430
resHandler equals this anonymous arrow function here.

34
00:01:41.430 --> 00:01:44.380
I could export it with module exports

35
00:01:44.380 --> 00:01:45.740
pointing at resHandler

36
00:01:45.740 --> 00:01:48.610
or storing resHandler to be precise.

37
00:01:48.610 --> 00:01:50.783
And I'll back it app.js.

38
00:01:52.570 --> 00:01:56.770
I can import my file, the resHandler here

39
00:01:56.770 --> 00:02:00.770
with require and then dot slash response-handler

40
00:02:00.770 --> 00:02:02.610
omitting the file extension.

41
00:02:02.610 --> 00:02:05.300
We should now also bring the file system import

42
00:02:05.300 --> 00:02:08.140
over to the response-handler.js file by the way,

43
00:02:08.140 --> 00:02:10.323
because I'm using default system in there.

44
00:02:11.300 --> 00:02:13.270
But that's how we could restructure this

45
00:02:13.270 --> 00:02:16.340
to also export something on our own.

46
00:02:16.340 --> 00:02:18.160
Now, of course, we just need to register

47
00:02:18.160 --> 00:02:20.050
the response-handler function here

48
00:02:20.050 --> 00:02:21.683
on the get middleware.

49
00:02:22.530 --> 00:02:23.420
Now that's the import

50
00:02:23.420 --> 00:02:24.667
and export syntax you are used to

51
00:02:24.667 --> 00:02:28.190
that what we used many times throughout the course

52
00:02:28.190 --> 00:02:29.430
and of course this works

53
00:02:29.430 --> 00:02:30.740
if we restart the server,

54
00:02:30.740 --> 00:02:33.020
we can still load this page.

55
00:02:33.020 --> 00:02:35.730
Now, how can we switch to the more modern

56
00:02:35.730 --> 00:02:38.520
or this alternative new syntax?

57
00:02:38.520 --> 00:02:40.920
Well, let's have a look at the official docs.

58
00:02:40.920 --> 00:02:42.270
There's one important thing I wanna

59
00:02:42.270 --> 00:02:44.160
draw your attention to though.

60
00:02:44.160 --> 00:02:47.400
You see the stability is experimental

61
00:02:47.400 --> 00:02:49.610
at least at the point of time I'm recording this.

62
00:02:49.610 --> 00:02:54.170
This means that the exact implementation could change.

63
00:02:54.170 --> 00:02:56.700
It also means that you should reconsider

64
00:02:56.700 --> 00:02:59.670
whether you want to use this in production or no.

65
00:02:59.670 --> 00:03:01.010
That is the reason why

66
00:03:01.010 --> 00:03:02.496
the vast majority of projects

67
00:03:02.496 --> 00:03:04.530
don't use the syntax.

68
00:03:04.530 --> 00:03:06.810
You can use a dope, it should work

69
00:03:06.810 --> 00:03:09.080
and it is definitely worth a closer look

70
00:03:09.080 --> 00:03:10.480
because you'll see pretty much

71
00:03:10.480 --> 00:03:12.670
the same import export syntax

72
00:03:12.670 --> 00:03:15.070
on the client side in the browser

73
00:03:15.070 --> 00:03:17.290
if you were building applications for debt,

74
00:03:17.290 --> 00:03:19.130
hence whatever you learn here

75
00:03:19.130 --> 00:03:22.410
will also be useful for browser side JavaScript code.

76
00:03:22.410 --> 00:03:25.630
Or if you already learned about ES module there,

77
00:03:25.630 --> 00:03:27.070
it'll be easy to get started

78
00:03:27.070 --> 00:03:29.580
with them in node projects.

79
00:03:29.580 --> 00:03:31.640
Now, how do we get started?

80
00:03:31.640 --> 00:03:33.730
To get started we first of all need

81
00:03:33.730 --> 00:03:35.270
to enable this syntax

82
00:03:35.270 --> 00:03:37.540
and there, we got two main ways.

83
00:03:37.540 --> 00:03:38.520
We've got three ways,

84
00:03:38.520 --> 00:03:40.940
but we can ignore the third one for now.

85
00:03:40.940 --> 00:03:43.000
One way of using these imports

86
00:03:43.000 --> 00:03:44.870
is that we rename our files

87
00:03:44.870 --> 00:03:48.040
from dot js to dot mjs,

88
00:03:48.040 --> 00:03:50.313
where the m stands for a module.

89
00:03:51.280 --> 00:03:52.230
We could do this

90
00:03:52.230 --> 00:03:54.130
and if I renamed us here,

91
00:03:54.130 --> 00:03:57.193
I can now import it with this new syntax,

92
00:03:58.670 --> 00:04:00.700
but I'll not use this approach.

93
00:04:00.700 --> 00:04:02.963
So let's revert this back.

94
00:04:04.150 --> 00:04:06.560
Instead the second alternative is

95
00:04:06.560 --> 00:04:09.460
that we keep dot js as a file extension,

96
00:04:09.460 --> 00:04:11.400
which I'd like to do here

97
00:04:11.400 --> 00:04:14.800
and instead in the nearest package dot json file,

98
00:04:14.800 --> 00:04:17.390
we should make sure that the type property

99
00:04:17.390 --> 00:04:21.393
or the type configuration is set to module.

100
00:04:22.380 --> 00:04:25.460
So if we dive into our packaged dot json file here,

101
00:04:25.460 --> 00:04:27.750
we see that there is no type.

102
00:04:27.750 --> 00:04:29.400
It's not this type here by the way.

103
00:04:29.400 --> 00:04:31.670
We can remove does actually

104
00:04:31.670 --> 00:04:34.220
there should be a main type node

105
00:04:34.220 --> 00:04:35.720
or property here instead,

106
00:04:35.720 --> 00:04:37.320
and there is no such property.

107
00:04:37.320 --> 00:04:39.400
So let's add type here

108
00:04:39.400 --> 00:04:41.943
and set this to module.

109
00:04:45.140 --> 00:04:46.850
Like this.

110
00:04:46.850 --> 00:04:50.780
With this, we can now use ES module imports.

111
00:04:50.780 --> 00:04:51.613
Now in app.js,

112
00:04:51.613 --> 00:04:54.050
let's start with importing express.

113
00:04:54.050 --> 00:04:55.970
If we want to import express now

114
00:04:55.970 --> 00:04:57.690
this syntax here,

115
00:04:57.690 --> 00:04:59.190
which I'm going to comment out,

116
00:04:59.190 --> 00:05:01.650
changes to import express

117
00:05:01.650 --> 00:05:04.410
from express like this.

118
00:05:04.410 --> 00:05:08.513
That's the ES module Syntax for importing something.

119
00:05:10.290 --> 00:05:11.610
If I saved this

120
00:05:11.610 --> 00:05:12.980
and then I'll run this file again,

121
00:05:12.980 --> 00:05:14.400
you'll see it crashes

122
00:05:14.400 --> 00:05:16.960
it crashes because I'm still using require

123
00:05:16.960 --> 00:05:18.810
on that other import here.

124
00:05:18.810 --> 00:05:21.340
Now, since I set my type two module,

125
00:05:21.340 --> 00:05:25.490
we have to use the new import export syntax everywhere.

126
00:05:25.490 --> 00:05:28.540
So here, I'm also going to comment this out

127
00:05:28.540 --> 00:05:31.081
and now I want to import resHandler

128
00:05:31.081 --> 00:05:34.920
from dot slash response-handler.

129
00:05:34.920 --> 00:05:36.210
This would not work however,

130
00:05:36.210 --> 00:05:39.550
because we're using the wrong export syntax.

131
00:05:39.550 --> 00:05:41.550
If I now save this and rerun,

132
00:05:41.550 --> 00:05:44.140
you'll see it runs with an error.

133
00:05:44.140 --> 00:05:45.250
We need to go to the file

134
00:05:45.250 --> 00:05:47.210
and change the way we export.

135
00:05:47.210 --> 00:05:50.010
Instead of exporting with module exports

136
00:05:50.010 --> 00:05:52.100
we now use the export keyword,

137
00:05:52.100 --> 00:05:54.240
which exists in modern JavaScript,

138
00:05:54.240 --> 00:05:57.190
and we export it to response-handler.

139
00:05:57.190 --> 00:05:59.570
However, we can't use it like this.

140
00:05:59.570 --> 00:06:01.570
Instead, we now either

141
00:06:01.570 --> 00:06:04.410
have to add it a right in the line

142
00:06:04.410 --> 00:06:06.240
where we define the function

143
00:06:06.240 --> 00:06:09.640
or the variable which we want to export or

144
00:06:10.840 --> 00:06:13.090
we use exports default.

145
00:06:13.090 --> 00:06:16.193
So this variation of the export down there.

146
00:06:17.300 --> 00:06:19.460
Now I'm going to use export default here

147
00:06:19.460 --> 00:06:22.560
because otherwise this import wouldn't work here.

148
00:06:22.560 --> 00:06:23.780
If you use the other approach

149
00:06:23.780 --> 00:06:24.730
this import wouldn't work here

150
00:06:24.730 --> 00:06:26.340
and I'll come back to the other approach

151
00:06:26.340 --> 00:06:27.900
in a second though.

152
00:06:27.900 --> 00:06:28.733
With that, however,

153
00:06:28.733 --> 00:06:30.970
with the default export here

154
00:06:30.970 --> 00:06:32.300
and the change to import here,

155
00:06:32.300 --> 00:06:34.500
if we now restart this,

156
00:06:34.500 --> 00:06:36.140
it still fails

157
00:06:36.140 --> 00:06:38.340
and the reason for that it's the extension.

158
00:06:38.340 --> 00:06:40.850
Now here, we do have to add it.

159
00:06:40.850 --> 00:06:43.650
We do have to add dot js here,

160
00:06:43.650 --> 00:06:46.450
not for third party modules,

161
00:06:46.450 --> 00:06:47.750
but for our own files,

162
00:06:47.750 --> 00:06:49.130
we have to add it.

163
00:06:49.130 --> 00:06:51.770
So here I add dot js.

164
00:06:51.770 --> 00:06:53.610
and now if a restart this,

165
00:06:53.610 --> 00:06:55.440
I get another error.

166
00:06:55.440 --> 00:06:59.120
The require import in response-handler,

167
00:06:59.120 --> 00:07:00.860
of course, this doesn't work anymore.

168
00:07:00.860 --> 00:07:02.300
We also need to replace this

169
00:07:02.300 --> 00:07:05.613
and import fs from fs like that.

170
00:07:06.760 --> 00:07:08.010
With that now is saved.

171
00:07:08.010 --> 00:07:10.140
If I now started, now it works.

172
00:07:10.140 --> 00:07:11.690
We get no error

173
00:07:11.690 --> 00:07:13.883
and we can now visit this page again.

174
00:07:14.950 --> 00:07:16.820
So this is now simply an alternative

175
00:07:16.820 --> 00:07:17.653
and it's up to you,

176
00:07:17.653 --> 00:07:19.160
whether you prefer this,

177
00:07:19.160 --> 00:07:21.600
it is however the import-exports index,

178
00:07:21.600 --> 00:07:23.370
you know, from the browser

179
00:07:23.370 --> 00:07:26.090
and that alone might make it a bit more attractive.

180
00:07:26.090 --> 00:07:27.630
Nonetheless, as I mentioned,

181
00:07:27.630 --> 00:07:31.380
switching is not mandatory, it's optional.

182
00:07:31.380 --> 00:07:34.980
I also mentioned another exports syntax.

183
00:07:34.980 --> 00:07:37.480
Now that other syntax looks like this.

184
00:07:37.480 --> 00:07:38.890
If we have multiple things

185
00:07:38.890 --> 00:07:40.230
that we want to export,

186
00:07:40.230 --> 00:07:42.020
we can't use export default

187
00:07:42.020 --> 00:07:45.220
because that is only usable once per file.

188
00:07:45.220 --> 00:07:47.250
So if you got only one thing you want to export,

189
00:07:47.250 --> 00:07:48.083
you can use it.

190
00:07:48.083 --> 00:07:49.100
If you've got multiple things,

191
00:07:49.100 --> 00:07:50.420
you can't use it.

192
00:07:50.420 --> 00:07:52.670
A little bit like module exports,

193
00:07:52.670 --> 00:07:54.160
we can also only use this once

194
00:07:54.160 --> 00:07:55.830
and if you have multiple things,

195
00:07:55.830 --> 00:07:59.940
we need this exports dot syntax if you remember.

196
00:07:59.940 --> 00:08:00.950
Here it's the same,

197
00:08:00.950 --> 00:08:03.840
we can export one thing with a default,

198
00:08:03.840 --> 00:08:05.310
but we can always export one

199
00:08:05.310 --> 00:08:07.270
but all the multiple things

200
00:08:07.270 --> 00:08:09.330
by adding export right into line

201
00:08:09.330 --> 00:08:11.780
where we define the variable or constant

202
00:08:11.780 --> 00:08:13.003
that we want to export.

203
00:08:13.960 --> 00:08:16.030
Now, when we use this approach however,

204
00:08:16.030 --> 00:08:17.990
when we don't use default,

205
00:08:17.990 --> 00:08:20.590
we have to change our import syntax.

206
00:08:20.590 --> 00:08:22.660
Instead of importing like this,

207
00:08:22.660 --> 00:08:25.660
we now have to remove this name here

208
00:08:25.660 --> 00:08:27.760
and use curly braces instead,

209
00:08:27.760 --> 00:08:30.030
and between those curly braces,

210
00:08:30.030 --> 00:08:32.930
you repeat the name of the constant

211
00:08:32.930 --> 00:08:34.900
or variable or whatever it is,

212
00:08:34.900 --> 00:08:36.680
which you want to import.

213
00:08:36.680 --> 00:08:37.513
So in this case,

214
00:08:37.513 --> 00:08:39.900
because I named it the resHandler here,

215
00:08:39.900 --> 00:08:42.600
I now do use resHandler here.

216
00:08:42.600 --> 00:08:44.010
With the default export,

217
00:08:44.010 --> 00:08:45.790
the name was actually up to you.

218
00:08:45.790 --> 00:08:47.660
You could have also just named deresh

219
00:08:47.660 --> 00:08:49.320
or whatever you like.

220
00:08:49.320 --> 00:08:51.360
With a named export,

221
00:08:51.360 --> 00:08:54.220
so where you have the export keyword right in the line

222
00:08:54.220 --> 00:08:56.480
where you define a constant or variable,

223
00:08:56.480 --> 00:08:58.350
the name is no longer up to you.

224
00:08:58.350 --> 00:09:00.230
Now you need to curly braces

225
00:09:00.230 --> 00:09:02.090
and you need to use the exact name

226
00:09:02.090 --> 00:09:04.190
of what was exported then.

227
00:09:04.190 --> 00:09:06.950
With that, however it again works.

228
00:09:06.950 --> 00:09:08.030
And as you can tell,

229
00:09:08.030 --> 00:09:10.000
the third party libraries we're using here,

230
00:09:10.000 --> 00:09:13.460
express and the core fs module.

231
00:09:13.460 --> 00:09:16.740
Those seem to use default exports under the hood.

232
00:09:16.740 --> 00:09:19.193
Otherwise this way of importing wouldn't work.

233
00:09:20.290 --> 00:09:22.540
If we now reload it, of course still works.

234
00:09:22.540 --> 00:09:24.500
So that's simply an alternative syntax

235
00:09:24.500 --> 00:09:26.410
for exporting and importing

236
00:09:26.410 --> 00:09:27.580
and in your files,

237
00:09:27.580 --> 00:09:28.980
it's of course totally up to you,

238
00:09:28.980 --> 00:09:30.833
which syntax you prefer.

