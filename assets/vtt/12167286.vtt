WEBVTT

00:02.180 --> 00:07.460
Let's start with the status quo, how does our application we build thus far work

00:07.670 --> 00:13.370
and with that, I'm not just referring to the rest API but to the shop we built before that

00:13.380 --> 00:18.630
too. How do typical node or node express applications work like?

00:19.100 --> 00:24.890
We got our client, we got our server. The client would be our browser, mobile phone or something like that,

00:24.950 --> 00:29.530
the server is of course essentially what we build, our node application.

00:29.540 --> 00:32.620
Now thus far, we always send a request from the client,

00:32.750 --> 00:34.770
we waited for this request on the server,

00:34.790 --> 00:38.170
we set up some routes to handle different kinds of requests

00:38.360 --> 00:43.460
and once we're done doing something on the server, for example reach out to a database, we send back a

00:43.460 --> 00:44.990
response to the client.

00:45.020 --> 00:48.470
So first request then response. 

00:48.470 --> 00:51.700
Now that is how our application works thus far

00:51.700 --> 00:53.960
and this is how most web applications work

00:53.990 --> 00:58.580
and by the way, we're now not going to replace this with something totally new which we'll then use all

00:58.580 --> 00:59.270
the time,

00:59.300 --> 01:07.600
this is a fine pattern because a lot of resources on the Internet should be available by this pull approach.

01:07.700 --> 01:14.040
So you pull information from the client, you tell the server that you want something,

01:14.210 --> 01:17.700
this is a typical approach and is a fine approach

01:17.930 --> 01:20.950
but sometimes you have a different requirement.

01:21.140 --> 01:26.450
What if you want to send something from the server to the client, so what if something happens and you

01:26.450 --> 01:28.010
want to inform the client?

01:28.400 --> 01:37.190
Let's say you're building a chat application, user A on PC A or on his mobile phone sends a message

01:37.190 --> 01:38.690
to user B.

01:39.080 --> 01:41.850
Now obviously they're not sharing the same device,

01:41.900 --> 01:45.200
they might be in two totally different places on the world.

01:45.380 --> 01:51.830
Now user A sends a request to the server that contains the message and the server stores the message

01:51.830 --> 01:55.880
in the database and the server can return a response to user A

01:56.060 --> 02:03.670
but user B, the person with whom user A chats does not send a request to the server asking for the message

02:03.920 --> 02:06.380
or at least that is unlikely to happen.

02:06.380 --> 02:11.510
You could certainly use some patterns where you send a request every second to see if there are new

02:11.510 --> 02:12.310
messages

02:12.440 --> 02:19.590
but you'll then hammer your server with requests where most requests will not yield new messages.

02:19.610 --> 02:26.120
So instead it would be nice to have some push way of informing user B about the new message

02:26.120 --> 02:29.300
and that is exactly the scenario we're looking at here.

02:29.450 --> 02:36.380
What if something changed on the server and we actively want to inform a client? Well then we can use

02:36.380 --> 02:39.080
web sockets instead of http.

02:39.200 --> 02:42.110
Now http is the protocol we used thus far

02:42.230 --> 02:44.600
where we send a request and we get a response.

02:44.840 --> 02:48.050
Web sockets build up on http,

02:48.080 --> 02:50.420
they are established via http,

02:50.540 --> 02:57.950
they use a so-called http handshake to upgrade the http protocol to the web sockets protocol and the web

02:57.950 --> 03:01.670
sockets protocol, that simply talks about how data is exchanged,

03:01.670 --> 03:01.910
right.

03:01.910 --> 03:04.710
So this protocol is something you don't have to manage

03:04.720 --> 03:12.980
actively, the browser and the server communicate through a protocol and the used protocol defines how the communication

03:12.980 --> 03:18.870
can happen. With http, it's request response, with web sockets,

03:18.920 --> 03:22.600
it is push data or actually it's both.

03:22.610 --> 03:25.890
We can also send data from the client to the server, this is still included

03:25.940 --> 03:29.480
but most importantly and that's the feature I really want to highlight here,

03:29.570 --> 03:36.500
we can push data from the server to the client. And you can and you typically will use both together in

03:36.500 --> 03:37.670
one and the same node app,

03:37.790 --> 03:44.330
so it's not like you have to decide, do I build an app with web sockets or do a build one with http.

03:44.570 --> 03:49.180
You still have a lot of places where you want to use that request response pattern,

03:49.190 --> 03:53.810
for example if you are sending a message or if you're creating a user,

03:54.020 --> 03:59.320
these are operations where you do send some information from the browser to the server.

03:59.330 --> 04:03.360
So there, the request response scenario makes perfect sense

04:03.500 --> 04:09.290
but if you have some active notification you want to get to your users, then you also want to integrate

04:09.290 --> 04:10.640
web sockets.

04:10.640 --> 04:15.040
Now let me show you how to add web sockets to your project in the next lectures.
