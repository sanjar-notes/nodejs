WEBVTT

00:02.150 --> 00:06.010
Now that we have our authentication flow and route protection in place,

00:06.080 --> 00:09.500
let's talk about security and there, about csrf

00:09.500 --> 00:14.150
attacks. Csrf stands for cross-site request forgery,

00:14.150 --> 00:15.520
now what is this?

00:15.530 --> 00:24.590
This is a special kind of attack pattern or approach where people can abuse your sessions and trick

00:24.590 --> 00:28.490
users of your application to execute malicious code.

00:28.490 --> 00:29.690
This is how it works,

00:29.780 --> 00:31.520
you have a user in your application

00:31.520 --> 00:35.360
and now let's assume this is a visitor who indeed is logged in,

00:35.450 --> 00:39.830
you have your server side code and your database with which you interact.

00:39.830 --> 00:45.050
Now the user interacts with your frontend views, so the pages you render back and you get a session

00:45.050 --> 00:48.380
for that user and of course the cookie that belongs to that session,

00:48.380 --> 00:54.690
so everything you knows. Now the user can do intended things like for example send money to B, if you

00:54.690 --> 01:00.500
are building a banking app or in our application, order some products with his own shipping address

01:00.530 --> 01:09.360
if we had such a checkout process. Now in a csrf attack scenario, your user is tricked onto a fake

01:09.450 --> 01:10.200
site

01:10.530 --> 01:15.010
and this can be done for example by sending a link in an e-mail,

01:15.090 --> 01:20.280
that site can look like your own page but it technically is a different one.

01:20.370 --> 01:28.470
Now on that site, there could be a link leading to your page, to your real page executing some request

01:28.470 --> 01:29.400
there,

01:29.400 --> 01:36.480
of course you could include a form for example which sends a post request to your page, so to your own

01:36.600 --> 01:42.790
node server where you added some fields to send money to another person, to C

01:42.810 --> 01:47.880
in this case instead of B. To the user, this is pretty invisible because he saw a page that maybe looked

01:47.880 --> 01:52.550
like your page or clicked on a link that instantly redirected to your page

01:52.590 --> 01:58.440
but with behind the scenes some data being sent there that does something the user would not want to

01:58.440 --> 01:59.630
do normally.

01:59.640 --> 02:01.080
Now why does it work?

02:01.260 --> 02:10.500
Well since you got valid session for that user if you send something to your site, to your servers, your

02:10.500 --> 02:17.310
session is used for that user and therefore that behind the scenes data that the user never sees that

02:17.340 --> 02:24.250
configures the money transferal or the order in a certain way that is not ok to the user,

02:24.330 --> 02:30.510
this part is invisible to the user but the valid session gets used for it because your server is used

02:30.810 --> 02:36.330
and therefore this is accepted. This is an attack pattern where the session can be stolen

02:36.330 --> 02:42.660
so to say, where you can abuse the fact the users are logged in and you can simply trick them into making

02:42.660 --> 02:48.770
requests which they might not even notice and obviously we want to protect against this attack pattern

02:48.900 --> 02:51.140
and how can we protect now?

02:51.630 --> 02:59.130
Well the idea is that we want to ensure that people can only use your session if they are working with

02:59.220 --> 03:00.730
your views,

03:00.750 --> 03:07.810
so with the views rendered by your application, so that the session is not available on any fake page

03:07.890 --> 03:15.810
that might look like your page but that aren't your page. And to ensure this, to add this feature, we will

03:15.810 --> 03:18.480
use a so-called csrf token.

03:18.480 --> 03:20.790
Now let me show you how this works in the next lecture.
