WEBVTT

00:02.140 --> 00:08.810
So csrf protection is an important thing and to support that or to add it to the app,

00:08.830 --> 00:15.430
I'll quit my server and I'll install another package with npm install --save, the name of the

00:15.430 --> 00:16.010
package

00:16.060 --> 00:23.480
is csurf, this is a package for node express which allows us to generate a so-called csrf token.

00:23.800 --> 00:27.100
Basically a token, a string value

00:27.100 --> 00:35.320
we can embed into our forms, so into our pages for every request that does something on the backend that

00:35.320 --> 00:37.630
changes the users state,

00:37.630 --> 00:44.080
so anything like ordering something, anything that does something sensitive which we want to protect

00:44.080 --> 00:48.910
against. We can include such a token in our views then and on the server,

00:48.920 --> 00:54.520
this package will check if the incoming request does have that valid token.

00:54.520 --> 00:56.160
Now how does this protect us?

00:56.310 --> 01:02.140
Well the fake sites might send a request to your backend and they could theoretically use your session

01:02.140 --> 01:08.350
therefore but the requests will be missing the token and they can't guess the token because it's a random

01:08.350 --> 01:14.860
hashed value and only one value is valid of course and the package here which runs on the server determines

01:14.860 --> 01:21.040
whether a token is valid, so they can't guess it and they also can steal it because a new token is generated

01:21.190 --> 01:23.660
for every page you render.

01:23.680 --> 01:29.180
So with that package installed, let's rerun npm start and let's use that csurf package

01:29.230 --> 01:33.050
and how do we use it? To enable csrf protection,

01:33.100 --> 01:35.650
we go to our app.js file and in there

01:35.650 --> 01:43.680
first of all at the top, let's import this package, I'll name the constant csrf and I'll require the csurf

01:43.680 --> 01:44.210
package.

01:44.290 --> 01:46.710
Please note the package is named csurf,

01:46.940 --> 01:48.730
the tag pattern is csrf,

01:48.730 --> 01:50.170
that is why I named the constant like this,

01:50.200 --> 01:52.930
you can name it however you want of course.

01:52.930 --> 01:56.250
Now we can create a new constant where we initialize this

01:56.250 --> 02:01.670
you could say, so down there maybe where we initialized some other things too, I'll initialize my csrf

02:01.830 --> 02:07.360
protection by executing csrf as a function.

02:07.360 --> 02:13.690
Now you can pass an object here where you can configure some things, for example that you want to store

02:13.960 --> 02:19.230
the secret that is used for assigning your token, so for hashing them, that you want to store them in

02:19.230 --> 02:21.710
a cookie instead of the session which is the default

02:21.730 --> 02:24.480
but I want to use the session, the default

02:24.670 --> 02:29.360
and we also don't need to set any of the other values, you can dive into the official docs of that package

02:29.480 --> 02:36.850
to learn more but the default settings should work fine. So with that, we get this csrf protection middleware

02:36.850 --> 02:40.840
here and we now just have to use that as a middleware.

02:40.900 --> 02:43.570
So here after we initialized the session,

02:43.570 --> 02:48.850
that's important because csrf, the package will use that session now. After we initialized the

02:48.850 --> 02:51.990
session, I'll add csrf protection,

02:52.000 --> 02:57.910
so basically the constant which holds my created middleware here.

02:58.040 --> 03:04.370
So now with that, csrf protection is generally enabled but we still need to add something to our views

03:04.370 --> 03:05.790
to really use it.

03:05.960 --> 03:14.000
Right now if I save this and I go back to my app and I reload this page, this works, if I go to orders

03:14.180 --> 03:15.830
this works, if I logout,

03:15.830 --> 03:23.780
this fails, I get an invalid csrf token here and this is already showing us how we or what we have to

03:23.780 --> 03:25.180
do in general.

03:25.190 --> 03:34.160
It failed here because that logout action here actually was a post request

03:34.350 --> 03:41.900
and for any non-get requests because you change data via post requests typically, for any such requests,

03:41.910 --> 03:50.600
this package will look for the existence of a csrf token in your views, in the request basically in

03:50.610 --> 03:55.450
the request body. Now to make sure that such a token is there,

03:55.770 --> 04:01.190
we first of all need to ensure we have it available in our views, to do that

04:01.200 --> 04:04.620
we have to pass data into our view.

04:04.850 --> 04:09.340
So let's say I'm on the starting page slash nothing,

04:09.590 --> 04:14.920
so in the controller actions, that is my get index action, this one.

04:15.030 --> 04:20.540
Now here we would have to pass a new piece of information into the render method, you could name it csrf

04:20.570 --> 04:24.410
token, that name is up to you and you get it from request

04:24.410 --> 04:28.470
and then there, there will be a csrf token method.

04:28.490 --> 04:34.190
This method is provided by the csrf middleware which we added by this package.

04:34.190 --> 04:39.920
So now this will generate such a token and we'll store it in csrf token which we then can use in our

04:39.920 --> 04:46.760
view and there we could use it for example in the navigation where I have my logout button form. In there

04:46.760 --> 04:49.180
we would have to add input which is hidden

04:49.190 --> 04:55.700
so that no real input is rendered but where the value now is a value we output with the help of ejs

04:55.700 --> 05:04.370
and that value here will be our csrf token and the name here is just a field I'm storing that

05:04.400 --> 05:06.490
token in when rendering that view,

05:06.590 --> 05:15.510
this field, csrf token. With that if I reload this page, let's inspect the logout button here

05:15.570 --> 05:16.690
in the developer tools

05:19.920 --> 05:26.150
and let's make sure that in the navigation.ejs file, we don't just add it to the mobile logout button

05:26.310 --> 05:28.640
but also in the other menu here.

05:28.650 --> 05:35.010
So with that changed, let me reload this and now when inspecting the logout button, you will see that there

05:35.610 --> 05:42.450
we also have that input with the value of this token and this here is the csrf token which was generated

05:42.450 --> 05:43.570
by the package.

05:43.740 --> 05:48.340
If I now click on logout, I still get an error here though,

05:48.960 --> 05:55.750
the reason for that is that my package csrf does not know that this hidden input contains my token,

05:55.770 --> 05:58.410
it's just a hidden input without any name.

05:58.410 --> 06:04.500
So what we have to do is we also have to give this a name and here important, the name has to be _csrf

06:04.590 --> 06:10.600
because the package which we added will look for this name,

06:10.680 --> 06:16.370
so for an input with that name and the same of course should be done here in the mobile login button.

06:16.770 --> 06:21.510
Now with that if we reload this view, if I click logout,

06:21.510 --> 06:25.870
now it works because now the package is able to extract that csrf token.

06:26.010 --> 06:31.530
It also finds out that the token is valid and therefore it allows us to proceed,

06:31.680 --> 06:36.570
so now it's not just a session that matters but also the existence of this token.

06:36.750 --> 06:43.140
Now we can add this to all our render functions because we need it in all our routes but that would

06:43.140 --> 06:44.450
be a bit cumbersome,

06:44.450 --> 06:52.230
so let me show you an easier way of getting data like this or also isAuthenticated into every page

06:52.230 --> 06:54.270
we render and not just some.
