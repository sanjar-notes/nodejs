WEBVTT

00:02.380 --> 00:06.480
Now before I conclude this very basic starting module with rest,

00:06.590 --> 00:12.820
let me show you something important which you need to configure on any rest API or building which will

00:12.830 --> 00:20.750
not only be used by tools like this one or by code that runs on the same server and I can demonstrate

00:20.780 --> 00:22.550
what I mean by going to codepen.

00:22.570 --> 00:28.850
In case you don't know codepen, it's basically a service which you can use for free to write simple

00:29.260 --> 00:36.620
html, javascript and css snippets or projects, you can share them easily with other people and we can simulate

00:36.650 --> 00:39.460
a very simple frontend application here.

00:39.710 --> 00:41.830
We can create a new pen for that

00:42.110 --> 00:45.800
and here you can write as you see html, css and javascript code.

00:45.800 --> 00:48.860
Now I'll not need css because I want to keep it simple

00:48.980 --> 00:55.700
and this is a great playground here now because we can simulate a frontend app here because a frontend

00:55.700 --> 01:01.880
app if it is a single page app will only use html, css and javascript because we don't write

01:01.910 --> 01:04.080
any server side code in there, right.

01:04.160 --> 01:12.920
So in here, we might have a normal button, a button we use to send a request to the backend, here we

01:12.920 --> 01:21.500
could get our posts and I'll copy that button and also duplicate it to create a post and this is of course just

01:21.500 --> 01:22.670
a very basic dummy code,

01:22.670 --> 01:25.360
we'll build a different project for the rest of this course.

01:25.730 --> 01:31.760
But now I have these two buttons here in my pen as you can see. Now let's add some javascript code to do something

01:31.760 --> 01:34.700
with them and for that, I'll need to get access to these buttons

01:34.700 --> 01:42.840
so I'll give the first one an ID of get and the second one an ID of post, just to keep this really simple.

01:42.980 --> 01:51.460
So my get button can be accessed with document get element by id and then it's get

01:51.660 --> 01:58.450
and the second button of course is the same with post, so I'll name it post button and I'm looking for the

01:58.450 --> 02:00.060
element with the id post.

02:00.190 --> 02:03.850
So I just want to get access to them so that I can register a listener,

02:03.850 --> 02:12.160
so on the get button I can add an event listener for the click event that should in the end make a request

02:12.250 --> 02:19.330
to my backend. So I'll define an anonymous arrow function here and in there, I'll use the fetch API which is built

02:19.330 --> 02:26.020
into modern browsers with the fetch keyword where I can define a url to which I want to send a http

02:26.020 --> 02:26.890
request

02:26.890 --> 02:33.890
and in my case that is http://localhost8080/feed/posts,

02:34.000 --> 02:44.280
remember that is simply this route I defined here. So I want to send a request to that route or to that

02:44.280 --> 02:49.430
endpoint as you learned, by default this is a get request when using the fetch method

02:49.740 --> 02:58.930
and then we might have either a success case which we can handle in the then block or we have an error. If

02:58.930 --> 03:05.530
we have an error, I'll just log my error here, in the then block we actually get back a response object

03:05.530 --> 03:10.070
where we still need to wait for the body to complete because it will be streamed in.

03:10.300 --> 03:16.570
So with res json we can wait for this and then automatically convert it to json content or to a javascript

03:16.600 --> 03:18.620
object

03:19.250 --> 03:23.780
and then we chain another then block where we will have that javascript object

03:23.780 --> 03:29.660
because as I mentioned on the slides, json can be converted really well to javascript and the json

03:29.660 --> 03:31.930
method does just that, the conversion

03:32.120 --> 03:34.510
and it waits for the body to be streamed in

03:34.880 --> 03:38.280
and then I can console log my response data here.

03:38.390 --> 03:40.590
Now let's open up the developer tools,

03:40.710 --> 03:46.190
clear these existing errors here which were only created whilst I was still typing and you don't need

03:46.190 --> 03:46.920
to save anything,

03:46.940 --> 03:54.170
it saves automatically and click get posts and you should get a no access control allow origin headers

03:54.170 --> 03:55.670
present error.

03:55.800 --> 03:56.590
This is an error

03:56.600 --> 03:59.820
you see a lot when building modern web applications,

03:59.930 --> 04:05.420
modern single page applications and it often leads to a lot of confusion.

04:05.450 --> 04:11.300
This error is also called a cors error and you see the word cors down there,

04:11.330 --> 04:13.520
now what is cors and what's causing it

04:13.550 --> 04:16.480
and most importantly how can we solve it?

04:16.670 --> 04:24.600
Cors stands for cross origin resource sharing and by default, this is not allowed by browsers.

04:24.650 --> 04:30.200
So if we have our client in the server and they run in the same domain and the domain could be localhost

04:30.380 --> 04:37.640
3000, important the port is part of the domain, if they run on the same server, we can send requests and

04:37.640 --> 04:43.730
responses as we want to without issues and that is why we had no issue before in the course. We rendered

04:43.790 --> 04:50.430
our html files on the server and therefore they were served by the same server as you send your requests

04:50.430 --> 04:50.770
to

04:50.840 --> 04:52.740
so we never had any issues,

04:52.880 --> 05:01.490
so this works. However if client server run on different domains like the client on localhost 4000 which

05:01.550 --> 05:05.560
is a different domain than, 3000 then we'll have issues

05:05.560 --> 05:12.440
and of course in production, you would run on my app.com and let's say myAPI.com. If you

05:12.440 --> 05:19.430
send requests and responses here, you get problems, you get a cors error because it's a security mechanism

05:19.430 --> 05:26.390
provided by the browser that you can't share resources across domains, across servers, across origins

05:26.600 --> 05:28.680
as it's called here.

05:28.760 --> 05:35.780
However we can overwrite this because this mechanism makes sense for some applications, for rest

05:35.780 --> 05:38.020
APIs, it typically does not.

05:38.090 --> 05:41.370
We want to allow our server to share its data,

05:41.420 --> 05:49.730
we want to offer data from our server to different clients and these clients will often not be served

05:49.730 --> 05:53.120
by the same server as our API runs on.

05:53.180 --> 05:56.980
Take Google Maps, you're not running your app on Google servers,

05:57.020 --> 06:02.810
still you can access it and the same is true for your own API and even if you build both the frontend

06:02.810 --> 06:09.230
and the backend, you will often serve the two ends from different servers because you can choose a server

06:09.230 --> 06:15.170
for the frontend that's optimized for frontend code that really serves that really well and you serve

06:15.170 --> 06:21.080
your server side code, your node code from a different server, so you will have different domains, different

06:21.170 --> 06:22.990
addresses there too

06:23.420 --> 06:30.050
and therefore we need to solve such a cors error or we need to tell the browser here which runs on

06:30.050 --> 06:31.700
codepen in this case here,

06:32.090 --> 06:38.930
we need to tell that browser that it may accept the response sent by our server. And to tell the browser,

06:39.170 --> 06:41.310
we have to change something on the server

06:41.390 --> 06:43.130
and this is a common gotcha.

06:43.130 --> 06:48.940
A lot of people see that error and want to solve it in their browser side javascript code,

06:48.980 --> 06:50.070
you just can't,

06:50.150 --> 06:52.730
you can only solve that on the server.

06:52.730 --> 06:58.440
So if we go back to our server side code, we just need to set some special headers,

06:58.610 --> 07:04.650
we want to set these headers on any response that leaves our server,

07:04.850 --> 07:09.550
so the app.js file and a general middleware is a great place.

07:09.860 --> 07:16.970
So here before I forward the requests to my routes where I will ultimately send the response, I want

07:16.970 --> 07:24.170
to add headers to any response. So I'll set up a general middleware in app.js which gets my request response

07:24.200 --> 07:25.430
next function

07:25.790 --> 07:32.420
and there with set header, we can conveniently add a header to the response.

07:32.480 --> 07:34.300
We don't send the response yet,

07:34.310 --> 07:36.330
set header does not send it,

07:36.380 --> 07:44.310
json does render that but set header does not, set header will only modify it and add a new header

07:44.450 --> 07:46.900
and now there are a couple of headers we need to set.

07:47.180 --> 07:58.640
The first one is the access-control-allow-origin, all separated with dash, so access-control

07:58.640 --> 08:06.500
-allow-origin, that is the first header we need to set and we want to set it to all the urls,

08:06.530 --> 08:10.820
all the domains that should be able to access our server.

08:11.060 --> 08:19.640
So we could add codepen.io here but often you will just set this to start, to a wildcard that allows

08:19.640 --> 08:21.470
access from any client.

08:21.470 --> 08:25.200
You could lock it down to specific domains though if you wanted to,

08:25.220 --> 08:28.280
if you have multiple domains, you can separate them with commas

08:28.340 --> 08:30.730
but I will go with the wildcard.

08:30.770 --> 08:41.190
I will also set another header and that is the access-control-allow-methods header.

08:41.270 --> 08:47.610
Here we allowed a specific origin to access our content, our data,

08:48.080 --> 08:55.970
now we allow these origins to use specific http methods because by just unlocking the origins, it would

08:55.970 --> 08:57.130
still not work,

08:57.140 --> 09:02.590
we also need to tell the clients, the origins which methods are allowed

09:02.930 --> 09:13.510
and there you can allow get, post, put, patch delete, you don't have to allow them all,

09:13.510 --> 09:19.780
you can only allow what you want to be usable from outside.

09:19.780 --> 09:26.250
Now there's one last header I want to set or I should set and that is access-control-allow-

09:26.260 --> 09:29.590
and now I'm talking about the headers

09:29.650 --> 09:33.610
our clients might set on their requests. There

09:33.640 --> 09:37.770
you could also use a wildcard where you can specify specific headers.

09:37.780 --> 09:43.720
Now there are some default headers which are always allowed but you especially want to add the content

09:43.720 --> 09:54.160
-type header and the authorization header so that your clients can send requests that hold extra authorization

09:54.160 --> 10:00.010
data in the header which we'll need later and that also define the content type of the request and

10:00.010 --> 10:07.060
that will become important soon too. With that added we need to do one last thing, we need to call next

10:07.180 --> 10:11.080
so that the request can now continue and can be handled by our routes

10:11.080 --> 10:16.680
but now every response that we send will have these headers and therefore if we save our server side

10:16.690 --> 10:23.140
code and we restart the server therefore and we go back to codepen, if I clear these errors and I click

10:23.140 --> 10:24.550
get posts again,

10:24.550 --> 10:30.840
now it just works as you can see because now we set the appropriate cors headers on the server.
