WEBVTT

00:02.170 --> 00:07.600
Now that we had a look at the basics about Nokia's, what we can do with it, and now that we even used

00:07.600 --> 00:13.510
it, let me walk you through the content of this course and explain what's in the course and where you

00:13.510 --> 00:17.200
can find what we're almost done getting started.

00:17.200 --> 00:23.620
And the next module, I will give you a brief JavaScript refresher just to make sure we're all on the

00:23.620 --> 00:30.550
same page regarding the core JavaScript syntax, but more importantly about some next gen JavaScript

00:30.550 --> 00:32.500
features which will use in the course.

00:32.590 --> 00:38.380
Basic JavaScript knowledge is assumed and will not be taught in that module, but if you just need a

00:38.380 --> 00:44.650
refresher, some additional information or this next gen JavaScript knowledge, then this is a module

00:44.650 --> 00:45.610
you should take.

00:45.610 --> 00:47.530
Otherwise it's optional.

00:47.800 --> 00:53.530
Now, after this refresher or immediately after this module, if you don't need a refresher, we'll

00:53.530 --> 00:59.440
dive into the Node.js basics, how it generally works, how we can work with streams of data and some

00:59.440 --> 01:01.240
core Node.js modules.

01:01.240 --> 01:07.180
So really the nitty gritty details you need to know about the the language, so to say.

01:07.420 --> 01:15.160
And we'll then dive into efficiently developing with Node.js, how you can debug your code, handle

01:15.160 --> 01:16.930
errors and so on.

01:17.230 --> 01:24.310
Now thereafter we'll dive into express JS the most popular framework you can use for Node.js.

01:24.340 --> 01:31.900
I'll explain why we use it and why we still in its heart use Node.js, why we still learn about Node.js,

01:31.900 --> 01:34.330
even though we use express to us.

01:34.330 --> 01:36.790
Because using it makes sense, it makes things easier.

01:36.790 --> 01:40.090
You will use it if you are working with no trace.

01:40.090 --> 01:44.110
But still, of course we still use Node.js with all of that.

01:44.440 --> 01:50.950
Now thereafter we'll dive into templating engines that are basically some tools you could say that allow

01:50.950 --> 01:56.860
you to generate HTML pages on the server with dynamic content encoded in them.

01:56.860 --> 02:02.890
And that is how you can return different pages or pages with different content back to your users.

02:02.890 --> 02:04.900
So that will be an important module.

02:05.050 --> 02:10.150
Now thereafter we'll dive into the model view controller pattern, what it is and why we use it, and

02:10.180 --> 02:11.530
of course how we use it.

02:11.680 --> 02:14.770
And we'll then have a look at some advanced routing concepts.

02:14.770 --> 02:20.440
Routing is something we'll also learn in the Express JS module and we'll dive deeper into the models

02:20.440 --> 02:22.600
of the model view controller pattern.

02:22.960 --> 02:28.510
Now after we're done with that, it's time to dive into databases and we'll start by connecting our

02:28.510 --> 02:31.270
node application with a SQL database.

02:31.270 --> 02:33.460
My SQL, to be precise.

02:33.790 --> 02:39.040
As a next step, we'll dive deeper into that and use a package that makes working with SQL databases

02:39.040 --> 02:39.670
easier.

02:39.670 --> 02:47.650
Scalise, now in after having seen SQL, will continue with no SQL and see how we would use that.

02:47.650 --> 02:53.470
And we'll use Mongoose there to also make working with that easier and will then stick to no SQL for

02:53.470 --> 02:54.460
the rest of the course.

02:54.460 --> 02:58.480
But you'll thoroughly learn both SQL and no SQL.

02:58.930 --> 03:04.150
Now after this, we'll dive into sessions and cookies, what it is, why you use it, and how you use

03:04.150 --> 03:04.540
it.

03:04.540 --> 03:06.460
We'll have a look at authentication.

03:06.460 --> 03:11.590
So how we can make sure that users can sign up and sign in with our application.

03:11.980 --> 03:15.010
We'll dive into sending emails, how that would work.

03:15.010 --> 03:23.410
How can we auto generate emails when a user signs up, for example, we'll also dive into advanced authentication

03:23.410 --> 03:29.980
features and also authorization, which means that, for example, only a user who created a product

03:29.980 --> 03:31.240
can edit or delete.

03:31.240 --> 03:38.080
It will then have a look at user input validation, which is a crucial part in any web application,

03:38.080 --> 03:44.050
because you want to make sure that the data your users enter into your forms is correct and valid,

03:44.050 --> 03:47.380
and you'll learn how you can do that efficiently in this module.

03:47.680 --> 03:54.370
And we'll then dive into error handling because errors will happen, for example, if the user enters

03:54.370 --> 03:55.330
wrong input.

03:55.330 --> 04:00.610
And I will show you how you can handle different kinds of errors in an elegant way.

04:01.150 --> 04:06.370
Now thereafter, we'll dive into something important, file up and downloads.

04:06.370 --> 04:07.990
How can you handle these?

04:07.990 --> 04:14.230
How can you write code that takes incoming files, stores them and is able to return files?

04:14.260 --> 04:20.470
I'll also show you how you can automatically generate PDF documents on the server in this module.

04:21.010 --> 04:26.650
Well then have a look at pagination so how we can return our data in chunks instead of all the data

04:26.650 --> 04:29.770
at once, which is not ideal for your bandwidth.

04:29.770 --> 04:35.050
We'll thereafter have a look at async request and I'll explain what that is and how we can handle it

04:35.050 --> 04:36.250
with no charges.

04:36.250 --> 04:38.830
And we'll then dive into payments.

04:38.830 --> 04:42.340
How can we accept payments through a service called Stripe?

04:42.340 --> 04:46.060
JS Obviously something will need in any shop we build.

04:46.860 --> 04:51.690
And thereafter we'll dive into a different kind of application you can build with no trace.

04:51.720 --> 04:53.970
We'll dive into rest APIs.

04:53.970 --> 05:00.660
And one module does not sound like a lot of content on this very important technology, but actually

05:00.660 --> 05:07.620
I got two modules on that and we'll also dive into file uploads and rest APIs, authentication, pagination

05:07.620 --> 05:08.670
and all that stuff.

05:08.670 --> 05:14.820
And additionally, these modules will build up on the entire modules before that because you will learn

05:14.820 --> 05:22.110
that the rest API does not differ that much from a normal node application, and I will show you in

05:22.110 --> 05:26.370
detail which knowledge you still need and how you need to change some things.

05:26.370 --> 05:32.670
Not that many actually, to turn an existing application into a rest API now.

05:32.670 --> 05:39.870
And once we're done with that, I will dive into a more modern JavaScript feature async await and how

05:39.870 --> 05:44.940
you can use that in your node application and we'll dive into web sockets and socket.

05:44.940 --> 05:51.990
I o this is a technology or a set of technologies that allows you to add real time functionalities to

05:51.990 --> 05:52.470
your app.

05:52.470 --> 05:59.070
So for example, if one user sends a message and you instantly want to notify another user, you can

05:59.070 --> 06:00.330
use web sockets for that.

06:00.330 --> 06:02.760
And I will show how it works in this module.

06:03.450 --> 06:07.260
After this module, we'll dive into a different kind of APIs.

06:07.260 --> 06:09.060
We had a look at rest APIs.

06:09.060 --> 06:11.730
We'll then have a look at GraphQL APIs.

06:11.760 --> 06:16.440
GraphQL is a very modern and popular way of building APIs.

06:16.440 --> 06:21.420
It has some advantages over rest APIs, also some disadvantages.

06:21.420 --> 06:27.450
And I will dive into GraphQL and how it differs from rest APIs in this module, and I will show you

06:27.450 --> 06:32.010
how to build a GraphQL API from scratch with no charges.

06:32.010 --> 06:36.450
And this will be quite a big module, even though it's only one block on this slide.

06:36.840 --> 06:39.420
Now thereafter we'll have a look at deployment.

06:39.420 --> 06:41.370
How can you take your application?

06:41.370 --> 06:47.130
You build all your node code you build, how can you take that and move it to a real server in the web

06:47.130 --> 06:49.050
and ensure that it runs there?

06:49.080 --> 06:50.430
This will be shown there.

06:50.430 --> 06:50.970
There.

06:50.970 --> 06:56.400
I'll also dive into things like setting up SSL encryption and once we're done with that, I'll have

06:56.400 --> 07:02.940
a short module on Node JS functionalities beyond creating web servers with it because you can use it

07:02.940 --> 07:05.250
for other things too, as I will mention there.

07:05.520 --> 07:12.330
And then I also got a couple of bonus modules which I actually added after this course was initially

07:12.330 --> 07:20.550
released because I'm keeping this course updated and I added sections on Node.js with TypeScript and

07:20.550 --> 07:28.290
also sections on Deano, which is a Node.js alternative by the original creator of Node.

07:28.290 --> 07:35.640
And whilst Node is of course the big important JavaScript runtime which is there to stay, Deno could

07:35.640 --> 07:42.060
be a nice alternative you also might want to look into and therefore I got some introductory modules

07:42.060 --> 07:44.130
at the end of this course as well.

07:44.400 --> 07:51.210
Well, and thereafter we're going to conclude this with a round up and with some possible next steps

07:51.210 --> 07:52.110
you could take.

07:52.440 --> 07:56.250
And therefore I'd say this course is packed with content.

07:56.250 --> 08:01.260
Let's conclude this first getting started module and let's dive in.
