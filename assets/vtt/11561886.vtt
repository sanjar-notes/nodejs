WEBVTT

00:02.240 --> 00:08.550
I'm back in Visual Studio Code, the IDE I'll use throughout this course and this is again a totally empty folder,

00:08.570 --> 00:12.650
I only got my gitignore file in there because I will use version management here,

00:12.710 --> 00:13.190
git

00:13.220 --> 00:16.890
you don't need to use that at all, if it doesn't tell you anything you can just ignore that, 

00:17.000 --> 00:19.260
you don't need that gitignore file.

00:19.370 --> 00:21.300
So I have an empty folder

00:21.440 --> 00:28.370
and again I will now create a new file with command and or by pressing this icon here and this file

00:28.370 --> 00:29.660
can have any name you want

00:29.750 --> 00:34.150
but often you name it server.js or app.js

00:34.170 --> 00:39.310
because it is the root file that makes up your nodejs application,

00:39.370 --> 00:45.860
so the nodejs code you will execute on a computer in the cloud on a server in the end, so I'll name

00:45.860 --> 00:47.570
it app.js here.

00:47.570 --> 00:54.470
Now in this file, I want to create a server through nodejs and thus far in the first module, we only saw how

00:54.470 --> 00:56.930
we can work with the file system,

00:57.170 --> 01:00.380
so how can we now spin up such a server?

01:00.380 --> 01:07.850
We again need to import some functionality because the way javascript works both for the browser and

01:07.880 --> 01:08.910
nodejs,

01:09.080 --> 01:16.370
there is a handful of functions and objects we can use globally without importing anything into the

01:16.370 --> 01:17.040
file

01:17.240 --> 01:23.900
but generally, most functionalities aren't available by default, to not pollute our global namespace

01:23.900 --> 01:26.570
with all these reserved keywords and names basically

01:26.760 --> 01:32.430
and also to make it very obvious in each file on which functionalities this file depends

01:32.430 --> 01:35.440
and thus far, this file does not depend on anything.

01:35.750 --> 01:41.450
Now there are a couple of core modules nodejs ships with and as you will learn throughout the course, you

01:41.450 --> 01:46.550
can also install third party modules which do not ship with node but let's stick to the core modules

01:46.550 --> 01:47.440
for now.

01:47.510 --> 01:48.970
Here are a handful of them,

01:49.070 --> 01:52.400
now not all core modules, just some

01:52.400 --> 01:55.880
and as you can see there is fs which we already used thus far,

01:55.880 --> 01:59.960
there also is path which helps us with constructing paths,

02:00.050 --> 02:07.940
so paths to files on a file system that work on any operating system because Windows and Mac and Linux

02:08.150 --> 02:10.370
use different path formats.

02:10.430 --> 02:16.290
There is the OS package which helps us with operating system, relevant information and so on

02:16.520 --> 02:20.970
and there are the two topmost packages, http and https

02:21.170 --> 02:27.110
and as you might be able to guess, these two sound very helpful when it comes to creating a server and

02:27.110 --> 02:35.450
working with http requests and http responses. And indeed, http helps us with launching a server or also

02:35.510 --> 02:42.320
with other tasks like sending requests because a node app could also send a request to another server,

02:42.350 --> 02:45.220
you can have multiple servers communicate with each other.

02:45.260 --> 02:51.570
For example you could send a request to the Google Maps API to send some coordinates and get back

02:51.570 --> 02:57.230
an address but that's just an example, let's keep it simple here and let's focus on the launch a server

02:57.230 --> 03:04.160
aspect. Https would be helpful when we want to launch an ssl encoded server, so where all that data which

03:04.160 --> 03:05.560
is transferred is encrypted

03:05.630 --> 03:10.490
and as I mentioned earlier, this is something I'll come back to towards the end of the course.

03:10.640 --> 03:18.030
Now with that. let's use that http module and to use it, we need to import it.

03:18.050 --> 03:25.430
So we basically need to make sure that we can use features from that http module which nodejs ships

03:25.430 --> 03:30.180
with but which still is not available globally by default,

03:30.350 --> 03:34.150
we need to make sure that we can use these features in this file

03:34.280 --> 03:38.090
and for this, we import that functionality.

03:38.090 --> 03:41.390
We do this by creating a new constant

03:41.540 --> 03:48.740
and you could create a var or use let too but since we'll have some value here which we will never

03:48.740 --> 03:53.820
change, we can also just use a const to make this really clear that we will never touch this again,

03:53.870 --> 03:56.360
we'll use it but we'll not overwrite it

03:56.780 --> 04:02.750
and you can give this any name you want but typically, you keep the name of the module you're importing.

04:02.750 --> 04:04.290
So I'll name this http

04:04.460 --> 04:07.850
but again you could rename this to whatever you want.

04:07.850 --> 04:11.480
Then you have an equal sign and now we need to assign a value

04:11.750 --> 04:14.990
and now there's a special keyword, a special function

04:14.990 --> 04:17.790
nodejs does expose globally,

04:17.870 --> 04:24.890
so you can use it by default in any file you run via nodejs and that is the require keyword.

04:24.890 --> 04:34.250
Now this is simply the way you import files in nodejs, require either takes a path to another file,

04:34.250 --> 04:38.970
you can also import your own javascript files but we'll not do this for now,

04:38.990 --> 04:41.330
we'll do this heavily throughout the course though

04:41.720 --> 04:48.830
or if you don't have a path to one of your files, you can also import a core module, like http.

04:48.910 --> 04:57.080
By the way, a path to one of your files always has to start with ./ or slash if it's an absolute

04:57.080 --> 04:59.590
path, ./ would be a relative path,

04:59.630 --> 05:04.080
so this would lead to the same folder and would now look for an http file.

05:04.200 --> 05:07.880
By the way it automatically adds .js at the end,

05:07.890 --> 05:10.300
you don't need to add that on your own but you can.

05:10.710 --> 05:13.960
But this would now look for a local file named http,

05:14.010 --> 05:19.610
if you omit ./ or slash at the beginning, it will not look for a local file,

05:19.770 --> 05:25.440
so even if you had a file named http.js, it would not import this file,

05:25.440 --> 05:32.790
let's get rid of it but instead it will always look for a global module named http and indeed, such a module

05:32.790 --> 05:35.940
exists because nodejs ships with it.

05:35.940 --> 05:42.260
So now we got this imported and now we can start using functionalities from that global module and

05:42.270 --> 05:50.640
you can see that if you type http., this is how you access functions or so-called methods and properties

05:50.640 --> 05:57.480
on objects in Javascript and as you can see, this http object which we import from the http module

05:57.720 --> 06:01.490
has a bunch of fields and methods we can execute.

06:01.530 --> 06:05.880
Most importantly, it has the create server method.

06:05.940 --> 06:07.710
Now as the name suggests,

06:07.710 --> 06:14.630
this is a crucial method when it comes to, well creating a server. And create server,

06:14.640 --> 06:16.030
actually if we hover over it

06:16.050 --> 06:23.700
we can see it, actually takes a so-called request listener as an argument. A request listener simply is

06:23.700 --> 06:29.160
a function that will execute for every incoming request

06:29.280 --> 06:35.210
so let's define such a function. For this I'll create a new function with the function keyword,

06:35.520 --> 06:37.440
we can name it however you want,

06:37.530 --> 06:44.400
rqListener or whatever you want, the name is totally up to you and this function has to receive two

06:44.460 --> 06:45.410
arguments, 

06:45.420 --> 06:51.450
you can see that here if you hover over that. The request listener receives a request which is of type

06:51.510 --> 06:54.810
incoming message and a response object,

06:54.810 --> 07:01.920
so in short nodejs automatically gives us some object that represents the incoming request and allows

07:01.920 --> 07:09.480
us to read data from that request and it gives us an object response which we can use to return a response

07:09.480 --> 07:12.060
to whoever sent that request.

07:12.240 --> 07:17.380
So now we have to accept these two arguments here and you can again name the arguments however you want,

07:17.430 --> 07:22.470
you just have to keep in mind that the first one will contain data about the request and the second

07:22.470 --> 07:26.670
one will help you send a response, so I'll name it req and res 

07:26.760 --> 07:29.500
and these are typical shortcuts you often see.

07:29.870 --> 07:31.110
Now this is a function,

07:31.110 --> 07:32.420
rqListener

07:32.610 --> 07:37.170
and now we can pass this function reference so we don't execute it,

07:37.170 --> 07:39.170
don't set these curly braces,

07:39.480 --> 07:44.690
just pass the name to that function because this will simply tell create server

07:44.760 --> 07:50.880
hey please look for this function with this name and execute it for every incoming request,

07:50.880 --> 07:57.390
so this is now what we'll set up. This function will now run for every request that reaches our server

07:57.600 --> 08:03.400
which will be started by calling create server or almost, one piece is missing,

08:03.420 --> 08:05.230
I'll come back to that.

08:05.520 --> 08:07.310
Now this is one way of doing it.

08:07.470 --> 08:11.080
Now you don't have to explicitly create such a function though,

08:11.340 --> 08:14.250
you can also use a so-called anonymous function.

08:14.340 --> 08:18.950
So here, you can also type function req res, like this,

08:18.960 --> 08:20.790
this is now a function without a name,

08:20.790 --> 08:24.350
that is why it's called anonymous and it still achieves the same.

08:24.360 --> 08:31.590
We pass that function to create server and therefore, node will execute this function whenever a request

08:31.700 --> 08:32.330
reaches

08:32.340 --> 08:36.480
our server. This is an event driven architecture

08:36.480 --> 08:38.450
nodejs uses heavily.

08:38.460 --> 08:46.670
You work a lot with such setups or such code snippets where you tell node if X happens, do Y,

08:46.740 --> 08:52.140
so in this case if a request comes, please execute this function.

08:52.170 --> 08:59.160
Now you can also use next-gen javascript syntax and use an arrow function where you omit the function

08:59.160 --> 09:05.010
keyword and just have the two arguments followed by an equal sign and a greater sign

09:05.040 --> 09:12.420
hence an arrow and then the function body. This is basically the equivalent to the function keyword approach.

09:12.420 --> 09:21.090
Ok, so this is our create server callback function as it's called, it's called by nodejs whenever a request

09:21.100 --> 09:22.710
reaches our server,

09:22.710 --> 09:27.980
for now let's simply console log the request object to see what's inside.

09:28.080 --> 09:33.960
Now if we execute this file, we can do this in the built-in terminal which is already navigated into

09:33.960 --> 09:35.190
this project folder,

09:35.190 --> 09:37.810
make sure you go into that project folder

09:37.830 --> 09:40.800
if you are using the terminal outside of that IDE.

09:41.160 --> 09:46.530
So once you are in a terminal, navigate it in that folder, you can run node and then app.js,

09:46.530 --> 09:51.870
this will execute the app.js file and let's see what it does.

09:51.870 --> 09:53.390
Hmm, nothing right?

09:53.460 --> 09:59.340
We don't see console log and that makes sense because we didn't send a request to the server but we don't

09:59.340 --> 10:01.320
even know where the server is,

10:01.880 --> 10:04.940
how do we reach that server, which address does it have?

10:05.480 --> 10:07.930
Well one important thing is missing,

10:08.420 --> 10:13.050
this create server method actually returns a server.

10:13.190 --> 10:19.130
So we have to store that in a new variable or constant and I'll use a constant because I'll never overwrite

10:19.130 --> 10:21.440
it, I only create a server once.

10:21.440 --> 10:28.050
So now the created server is stored here and now we can use that server and do something with it.

10:28.190 --> 10:35.540
As you can see we get a bunch of methods we can call and one method is listen. Listen now actually starts

10:35.540 --> 10:43.670
a process where nodejs will not immediately exit our script but where nodejs will instead keep this

10:43.670 --> 10:45.590
running to listen,

10:45.680 --> 10:49.970
that's why the method is named like this for incoming requests.

10:49.970 --> 10:55.410
Now listen as you can see takes a couple of arguments, optional arguments,

10:55.460 --> 11:01.480
the first one is the port on which you want to listen. Now in production you typically would not fill this

11:01.480 --> 11:04.540
out and it would take the default of port 80

11:04.610 --> 11:11.030
but here on local development, we want to use a different port and you can also define a hostname. Now by

11:11.030 --> 11:11.570
default,

11:11.600 --> 11:14.630
this will be the name of the machine this is running on,

11:14.630 --> 11:18.790
so for our local machine, this is localhost by default.

11:18.830 --> 11:25.040
So let's just pass a port, 3000 is a port you often use but you're relatively free to use any

11:25.040 --> 11:29.650
port you want, the thousands port are typically pretty safe.

11:30.020 --> 11:37.730
And now with that, if we re-execute this, you'll see one important thing. The cursor here in the terminal

11:38.120 --> 11:44.030
doesn't go back in a new line because this process here is now still running,

11:44.120 --> 11:52.770
it didn't finish, this file execution didn't finish because we now get an ongoing looping process where

11:52.770 --> 11:55.440
this will keep on listening for requests

11:55.580 --> 11:57.320
and this is obviously what you want, right?

11:57.350 --> 12:01.670
You want to have a web server that keeps on listening for requests.

12:01.670 --> 12:09.140
Now we can see that in action by opening a new browser window where we simply enter localhost 3000

12:09.320 --> 12:12.120
and once you did that,

12:12.180 --> 12:16.830
nothing happens because we haven't configured it to return any html page

12:16.830 --> 12:25.540
but if you go back to your terminal, you'll see a lot of output there and that is this line, this is your

12:25.540 --> 12:28.170
request being logged to the console.

12:28.570 --> 12:33.520
Now let's analyze what happened here in detail and what's inside this request

12:33.610 --> 12:42.040
over the next lectures but these few lines here already give you a fully functional or almost fully functional

12:42.340 --> 12:43.870
web server

12:43.990 --> 12:50.740
and this is how you create servers in nodejs and I know that this can be hard to wrap your head around

12:50.860 --> 12:57.340
because it was for me when I started out with nodejs years ago, it was difficult to understand that

12:57.610 --> 12:59.830
coming from a PHP background

12:59.980 --> 13:05.380
you suddenly write your own server, that sounded like something super complex.

13:05.380 --> 13:08.230
Well actually it's just these few lines

13:08.230 --> 13:14.590
and from now on we'll just have to focus on doing something meaningful with the request and important, sending

13:14.590 --> 13:16.510
back a response.

13:16.510 --> 13:20.150
So time for detailed analysis in the next lectures.
