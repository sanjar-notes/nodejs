WEBVTT

00:03.140 --> 00:09.190
Now there's one thing you also might have noticed. When we only have two posts, so we have no pagination

00:09.190 --> 00:14.930
because we don't have enough posts to have a second page and I add a new value like a duck here,

00:16.320 --> 00:20.500
then this duck will show up but we don't get that next button.

00:20.520 --> 00:24.430
There is a little bug here which is easy to fix, has nothing to with nodejs

00:24.450 --> 00:29.850
but it is really easy to get rid of. In our finish edit handler here,

00:29.910 --> 00:39.390
when we go down to the code where we create that new post and we then add it to our existing posts, it's this

00:39.720 --> 00:46.380
else block here which is interesting to us where we in the end make sure that we only render two items at

00:46.380 --> 00:50.070
a time and that we add our new post at the beginning of the list.

00:50.070 --> 00:59.610
Now here what I need to do is I need to make sure that I do increase the amount of total posts. In our

00:59.610 --> 01:05.140
state in react here where we manage how many posts we have on that page,

01:05.430 --> 01:09.180
I do set total posts here to a different amount of posts

01:09.300 --> 01:16.260
when I fetch all posts where I get that total posts information. Well when adding a new element, I know

01:16.290 --> 01:20.110
that total posts will simply be the old total posts plus one.

01:20.550 --> 01:22.420
So I will add a new variable here,

01:22.440 --> 01:25.340
right below updated posts and that's updated

01:25.350 --> 01:33.900
total posts and that will be previous state total posts and that is a bit of react logic here but

01:33.900 --> 01:40.130
this first of all takes the old status and now when I do go into that else block which is the case

01:40.140 --> 01:48.960
when I am not editing but when I am adding, then I want to set updated total posts plus one, with the plus

01:48.960 --> 01:53.290
plus syntax I increment that by 1 and then here in the return statement

01:53.310 --> 01:59.270
I'll set the total posts equal to updated total posts. And with this change in place,

01:59.280 --> 02:07.080
if I now quickly delete my duck again so that I'm back to two items and I do add my duck so that I go

02:07.080 --> 02:09.570
up to three items again,

02:09.570 --> 02:14.580
now you see that next button and you can use it of course because now we're managing the total post

02:14.580 --> 02:15.380
correctly too.

02:15.510 --> 02:19.220
So that's just a little adjustment, has nothing to do with node or graphql

02:19.290 --> 02:22.850
but since I spotted that bug, I of course also want to get rid of it.

02:23.190 --> 02:30.210
And with that we moved our entire rest API over to graphql and I hope you see the power graphql

02:30.240 --> 02:37.530
gives you by being more flexible regarding the data you fetch from the backend and therefore your frontend

02:37.530 --> 02:44.640
development can move faster because your backend gives you the entire bandwidth of data

02:44.640 --> 02:46.050
you might be interested in.
