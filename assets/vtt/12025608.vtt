WEBVTT

00:02.640 --> 00:08.750
So I'm back in our project and there for example we got the first cases where we could add validation,

00:09.070 --> 00:12.190
the login and the sign up pages. There

00:12.200 --> 00:17.990
we want to validate, for example on the sign up page that the email address is a valid email address with

00:17.990 --> 00:20.500
an @ sign and a domain ending,

00:20.840 --> 00:25.040
that the password for example is at least six characters long,

00:25.100 --> 00:30.160
whatever your requirement is and that the confirm password matches the other password,

00:30.170 --> 00:31.560
that would be helpful too

00:31.920 --> 00:37.790
and later when we create a product where we for example enter a url, we might want to validate that

00:37.790 --> 00:39.860
this is a valid url.

00:39.920 --> 00:47.180
So these are all things that we can add with the help of proper validation and that is exactly what

00:47.180 --> 00:48.420
we'll dive into now.

00:48.500 --> 00:52.520
Now to add validation, we'll use a third party package,

00:52.520 --> 00:59.600
the package we'll be using is called express validator and you can simply google for express validator to find these

00:59.600 --> 01:02.540
official docs which are always worth checking out,

01:02.680 --> 01:09.020
in there you find quick command on how to install it and then you find a link to the full official docs which

01:09.020 --> 01:12.640
is this separate webpage where you learn all about using it

01:12.680 --> 01:17.630
and this is really a good idea to dive in because I will introduce you to this package, if you want to

01:17.630 --> 01:20.230
learn all the ins and outs about it,

01:20.270 --> 01:23.080
definitely check out this documentation.

01:23.330 --> 01:26.620
So let's first of all install it with this command here,

01:26.630 --> 01:29.940
so just using npm as we did it for other packages too.

01:30.170 --> 01:36.770
So back in our project code which is the code I've finished with in the last course module, we can simply

01:37.340 --> 01:44.000
enter this here to install express validator into this project and once this is done, we are ready to

01:44.000 --> 01:44.650
use it.

01:44.710 --> 01:50.870
So let me restart my development server with npm start and now let's find out how we can use express

01:50.960 --> 01:52.230
validator

01:52.520 --> 01:56.110
and let's start with our authentication routes for that.

01:56.210 --> 02:03.680
So here we obviously have our auth controller with the different controller actions and we got our routes

02:03.710 --> 02:06.500
folder with the auth.js file.

02:06.500 --> 02:12.170
Now typically you want to validate on your post or your non-get routes because you want to validate

02:12.200 --> 02:16.920
whenever the user sends data and that is not the case for our get routes for example

02:17.060 --> 02:23.480
but for posting the login data or posting the sign up data, I want to validate that data and I will

02:23.480 --> 02:27.190
start with the sign up, with post sign up, with this route.

02:27.320 --> 02:33.620
Let's say we want to add some validation to that route and we want to ensure that our e-mail here is

02:33.620 --> 02:39.800
an email, the password is at least let's say five characters long and that the confirm password matches

02:39.800 --> 02:40.850
our password,

02:40.850 --> 02:45.180
these would be some nice checks which I want to add here.

02:45.370 --> 02:49.430
Now to add that with that package installed, in my auth.js

02:49.470 --> 02:55.100
file in the routes folder, I can import something from that package,

02:55.190 --> 03:03.890
let's name that exp validator or however you want to name it and require express validator here.

03:03.900 --> 03:06.060
However the import here looks a bit different,

03:06.060 --> 03:12.660
we import a sub-package because express validator is basically made up of a couple of sub-packages

03:12.690 --> 03:18.460
you could say and there we need the check package which is the package you use for

03:18.810 --> 03:22.290
well all the validation logic you could want to add.

03:22.650 --> 03:30.000
We can also use a next gen javascript syntax because exp validator which we import will be a javascript

03:30.030 --> 03:35.100
object and we can use a feature called destructuring where we use curly braces on the left side of the

03:35.100 --> 03:36.070
equal sign

03:36.330 --> 03:42.510
and then you add some property names which you want to pull out of the object that

03:42.530 --> 03:49.290
this would give you. So here and you can find it in the official docs, we'll get a check function actually,

03:49.290 --> 03:54.980
so in the object which we import and which we would have stored in exp validator otherwise, there

03:54.990 --> 04:01.220
will be a check property that holds a function and we can import validation result, though we don't need

04:01.220 --> 04:02.610
it here we'll need it later.

04:02.850 --> 04:04.920
There also are other functions you can import

04:04.920 --> 04:08.520
and again the official docs are a great way to dive in deeper.

04:08.520 --> 04:14.310
What this does is in the end it just gives us a check function which we import from this package here

04:14.970 --> 04:18.800
and now adding validation to a route is really simple. For this post route,

04:18.810 --> 04:22.010
if we want to add validation, we add an extra middleware,

04:22.050 --> 04:28.140
remember you have that path and then you can add as many middlewares request handlers as you want and

04:28.140 --> 04:33.330
I'll add a new one here and I'll add a new one by adding my check function and calling it here

04:33.510 --> 04:42.610
and check this function will in the end return a middleware. So here I then just enter the field name

04:42.670 --> 04:45.880
or an array of fields which I want to check,

04:45.880 --> 04:46.980
now how does this work?

04:46.990 --> 04:49.580
Well I can simply add check

04:49.900 --> 04:51.280
and then the field name.

04:51.380 --> 04:56.130
Now we can have a look at our sign up view to find out that for example there, we'll have an email field,

04:56.170 --> 04:57.840
so it's this name I'm looking for.

04:58.000 --> 05:03.730
We have an e-mail field in there, so email will be the name of that field in the requests we're receiving,

05:04.000 --> 05:12.100
so in our auth route here, I can check email. Now this tell this middleware, the express validator that

05:12.130 --> 05:16.680
I'm interested in confirming that e-mail value or that

05:16.700 --> 05:19.420
I'm interested in validating that value,

05:19.450 --> 05:25.660
we then call a method and this will in the end then return a middleware that is understood by expressjs

05:25.660 --> 05:26.260
.

05:26.290 --> 05:32.050
So we call a method on this object which is returned by this check function that now allows us to do

05:32.050 --> 05:33.490
all kinds of checks,

05:33.610 --> 05:35.740
for example isEmail.

05:35.740 --> 05:40.640
Now there are a bunch of built-in methods and I will show you where to find them in a second

05:40.720 --> 05:46.510
and what this will now do is it will use this package to check the email field on the incoming request and

05:46.510 --> 05:52.960
it looks for that field in the body, in the query parameters, in the headers and in the cookies and it finds

05:52.960 --> 05:56.830
that field and then checks if that is a valid email address and

05:56.980 --> 05:59.620
that is the first step.

05:59.650 --> 06:06.560
Now with that, we have this middleware in place, now we can go to our controller here under controllers

06:06.560 --> 06:10.720
of course and import another part of that package.

06:10.930 --> 06:16.840
So here I will also import with this destructuring syntax because this package just exposes a bunch of

06:16.840 --> 06:24.760
stuff and I only want to get some specific things and I import from express validator check here as

06:24.850 --> 06:25.680
well

06:25.780 --> 06:34.030
and there we now need to import the validation result, validation result will be a function that allows

06:34.030 --> 06:37.070
us to gather all the errors

06:37.300 --> 06:43.950
prior validation middleware like this one might have thrown or might have stored.

06:43.960 --> 06:49.710
So now we just have to go to the post sign up route because that is where I did add my middleware and in

06:49.750 --> 06:50.800
here,

06:51.070 --> 06:57.850
I can now simply extract my errors and store them in a constant, errors by calling validation result

06:57.910 --> 07:04.240
on the request and in that request, this express validator middleware which we added here will have

07:04.330 --> 07:11.590
added errors that can now be retrieved. With this middleware here in the auth.js file on the routes folder, we are

07:11.590 --> 07:17.380
collecting errors so to say or this middleware will store some errors it found in an errors object

07:17.380 --> 07:23.560
so to say and this validation result function will go through that errors object managed by that middleware

07:23.620 --> 07:29.920
on the request and will then collect them all in this errors constant and we can then use that constant

07:29.920 --> 07:31.870
to check if we do have errors.

07:31.870 --> 07:32.740
Now how does that work?

07:32.740 --> 07:36.380
Well we can simply check if errors

07:36.430 --> 07:45.250
and then there is a method we can call, there is the isEmpty method and isEmpty will return true or false

07:45.250 --> 07:47.540
depending on whether we got errors or not

07:47.710 --> 07:53.770
and if this is not empty, that's why I add an exclamation mark to check the inverse, if this is not empty,

07:53.950 --> 08:02.140
then we could return a response where we set the status code to 422 which is a common status code for

08:02.260 --> 08:04.120
indicating that validation failed,

08:04.120 --> 08:06.160
so it's an error status code,

08:06.220 --> 08:12.250
it will still send a response just with this different status code and then we can call

08:12.310 --> 08:15.550
render here and render the page again.

08:15.670 --> 08:19.610
And I don't redirect here because I want to redirect upon success,

08:19.720 --> 08:22.300
if we fail I will render the same page again,

08:22.300 --> 08:27.030
so here I will render the same as I do in get sign up, here

08:27.040 --> 08:30.890
we can copy that render message, that render call here I should say.

08:31.420 --> 08:38.520
We do that same rendering here without res, just render, I render that same page, auth sign up

08:38.520 --> 08:48.870
and I can also add my my errors there, the error message is then not message like this but I can output errors

08:48.990 --> 08:57.260
and then there is an array function which I can call to return an array of errors

08:57.270 --> 09:03.130
I might have and we can also output this here, with console log to get a feeling for what's in there,

09:03.330 --> 09:07.120
errors array like this, let's see what we got in there.

09:07.200 --> 09:12.170
Now if we save all that, with that in place with the middleware and the error collection mechanism,

09:12.420 --> 09:13.850
let me enter something here,

09:13.920 --> 09:17.760
test which is not a valid email and let me hit sign up.

09:17.760 --> 09:26.610
Now I get a message here which is the default browser validation because I set this to type e-mail in

09:26.610 --> 09:26.940
my

09:29.540 --> 09:31.210
sign up view here,

09:31.300 --> 09:36.380
I have type e-mail and this adds this default browser validation.

09:36.380 --> 09:42.160
Now one thing you can do is you can add no validate to the overall form, validate

09:42.290 --> 09:43.820
to disable this check.

09:43.860 --> 09:44.100
Now

09:44.170 --> 09:49.400
by default you want to add it because it is a nice client side validation that can improve the user experience

09:49.460 --> 09:52.070
but here to see how it works without it

09:52.130 --> 09:57.830
and to allow me to make deliberate mistakes, I will disable it for now with no validate added to the form,

09:57.950 --> 10:00.290
not the input but to the form

10:00.290 --> 10:05.500
and then if I reload that page and I do enter something invalid again, I can submit.

10:05.510 --> 10:08.350
Now don't be confused by the error message,

10:08.420 --> 10:12.810
this is to be expected because we don't get a message, we get an array of errors

10:13.100 --> 10:20.940
but if we check our server side console, we see that this console log where I log an array of the errors that was

10:20.960 --> 10:22.580
collected gives me that array

10:22.760 --> 10:26.360
and we get the square brackets, it's an array. An array of objects

10:26.480 --> 10:30.800
and in that object, we find out which parameter was the problematic one,

10:30.810 --> 10:36.820
what value was entered and which message was generated by the validation middleware

10:37.040 --> 10:41.900
and this is a message we can use to output an error message if we want to.
