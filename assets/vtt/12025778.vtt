WEBVTT

00:02.280 --> 00:04.550
So how bad are errors?

00:04.770 --> 00:07.820
Now errors are not necessarily the end of your app,

00:08.010 --> 00:10.210
you can recover from the errors,

00:10.290 --> 00:14.940
you can inform the user that something went wrong and that he should try again

00:14.940 --> 00:18.420
for example, you just need to handle errors correctly

00:18.420 --> 00:23.070
that is the key takeaway and there are different types of errors.

00:23.160 --> 00:29.460
We can have technical or network related errors where you have very little influence on at least if

00:29.460 --> 00:31.560
you're not the system administrator,

00:31.740 --> 00:35.890
we have so-called expected errors and this is not an official term,

00:35.910 --> 00:39.680
that is something I came up with and I'll explain what this is in a second

00:39.840 --> 00:43.700
and we also have bugs or logical errors in your code.

00:43.920 --> 00:49.320
Now for technical errors, our mongodb server might be down and therefore any interaction

00:49.320 --> 00:52.580
with the database will fail. In such a case,

00:52.590 --> 00:54.420
there's not that much we can do,

00:54.450 --> 00:59.700
the best thing might be to show some error page to the user to let the user know that something is wrong

00:59.730 --> 01:04.510
on our end, that we are sorry and that we're working on fixing the issue.

01:04.560 --> 01:10.820
We also might want to behind the scenes send an e-mail to the administrator or anything like that.

01:10.830 --> 01:15.940
We also have these expected errors as I like to call them.

01:15.990 --> 01:17.250
There are certain operations,

01:17.280 --> 01:21.630
let's say we are interacting with a file or with a database that can fail,

01:21.680 --> 01:23.100
not very often

01:23.160 --> 01:27.750
and of course it's not really expected for this to fail but that can happen.

01:27.810 --> 01:34.620
Maybe because there are too many simultaneous requests to a certain file, anything like that. Here informing

01:34.620 --> 01:37.830
the user and giving the user the ability to retry

01:37.830 --> 01:40.080
might be a good solution.

01:40.080 --> 01:46.300
For example the validation errors which we also implement in earlier module, these would also be expected

01:46.320 --> 01:53.670
errors, users will input valid and invalid data and for invalid data, we want to inform the user and give the

01:53.670 --> 01:55.520
user the chance of retrying

01:55.950 --> 02:00.870
and of course we also have errors in our code where we interact with a user object in a place where

02:00.870 --> 02:04.480
it just can't exist or at least not in all circumstances.

02:04.560 --> 02:07.890
We should fix such errors during development,

02:07.890 --> 02:11.610
we should test our code and we should fix such issues of course,

02:11.610 --> 02:12.830
these are not errors

02:12.900 --> 02:14.450
we should handle at runtime,

02:14.490 --> 02:20.310
we should not show a message to the user because these errors are not the users or the network's fault,

02:20.430 --> 02:22.750
they are our fault.

02:22.800 --> 02:27.810
So how can we work with the different types of errors then? We have to differentiate.

02:27.960 --> 02:35.080
There are errors where an error is thrown, an error is a technical object in a node application.

02:35.100 --> 02:38.530
So there is a built in error object which we can throw

02:38.580 --> 02:40.780
that's also a javascript language features,

02:40.830 --> 02:44.070
basically all programming languages have such a feature.

02:44.340 --> 02:50.340
We also can have scenarios where we can't continue with our code but there is no technical error.

02:50.340 --> 02:55.640
An example would be that we try to log a user in but the email address does not exist,

02:55.650 --> 02:57.920
this is not really a technical error,

02:58.020 --> 03:02.900
there is no error being thrown but we know we can't continue

03:03.000 --> 03:08.670
and so we want to check for this scenario as well and handle it appropriately.

03:08.670 --> 03:17.250
Now for the errors thrown part, we have certain tools we can use to test code and catch potential errors

03:17.430 --> 03:19.570
so that we can handle them gracefully

03:19.860 --> 03:26.900
and for synchronous code, that would be try catch blocks. For asynchronous code with promises, we have

03:26.940 --> 03:30.840
then and catch which you already saw quite a lot throughout this course.

03:31.140 --> 03:37.920
In the end in both scenarios, we then have the choice if we want to directly handle the error or if we

03:37.920 --> 03:44.040
use a mechanism built into express, a special error handling middleware which we haven't used thus far

03:44.350 --> 03:50.900
which you can use to catch errors and then return a response to the user and I'll show how this works

03:50.910 --> 03:54.940
in this module of course. For this scenario that no error is thrown,

03:55.080 --> 04:01.440
well we just have to check values with if checks for example and then we can decide whether we want to

04:01.440 --> 04:07.650
throw an error, to kind of enter the left world here and then kick off that error handling process

04:08.130 --> 04:14.250
or if we want to directly handle the error which is not a technical error but where we simply add some

04:14.250 --> 04:17.610
code that can continue with the missing input data

04:17.610 --> 04:23.170
for example. In all cases, we've got different ways of communicating with our users.

04:23.250 --> 04:25.490
We can return an error page,

04:25.530 --> 04:31.050
so a dedicated page that informs the user hey we have a problem and that of course should be kind of

04:31.050 --> 04:36.220
the last resort because there the user loses all his input, can't continue.

04:36.330 --> 04:44.610
We also can return the page which user was on and just give some error information,

04:44.700 --> 04:51.850
that is what we did for validating for example, there we returned the page the user was on, kept the input

04:51.840 --> 04:54.440
values and just added an error message.

04:54.570 --> 04:55.860
Or we could redirect,

04:55.860 --> 05:02.060
for example if we try to access a page which we are not authenticated to visit, then we can redirect the user.

05:02.540 --> 05:04.970
So these are the different tools

05:04.970 --> 05:07.810
we have, the different ways of working with errors we have

05:08.000 --> 05:12.910
and now let's dive into our code and see what we're already using and what we can use.
