WEBVTT

00:02.340 --> 00:08.330
Let's make sure we can also delete items in the cart and for this in cart.ejs,

00:08.490 --> 00:12.020
I will change my list item a bit, in there

00:12.050 --> 00:14.040
I'll add a div first of all

00:14.220 --> 00:22.370
or maybe let's add a paragraph to be semantically more correct which will output the text for this cart

00:22.370 --> 00:25.290
items, so things like the name and the quantity

00:25.670 --> 00:28.190
and then I will also add a little button there,

00:30.940 --> 00:36.060
wrapped in a form. The form should go to cart

00:36.060 --> 00:43.740
delete item maybe, the method will be a post method and in the form I will of course have my button with

00:43.740 --> 00:53.120
a class of button with a type of submit which says delete. If we now reload the cart here,

00:53.620 --> 00:58.660
we see delete this is the button, we can certainly work on the styling but for now I just want to make sure

00:58.660 --> 00:59.820
that it works.

00:59.820 --> 01:01.310
Now this is the delete button

01:01.360 --> 01:05.740
and if I click that, it well should delete this item of course.

01:05.740 --> 01:07.460
So cart delete item is a route

01:07.480 --> 01:11.920
we now need to add and therefore let's go to routes here in shop.js

01:11.940 --> 01:14.500
because of course this is a customer action,

01:14.500 --> 01:18.450
our customers will manage their cart and there below the cart

01:18.460 --> 01:21.800
I'll add a router post method, cart

01:21.810 --> 01:23.420
delete item.

01:23.420 --> 01:26.810
Now we need a fitting action in the controller,

01:26.810 --> 01:32.420
so in a shop controller here and there I got get cart and post cart,

01:32.490 --> 01:41.720
now I will also have exports post cart delete product maybe, you can of course use any name you want

01:42.690 --> 01:48.350
and in here we'll have to remove that product from the carts but only from the cart, not the product

01:48.350 --> 01:49.360
itself.

01:49.850 --> 01:57.230
Well to do that, let's first of all extract the product ID from the request body product ID and therefore

01:57.230 --> 02:00.650
we need to make sure that we pass it there too,

02:00.860 --> 02:13.760
so in our form let's again add this hidden input with a value of our p product data.ID and then

02:13.760 --> 02:19.210
a name of product ID so that we can extract it by that name on our backend.

02:21.080 --> 02:27.630
And with that added, with this hidden input added here, let's now go back into the controller and with

02:27.630 --> 02:35.430
that ID let's access the cart and then there, we can delete a product right. Now that delete product function

02:35.430 --> 02:38.330
takes the ID of the product and we do have that

02:38.550 --> 02:43.540
but it also takes the price and therefore, we should get that product information first.

02:43.740 --> 02:52.080
So let's also call product find by ID here and get that product for this ID and add a callback with the retrieved

02:52.380 --> 02:58.550
product, simply so that we can get the price before we well issue the delete request.

02:58.950 --> 03:05.630
So in there, in this callback I will call delete product and now I can pass in product price too

03:05.790 --> 03:09.830
and of course we could have also used a hidden input to pass the price to the backend

03:09.870 --> 03:11.770
but I think this is the cleaner approach,

03:11.850 --> 03:18.610
if we only pass the ID through the request and then we do all the data retrieval on the backend in our node

03:18.630 --> 03:19.920
express code.

03:20.370 --> 03:22.650
So now we get delete product

03:22.650 --> 03:31.220
and with that we can also send a redirect request back to cart and in theory, this should be all we need.

03:31.260 --> 03:35.280
Now of course the missing thing is that we connect our cart delete

03:35.300 --> 03:42.450
item route to the newly created shop controller action, the post cart delete product action. And with that

03:42.450 --> 03:50.070
added in the shop.js file in the routes folder, we can reload our cart page here,

03:50.280 --> 03:53.850
click delete and we see our products and

03:53.940 --> 03:56.640
by the way you can ignore these errors on the right,

03:56.680 --> 03:59.350
these are related to my local network here.

03:59.580 --> 04:01.670
So now I got no products in the carts

04:01.830 --> 04:08.240
and if we have a look at our cart.json it's indeed empty, product.json still has the products though.

04:08.680 --> 04:14.500
And if I quickly add another product with no real image, like this

04:14.610 --> 04:19.650
so that I have more than one and I add both to my cart

04:22.950 --> 04:27.310
and I delete just a book here, only that is removed, also in carts.json.

04:27.330 --> 04:30.930
So this seems to work just fine,

04:30.930 --> 04:32.520
let's also delete this one now,

04:33.740 --> 04:40.160
seems to work good and with that, we improved our app a lot and you hopefully get a bit of a feeling

04:40.160 --> 04:46.880
for how you can pass data around and how you can work with your models. Now correctly you would say that

04:46.880 --> 04:47.240
of course

04:47.240 --> 04:53.100
our current approach here in the modules is a bit suboptimal because working with the file and so on,

04:53.150 --> 04:54.320
it's not that great,

04:54.380 --> 05:01.070
we can also improve some things in the controllers because for example as I said, we should redirect if

05:01.070 --> 05:05.360
we know that the deletion succeeded and not right after this line 

05:05.360 --> 05:10.040
because since we access a file in there, theoretically we should use a callback here too.

05:10.250 --> 05:17.270
But these are all things I will do once we finally also added the database, something we will do in the

05:17.270 --> 05:18.880
next module now.

05:18.890 --> 05:22.770
So time to move on to this exciting big block of the course.
