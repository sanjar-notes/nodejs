WEBVTT

00:02.480 --> 00:07.210
Now that we successfully connected our code to the SQL database,

00:07.340 --> 00:09.080
let's start working on the project

00:09.140 --> 00:11.190
and for this, I'll remove this code

00:11.210 --> 00:12.240
in the app.js file

00:12.260 --> 00:17.780
because this was just some testing code, not the real code we'll use, instead

00:17.790 --> 00:20.550
I of course want to work on my models here,

00:20.570 --> 00:27.410
let's say on the product model. There we right now already have an exported class which we can instantiate

00:27.740 --> 00:31.470
and where we then for example have a save method to create a new product.

00:31.490 --> 00:38.960
Now even though we're still fetching product from our file for now, we also have our static methods for

00:38.960 --> 00:43.910
fetching data and there we fetch data from our files.

00:44.000 --> 00:45.200
Now we can do that

00:45.200 --> 00:48.310
but of course this is not really the set up I want to use.

00:48.440 --> 00:55.370
I will still work with static methods for fetching data but I want to fetch data from the database and

00:55.430 --> 01:01.400
not from a file. To do that in my product.js file in the models folder,

01:01.490 --> 01:07.350
I don't need fs and path because I'll not work with files and paths anymore,

01:07.490 --> 01:10.770
I don't need to construct that path here at the top.

01:10.910 --> 01:15.480
We can leave the cart for now but that functionality will be broken for the moment,

01:15.740 --> 01:20.990
I don't need my helper function here for getting products from a file because we'll not work with

01:20.990 --> 01:22.050
files anymore,

01:22.400 --> 01:26.630
I will still create a product like this so I will leave that code as it is,

01:26.640 --> 01:33.620
however I will delete my code for saving here, we'll override this eventually, I'll delete my code

01:33.620 --> 01:41.400
for deleting, for fetching and for finding by ID and I want to start with fetch all now. Here

01:41.510 --> 01:46.540
I also don't want to work with callbacks anymore but with promises, so I don't need that argument,

01:46.550 --> 01:51.980
the callback argument, I shouldn't need that in any of my functions here.

01:51.980 --> 01:53.070
So fetch all

01:53.090 --> 01:54.870
should now reach out to the database

01:55.010 --> 01:57.480
and what do we need to do to do that?

01:57.860 --> 02:00.260
Well we need to get access to the database.

02:00.440 --> 02:05.420
So let's import our pool object from the database.js file,

02:05.720 --> 02:13.040
so I'll create a new constant db and require database, whoops, not database but we'll go up one level into

02:13.040 --> 02:17.390
util and there, database.js, without js.

02:17.480 --> 02:23.760
So now we get access to the pool and now in fetch all, we can execute a query

02:23.960 --> 02:29.180
and now which query do we need to execute here? Definitely feel free to pause the video and write it on

02:29.180 --> 02:29.870
your own

02:29.930 --> 02:37.250
if you already know it. Well here we want to fetch all products so it's the exact same query

02:37.260 --> 02:38.570
we ran before,

02:38.620 --> 02:42.810
select everything, the star stands for everything,

02:42.930 --> 02:47.040
we could also select just the ID and title with this syntax

02:47.130 --> 02:53.030
but I want to select everything, all fields from products.

02:53.250 --> 02:57.500
Now as a side note, you could write select and from in lowercase too

02:57.630 --> 03:05.550
but I like to keep these keywords uppercase to indicate what is core SQL syntax and what are our

03:05.670 --> 03:06.960
dynamic values.

03:07.530 --> 03:12.870
So we select everything from products here and now as I said, this returns a promise.

03:12.900 --> 03:15.510
Now we could add then and catch here

03:15.660 --> 03:21.340
but actually I'm interested in the returned value in the place where I'm calling fetch all,

03:21.510 --> 03:28.210
so I will simply return the entire promise that execute returns so that we can use it somewhere else.

03:29.390 --> 03:35.330
So now we can go to the place where we do call fetch all and that is in the shop.js file in the controllers

03:35.480 --> 03:43.010
folder. There for example where we get the index page, we do call fetch all but right now we still pass

03:43.010 --> 03:47.180
in a function that previously was the callback.

03:47.180 --> 03:55.540
Now we got no callback anymore, so let's take out that render code we'll need that later and remove

03:55.570 --> 04:02.850
that anonymous function. Instead fetch all will now return a promise, so we can add then and catch,

04:03.040 --> 04:08.320
you don't have to add both but you typically also want to have some error handling mechanism, though we'll

04:08.380 --> 04:10.790
learn about a better one in the future,

04:10.840 --> 04:12.200
so later in this course.

04:12.580 --> 04:16.960
So here I will again simply log my error and not do anything else with it

04:17.170 --> 04:21.810
but in then, you remember we got this nested array,

04:21.830 --> 04:28.330
now we can use some next gen syntax with a feature called destructuring where I can already pull out

04:28.330 --> 04:32.200
information of the value I'm receiving as an argument here

04:32.410 --> 04:33.770
in my argument list.

04:33.910 --> 04:39.700
So here is my anonymous function which will be executed once we get data and instead of using result or

04:39.730 --> 04:46.900
anything like that which is a nested array, I can use the syntax here where I pull out my rows and my

04:46.990 --> 04:47.910
field data,

04:47.950 --> 04:53.560
you can name this however you want and this will simply be the first element of the nested array which

04:53.560 --> 04:57.730
would be our argument data and that will be the second element.

04:57.730 --> 05:05.230
And now we can use these two variables which simply hold these two nested arrays and therefore I can

05:05.230 --> 05:08.080
console log them but I don't need to log them,

05:08.290 --> 05:12.250
I instead want to render my page inside of this anonymous function,

05:12.250 --> 05:19.960
so once we got that data and rows should be my products because my rows here are the entries in the

05:19.960 --> 05:23.430
products table and therefore these should be my products.

05:23.680 --> 05:33.140
If we now save that and we go back to our running application in the server, on localhost 3000 we shouldn't

05:33.210 --> 05:39.560
see the book here and also have no errors on our console.

05:43.130 --> 05:47.190
Now we see that book because our data is retrieved from the database

05:47.570 --> 05:53.290
and therefore if we were to go to the database and we for example add an exclamation mark here in the title

05:53.810 --> 05:54.790
and then click apply,

05:54.800 --> 05:58.610
you always need to do that, apply, close,

05:58.840 --> 06:02.940
if I reload my page here, it has no exclamation mark right now

06:03.040 --> 06:03.900
but now it has,

06:04.000 --> 06:06.870
so this is really coming from the database.

06:07.040 --> 06:09.930
Now here's your little mini task,

06:09.940 --> 06:14.890
also make sure you're fetching data from the database when loading the products page which right now

06:14.890 --> 06:17.460
is broken or not working

06:17.590 --> 06:21.530
because there we still try to reach out to a file which will not work.

06:21.790 --> 06:28.480
Try to fix this on your own before we also start inserting documents or elements into the database.
