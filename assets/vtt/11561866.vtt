WEBVTT

00:02.160 --> 00:04.260
Now let me get rid of that existing code.

00:04.290 --> 00:08.490
You find a snapshot of the code we wrote thus far attached to the last lecture.

00:09.570 --> 00:11.080
And let me write some new code.

00:11.100 --> 00:18.360
An important thing you work with or important data structure you work with in JavaScript are objects.

00:18.540 --> 00:23.820
You could have something like the person object and you create an object typically with curly braces

00:24.270 --> 00:27.300
and then in there you have key value pairs.

00:27.390 --> 00:30.150
You define the key by simply typing.

00:30.150 --> 00:35.190
Well, whichever key you want to use, let's say name, then you have a colon and you must have the

00:35.190 --> 00:35.790
colon.

00:35.790 --> 00:40.320
And after the colon you have your value, in my case, a string max.

00:40.320 --> 00:45.330
And then with a comma you can add another key value pair, age 29.

00:45.870 --> 00:50.100
Now this is an object and I can lock person here.

00:52.640 --> 00:57.740
If I now execute pledges, we see that object being printed here.

00:58.160 --> 01:01.430
Now objects allow us to group data together.

01:01.460 --> 01:08.420
You can also not just have variables in there, so to say, but you can also have functions in there,

01:08.420 --> 01:10.730
for example, a grid function.

01:10.820 --> 01:18.230
And there you can simply have an anonymous arrow function or an arrow function general as a value after

01:18.230 --> 01:18.980
the colon.

01:19.370 --> 01:21.890
And then in there you could have console.log.

01:21.980 --> 01:22.970
Hi.

01:23.950 --> 01:25.480
I am.

01:26.140 --> 01:31.570
And then the name and this would now be accessed with this keyword instead of an object.

01:31.570 --> 01:34.450
You have to use this to typically.

01:34.450 --> 01:39.490
And there is something special about this, which I showed in that video I linked before in an earlier

01:39.490 --> 01:40.060
lecture.

01:40.060 --> 01:46.630
But typically this refers to the surrounding object and now we can use the dot notation.

01:47.490 --> 01:53.850
So dot to access properties or methods, so variables or functions inside of that object.

01:53.850 --> 01:56.100
So we could now use this name.

01:56.870 --> 02:04.540
And now I can use that person and call greet with the dot notation and executing it as a function.

02:04.550 --> 02:11.270
So the dot notation is important on this, which refers to the object or on you referring to that object

02:11.270 --> 02:13.040
which is stored in this constant here.

02:14.540 --> 02:18.080
And now if execute this again, I'm saying, hey, I'm undefined.

02:18.110 --> 02:19.220
Now, why is that?

02:19.250 --> 02:24.370
Well, the reason for that indeed, is what I taught you about arrow functions.

02:24.380 --> 02:33.620
This now here refers to the global scope to the global node runtime scope and not to this object to

02:33.620 --> 02:39.290
have it refer to that we either have to use the old scroll function like this.

02:39.740 --> 02:42.440
Now, if I repeat that, I'm saying, Hey, I'm Max.

02:43.810 --> 02:51.610
Or we use a slightly different approach or syntax here in an object, and that is you don't use an arrow

02:51.610 --> 02:54.460
function, but you use it like that.

02:54.460 --> 03:02.050
So you omit the colon, add the parentheses after the key name, and then without a function, keyword

03:02.050 --> 03:05.320
or anything like that, you add your function body.

03:05.350 --> 03:08.410
And now this is a method of this object.

03:08.410 --> 03:10.930
And you see, Hi, I'm Max two now.

03:10.930 --> 03:16.180
So this is something important and this is the syntax you'll see me use throughout this course without

03:16.180 --> 03:21.010
the colon parentheses right after the key and then the function body.
