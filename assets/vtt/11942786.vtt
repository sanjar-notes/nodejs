WEBVTT

00:02.140 --> 00:05.110
So we're able to fetch all the products,

00:05.170 --> 00:09.760
let's now implement the code to fetch a single product and for that, I'm back in the shop.js

00:09.760 --> 00:16.510
controller file and here it is the get product function I want to work on. Here we get the product

00:16.510 --> 00:22.900
ID as part of the url and then we want to use our product model to somehow find the fitting product

00:23.320 --> 00:28.560
and therefore we of course need to work on the model again. And feel free to implement this on your own

00:28.570 --> 00:30.390
if you got some mongodb knowledge,

00:30.400 --> 00:31.860
it's a great challenge then

00:32.170 --> 00:36.080
otherwise of course we'll just do this together.

00:36.810 --> 00:40.340
So how would I fetch a single product?

00:40.680 --> 00:46.860
Well besides having my static fetch all method, I'll add another static method, find by ID and you can

00:46.860 --> 00:54.030
name this however you want of course. Here I expect to get a product ID as an argument and then just as

00:54.080 --> 00:59.260
before I'll call get db to get access to that database connection we have

00:59.640 --> 01:08.820
and I then want to return the result of an operation where I use my collection and there, I will now

01:08.820 --> 01:13.730
pass products again because it's still the same collection I want to interact with

01:14.220 --> 01:21.030
and I will find a product here but I'll find only one product.

01:21.390 --> 01:29.100
And to do that, I'll narrow down the result set with find and then I'll pass a javascript object to it

01:29.190 --> 01:36.630
which allows me to configure a filter and here, I want to look for a product where _id is equal

01:36.660 --> 01:40.410
to prod ID because that's the ID of the product I'm looking for.

01:42.200 --> 01:48.350
So with this, I'm returning theoretically all products which have this ID but I know it'll only be

01:48.350 --> 01:57.380
one so I can use find like this and I'll only get back one product or do I? Well actually find will still

01:57.380 --> 02:01.470
give me a cursor because mongodb doesn't know that I will only get one

02:01.550 --> 02:03.250
and here we can use

02:03.320 --> 02:06.130
next, the next function to get the next

02:06.140 --> 02:10.910
and in this case here also the last document that was returned by find here.

02:11.090 --> 02:14.830
So here I can then add then and catch

02:15.140 --> 02:20.940
and as always, log any error I might have

02:21.100 --> 02:31.370
and then in then where I will have my one product, there I will log it to the console for one and then I

02:31.370 --> 02:34.890
will return my product.

02:34.890 --> 02:38.950
So now this should hopefully yield my product here.

02:39.030 --> 02:43.610
Now with that, if we go back to the shop controller with find by ID,

02:43.650 --> 02:51.870
I either have an error or I get my product and I try to render the product detail page.

02:51.870 --> 02:59.690
Now let's go to the routes and there to the shop.js file and we need to comment in that route here for

02:59.700 --> 03:04.460
getting the product details. If we now save everything,

03:04.770 --> 03:06.370
let's click on details here

03:09.320 --> 03:14.150
and one thing you can see is that this doesn't seem to work right,

03:14.150 --> 03:18.350
we always get redirected to /products page.

03:18.410 --> 03:23.090
So if I go back to the starting page and we can tell the difference by the distance between the dollar

03:23.090 --> 03:28.910
sign and the character, on the starting page if I click details I just get forwarded to products,

03:28.910 --> 03:38.250
now why is that? Now this actually happens because no product ID is passed when I click details and therefore

03:38.250 --> 03:39.820
we end up in this route.

03:39.870 --> 03:42.340
Now why is no product ID passed?

03:42.420 --> 03:51.540
If we have a look at our view and there add our index.ejs file in the shop folder, in there

03:51.840 --> 03:57.490
we got our details button and I do actually add the product ID here

03:57.510 --> 04:03.920
but what is the error here? Well I access product.id here

04:04.070 --> 04:07.340
but with mongodb, it's _id,

04:07.460 --> 04:14.700
so I should use product_id and the same of course on the product list page, there

04:14.800 --> 04:18.240
I should also use product _id.

04:18.300 --> 04:26.580
So in all the places of the app where we used product.id, we should now use product_id. And with that

04:26.580 --> 04:31.260
if we reload that page here, the starting page or products page doesn't matter,

04:31.470 --> 04:33.200
if I now click details,

04:33.720 --> 04:35.030
now something else happens.

04:35.040 --> 04:42.480
Now we get stuck here because we have an error but that is better than before because now at least, we

04:42.630 --> 04:45.450
do have an ID which we try to find. 

04:45.450 --> 04:47.080
So what's the issue here now,

04:47.400 --> 04:50.620
why do I get cannot read property title of null?

04:51.210 --> 05:00.700
Well for one it's worth noting that null is printed here as well and that null should be stemming from

05:00.700 --> 05:06.490
my product model from find by ID when I console log the product.

05:06.640 --> 05:09.940
So it looks like we didn't find any product for that ID and

05:10.160 --> 05:12.170
what could be the reason for that now?

05:13.700 --> 05:20.390
The reason for that is that is that the ID in mongodb is actually stored a bit differently and we can

05:20.390 --> 05:25.160
see this in compass, the ID is actually such an object id thing.

05:25.430 --> 05:32.480
Now I did mention that mongodb stores data in bson format and this binary format of json

05:32.690 --> 05:36.210
is not just used because it's a bit faster to work with,

05:36.260 --> 05:42.530
it is but also because mongodb can store some special types of data in there and object id is such a

05:42.530 --> 05:43.060
type.

05:43.210 --> 05:48.970
It's a type added by mongodb, it's not a default javascript type, actually it doesn't exist in javascript

05:49.010 --> 05:56.980
at all and it's simply an ID object which mongodb uses because this generates and manages IDs which

05:57.000 --> 05:58.880
look random but actually aren't,

05:58.910 --> 06:05.320
so IDs for example are created in a way that if you create an ID now and an ID one second later, the

06:05.330 --> 06:10.740
ID one second later will alphabetically be a higher value than the previous one

06:10.850 --> 06:12.230
but that's just one thing.

06:12.560 --> 06:17.020
So object ID is an object provided by mongodb

06:17.420 --> 06:23.330
and if we look for equality, we can't compare _id which in the database will only hold object

06:23.330 --> 06:29.450
id values with a string because a string is not equal to the object id and the string in here does not

06:29.450 --> 06:31.520
count, mongodb will not compare this,

06:31.520 --> 06:34.820
it compares the entire object, the entire object ID.

06:35.270 --> 06:43.370
So to fix this, we simply go into our product model and in there, I'll import mongodb by requiring

06:43.380 --> 06:45.560
mongodb from the package

06:45.560 --> 06:49.340
and now I can use mongodb to get access to that object id type.

06:49.490 --> 07:02.030
So here when I compare, I can use mongodb.objectid and I can create a new, this is a constructor,

07:02.240 --> 07:06.260
a new objectid to which I pass a string which will be wrapped by that.

07:06.470 --> 07:11.180
So now if I save that and I try reloading the page for that ID,

07:11.420 --> 07:18.130
now you see this works because now I create such an objectid object and therefore here when I'm

07:18.140 --> 07:23.170
telling mongodb find me all documents where the ID stored in the database is equal to that,

07:23.460 --> 07:30.650
mongodb will now succeed because we now pass on objectid object to the comparison instead of just

07:30.650 --> 07:31.380
the string.

07:31.700 --> 07:33.870
And now this works too.

07:34.010 --> 07:40.160
It's very important that you keep in mind that mongodb stores IDs and _id and that it uses the

07:40.190 --> 07:42.740
special objectid type for that.
