WEBVTT

00:02.280 --> 00:10.860
With our basic validation in place, let's now find out how we can check for equality in our passwords

00:11.190 --> 00:16.270
and for that, I of course want to check my confirm password field,

00:16.290 --> 00:22.320
so in my sign up view, I'm talking about this field with the name confirm password.

00:22.320 --> 00:29.310
So let's go back to auth.js to that route and let's add a new check for something in the body

00:29.310 --> 00:30.350
of the request,

00:30.360 --> 00:39.010
so basically for the confirm password field here. Now in there, I want to check if that is equal to my

00:39.010 --> 00:39.820
password

00:39.820 --> 00:41.920
and how can I achieve this?

00:42.280 --> 00:48.670
Well I could do it by adding a custom validator here, that custom validator which receives a value and

00:48.850 --> 00:50.230
where I then extract the request

00:50.250 --> 00:52.690
with this destructuring syntax

00:52.690 --> 00:59.320
and if they're in there, I check if the value of confirm password is equal to the value of request

00:59.820 --> 01:01.680
body password

01:01.750 --> 01:05.160
and this is why you might need access to the request object

01:05.230 --> 01:07.590
because here I need to extract the password,

01:07.630 --> 01:14.440
so this field value from the request body in my custom validator. And now I can check if they are equal or

01:14.440 --> 01:19.290
to be precise, if they are not equal and if they are not equal,

01:19.570 --> 01:28.110
well then I want to throw a new error where I say passwords have to match, like this

01:28.240 --> 01:30.400
and otherwise I return true.

01:30.580 --> 01:33.550
And this is how we could check for equality of two fields,

01:33.630 --> 01:39.150
I'm checking whether my confirm password is equal to my other password. With that if I now save

01:40.140 --> 01:46.620
this and I do enter a valid email address, this one is already taken but I'm not validating for this with

01:46.620 --> 01:47.130
this package

01:47.130 --> 01:48.840
so this should be fine.

01:48.840 --> 01:53.050
I do enter a valid password and I do enter

01:53.370 --> 01:58.620
let's say another theoretically valid password, though we're not checking for length or anything like

01:58.620 --> 01:58.940
that

01:58.980 --> 02:01.690
on confirm password so anything would do it there.

02:01.740 --> 02:05.100
But the important thing is this is a password that differs from this one,

02:05.160 --> 02:07.700
you can make this really clear by adding more characters.

02:07.770 --> 02:10.580
If I now hit sign up, I get passwords have to match,

02:10.590 --> 02:12.560
so this is now working.

02:12.630 --> 02:15.210
If on the other hand, I take an e-mail address

02:15.210 --> 02:17.480
but again that's not validated by this package

02:17.550 --> 02:20.700
but then I try valid equal passwords,

02:20.700 --> 02:26.510
then I only get my e-mail thing but the validation with that validation package succeeded.

02:26.520 --> 02:33.750
Now it's also worth noting that I did not add the other password validation like isLength and isAlphanumeric

02:33.750 --> 02:35.030
to the confirm password

02:35.160 --> 02:38.600
even though that applies to the confirm password too of course

02:38.640 --> 02:40.400
but why did I not add it?

02:41.520 --> 02:44.310
Because we're already checking it on this main password

02:44.430 --> 02:46.290
and then we're checking for equality,

02:46.440 --> 02:50.270
so we implicitly have this check here on confirm password too.

02:50.340 --> 02:56.190
I don't care if confirm password is long enough because it has to equal that password and that password

02:56.400 --> 02:58.300
is checked for its length, 

02:58.320 --> 03:05.430
so I got this in place here and therefore I am protected against any errors on this site.

03:05.430 --> 03:12.810
So this is now how we could check for password or any field equality that you might need in your application.
