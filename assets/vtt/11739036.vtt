WEBVTT

00:02.290 --> 00:08.580
From now on all new products that are created should be associated to the currently logged in user and

00:08.620 --> 00:15.460
for now, this will only be this one dummy user. That means that if I'm in the admin.js controller, here

00:15.460 --> 00:21.090
when we create a new product in post add product, we'll not create the product like this anymore,

00:21.190 --> 00:29.110
we need to pass in extra information regarding our user that is associated. One way of doing this is

00:29.110 --> 00:37.030
that we set this new user ID field we got, keep in mind user ID was added as a database field because

00:37.060 --> 00:43.190
we now have a relation set up and we set this to request user ID,

00:43.330 --> 00:48.970
keep in mind that request user is the sequelize user object which holds both the database data there for that

00:48.970 --> 00:51.660
user as well as the helper methods.

00:52.060 --> 00:56.120
So this should create new products with that user being associated to it,

00:57.130 --> 01:03.840
let's test this. Let's go back to add product and simply enter some dummy values here for now,

01:04.580 --> 01:07.430
seems to work, we get no error here

01:07.680 --> 01:14.600
and if we look into our products table by clicking on this icon here, we indeed have the user ID stored

01:14.600 --> 01:15.600
here.

01:15.650 --> 01:24.820
Now we also have one tiny problem or thing we can improve at least. We manually fetch the user id and

01:24.820 --> 01:30.530
this is not a lot of work here but there is a more elegant way of setting this so that we don't manually

01:30.530 --> 01:32.240
have to set the user ID.

01:32.660 --> 01:40.250
We can use another cool feature of sequelize, we can use our user object as it's stored in the request and

01:40.280 --> 01:46.790
always keep in mind, this is a sequelize object with all the magic features and there we'll actually have

01:46.790 --> 01:49.030
a create product method.

01:49.040 --> 01:50.650
Now where is that coming from?

01:51.050 --> 01:57.590
Well it is something you can get from the official docs if you read through associations. There you'll learn

01:58.010 --> 02:04.830
that if you set up associations, sequelize add special methods depending on the association you added

02:05.120 --> 02:12.440
and for a belongs to has many association as we did, sequelize adds methods that allow us for example

02:12.680 --> 02:16.820
to create a new associated object.

02:16.820 --> 02:23.030
So since a user has many products or a product belongs to a user

02:23.210 --> 02:32.220
as we learned or as we set it up in app.js, since we have that relation defined, sequelize automatically

02:32.220 --> 02:40.020
adds a create product method to the user. Create product because our model is named product and create

02:40.200 --> 02:44.280
is then automatically added at the beginning of the method name,

02:44.280 --> 02:46.590
that is some magic done by sequelize.

02:46.800 --> 02:53.850
So create product is available and there we simply pass in the object with the product data that can't

02:53.850 --> 02:55.500
be inferred by sequelize

02:55.590 --> 03:02.940
so basically anything but the user ID and the timestamps and then we can chain our then and catch block here,

03:03.180 --> 03:04.850
just as we did it before.

03:04.960 --> 03:09.270
The rest doesn't change but this now automatically creates a connected model.

03:09.300 --> 03:19.130
So if I now save this and I add a new product, this still works and if we have a look at our database and

03:19.130 --> 03:25.220
we refresh the products table here, we see we also get the user ID here even though we did not set it

03:25.250 --> 03:26.420
explicitly.

03:26.420 --> 03:33.680
Now this is done by sequelize with this magic way of connecting it and that is a really cool way of

03:33.710 --> 03:40.020
using associations in sequelize and making sure that our models know about each other.
