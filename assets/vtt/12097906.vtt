WEBVTT

00:02.330 --> 00:08.540
I will create a new controller, auth.js that is related to my users, to my user data, to my authentication

00:08.540 --> 00:16.280
logic and in there I'll first of all import my user model by requiring it from my models folder, the

00:16.280 --> 00:18.230
user file.

00:18.230 --> 00:25.660
Now we need at least two actions here and the first one is of course the action to sign a new user up.

00:25.760 --> 00:32.750
So I'll name this action sign up and I'll get my request, my response and that next function

00:32.840 --> 00:39.100
and in here I want to add all the logic I need to create a new user in the database. So for that

00:39.120 --> 00:46.410
let's extract the email from request body email, let's extract the name of the user from request body

00:46.500 --> 00:52.300
name and let's extract the password from request body password.

00:52.350 --> 00:56.530
Now obviously to extract all of that, we need to know that it's there,

00:56.580 --> 00:59.870
so we should add validation. For this

00:59.870 --> 01:02.990
I'll go to my auth routes again and just as in feed.js,

01:03.020 --> 01:07.440
I will add this express validator check,

01:07.430 --> 01:11.940
so I will copy that import from feed.js and add it to auth.js

01:12.060 --> 01:18.480
and on sign up, I'll then add an array of validation related middleware.

01:18.480 --> 01:19.610
I'll check my request

01:19.610 --> 01:27.810
body and there, the email field whether it is an email, you can also just to bring this back into memory define

01:27.810 --> 01:29.670
our own messages if we want to,

01:29.850 --> 01:32.920
please enter a valid email,

01:32.940 --> 01:37.090
this will then be stored in the error object we can retrieve.

01:37.110 --> 01:44.880
We can also add our own custom validator here to check whether the email address already exists, for

01:44.880 --> 01:45.550
this

01:45.750 --> 01:54.250
I'll import my user model, so require that from the models folder and then custom and you learned

01:54.250 --> 01:59.190
that in the validation module by the way in case you want to dive deeply into that again.

01:59.220 --> 02:04.820
The custom function or the custom validator method here takes a function as an argument which retrieves

02:04.820 --> 02:06.280
the value we're looking at

02:06.570 --> 02:13.140
and then an object from which we can extract the request as a property with this destructuring syntax

02:13.830 --> 02:19.570
and this function then should return true if validation succeeds or return a promise

02:19.740 --> 02:22.740
if the validation actually uses some async task,

02:22.740 --> 02:27.540
so if the validation does something which takes a little longer as in our case.

02:27.720 --> 02:35.100
So I will return user find one and I want to find one user where the email of that user as stored in

02:35.100 --> 02:38.700
the database matches the value of the e-mail we're looking at.

02:39.650 --> 02:49.300
Now then I have my user document here, so my user object as I've found it in the database and if that

02:49.300 --> 02:52.320
is set and that's the only case I'm caring about,

02:52.360 --> 03:01.390
if that is set then I will reject a promise, so I will return promise reject and that will cause the validation

03:01.390 --> 03:02.410
to fail,

03:02.410 --> 03:13.100
all other scenarios will cause it to succeed and then I'll return email address already exists.

03:13.200 --> 03:17.140
So that's just another validation we can add.

03:17.160 --> 03:20.310
Of course I don't just want to validate the email though,

03:20.520 --> 03:24.420
so let's also validate another field in the request body,

03:24.630 --> 03:26.750
before I do that though, just one step I forgot,

03:26.760 --> 03:29.100
I will normalize the email as well

03:30.010 --> 03:37.660
but now I can look at other body fields like the password. The password can be trimmed and should then

03:37.660 --> 03:44.890
have let's say a length of at least 5 characters or whatever you want and I'll add another check where

03:44.890 --> 03:48.190
I'll look into my body, there to the name,

03:48.190 --> 03:58.090
trim it to remove excess whitespace and this should now not be empty.

03:58.150 --> 04:01.080
With that, I got all my validation logic added,

04:01.200 --> 04:05.440
now that I'm in here I can also already import my controller,

04:05.470 --> 04:15.530
so my auth controller can be imported from controllers auth and now I'll use that auth controller as the

04:15.530 --> 04:17.590
last middleware on my sign up route

04:19.320 --> 04:26.850
and reach out to the sign up action in there. Now validation was added, now back in the auth controller,

04:27.240 --> 04:31.740
we want to collect any validation errors right at the start

04:31.740 --> 04:34.080
and for that I need to import something

04:36.910 --> 04:39.520
from the express validator package again

04:41.090 --> 04:51.330
and that will be that validation result function which I require from express validator/check, 

04:51.380 --> 04:57.590
so this validation result function here and I collect errors by calling that and passing the request

04:57.620 --> 04:58.370
to it

04:58.370 --> 05:05.990
and now if not errors is empty, so if we got errors, then I know that something went wrong or that I have

05:06.020 --> 05:06.790
errors

05:06.890 --> 05:16.580
and in this case I want to create a new error where I say validation failed, something like that and I'll

05:16.580 --> 05:27.220
set a status code of 422 and I can also maybe pass some data, a new property I'll add where I store

05:27.220 --> 05:29.920
my errors array like this

05:29.920 --> 05:33.380
and then I can throw my error here.

05:33.490 --> 05:38.980
Didn't do that before but this would allow me to keep my errors which were retrieved by that validation

05:38.980 --> 05:39.940
package,

05:39.940 --> 05:46.510
I now just have to go to app.js, to my error handling function and there retrieve the data from

05:46.570 --> 05:47.140
error,

05:47.170 --> 05:53.150
the data property and also add this to the response I'm sending in case of an error.

05:53.170 --> 05:58.420
This is totally optional but just to show how you could keep your original errors and pass them to the

05:58.420 --> 05:59.920
frontend as well.

06:00.250 --> 06:05.260
So now I'm doing this, I'm doing that validation and throwing an error if it fails, if we make it past this

06:05.360 --> 06:13.710
if check, we know we have all that data we need and now we can start storing the user in the database.

06:13.710 --> 06:18.790
Now there are parts of the authentication module which still matter here

06:18.870 --> 06:22.760
and one of them is that we should encrypt the password.

06:22.770 --> 06:23.790
So let's finish

06:23.790 --> 06:26.860
sign up in a secure way in the next lecture.
