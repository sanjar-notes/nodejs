WEBVTT

00:02.150 --> 00:03.960
Now I showed you how to use a session,

00:03.960 --> 00:09.760
the problem here is this session is stored in memory and memory is not an infinite resource.

00:09.760 --> 00:15.370
So for development, this is fine but for a production server, this would be horrible because if you have thousands

00:15.450 --> 00:22.470
or one hundred thousands of users, your memory will quickly overflow if you store all that information

00:22.470 --> 00:23.180
in memory.

00:23.250 --> 00:26.370
You don't want to do that, from a security perspective,

00:26.370 --> 00:28.050
it's also not ideal.

00:28.050 --> 00:30.390
So we want to store sessions differently

00:30.570 --> 00:37.780
and on the express session documentation, so on the docs, on the github page of that package we're using,

00:38.010 --> 00:42.940
if you scroll down to the end, you will find a list of session stores

00:42.960 --> 00:43.930
you can use

00:44.070 --> 00:47.030
and basically all kinds of databases are supported.

00:47.160 --> 00:51.460
You could store it in files though that might not give you the best performance

00:51.660 --> 00:57.230
and we will use mongodb because we are already using that right and for that, we'll use the connect mongodb

00:57.240 --> 00:58.960
session package here,

00:59.220 --> 01:05.450
so we'll install this package now and register this as a store with which we can work.

01:05.460 --> 01:12.090
So back here in our project, let me quit the server with control c and let's first of all install

01:12.090 --> 01:16.860
that package with npm install --save connect

01:16.920 --> 01:25.150
-mongodb-session and this will download this package which we can use to let our express

01:25.150 --> 01:29.020
session package store data in the database.

01:29.060 --> 01:32.000
So now it is installed, we can restart our server

01:32.610 --> 01:38.560
and now let's go to app.js where we do initialize our session, here we do configure the session

01:38.710 --> 01:43.400
and this is also where we need to configure our store. Now to set up that store,

01:43.630 --> 01:52.940
first of all I'll import mongodb store, you can name this however you want and I will require connect

01:52.940 --> 01:55.590
mongodb session.

01:55.660 --> 02:00.660
Now this actually gives you a function which should execute to which you pass your session,

02:00.730 --> 02:06.370
so this session object you're importing from express session is passed to a function which is yielded

02:06.640 --> 02:12.010
by required connect mongodb session and the result of that function call is stored in

02:12.000 --> 02:13.740
mongodb store.

02:13.750 --> 02:20.500
Now with that, you can initialize a new store, store it in a constant named store maybe, that name is up

02:20.500 --> 02:27.070
to you and you execute mongodb store as a constructor because this function happens to yield a constructor

02:27.070 --> 02:32.850
function which we store in mongodb store. To that constructor, you pass some options and now

02:32.850 --> 02:36.520
which options could that database store require?

02:36.730 --> 02:42.160
Well it will require a connection string because it needs to know in which database, on which database

02:42.250 --> 02:44.920
server to store your data.

02:44.920 --> 02:47.500
Now we have a connection string down there,

02:47.710 --> 02:54.340
so I'll copy that entire url and cut it actually and I will store it in a constant up here,

02:55.450 --> 02:56.610
I'll name it

02:56.830 --> 02:58.880
mongodb URI,

02:59.070 --> 03:06.700
all capital case to signal that this is basically a constant value which I'll reuse and then here, I

03:06.700 --> 03:12.780
will use my mongodb URI and I will also use it down there.

03:14.330 --> 03:17.330
Please note that the session now will also be stored in a shop database,

03:17.450 --> 03:21.690
you could use a different database but then you need to use two different urls,

03:21.710 --> 03:23.970
I'm fine with using the same database.

03:24.110 --> 03:29.000
I will define the collection though and you need to to define the collection where your sessions will be stored

03:29.270 --> 03:30.140
and I will name it

03:30.140 --> 03:32.140
sessions but the name is up to you,

03:32.150 --> 03:34.700
you could name this however you want.

03:34.730 --> 03:36.430
Now you could also add more information,

03:36.430 --> 03:40.940
like for example when this should expire and then it can be cleaned up automatically by

03:40.940 --> 03:41.590
mongodb

03:41.780 --> 03:43.640
but I will set it up like this

03:43.640 --> 03:50.390
and now I have my store added here and when I saved, I get an error actually. This can be fixed by

03:50.390 --> 03:53.750
removing that retry writes here at the end of the URL, 

03:53.840 --> 03:56.400
if you do that, it should work.

03:56.410 --> 04:02.790
So now we get the store set up here and now we can use that store as a session store and to use it,

04:02.800 --> 04:08.620
we go to the place where we initialize our session down there and we add another option, the store option

04:08.880 --> 04:14.500
and we set it equal to our store constant or whatever you named the constant where you store that initialized

04:14.510 --> 04:15.920
mongodb store

04:16.300 --> 04:19.390
and with that, your session data will be stored in there.

04:19.410 --> 04:24.810
So if I now go back to my page and I do click that login

04:24.830 --> 04:30.790
button again, I got a new session, a new session cookie and that session will now be stored in

04:30.790 --> 04:31.590
mongodb

04:31.880 --> 04:37.430
and we can of course validate that by starting mongodb compass to look into our database.

04:37.660 --> 04:43.300
There if you look into your shop database, you will find a sessions collection and in the sessions

04:43.300 --> 04:49.240
collection, you'll find a session with an ID and in that session, you'll find that information like is

04:49.240 --> 04:54.670
logged in and some information about the cookie which belongs to that session,

04:54.670 --> 04:58.570
also you find the expiry date that was set by default.

04:58.720 --> 05:04.360
So this is how sessions are now stored and this is how you should store them for production, use a real

05:04.360 --> 05:12.100
session store, don't use the memory store which is less secure and which also is less unlimited or which

05:12.100 --> 05:14.720
will reach limits when more users use your app.

05:14.920 --> 05:22.360
But with that sessions are a powerful tool for storing data across requests while still scoping them

05:22.450 --> 05:26.070
to a single user and not sharing the data across users

05:26.140 --> 05:29.390
because now as you saw, different users have different sessions

05:29.560 --> 05:35.050
but this is now a great way mostly for managing authentication but you could also store something like

05:35.110 --> 05:36.800
the shopping cart in a session.

05:36.880 --> 05:41.920
We are storing it in a database which is also a decent solution but you could store it in a session and

05:41.920 --> 05:45.610
therefore indirectly in the database I guess, in the session database collection

05:45.610 --> 05:47.920
but you could use a session for something like this.

05:47.920 --> 05:53.740
So in general, use a session for any data that belongs to a user that you don't want to lose after every

05:53.740 --> 05:54.890
response you send

05:54.970 --> 05:57.310
and that should not be visible to other users.
