WEBVTT

00:02.120 --> 00:08.360
How is authentication implemented? Same set up, we get a user, we get our backend, the server side code and the

00:08.360 --> 00:09.210
database

00:09.330 --> 00:12.490
and now typically, a user will send a login request.

00:12.500 --> 00:18.770
Now obviously for that, a user, a visitor of our page needs to have signed up before but after you signed

00:18.770 --> 00:19.040
up,

00:19.040 --> 00:24.410
you can login with your email and password and on the server, we check whether that email and password

00:24.410 --> 00:25.940
combination is valid,

00:25.940 --> 00:30.060
whether we have a user with that e-mail and that password in our database.

00:30.380 --> 00:35.610
If that is the case, we create a session for this user and you learned how this works in the last module

00:36.140 --> 00:39.160
and this session then identifies this user.

00:39.180 --> 00:45.500
This is required because otherwise without a session, even if we find out that the credentials are valid,

00:45.740 --> 00:52.580
for the very next request the user would be logged out again because remember, requests interact separated

00:52.670 --> 00:53.410
from each other,

00:53.420 --> 00:55.620
they don't know anything about each other,

00:55.640 --> 00:57.370
we need a session to connect them,

00:57.380 --> 01:04.420
that is why we create one with the user or the authentication information. We then return a 200 response,

01:04.430 --> 01:10.520
so basically a success response and we obviously also store the cookie belonging to that session on the

01:10.520 --> 01:10.990
client,

01:11.000 --> 01:12.710
we return that with that response

01:12.830 --> 01:20.000
so that we really established a session. And thereafter, the user is able to visit our restricted routes

01:20.210 --> 01:26.150
because now this cookie is sent with every request, on the server we can connect this cookie to a

01:26.150 --> 01:31.490
session and in the session we have the information whether that user is signed in or not

01:31.490 --> 01:35.990
and if the user is signed in, we can grant access to certain resources,

01:35.990 --> 01:43.310
this is how authentication is implemented in any web application that renders views, we'll learn a different

01:43.310 --> 01:48.390
way of adding authentication later when we work with a rest and graphQL APIs

01:48.620 --> 01:55.130
but for a traditional web app as we are building it here where we do render ejs or handlebars or

01:55.130 --> 02:01.370
whatever templating engine you use, where we render such views, there we will use this session based

02:01.370 --> 02:02.420
authentication approach.
