WEBVTT

00:02.680 --> 00:11.260
So what is async await all about? Async and await are two keywords which are part of the core

00:11.350 --> 00:12.640
javascript language,

00:12.670 --> 00:16.020
they're not an exclusive part of the nodejs runtime,

00:16.100 --> 00:21.160
they are also available in modern browsers or in frontend projects,

00:21.180 --> 00:25.760
they're not part of nodejs but you can use them in nodejs projects.

00:25.780 --> 00:29.090
The question of course is what do these two keywords do?

00:29.670 --> 00:36.310
Async and await allows you to write asynchronous requests, so requests where you have some operation

00:36.310 --> 00:43.000
that takes a little while and comes back later in a synchronous way and you see there is an asterisk

00:43.070 --> 00:48.760
after synchronous way because async and await allows you to write asynchronous statements in a

00:48.760 --> 00:53.590
way that looks synchronous but it still isn't a synchronous request.

00:53.590 --> 00:55.960
Now this is of course very abstract,

00:55.960 --> 00:59.170
so let's simply dive into our existing nodejs code

00:59.170 --> 01:04.810
and let me show you which parts of it you could change to use async and await and then it will become

01:04.810 --> 01:06.830
very clear what it does.

01:06.850 --> 01:08.300
I'm back in my nodejs

01:08.320 --> 01:10.730
backend application here

01:10.840 --> 01:17.270
and let me point out that as I mentioned, you could also use async await in the react application

01:17.380 --> 01:19.060
but this is no react course

01:19.060 --> 01:24.600
so I will leave this code untouched and I will go back to my node application.

01:24.730 --> 01:26.780
Now how can we use async

01:26.800 --> 01:27.640
and await? 

01:27.970 --> 01:34.640
Well if you go into your feed controller, you'll see that there we have an asynchronous operation, post

01:34.690 --> 01:40.680
find. How can you see or how can you identify asynchronous operations?

01:40.690 --> 01:42.570
Well for example when you're using

01:42.570 --> 01:49.450
promises. Promises are a typical construct that help you deal with asynchronous code because promises

01:49.450 --> 01:56.320
work like that. Post find gets executed and count documents also gets executed immediately

01:56.320 --> 02:03.460
but then this actually, count documents returns a promise or a promise-like object and you then use

02:03.580 --> 02:06.950
then to define a function that should be executed

02:07.030 --> 02:13.500
once this operation here is done and since we access the database here, this typically takes a bit longer.

02:13.510 --> 02:15.320
We're talking about milliseconds here

02:15.370 --> 02:18.150
but still it doesn't happen instantly.

02:18.310 --> 02:24.340
On the opposite, this line and this line get executed after each other instantly, this operation does

02:24.340 --> 02:27.800
essentially not take any time at all, it's so fast

02:27.850 --> 02:32.420
javascript can wait for it to complete and move onto the next step right away. Here

02:32.500 --> 02:34.690
it will not wait for that to complete

02:34.690 --> 02:40.860
and that is why after this statement, javascript would actually move on with the next statement inline,

02:40.900 --> 02:46.940
so if we had another statement on the same level as post find, we would continue with that.

02:46.960 --> 02:51.630
Now in this case we got none but if we would have some code there, like a console log or anything, this

02:51.630 --> 03:00.060
would execute right away, probably or very likely before this or this code or this code was executed and

03:00.070 --> 03:06.730
the reason for that is that with then, we define code snippets or we define functions that should run

03:06.820 --> 03:07.930
in the future

03:07.980 --> 03:15.520
once this longer taking asynchronous operation is done and it's called asynchronous because it doesn't

03:15.520 --> 03:21.880
happen instantly but it takes a little while. Callbacks which we used earlier in the course are another

03:21.880 --> 03:24.460
way of working with asynchronous code,

03:24.490 --> 03:27.340
so here too for count documents,

03:27.340 --> 03:32.680
you could actually and you see that here in the documentation that pops up, you could define a callback

03:32.680 --> 03:33.550
function.

03:33.550 --> 03:38.600
So here you could define a function that gets executed once it's done instead of then

03:38.740 --> 03:41.810
and we don't use callbacks because in there,

03:41.810 --> 03:47.530
we would use that code and then we would need a callback here in the find function and we would

03:47.530 --> 03:51.760
nest all these callbacks leading to very unreadable code.

03:51.760 --> 03:57.190
That is why you often prefer promises even though you could do it with callbacks because there, you have

03:57.220 --> 04:00.880
one then block after each other and it's very readable.

04:00.880 --> 04:03.920
Still it can get more readable with async and await

04:04.090 --> 04:06.240
and that is what I want to show you in the next lecture.
