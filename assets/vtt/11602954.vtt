WEBVTT

00:02.470 --> 00:08.440
So let's make sure we can save our product to a file and not to this array here anymore.

00:09.380 --> 00:13.520
For this when we call save here, I want to save it to a file

00:13.550 --> 00:19.160
and of course in that file, I want to have all products, the old ones and the new one.

00:19.160 --> 00:22.590
So therefore first of all, we need to be able to work with the file system,

00:22.640 --> 00:27.420
so I will import fs from the core fs module.

00:27.650 --> 00:35.810
Now that file should then also be created in special path, so I will use the path tool,

00:35.810 --> 00:40.890
the path module to construct a path that works on all operating systems.

00:40.970 --> 00:48.650
Now here in save, I will then create my path and I will do that with path join,

00:48.650 --> 00:51.280
so using the path core module, whoops,

00:51.700 --> 00:59.920
and I name this p so that I avoid namespace clashes and the path should be my root directory

01:00.090 --> 01:03.660
and we actually still have that helper function

01:03.660 --> 01:10.860
but if you deleted it, you can of course recreate it as we did before or simply copy this code here if

01:10.860 --> 01:11.690
you want,

01:12.770 --> 01:16.060
you also find it attached to this lecture again in case you deleted it.

01:16.370 --> 01:19.300
I will simply copy that logic here

01:20.320 --> 01:21.000
and move it in there

01:21.010 --> 01:29.270
but of course I could absolutely simply use my helper function I created there. But this is of course

01:29.270 --> 01:31.340
just the root directory, in there

01:31.400 --> 01:38.450
I will have a new data folder and I will create it ahead of time so that we don't get permission issues.

01:39.000 --> 01:44.190
So I'll have added the data folder to the root project folder and in that data folder, I want to store

01:44.190 --> 01:45.160
my file,

01:45.330 --> 01:52.370
so that will then actually be a file and that should have a name of products and I will give this an

01:52.490 --> 01:56.560
extension of json because I want to store my data in json format.

01:56.790 --> 02:02.220
Ok so that's products, now to store a new product in there,

02:02.260 --> 02:07.300
first of all I need to get the existing array of products,

02:07.300 --> 02:10.360
so I will first of all read that file.

02:10.690 --> 02:17.200
So let's use fs read file and this reads the entire file content of a file

02:17.350 --> 02:22.030
and by the way for very big files, there are more efficient ways because you don't want to read them

02:22.150 --> 02:24.790
all into memory before you work with them,

02:24.820 --> 02:26.560
you can read them as a stream then,

02:26.560 --> 02:28.190
there is such a function,

02:28.360 --> 02:33.690
you can create a read stream with this function but we can read the entire file here, this is ok

02:33.940 --> 02:39.400
and I will read the file at this path, p which is that file I'm interested in

02:39.400 --> 02:41.960
and then I will do something once I'm done reading it

02:42.160 --> 02:47.890
and there we either get an error or we get data, so we get the the file content

02:47.890 --> 02:50.540
you could say, there will be a buffer though.

02:51.470 --> 02:55.620
Now let's log the file content here

02:56.410 --> 03:03.640
and let's see what we get if we now call save. If I go to add product and I'll type something here,

03:03.970 --> 03:15.980
it crashes and it crashes, if you the scroll up because products is not defined in fetch all of course. In

03:16.000 --> 03:21.080
save however, it didn't throw an error but we get undefined here as you can see

03:21.340 --> 03:25.650
and we did get undefined because this file simply doesn't exist,

03:25.650 --> 03:26.830
there is no content in it

03:26.830 --> 03:32.280
therefore, you can see that here we've got no file with that name

03:32.300 --> 03:34.940
so reading it therefore kind of failed.

03:35.000 --> 03:39.120
And if I add an error here to print the error we get

03:39.440 --> 03:40.970
and I try this again,

03:41.270 --> 03:46.870
so let's go back to add product, click that and we scroll above this error message here, you see this is the

03:46.910 --> 03:47.630
error message

03:47.660 --> 03:50.160
we're now logging with this line

03:50.390 --> 03:52.520
and there we see no such file or directory

03:52.580 --> 03:57.780
and that makes a lot of sense because indeed, it does not exist as I just mentioned.

03:57.830 --> 04:06.830
So obviously if it doesn't exist, then I also want to continue and I can. I will simply check if we got

04:06.830 --> 04:09.250
an error and this will be null if we get none

04:09.260 --> 04:15.650
but if we have one then I simply want to create a new empty array because we have no existing products.json

04:15.660 --> 04:16.460
file,

04:16.460 --> 04:23.990
so we got no old products stored and otherwise I want to use the existing one. Put in other words I'll

04:24.020 --> 04:29.500
add a new variable here which I'll name products

04:29.710 --> 04:34.630
and initially this is an empty array and I will actually keep it as such if we do have an error

04:34.930 --> 04:36.460
but if we get no error

04:36.490 --> 04:38.520
and therefore I will add an exclamation mark here,

04:38.530 --> 04:41.880
so if we got no error, if this therefore is null

04:41.870 --> 04:49.700
so if we got no error, then I want to read the products from the file which I extracted.

04:49.890 --> 04:55.590
So therefore here I know that file content will be something, it should be the content of my file

04:55.650 --> 05:01.410
and since that is a json file, I will store it in json format there so then I will set products equal

05:01.410 --> 05:05.500
to json which is a helper object existing in vanilla nodejs,

05:05.520 --> 05:08.170
so you don't need to define this on your own 

05:08.250 --> 05:15.210
and there we have the parse method which takes incoming json and gives us back a javascript array or

05:15.210 --> 05:17.400
object or whatever is in the file.

05:17.670 --> 05:21.480
So here I can parse the file content and that should work

05:21.900 --> 05:24.370
or at least we should try that.

05:24.420 --> 05:29.910
So now I know that product will be an array, either the one I read from the file or an empty one and

05:29.910 --> 05:33.110
therefore, we can now append our new product there,

05:33.180 --> 05:41.400
so I will call products push and push my new product which is this onto it. Now important, to ensure

05:41.700 --> 05:49.470
that this refers to the class, you should use an arrow function here because otherwise this will lose its

05:49.470 --> 05:54.010
context and will not refer to the class anymore.

05:54.050 --> 05:56.920
We have this setup though where I do use an arrow function,

05:56.980 --> 06:03.100
this should refer still to my class and therefore now I can push this onto this array, either to the new

06:03.100 --> 06:05.100
one or the one I read from the file

06:05.320 --> 06:09.240
and now the remaining work is that I need to save it back into the file.

06:09.280 --> 06:16.560
So again I will use the file system module and now I'll use write file and I will write it to the same

06:16.560 --> 06:18.670
path as where I read it from

06:18.810 --> 06:22.350
and I will put my json data into it,

06:22.380 --> 06:24.750
so again I will use that json helper object

06:24.780 --> 06:30.630
and now there is the stringify find method which takes a javascript object or array and converts it

06:30.660 --> 06:31.470
into json

06:31.470 --> 06:33.250
so that this has the right format,

06:33.390 --> 06:37.560
so there I will take this products array and convert this to json

06:37.590 --> 06:40.600
and then this gets written to the file.

06:40.750 --> 06:48.190
And here I also have a callback where I may get an error and I will simply log that error here to see

06:48.190 --> 06:51.070
if that works. With all that,

06:51.400 --> 06:52.270
let's go back,

06:52.450 --> 06:55.000
let's go back to the add product page and click this button.

06:55.060 --> 06:57.320
This error of course still exists

06:57.430 --> 07:00.680
but now if we scroll up, let's see if that worked. Here

07:00.720 --> 07:06.580
that is looking good and in data, we indeed see a products.json file which does contain that one product

07:06.610 --> 07:07.750
we created.

07:08.170 --> 07:09.220
Now that was the

07:09.280 --> 07:11.650
we have no old data case,

07:11.650 --> 07:16.640
let's now go back and add another product here

07:17.480 --> 07:20.840
and see if that also works. If I scroll up,

07:21.050 --> 07:25.410
well we also see it here I guess, this also worked out just fine.

07:25.430 --> 07:32.510
So this is working, we are able to read a file, append data to the existing data or create it if it

07:32.510 --> 07:37.620
didn't exist yet and therefore our data storage in the file seems to work,

07:37.820 --> 07:41.810
obviously it's a very basic storage but better than nothing.

07:41.810 --> 07:44.960
Now obviously we also want to be able to fetch the data from there,

07:44.960 --> 07:54.020
so in fetch all I also want to read this file here I will read the file at my path and I also will therefore

07:54.050 --> 08:02.030
get my error or the file content using arrow function here and this will then hold the data I want

08:02.030 --> 08:09.130
to use. Now if I got an error here, I want to return an empty array because then I got no products right,

08:09.140 --> 08:14.090
I always want to return an array because that is what fetch all expects but it should at least be empty

08:14.180 --> 08:15.830
in case of an error

08:15.860 --> 08:20.740
and of course you could also throw an error message and show one but here it'll just be the empty array

08:21.480 --> 08:22.510
otherwise

08:22.710 --> 08:27.410
and I don't need an else block because after return, we would finish the execution of this function

08:27.410 --> 08:33.940
anyways, so after this if block, I will return my parsed and that's important,

08:34.040 --> 08:36.020
otherwise it will just be a string,

08:36.080 --> 08:44.000
my parsed file content and this is important to keep in mind because this here is in the end retrieved

08:44.030 --> 08:45.100
as a text.

08:45.260 --> 08:51.050
So to return it as an array, you need to call json parse.

08:51.110 --> 08:57.200
So now I return my file content in a parsed form and therefore, I get rid of the return product

08:57.200 --> 09:04.410
statement here and I will now always return my objects or my list of products.

09:05.000 --> 09:12.640
So let's see this in action, let's save this and reload this page here, key is not defined, makes sense,

09:12.640 --> 09:18.350
I'm trying to read something from this path but that path is only defined in the save method.

09:18.570 --> 09:19.980
So for now let's copy it,

09:20.010 --> 09:22.920
we can of course refactor that but let's copy it for now

09:23.760 --> 09:25.540
and now if I reload this page,

09:25.740 --> 09:32.980
I still get this error and this can now be very hard to debug or to understand

09:33.000 --> 09:35.670
but do you know what's going wrong here?

09:35.670 --> 09:36.930
We'll fix it in the next lecture.
