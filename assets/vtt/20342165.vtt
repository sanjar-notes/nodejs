WEBVTT

1
00:00:02.230 --> 00:00:04.610
<v Instructor>With that, we're finished with the code.</v>

2
00:00:04.610 --> 00:00:08.920
But I'm not 100% happy about the folder structure.

3
00:00:08.920 --> 00:00:11.250
For one, I only have a routes folder,

4
00:00:11.250 --> 00:00:14.200
I don't have a controllers folder, for example.

5
00:00:14.200 --> 00:00:16.050
Now, obviously, you can split it up.

6
00:00:16.050 --> 00:00:18.390
You can add a controllers folder,

7
00:00:18.390 --> 00:00:21.810
and put those controller functions here into that folder,

8
00:00:21.810 --> 00:00:24.800
just as we did it in other parts of the course.

9
00:00:24.800 --> 00:00:26.950
I just kept it all in one file here

10
00:00:26.950 --> 00:00:29.830
because it's really just a basic dummy API

11
00:00:29.830 --> 00:00:31.660
with very little code.

12
00:00:31.660 --> 00:00:33.700
So, I think using one file is fine,

13
00:00:33.700 --> 00:00:36.260
but you can absolutely use a controllers folder

14
00:00:36.260 --> 00:00:38.570
with a controller file.

15
00:00:38.570 --> 00:00:39.900
The more important thing,

16
00:00:39.900 --> 00:00:41.880
or the more annoying thing for me here

17
00:00:41.880 --> 00:00:44.510
is that we always have these JavaScript files

18
00:00:44.510 --> 00:00:46.490
next to the TypeScript files.

19
00:00:46.490 --> 00:00:50.500
And the problem with that is that our actual source code

20
00:00:50.500 --> 00:00:55.180
in which we as developer work is just the TypeScript code.

21
00:00:55.180 --> 00:00:57.850
So therefore, we have the extra files

22
00:00:57.850 --> 00:00:59.770
next to our source code

23
00:00:59.770 --> 00:01:02.840
and we shouldn't work in those extra JavaScript files.

24
00:01:02.840 --> 00:01:04.810
You shouldn't change that code.

25
00:01:04.810 --> 00:01:07.720
You should only work in the TypeScript files.

26
00:01:07.720 --> 00:01:12.180
And therefore, I wanna ensure that the compiled files

27
00:01:12.180 --> 00:01:14.483
end up in a different place.

28
00:01:15.620 --> 00:01:19.560
And to achieve this, we can go to the tsconfig.json file

29
00:01:19.560 --> 00:01:22.680
and there, we have the outDir configuration,

30
00:01:22.680 --> 00:01:24.860
which I'll now comment in here.

31
00:01:24.860 --> 00:01:27.030
This allows you to set a directory

32
00:01:27.030 --> 00:01:30.740
where the generated JavaScript files will be stored in.

33
00:01:30.740 --> 00:01:34.690
And here, I will specify /dist as a directory.

34
00:01:34.690 --> 00:01:37.430
This will create a new dist sub-folder,

35
00:01:37.430 --> 00:01:42.050
and all of our compiled files will end up in that folder.

36
00:01:42.050 --> 00:01:45.093
With that change made, if I now run tsc,

37
00:01:46.410 --> 00:01:48.237
you see that we get this dist folder,

38
00:01:48.237 --> 00:01:50.760
and in dir, we got the same folder structure

39
00:01:50.760 --> 00:01:52.290
as outside of it,

40
00:01:52.290 --> 00:01:55.560
but now in dir, we only got our JavaScript files.

41
00:01:55.560 --> 00:01:58.370
And if I now delete the other JavaScript files

42
00:01:58.370 --> 00:01:59.980
outside of the dist folder

43
00:02:01.380 --> 00:02:04.060
to only have my TypeScript source code there,

44
00:02:04.060 --> 00:02:08.070
if I rerun tsc, you see they're not appearing again.

45
00:02:08.070 --> 00:02:10.520
They're really only in the dist folder.

46
00:02:10.520 --> 00:02:11.420
So, that's great.

47
00:02:11.420 --> 00:02:15.340
Now, the dist folder holds our finished Node app,

48
00:02:15.340 --> 00:02:18.080
which we can run with the Node executable.

49
00:02:18.080 --> 00:02:21.530
And our source code is outside of that.

50
00:02:21.530 --> 00:02:24.310
Maybe you also want a separate source folder

51
00:02:24.310 --> 00:02:26.720
in which you store your source code though,

52
00:02:26.720 --> 00:02:30.220
to have a clear separation of input and output.

53
00:02:30.220 --> 00:02:31.560
And that's something I'll do here.

54
00:02:31.560 --> 00:02:35.010
For that I'll add a source, a src folder

55
00:02:35.010 --> 00:02:38.390
and move my models folder, my routes folder,

56
00:02:38.390 --> 00:02:42.900
and the app.ts file into that source folder here,

57
00:02:42.900 --> 00:02:43.963
just like that.

58
00:02:46.210 --> 00:02:49.540
I'll keep the rest of the project structure as it is.

59
00:02:49.540 --> 00:02:53.130
And now in tsconfig.json, we can set up our rootDir

60
00:02:53.130 --> 00:02:57.370
which specifies the root directory of input files.

61
00:02:57.370 --> 00:03:02.000
And I wanna set that to /src to make it clear

62
00:03:02.000 --> 00:03:05.600
that that's the folder that contains our TypeScript code.

63
00:03:05.600 --> 00:03:08.400
And then the outDir is the folder

64
00:03:08.400 --> 00:03:11.630
where the compiled code should end up in.

65
00:03:11.630 --> 00:03:14.900
So, now if I run tsc, that still works,

66
00:03:14.900 --> 00:03:16.360
and it's now taking the source code

67
00:03:16.360 --> 00:03:20.270
from inside the source folder to generate the dist folder.

68
00:03:20.270 --> 00:03:24.710
And if I delete dist, that folder is of course regenerated,

69
00:03:24.710 --> 00:03:27.290
which proves that everything works.

70
00:03:27.290 --> 00:03:28.420
Now important,

71
00:03:28.420 --> 00:03:31.300
we're always executing the code into dist folder

72
00:03:31.300 --> 00:03:33.770
because Node.js is not capable

73
00:03:33.770 --> 00:03:36.240
of running TypeScript code like this.

74
00:03:36.240 --> 00:03:38.660
We only work in the source folder though,

75
00:03:38.660 --> 00:03:40.960
and then we compile it to JavaScript

76
00:03:40.960 --> 00:03:42.693
to have our executable code.

