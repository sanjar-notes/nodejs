WEBVTT

00:02.190 --> 00:04.160
So welcome back, in case you skipped

00:04.170 --> 00:07.910
you'll find these two html files attached to this lecture,

00:07.980 --> 00:12.660
so make sure to download them and enter them, insert them into your views folder

00:12.660 --> 00:14.880
and now the goal is to serve them.

00:14.910 --> 00:17.510
We didn't work on the js files in the last lecture, 

00:17.520 --> 00:23.460
we just added the html files and make sure to explore them to understand what they do, in the end

00:23.460 --> 00:28.890
we got the same content as before, we just added an extra header and then in add product, we still have the

00:28.890 --> 00:35.430
form, in shop.html we got some dummy code since we have no products to serve yet and now I want to serve

00:35.430 --> 00:37.770
these html files in my routes.

00:37.770 --> 00:39.690
Now how does that work?

00:39.960 --> 00:47.550
Let's start in the shop.js file, instead of sending some text or this html text here in this

00:47.550 --> 00:55.290
case, let's instead send a file with send file and send file

00:55.450 --> 00:58.550
well allows us to do just that, send back a file to the user

00:58.590 --> 01:04.260
and as you see here in description, it automatically sets the content type response header field and

01:04.260 --> 01:06.760
we'll see if that works for us or not.

01:06.870 --> 01:09.420
So send file is what I execute

01:09.420 --> 01:13.310
and now we just need to point at that file we want to send.

01:13.770 --> 01:20.400
Now here, the question is how does the path look like? The file is in the views folder

01:20.400 --> 01:23.740
but how should this path now look like?

01:24.120 --> 01:32.340
Well we could try using slash and assume that we see all of that from the view of the app.js file

01:32.340 --> 01:35.880
which is in the end the file which starts our entire server,

01:35.880 --> 01:42.240
the fact that shop.js in in a subdirectory doesn't really matter because we export its functionality and

01:42.270 --> 01:45.800
import it into the app.js file which is in the root folder.

01:46.020 --> 01:53.820
So we could try using slash for the root path, an absolute path seen from the root folder and then

01:53.990 --> 01:58.320
views and then shop.html, like this.

01:58.440 --> 01:59.350
Let's give this a try,

01:59.370 --> 02:04.420
let's save this, go back to the page and reload localhost 3000 slash nothing

02:04.920 --> 02:07.840
and I don't see that.

02:07.920 --> 02:12.240
Well the reason for this is that this path is incorrect,

02:12.240 --> 02:14.420
let's try ./ here,

02:14.870 --> 02:20.190
if we now reload, path must be absolute is the error we get.

02:20.190 --> 02:22.770
So whatever we tried, this doesn't seem to work,

02:22.770 --> 02:26.100
the reason for this is that an absolute path would be correct

02:26.190 --> 02:31.980
but slash like this actually refers to our root folder on our operating system

02:32.040 --> 02:34.100
not to this project folder.

02:34.410 --> 02:42.090
So in order to construct the path to this directory and this file here ultimately, we can use a feature

02:42.090 --> 02:43.800
provided by nodejs,

02:43.830 --> 02:51.360
another core module. We can import the path core module by requiring path like this

02:51.540 --> 02:58.410
and then here, we send a file where we create a path with the help of this module by calling the join

02:58.440 --> 02:59.230
method,

02:59.610 --> 03:08.730
join yields us a path at the end, it returns a path but it constructs this path by concatenating

03:08.820 --> 03:10.800
the different segments.

03:10.800 --> 03:18.040
Now the first segment we should pass here is then actually a global variable made available by nodejs

03:18.060 --> 03:22.350
and that is the underscore underscore and that's important,

03:22.350 --> 03:23.960
these are two underscores

03:24.000 --> 03:33.390
dir name. This is a global variable which simply holds the absolute path on our operating system

03:33.390 --> 03:42.090
to this project folder and now we can add a comma and simply add views here because the first segment

03:42.090 --> 03:44.410
is basically the path to this whole project folder,

03:44.520 --> 03:50.760
the next segment is that we want to go into the views folder and then the third segment will be our file,

03:50.820 --> 03:56.500
so here shop.html and don't add slashes here because and that's important,

03:56.640 --> 04:03.030
we use path join not because of the absolute path, we could build this with dir name and then concatenating

04:03.030 --> 04:04.250
this manually too

04:04.680 --> 04:11.040
but we're using path join because this will automatically build the path in a way that works on both

04:11.040 --> 04:18.600
Linux systems and Windows systems because as you might know, on Linux systems you have paths like this

04:20.650 --> 04:27.010
and I'm not talking about paths in the url but on your file system now but on Windows, you use backslashes

04:27.010 --> 04:32.570
for your paths and therefore if you manually construct this with slashes, it would not run on Windows

04:32.650 --> 04:37.960
and the other way around. Path join basically detects the operating system you're running on and then

04:37.990 --> 04:40.470
automatically builds a correct path.

04:40.480 --> 04:43.310
Now with that, we could expect that it works

04:43.330 --> 04:49.630
but actually dir name here will point in this routes folder, right.

04:49.640 --> 04:55.600
Dir name gives us the path to a file in which we use it and we're using it in the shop.js file in the

04:55.600 --> 04:56.680
routes folder,

04:56.680 --> 05:03.990
so this will point to the routes folder but views is actually located in a sibling folder to routes.

05:04.030 --> 05:11.230
So what can we do regarding that? Now the solution is that we add one more segment in there and that is

05:11.260 --> 05:15.220
../ and this simply means go up one level,

05:15.280 --> 05:21.730
so this will now build a path where it first goes into the folder of these files, so into routes,

05:21.730 --> 05:24.690
then it goes up one level then into views,

05:24.700 --> 05:29.410
so if it's up one level it's in the root folder then into views and then it serves this

05:29.450 --> 05:38.300
and with that if we now load localhost 3000/ again, we see that html file being served.

05:39.020 --> 05:44.540
And now is a great time for you to pause the video and ensure that you serve add product

05:44.540 --> 05:46.780
when this route gets loaded.

05:48.280 --> 05:51.500
Were you successful? Let's do it together.

05:51.500 --> 05:57.070
For this, let's first of all import the path module again, the core module,

05:57.470 --> 06:00.710
so const path require path to pull that in.

06:00.740 --> 06:04.570
We don't need to install that because it is a core nodejs module

06:04.970 --> 06:14.120
and then here, we don't use send but send file and we will then use path join, the dir name variable to get

06:14.180 --> 06:17.080
the path to these files folder

06:17.510 --> 06:23.010
and then we can go up one level and then into views, 

06:23.030 --> 06:28.510
whoops, should be a string, views and then we want to serve the add-product.html

06:28.540 --> 06:41.180
file. With this if we save that and we head over to add-product, whoops that should be admin/

06:41.260 --> 06:42.110
add-product,

06:42.140 --> 06:44.200
we see this page too.

06:44.240 --> 06:46.790
Now the styling is missing because we don't have any

06:46.790 --> 06:53.630
but this works and we can also check on add-product that the correct content type was assigned by

06:53.630 --> 06:54.500
express.

06:54.560 --> 06:55.870
So this also works

06:55.880 --> 07:01.710
and now we see how we can serve simple html files for the different routes we have.

07:02.000 --> 07:07.070
Now here's one bonus task for you which I want you to solve and which we'll solve together in the next

07:07.070 --> 07:14.740
lecture, add a new html file which is your page not found page which you then serve

07:14.930 --> 07:17.150
if we ever reach this middleware function.
