WEBVTT

00:02.060 --> 00:07.730
Now, of course, there is more we could test on our off middleware, but I'd say we tested it quite

00:07.730 --> 00:12.950
extensively thus far, and therefore I want to move on and I want to move on to our controllers, which

00:12.980 --> 00:17.870
of course also has a lot of our core logic there.

00:17.870 --> 00:22.250
We have that off controller, obviously we have that feed controller.

00:22.280 --> 00:28.520
Now for that feed controller, we have routes where we need to be authenticated.

00:28.520 --> 00:35.840
If we have a look at our routes here for getting posts, for example, we need to be authenticated for

00:35.840 --> 00:37.340
creating posts.

00:37.340 --> 00:41.750
We need to be authenticated essentially for all our post related routes.

00:41.750 --> 00:43.100
We need to be authenticated.

00:43.250 --> 00:48.080
And before we take care about that, let's have a look at our off controller.

00:48.080 --> 00:53.720
Therefore, because these routes don't require us to be authenticated though, does it really matter

00:53.720 --> 00:54.450
too much?

00:54.450 --> 00:55.490
Just the question.

00:55.910 --> 01:02.450
Well, let's have a look at how we reach our controller functions here, like sign up or log in.

01:02.570 --> 01:08.210
We of course reached them through our routes, which are defined in the routes folder where we send

01:08.210 --> 01:09.770
requests to in the end.

01:09.770 --> 01:13.430
So these are the API endpoints we're exposing here and now.

01:13.430 --> 01:14.960
What did I mention earlier?

01:14.990 --> 01:16.670
What what are we testing?

01:16.910 --> 01:18.830
Well, we are writing unit tests.

01:18.830 --> 01:23.510
We are testing units in our code just as the middleware, the off middleware.

01:23.600 --> 01:26.810
And therefore, what we will not test is the routing here.

01:26.810 --> 01:34.250
We will not test whether we can send a request to log in and we execute the log in function in the off

01:34.250 --> 01:42.110
controller because that entire forwarding of the request, the execution of this method here, that

01:42.110 --> 01:43.910
is all handled by express.

01:43.910 --> 01:50.300
And as I mentioned earlier, you don't want to test our libraries, you want to test your own code.

01:50.300 --> 01:53.390
So we absolutely don't need to test this flow.

01:53.390 --> 01:59.450
And therefore we'll just test these controller functions we export here like the sign up or the log

01:59.450 --> 02:00.320
in function.

02:00.350 --> 02:03.620
These are the things we want to test now in there.

02:03.620 --> 02:07.040
There, of course, again, a broad variety of things we can test.

02:07.040 --> 02:13.760
We can test whether we're able to extract the email and password from the incoming request, though

02:13.760 --> 02:19.940
that's a test that's not too useful because we will simulate the request that's coming in so we decide

02:19.940 --> 02:25.250
whether that is set or not, but we can then test if it behaves correctly, if no email is set, for

02:25.250 --> 02:30.620
example, or if we already have a user with that email.

02:30.650 --> 02:34.520
However, there is one new complexity added.

02:34.520 --> 02:37.700
Now we have a database.

02:37.700 --> 02:40.730
Now we're interacting with the user model here.

02:40.730 --> 02:45.170
And the user model, of course, is based on our mongoose models here.

02:45.170 --> 02:49.520
That's our user model and that behind the scenes uses MongoDB.

02:49.550 --> 02:56.960
And that of course brings one important question into the focus How can we test our database?

02:56.960 --> 02:59.870
How can we handle this now?

02:59.870 --> 03:03.860
And turns out there are two main strategies we can follow.

03:03.890 --> 03:05.330
So let's have a look at both.

03:06.650 --> 03:16.460
Strategy number one, for a testing code that involves database operations is that we stub or mock the

03:16.460 --> 03:20.230
parts that actually rely on database access.

03:20.240 --> 03:21.620
And what would this mean?

03:22.770 --> 03:31.080
This could mean, for example, that here when we execute find one, we again create a step that returns

03:31.080 --> 03:35.040
a predefined result and we then test if our code behaves correctly.

03:35.100 --> 03:44.100
So for example, we might be interested here in finding out how our code behaves when find one frozen

03:44.100 --> 03:44.570
error.

03:44.580 --> 03:52.170
So if we're having trouble interacting with the database or how our code behaves, if we don't have

03:52.170 --> 03:57.540
a user with that email address when logging in, these are two different scenarios and we can write

03:57.540 --> 03:59.020
two different tests for that.

03:59.040 --> 04:01.830
Both scenarios should actually throw an error.

04:01.830 --> 04:02.520
Eventually.

04:02.520 --> 04:07.080
Here we throw one manually and if find one fails, it also will throw an error.

04:07.080 --> 04:10.860
But the status code, for example, should be different.

04:10.860 --> 04:13.650
The status code should be 500.

04:13.650 --> 04:18.750
If the database fails because we use our default code then or we set our own 401 code.

04:18.750 --> 04:20.010
If we have no user.

04:20.190 --> 04:26.700
Now to test this, I'll first of all create a new file in the test folder and I will name this off controller

04:27.030 --> 04:27.900
JS.

04:28.170 --> 04:37.080
And in there, just as in the off middleware file, I'll import expect from Chae and I'll also import

04:37.080 --> 04:37.620
sign.

04:37.620 --> 04:43.860
And because I will start with stubbing that post, find one method that of course that user find one

04:43.860 --> 04:44.430
method.

04:44.430 --> 04:52.680
Therefore I will also import the user by requiring it from the user model file just as I'm doing it

04:52.680 --> 04:56.940
here in the off controller there we are also importing the user model.

04:57.570 --> 05:02.430
So now I want to test that log in function and since I want to tested that function, we need to import

05:02.430 --> 05:03.450
this here as well.

05:03.510 --> 05:11.700
Or in general, I'll import my off controller by requiring it from the off file in the controllers folder.

05:12.610 --> 05:22.300
Now let's edit this gripe block maybe where we test our off controller log in process, because even

05:22.300 --> 05:27.370
if we're only testing the off controller in this entire file, we might be testing different parts of

05:27.370 --> 05:30.090
that controller, like log in, sign up and so on.

05:30.100 --> 05:35.890
So here I'll start with log in and then here I want to start by.

05:37.100 --> 05:43.430
Stopping my find one method because that is the first tactic we can apply.

05:43.430 --> 05:47.480
We can simply stop that a way so that we don't make a real database access.

05:47.990 --> 05:56.480
So here what we can do is of course I can again use sign and create a stub created on the user object

05:56.480 --> 05:58.910
for the find one method.

06:01.420 --> 06:07.270
Now, if I want to force this to throw an error, I can then call user find one.

06:08.010 --> 06:08.880
Froze.

06:10.330 --> 06:12.430
Now here, this will throw an error.

06:12.460 --> 06:16.680
Now, by the way, of course, one issue I have here is that I'm in the described block.

06:16.690 --> 06:20.710
This should go into an eight block, though, so into an actual test case.

06:20.710 --> 06:23.990
So here it should flow an error.

06:24.010 --> 06:30.370
If accessing the database fails, for example.

06:31.690 --> 06:36.580
So now here in that function, we define our actual test code and there we set up that step.

06:36.940 --> 06:43.330
And the important thing here, of course, is I'm faking that database fail because I completely replace

06:43.330 --> 06:46.210
the find one method with a stop that will throw an error.

06:46.210 --> 06:52.810
Because the actual thing I want to check is of course that we should throw an error with code 500.

06:52.810 --> 06:58.690
So I want to check whether our default status code down there really gets applied correctly.

06:59.050 --> 07:01.060
Now back in the off controller.

07:02.580 --> 07:03.540
In the end.

07:03.870 --> 07:10.530
I also want to call Restore here, but in between I of course want to define my expectation.

07:10.890 --> 07:20.970
And the expectation here is that for my auth controller, the login method, when that gets called that,

07:20.970 --> 07:23.850
it actually throws an error.

07:24.330 --> 07:30.090
Now for that, let's have a look at the off controller again and you should now recognize that we have

07:30.090 --> 07:32.160
the async keyword in front of that.

07:32.160 --> 07:35.070
It's not a normal function, it's an ace function.

07:35.070 --> 07:37.950
And that means in the end we use promises in there.

07:37.950 --> 07:43.080
You might remember async await is just a more elegant syntax for using promises.

07:43.440 --> 07:49.410
So actually we have asynchronous code in here, which is another complexity we'll have to deal with

07:49.410 --> 07:55.050
because the execution of that code will not happen synchronously.

07:55.050 --> 08:01.260
And that means that by default our expectation won't work the way you might expect it to work.
