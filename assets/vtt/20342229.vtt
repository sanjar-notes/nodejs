WEBVTT

1
00:00:02.240 --> 00:00:03.073
<v Instructor>So let's get started</v>

2
00:00:03.073 --> 00:00:04.610
with these core Deno features.

3
00:00:04.610 --> 00:00:07.500
So let's write some Deno code, and for that in apt.ts,

4
00:00:07.500 --> 00:00:09.550
I'm going to delete this simple code.

5
00:00:09.550 --> 00:00:14.550
And now instead, I want to store some text in a file,

6
00:00:14.770 --> 00:00:16.020
let's say.

7
00:00:16.020 --> 00:00:18.830
So a very trivial application.

8
00:00:18.830 --> 00:00:20.640
So we got some text.

9
00:00:20.640 --> 00:00:25.640
This is a test and it should be stored in a file let's say.

10
00:00:25.810 --> 00:00:27.580
Of course, this could be some text,

11
00:00:27.580 --> 00:00:30.490
which we got from the user input.

12
00:00:30.490 --> 00:00:34.180
And I want to store this in a file now.

13
00:00:34.180 --> 00:00:38.120
For that we have the globally available Deno object.

14
00:00:38.120 --> 00:00:41.020
Now, if I just type it like this, you see my IDE

15
00:00:41.020 --> 00:00:42.560
is not liking this.

16
00:00:42.560 --> 00:00:45.360
Now this code will run, not like this,

17
00:00:45.360 --> 00:00:48.050
but as soon as I access something on Deno,

18
00:00:48.050 --> 00:00:51.870
but it would be nice if my IDE would also understand

19
00:00:51.870 --> 00:00:54.100
that Deno code will work.

20
00:00:54.100 --> 00:00:55.870
If it would understand that there is

21
00:00:55.870 --> 00:00:58.490
this global Deno object available.

22
00:00:58.490 --> 00:01:02.990
And to help my IDE, to help which will still code with that,

23
00:01:02.990 --> 00:01:06.540
I recommend that you go to View, Extensions

24
00:01:06.540 --> 00:01:09.310
and there search for Deno,

25
00:01:09.310 --> 00:01:14.310
and you'll find Deno extension, which you can install,

26
00:01:14.520 --> 00:01:19.520
which will bring Deno support to visuals to do code.

27
00:01:20.220 --> 00:01:23.450
Once you install and enable this,

28
00:01:23.450 --> 00:01:26.310
you can go back to the Explorer

29
00:01:29.740 --> 00:01:32.560
and now you will see that on this Deno object,

30
00:01:32.560 --> 00:01:34.620
you get all the completion.

31
00:01:34.620 --> 00:01:36.700
At least you should be getting this now,

32
00:01:36.700 --> 00:01:40.390
and this of course yields a better development experience.

33
00:01:40.390 --> 00:01:45.300
Of course, just to make it is clear again, this Deno object

34
00:01:45.300 --> 00:01:49.210
and all the methods we can access on it is only available

35
00:01:49.210 --> 00:01:54.040
if we then later execute this file with the Deno executable,

36
00:01:54.930 --> 00:01:59.300
not if we would execute it with node or anything else.

37
00:01:59.300 --> 00:02:02.900
So this Deno object here is really only available

38
00:02:02.900 --> 00:02:07.040
if that script later gets executed by Deno,

39
00:02:07.040 --> 00:02:09.083
otherwise it'll not be available.

40
00:02:10.430 --> 00:02:13.320
Now our goal was to write a file.

41
00:02:13.320 --> 00:02:16.850
So conveniently there is a writeFile method,

42
00:02:16.850 --> 00:02:18.180
which we can call.

43
00:02:18.180 --> 00:02:21.310
And as the name suggests, this is a method

44
00:02:21.310 --> 00:02:23.233
that helps us write to a file.

45
00:02:24.570 --> 00:02:27.080
There always is the writeTextFile method,

46
00:02:27.080 --> 00:02:30.210
which makes writings on text to a file even easier,

47
00:02:30.210 --> 00:02:32.810
but to see more Deno features in action,

48
00:02:32.810 --> 00:02:34.333
I'm going to go for writeFile.

49
00:02:35.710 --> 00:02:40.120
Now, writeFile wants two main arguments here,

50
00:02:40.120 --> 00:02:44.490
it wants a path to the file, including the file name

51
00:02:44.490 --> 00:02:47.140
and the data that should be written to the file.

52
00:02:47.140 --> 00:02:50.300
And the data should be a Uint8Array,

53
00:02:50.300 --> 00:02:53.050
which is a strange data type, but which is actually

54
00:02:53.050 --> 00:02:56.890
a core data type built into JavaScript,

55
00:02:56.890 --> 00:03:00.810
which in the end is an array full of bytes, you could say.

56
00:03:00.810 --> 00:03:04.230
Now, we will be able to convert our text to bytes.

57
00:03:04.230 --> 00:03:07.140
So it's no problem that we have no bytes right now,

58
00:03:07.140 --> 00:03:08.610
but that we only have a string.

59
00:03:08.610 --> 00:03:11.470
Let's start with the first argument, the path.

60
00:03:11.470 --> 00:03:13.210
And here let's say we wanna create

61
00:03:13.210 --> 00:03:15.270
that file in the same folder.

62
00:03:15.270 --> 00:03:17.660
Conveniently, the only thing we then need to do

63
00:03:17.660 --> 00:03:19.920
is specify a file name.

64
00:03:19.920 --> 00:03:23.443
So here I'm going to create my message.TXT file.

65
00:03:24.350 --> 00:03:28.250
The second argument should be the data that we wanna store,

66
00:03:28.250 --> 00:03:31.160
and that should be this byte array.

67
00:03:31.160 --> 00:03:35.500
Now, actually here this preview snippet gives me an idea

68
00:03:35.500 --> 00:03:40.500
on how we can convert the string to such a bytes array.

69
00:03:41.180 --> 00:03:46.180
We simply create an encoder by instantiating a new

70
00:03:46.700 --> 00:03:51.700
text encoder that is a globally available feature in Deno.

71
00:03:53.940 --> 00:03:57.360
If we go to the Deno docs and we search for text encoder,

72
00:03:57.360 --> 00:04:00.573
we see that is a globally available constructor function.

73
00:04:01.540 --> 00:04:03.680
And in the end, this creates an object

74
00:04:03.680 --> 00:04:07.280
that helps us convert text to bytes.

75
00:04:07.280 --> 00:04:11.730
So our data then is encoder.encode

76
00:04:11.730 --> 00:04:15.220
and to encode we pass our text.

77
00:04:15.220 --> 00:04:17.900
And then it's the data, the encoded text,

78
00:04:17.900 --> 00:04:21.173
which we feed as a second argument to writeFile.

79
00:04:22.592 --> 00:04:25.850
No, that's not too fancy, but that's our first Deno code

80
00:04:25.850 --> 00:04:26.713
we can write.

81
00:04:27.740 --> 00:04:30.970
Now, Deno, as I mentioned on a slide earlier,

82
00:04:30.970 --> 00:04:35.700
embraces modern JavaScript features like Promises.

83
00:04:35.700 --> 00:04:38.840
Therefore writeFile does not take a call back

84
00:04:38.840 --> 00:04:40.950
to let us know once it's done.

85
00:04:40.950 --> 00:04:44.170
Instead here, we now can call then or a catch

86
00:04:44.170 --> 00:04:47.123
because writeFile returns a promise.

87
00:04:48.120 --> 00:04:52.490
So here with then we can listen for the

88
00:04:53.800 --> 00:04:56.630
success of this write operation

89
00:04:56.630 --> 00:04:58.530
and we can then do whatever we want to do.

90
00:04:58.530 --> 00:05:02.670
For example, we can console.log "wrote to file"

91
00:05:02.670 --> 00:05:04.720
and be done with it.

92
00:05:04.720 --> 00:05:07.940
Now, if we execute this file, if we save it and run it with

93
00:05:07.940 --> 00:05:12.940
Deno Run, we should have a script that writes to a file.

94
00:05:13.280 --> 00:05:16.710
But actually what happens is that we get an error,

95
00:05:16.710 --> 00:05:19.080
a permission denied error.

96
00:05:19.080 --> 00:05:22.750
Well, and that is actually a key feature of Deno.

97
00:05:22.750 --> 00:05:24.553
So what's up with this error?

