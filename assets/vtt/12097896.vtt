WEBVTT

00:02.160 --> 00:08.910
If you remember that slide from earlier, file uploads require no changes on the server side, only

00:08.910 --> 00:10.550
on the client side.

00:10.560 --> 00:15.270
So what do you learn now is not that important to you if you're not working on the client side yourself,

00:15.360 --> 00:16.740
on the server side

00:16.740 --> 00:19.390
the logic is exactly the same or pretty much the same

00:19.440 --> 00:22.920
we used before, let's still implement it again. Here

00:22.920 --> 00:25.350
I'm back in the node application

00:25.860 --> 00:29.880
and I want to accept uploaded files. Now in the past

00:29.880 --> 00:36.990
we did this with a special body parser, a special middleware and that was multer.

00:36.990 --> 00:43.980
So let's install that again with npm install --save multer in the node rest API project, not

00:44.040 --> 00:45.560
in the react project.

00:45.660 --> 00:51.240
So there we install multer just as we did it earlier in the course and with it installed, let's go to

00:51.240 --> 00:57.940
the app.js file and I will implement exactly the same logic as I did before.

00:58.020 --> 00:59.910
So I'll go through that really quickly,

00:59.910 --> 01:04.970
you should check out that file upload download module if you want to learn all the details.

01:05.030 --> 01:14.980
I will first of all import multer into my app.js file and with it imported, I will configure some things

01:15.100 --> 01:16.020
for it,

01:16.240 --> 01:17.300
maybe here.

01:19.000 --> 01:27.700
I will configure the file storage with multer disk storage to control where the files get stored and

01:27.700 --> 01:34.000
there, we have a destination key which is a function in the end, an arrow function where I get request

01:34.000 --> 01:40.010
object, information about the file multer detected and a callback I should call once I'm done

01:40.210 --> 01:46.540
defining the destination. I'm done immediately here, got no error and the destination is images pointing

01:46.540 --> 01:48.870
at that images folder here.

01:49.050 --> 01:51.100
So that's the first thing here,

01:51.160 --> 01:56.740
we add another function to the disks storage object and that's the file name function which defines

01:56.740 --> 02:04.550
how the file should be named, get the same arguments as in the destination function and I call that

02:04.550 --> 02:10.940
callback with null as an error and the filename will be a combination of the date which I convert to

02:11.030 --> 02:20.680
a string and then a dash and then the original filename, really simple, exactly the same logic I used

02:20.680 --> 02:22.040
before.

02:22.040 --> 02:30.670
I'll also define a file filter where I also have or which also is a function which gets request, information

02:30.710 --> 02:33.310
about the file and a callback and in here,

02:33.400 --> 02:35.480
I'll check for a couple of mime types.

02:35.500 --> 02:41.600
I'll see if my file mime type is equal to image/png

02:41.800 --> 02:52.450
or if file mime type is equal to image/jpg or if file mime type is equal to image/jpeg with an

02:52.460 --> 03:01.370
e, that is my if condition. If anything of that is true, then it is a valid file and therefore I return

03:01.370 --> 03:02.150
no error

03:02.200 --> 03:05.040
and true as a second argument in the callback

03:05.390 --> 03:11.510
otherwise it would be invalid and I still have no error but I return false here and this is again something

03:11.510 --> 03:14.960
you learned in the file upload module.

03:15.110 --> 03:19.730
Last but not least, I need to register multer and I will use it here,

03:19.760 --> 03:27.230
maybe after the json body parser. I will use multer as a function, pass an object to configure it,

03:27.710 --> 03:35.720
assign a storage to my own file storage constant we just created and add a file filter which points

03:35.780 --> 03:37.940
at that file filter constant

03:37.940 --> 03:44.560
we just created. On that multer function, I'll then also call single image to inform

03:44.580 --> 03:51.170
multer that I'll extract a single file stored in some field named image in the incoming requests.

03:51.200 --> 03:58.890
Now every incoming request is parsed for that file or for such files. With that, multer is registered

03:59.000 --> 04:08.000
and now we can use the file in our controller where we create a new post. For that in create post,

04:08.210 --> 04:17.390
I can first of all check if request file, if that is not set because if it is not set, then I'm missing

04:17.390 --> 04:21.050
a file so I will create a new error here,

04:22.170 --> 04:23.780
no image provided

04:23.790 --> 04:30.850
maybe, I will set my status code to 422 because it's also kind of a validation error and I will throw

04:30.850 --> 04:31.620
that error,

04:31.620 --> 04:33.460
that's the first check.

04:33.480 --> 04:36.360
Now if I do find a file then everything is good,

04:36.360 --> 04:39.450
multer was able to extract a valid file,

04:39.510 --> 04:41.970
so then I'll just set up an image

04:41.970 --> 04:48.180
url constant and access request file and there the path variable which multer generates which

04:48.180 --> 04:55.050
holds the path to the file as it was stored on my server. And now this image url is what I use

04:55.050 --> 04:56.270
here as an image

04:56.270 --> 04:58.760
url of course instead of my dummy data.

04:58.770 --> 05:03.030
Now we should be able to extract files and really store them.

05:03.150 --> 05:04.590
Let me now run this

05:04.650 --> 05:09.190
but of course now we also need to tweak our frontend to be able to make that work

05:09.410 --> 05:14.820
and I didn't do this in advance because there is something special which I want you to know. In the react

05:14.820 --> 05:15.190
code,

05:15.210 --> 05:24.480
so on the frontend, go to that feed.js file in pages feed and there, let's go to the finish edit

05:24.480 --> 05:27.000
handler. There

05:27.020 --> 05:33.710
we're setting up everything we need to send a request to the backend to create a new post and right

05:33.710 --> 05:36.480
now, we're doing this with json data.

05:36.800 --> 05:46.100
Now we won't use json data anymore because json data is only text, so only data that can be represented

05:46.130 --> 05:53.840
as a text which a file can't be or not easily, it will be very big quickly and very big files are a

05:53.840 --> 06:03.350
huge issue or impossible to upload like this. So we can't use json for data where we have both a file

06:03.590 --> 06:05.660
and normal text data,

06:05.660 --> 06:08.420
instead we'll again use form data.

06:08.420 --> 06:15.050
Now we did use form data automatically when earlier in the course where we had a traditional app with

06:15.050 --> 06:22.020
rendered views, when we used a form with this multipart form ank type which we added to the form html

06:22.030 --> 06:23.080
element

06:23.090 --> 06:30.140
if you remember. So this form data is what we'll also use here but we'll not use anything to any form

06:30.170 --> 06:33.220
element, we'll do it all in javascript instead.

06:33.230 --> 06:40.520
Here where I have this marker, this comment, we can create a new form data object with a built-in object

06:40.610 --> 06:44.950
that browser side javascript offers, the form data object.

06:44.960 --> 06:50.000
This now allows us to append data to that object,

06:50.060 --> 06:56.480
for example the title, first argument to append is the name of the field, second argument is the actual

06:56.480 --> 06:57.010
data.

06:57.110 --> 07:03.160
So here we'll have post data.title, exactly what we passed to the json data before.

07:03.230 --> 07:05.710
Of course we don't just append the title,

07:05.720 --> 07:08.630
we also append the content,

07:08.660 --> 07:10.470
so let's append that

07:10.820 --> 07:16.890
and now we also want to append an image because we can append files as well.

07:16.910 --> 07:21.830
Now this should be named image because we'll be looking for this field on our rest API

07:22.030 --> 07:28.130
and now here, I can reach out to post data image because that is where I will get my image in my frontend

07:28.130 --> 07:31.070
code. With these three fields,

07:31.070 --> 07:38.450
I got form data prepared that now has mixed content, text and a file and now I want to use that

07:38.450 --> 07:41.660
form data as a body for my request.

07:41.660 --> 07:46.940
We should not set the header to application json anymore because that would be incorrect and would

07:46.940 --> 07:51.770
break our app because we would try to parse it incorrectly on the server side,

07:51.840 --> 07:55.310
instead the form data will automatically set the headers,

07:55.310 --> 07:56.990
that is kind of convenient.

07:57.020 --> 08:04.540
All we need to do is we need to set form data as our body and the rest will be done for us.

08:04.550 --> 08:08.480
If we now save that and we create a new post,

08:08.480 --> 08:16.170
let me create a post here, a duck and choose that lovely duck image again,

08:17.640 --> 08:21.600
this is a duck and click accept.

08:21.840 --> 08:23.750
Now this was pretty quick,

08:23.880 --> 08:30.390
if I now click view here, I see my duck here which is looking good and on the server side,

08:30.480 --> 08:36.260
I also see this image which was generated, which has a time stamp and this is the uploaded image,

08:36.390 --> 08:44.030
I got no error here so this is all looking good. So uploading files also works, as you saw on the server

08:44.030 --> 08:44.490
side

08:44.550 --> 08:47.460
it has exactly the same logic, on the client side

08:47.460 --> 08:53.190
things need to change but of course this is a node course, so it depends on which client you are using, how you need

08:53.190 --> 08:54.050
to adjust your code

08:54.060 --> 08:54.350
there.
