WEBVTT

00:02.320 --> 00:07.220
To implement authentication, we first of all need a fitting route.

00:07.270 --> 00:15.930
So in the auth.js route route here, I will add a new route, a post route where I will log the user in, so

00:15.930 --> 00:18.550
it will be /login.

00:18.550 --> 00:24.370
We could add validation here but I don't really care about this because I will check the email password

00:24.370 --> 00:30.420
pair anyways, so we can also directly go forward to our controller action.

00:30.440 --> 00:37.410
So let's implement that, let's work on the controller action now and for that in the auth file in the controllers

00:37.540 --> 00:38.290
folder,

00:38.440 --> 00:46.970
I'll add a new action which I'll name login which of course is a function with request response next

00:47.030 --> 00:57.370
and then some logic and in here as before, I'll retrieve my e-mail, whoops, from request body e-mail, I'll

00:57.380 --> 01:07.160
retrieve the password from request body password and I now first of all want to find out whether that

01:07.190 --> 01:12.410
e-mail address exists because if it does not, then we already know that we can't login.

01:12.410 --> 01:19.790
So I'll use my user model and find one to find one user where the e-mail equals the extracted e-mail

01:19.790 --> 01:20.620
I got here.

01:22.540 --> 01:29.240
We can succeed or we can fail with that, if we fail we'll use that same handler we used before

01:29.260 --> 01:35.110
so we'll throw an error because here failing of course means that we simply had some network error

01:35.110 --> 01:37.490
or some error with the database.

01:37.750 --> 01:43.180
If we make it into the then block, we had a user object but that does not mean that we found a user, it

01:43.180 --> 01:45.660
could be undefined if no user was found,

01:45.670 --> 01:50.540
we basically always end up in the then block if no error is thrown.

01:50.560 --> 01:59.770
So here I'll check if user is not defined and if it is not defined, I'll create a new error object where

01:59.770 --> 02:08.850
I add or where I add a message of a user with this e-mail could not be found, anything you want,

02:09.000 --> 02:10.100
where I'll set a

02:11.190 --> 02:17.850
status code of and now you could choose different codes, you could go for 404 because no user was

02:17.850 --> 02:24.800
found or 401 for not authenticated and then I'll throw that error.

02:24.900 --> 02:29.080
If we make it past this if check, we know that we have that e-mail address,

02:29.100 --> 02:37.890
now we need to validate the password. For this, I'll quickly create a new variable, loaded user and I'll store

02:38.700 --> 02:46.720
my user in that variable so that I can use it in other functions later too. Now I'll use bcrypt again and

02:46.720 --> 02:55.540
there I'll use the compare method to compare the password the user entered with the password I got stored,

02:55.540 --> 03:01.660
so with that hashed password, so user.password is password I'm looking for. I'll return this because

03:01.690 --> 03:05.830
this will give me a promise and hence I can add another then block here.

03:08.710 --> 03:10.240
Here I get back

03:10.240 --> 03:13.510
true or false depending on whether this is equal or not

03:13.510 --> 03:18.760
and if it is not equal, of course then the user did enter a wrong password.

03:18.760 --> 03:25.460
So here I'll create another error, wrong password maybe

03:28.500 --> 03:31.400
and I'll add a status code

03:31.580 --> 03:35.050
of 401 again and throw that error

03:36.620 --> 03:41.960
but if we make it past the if check, then we know the password is equal to the password the user entered.

03:41.960 --> 03:47.980
So the user entered a correct password and now we need to generate such a json web token.

03:47.990 --> 03:48.920
Let's do that next.
