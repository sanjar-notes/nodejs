WEBVTT

00:02.140 --> 00:08.690
Ok so time to fix our code and make it work again. And for that first of all, I also connected to my

00:08.690 --> 00:15.470
mongodb server with compass again and there I want to clear everything so that we can start from scratch

00:15.470 --> 00:21.000
essentially and therefore I will go to my shop database and simply delete that entire database,

00:21.110 --> 00:28.760
it will again be created on the fly or when required when we start inserting data.

00:28.790 --> 00:34.790
Now I've got a problem, I connected with the wrong user where I'm not allowed to delete a database because

00:34.820 --> 00:38.610
I connected with a user who has only read or write access,

00:38.810 --> 00:41.870
so I'll just delete the collections here of course,

00:41.870 --> 00:47.360
the alternative would be to simply connect with a user where I am allowed to manage the overall database

00:48.020 --> 00:49.330
but this will do for now.

00:49.370 --> 00:54.610
With that I also implicitly got rid of the shop database and now we can start working from scratch again

00:54.680 --> 00:59.200
and let's start working with it by making sure that we can create products

00:59.210 --> 01:07.100
and for now, products that will simply use very simple data without taking the user into account for

01:07.100 --> 01:10.880
now and where we can simply add them through the admin controller.

01:10.880 --> 01:12.800
So I'll go to my product model,

01:12.840 --> 01:17.740
to the model file and there I will eventually remove all the commented out code,

01:17.810 --> 01:20.060
I'll leave it here for reference for now

01:20.390 --> 01:24.080
and first of all in here, we need to import mongoose.

01:24.170 --> 01:26.500
So I will require mongoose here,

01:26.530 --> 01:29.000
whoops, mongoose like this.

01:29.000 --> 01:33.700
Now with this imported, I'll create a new constant and I'll name it Schema with a capital S,

01:33.770 --> 01:40.910
the name is up to you but I will use something from the mongoose object I imported, I will use the schema

01:41.000 --> 01:42.690
constructor here.

01:42.710 --> 01:45.240
This constructor allows me to create new schemas and

01:45.260 --> 01:49.220
here I will create a new schema, a new product schema,

01:49.220 --> 01:51.420
you can also name this however you want,

01:51.420 --> 01:57.830
I create a new schema by instantiating a schema object by calling new schema using that constructor

01:57.830 --> 01:58.760
here.

01:58.810 --> 02:03.260
Now this is just how mongoose works and to this constructor here,

02:03.260 --> 02:09.680
I pass a javascript object and in that object you now define how your product should look like,

02:09.680 --> 02:14.000
so you now define the data schema of a product in our case here,

02:14.120 --> 02:17.840
so this is how you set up such a blueprint. In that object,

02:17.840 --> 02:21.060
you define a schema with simple key value pairs,

02:21.080 --> 02:25.360
so for example our product will have a title.

02:25.370 --> 02:30.200
Now you don't just define which keys you have but also which type these keys will have

02:30.210 --> 02:32.150
and that's important and the type

02:32.170 --> 02:38.240
I define here would be string, string is a default javascript object hence we can use that here. And

02:38.240 --> 02:39.000
this would say

02:39.060 --> 02:45.650
ok so here I create a schema for an object which I will eventually be able to work with which must have

02:45.650 --> 02:48.410
or which will have a title that is of type string.

02:48.500 --> 02:51.530
Now important in the mongodb module,

02:51.530 --> 03:00.000
I mention that mongodb is schemaless so why do we now start to create schemas? Well the idea simply

03:00.000 --> 03:07.710
is that whilst we have the flexibility of not being restricted to a specific schema, we often will have

03:07.710 --> 03:13.410
a certain structure in the data we work with and therefore mongoose wants to give you the advantage

03:13.440 --> 03:15.440
of focusing on just your data

03:15.470 --> 03:21.840
but for that, it needs to know how your data looks like and therefore we define such a schema for the

03:21.870 --> 03:28.260
structure our data will have. But important, we can still deviate from this by assigning a title like

03:28.260 --> 03:28.840
this,

03:28.890 --> 03:34.440
we could even work with a product and create a new one and save it to the database without setting a

03:34.440 --> 03:41.910
title because we still have the flexibility of not enforcing this, though what we can do is we can pass

03:42.030 --> 03:48.990
an object instead of just the type here as a value and then set a type property which could be set to string

03:49.380 --> 03:52.190
and then set required to true,

03:52.380 --> 03:56.990
this is basically a more complex way of configuring the value for this key

03:57.030 --> 04:02.430
and here we would say well the type of this is a string as before but it's also required

04:02.430 --> 04:06.230
and now we indeed give up some of the flexibility we had before

04:06.360 --> 04:12.350
and we force all objects to have a title but in the end in our application, every product needs to have

04:12.350 --> 04:15.940
a title indeed because we will run into other errors otherwise,

04:16.200 --> 04:18.740
for example when outputting products in our views.

04:18.930 --> 04:24.950
So having some kind of schema makes sense even though we have the flexibility to deviate from that and

04:24.960 --> 04:30.810
it really just depends on your application, whether you need all that flexibility or whether you want

04:30.810 --> 04:36.330
to have some structure and you want to have some tool, mongoose that takes some structure and then helps

04:36.330 --> 04:38.220
you work with that data.

04:38.220 --> 04:42.720
So that was a lot of talking about schemas but it is important that you understand why we now all of

04:42.720 --> 04:44.610
a sudden start working with them,

04:44.640 --> 04:51.210
it's just a deliberate decision to give up some flexibility but gain other advantages.

04:51.210 --> 04:53.580
Now of course a product doesn't just have a title,

04:53.670 --> 04:59.460
we also need to have a price and there we can set the type to number for example

04:59.550 --> 05:03.790
and then this would also be required

05:04.080 --> 05:06.800
and we also want to have a description and image url.

05:06.900 --> 05:09.160
So we'll add a description here,

05:09.300 --> 05:11.230
this will be of type string

05:11.250 --> 05:13.310
and let's say this is also required.

05:13.320 --> 05:18.270
Now of course you can always deviate from my setup here but I want to require that all and we'll have

05:18.270 --> 05:24.720
an image url and in that image url, this will be of type string because it's just a url and this

05:24.720 --> 05:27.000
will also be required.

05:27.120 --> 05:29.350
So that would be my product schema,

05:29.370 --> 05:34.550
this is basically a description of how a product should look like in my application.

05:34.620 --> 05:40.830
Please note that I don't add _id here because this will still be added automatically as an

05:40.830 --> 05:41.700
object ID

05:41.730 --> 05:44.020
so we don't need to define that here,

05:44.280 --> 05:47.920
the user ID is something we'll add later.

05:47.940 --> 05:55.650
So now we got that product schema defined, in the next step we will create a model based on the schema

05:55.800 --> 05:59.010
and then create an object based on the model and work with that.
