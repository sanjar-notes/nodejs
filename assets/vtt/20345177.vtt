WEBVTT

1
00:00:02.120 --> 00:00:04.510
<v Instructor>So let's make sure we work with MongoDB.</v>

2
00:00:04.510 --> 00:00:07.440
And for that, we set up this client file,

3
00:00:07.440 --> 00:00:08.820
this helpers client file,

4
00:00:08.820 --> 00:00:11.380
with a connect and a getDb function.

5
00:00:11.380 --> 00:00:14.840
We're calling connect whenever our deno server starts up,

6
00:00:14.840 --> 00:00:16.897
and now we wanna call getDb to get access

7
00:00:16.897 --> 00:00:21.260
to the connect database whenever we wanna work with it.

8
00:00:21.260 --> 00:00:25.470
And as a side note, the MongoClient from the Mongo library

9
00:00:25.470 --> 00:00:27.900
will automatically take care about the connection,

10
00:00:27.900 --> 00:00:29.700
it will manage that connection.

11
00:00:29.700 --> 00:00:33.000
It will even set up multiple simultaneous connections

12
00:00:33.000 --> 00:00:35.570
and use a concept called connection pooling

13
00:00:35.570 --> 00:00:39.010
to give us the fastest possible way of working with MongoDB.

14
00:00:39.010 --> 00:00:43.220
So all of that is taken care of by this Mongo module.

15
00:00:43.220 --> 00:00:45.060
We just need to call getDb

16
00:00:45.060 --> 00:00:47.290
when we now wanna work with the database.

17
00:00:47.290 --> 00:00:49.160
And of course there are various places

18
00:00:49.160 --> 00:00:50.710
where we do wanna work with it.

19
00:00:51.810 --> 00:00:55.410
One obvious place is when we want to get access

20
00:00:55.410 --> 00:00:57.030
to our todos.

21
00:00:57.030 --> 00:01:00.030
So here in this get todos route,

22
00:01:00.030 --> 00:01:03.550
I now I want to call getDb to get access to a database,

23
00:01:03.550 --> 00:01:05.540
and then call collection on that

24
00:01:05.540 --> 00:01:09.020
to connect to a specific collection in that database.

25
00:01:09.020 --> 00:01:11.920
And since we're the one managing the database,

26
00:01:11.920 --> 00:01:15.220
we could expect a todos collection, the name is up to you,

27
00:01:15.220 --> 00:01:17.260
but of course, you should then be consistent

28
00:01:17.260 --> 00:01:19.920
when you connect to that collection.

29
00:01:19.920 --> 00:01:23.020
So we assume that there will be a todos collection.

30
00:01:23.020 --> 00:01:26.970
If there won't be, it will be created on the fly by MongoDB.

31
00:01:26.970 --> 00:01:29.080
And by calling the find method on it,

32
00:01:29.080 --> 00:01:33.683
we will actually find all elements in that todos collection.

33
00:01:34.880 --> 00:01:37.150
Now find will return a promise.

34
00:01:37.150 --> 00:01:41.320
So I'll add async here, so that we can await this.

35
00:01:41.320 --> 00:01:44.550
And what we'll get back here are our todos.

36
00:01:44.550 --> 00:01:46.410
So we'll get back all the documents

37
00:01:46.410 --> 00:01:48.130
that can be found in this collection,

38
00:01:48.130 --> 00:01:49.823
and that will be all our todos.

39
00:01:51.140 --> 00:01:55.120
Now those todos will be in a specific MongoDB format.

40
00:01:55.120 --> 00:01:57.840
These will be objects,

41
00:01:57.840 --> 00:02:01.490
but objects that in the end will have an _id field,

42
00:02:01.490 --> 00:02:05.260
which will be added automatically by MongoDB,

43
00:02:05.260 --> 00:02:10.260
which will be of type ObjectId, a MongoDB specific type.

44
00:02:10.690 --> 00:02:12.970
And then they will have a text field,

45
00:02:12.970 --> 00:02:15.200
which will be some string.

46
00:02:15.200 --> 00:02:19.000
So that's how the individual documents here will look like.

47
00:02:19.000 --> 00:02:20.010
And here we're, of course,

48
00:02:20.010 --> 00:02:22.153
getting an array of such documents.

49
00:02:23.280 --> 00:02:27.130
So to work with those, I want to transform them.

50
00:02:27.130 --> 00:02:32.130
So my transformed todos will be the todos where I call map.

51
00:02:32.230 --> 00:02:35.010
And that will execute a function on every todo,

52
00:02:35.010 --> 00:02:37.470
and then allows us to transform every todo

53
00:02:37.470 --> 00:02:38.840
into a new object.

54
00:02:38.840 --> 00:02:41.620
So here we then return this new transformed object.

55
00:02:41.620 --> 00:02:45.370
And there, let's say, I just want to have a id field,

56
00:02:45.370 --> 00:02:48.260
so not _id, but just id,

57
00:02:48.260 --> 00:02:51.933
and that should be our todo._id,

58
00:02:53.350 --> 00:02:57.160
but there we can access $oid field.

59
00:02:57.160 --> 00:02:58.390
Now this might look strange,

60
00:02:58.390 --> 00:03:00.870
but this will in the end be a property provided

61
00:03:00.870 --> 00:03:02.320
by the Mongo library

62
00:03:02.320 --> 00:03:05.200
on the documents it fetches from MongoDB.

63
00:03:05.200 --> 00:03:08.280
And that will hold the generated id,

64
00:03:08.280 --> 00:03:11.400
generated by MongoDB as a string,

65
00:03:11.400 --> 00:03:16.290
and not as this strange ObjectId object thing here.

66
00:03:16.290 --> 00:03:17.840
So that will be the string id,

67
00:03:17.840 --> 00:03:21.230
which I'll then store in a new id property.

68
00:03:21.230 --> 00:03:23.180
In addition, there will be a text property,

69
00:03:23.180 --> 00:03:24.900
and I wanna keep that,

70
00:03:24.900 --> 00:03:28.303
so I'll simply set text equal to todo.text.

71
00:03:30.490 --> 00:03:32.760
Now here, we also should assign a type

72
00:03:32.760 --> 00:03:35.450
to not have the implicit any type.

73
00:03:35.450 --> 00:03:38.330
And I'll set the type here to an object type

74
00:03:38.330 --> 00:03:40.860
where we'll have an _id field,

75
00:03:40.860 --> 00:03:42.753
which will be of type ObjectId.

76
00:03:43.690 --> 00:03:48.640
That's now something you can import from the Mongo library.

77
00:03:48.640 --> 00:03:53.640
So I'll copy that URL into todos.ts,

78
00:03:53.760 --> 00:03:56.610
but I'll not import Mongo client or database,

79
00:03:56.610 --> 00:03:59.060
instead, I'll import ObjectId,

80
00:03:59.060 --> 00:04:02.000
and this will be a type which we now can use here.

81
00:04:02.000 --> 00:04:04.210
And we'll have a text field,

82
00:04:04.210 --> 00:04:06.770
which will have a value of type string.

83
00:04:06.770 --> 00:04:08.390
So that's now the todo type

84
00:04:08.390 --> 00:04:11.820
as we get it back from MongoDB out of our database.

85
00:04:11.820 --> 00:04:14.530
Therefore, that's the type I'm setting on this argument,

86
00:04:14.530 --> 00:04:16.300
which will be passed into this function

87
00:04:16.300 --> 00:04:18.550
we pass to map automatically

88
00:04:18.550 --> 00:04:21.433
for every todo that is fetched from our collection.

89
00:04:22.630 --> 00:04:24.920
Therefore in the end, we'll have to transform todos.

90
00:04:24.920 --> 00:04:27.480
And those are the todos which should be returned

91
00:04:27.480 --> 00:04:28.713
to the client now.

92
00:04:30.710 --> 00:04:32.010
So that's a lot of code.

93
00:04:32.010 --> 00:04:34.760
But with that, we should now be able to fetch todos

94
00:04:34.760 --> 00:04:36.300
from the database.

95
00:04:36.300 --> 00:04:39.200
Now in order to see whether that really works,

96
00:04:39.200 --> 00:04:41.250
let's also work on the post route.

97
00:04:41.250 --> 00:04:43.600
And let's make sure that we can add a new todo.

98
00:04:44.440 --> 00:04:48.410
For that, here in create we of course create our new todo

99
00:04:49.390 --> 00:04:52.450
but now I want to get access to the database

100
00:04:52.450 --> 00:04:57.290
and then here again to the todos collection.

101
00:04:57.290 --> 00:05:00.140
Of course, here you should use the same collection name

102
00:05:00.140 --> 00:05:02.390
as here when you get todos,

103
00:05:02.390 --> 00:05:04.620
otherwise you're adding and fetching

104
00:05:04.620 --> 00:05:06.630
to and from different collections,

105
00:05:06.630 --> 00:05:09.080
which will not be a good idea.

106
00:05:09.080 --> 00:05:12.467
And then here, we can call insertOne,

107
00:05:13.372 --> 00:05:15.172
and this will do just what the name implies,

108
00:05:15.172 --> 00:05:16.743
it will insert one new todo.

109
00:05:18.120 --> 00:05:22.350
Now here actually, since MongoDB will generate an id for us,

110
00:05:22.350 --> 00:05:25.050
we no longer need to generate it on our own.

111
00:05:25.050 --> 00:05:27.010
So I'll comment this out.

112
00:05:27.010 --> 00:05:30.010
And I'll just pass in the new todo like this

113
00:05:30.010 --> 00:05:30.843
into insertOne.

114
00:05:31.960 --> 00:05:34.910
Now, of course, since we don't have an id key anymore here,

115
00:05:35.830 --> 00:05:38.300
I'll go to my interface.

116
00:05:38.300 --> 00:05:40.860
And by adding a question mark after id,

117
00:05:40.860 --> 00:05:43.070
I actually make this optional,

118
00:05:43.070 --> 00:05:45.510
so that TypeScript won't complain

119
00:05:45.510 --> 00:05:48.283
if we create a todo object without an id.

120
00:05:49.700 --> 00:05:53.060
So with that change made, we can create this object

121
00:05:53.060 --> 00:05:55.123
and we can feed it into insertOne.

122
00:05:58.330 --> 00:06:00.860
And now here we can await this action

123
00:06:00.860 --> 00:06:03.710
because insertOne will return a promise.

124
00:06:03.710 --> 00:06:05.300
And this promise will resolve

125
00:06:05.300 --> 00:06:07.810
whenever the insertion finished.

126
00:06:07.810 --> 00:06:10.300
In that case will then thereafter get information

127
00:06:10.300 --> 00:06:14.780
about the id that was autogenerated by MongoDB

128
00:06:14.780 --> 00:06:16.280
for the new todo,

129
00:06:16.280 --> 00:06:19.743
and they offer now we can manipulate the new todo here.

130
00:06:21.500 --> 00:06:24.810
And we can now add the id property on the fly,

131
00:06:24.810 --> 00:06:27.730
and set it equal to id, but not like this.

132
00:06:27.730 --> 00:06:30.490
Instead, id will be of type ObjectId,

133
00:06:30.490 --> 00:06:33.260
and therefore again, we'll be able to access $oid

134
00:06:34.210 --> 00:06:36.380
to get this id as a string.

135
00:06:36.380 --> 00:06:38.230
That's simply a specific property

136
00:06:38.230 --> 00:06:40.393
that exists on the ObjectId type.

137
00:06:41.381 --> 00:06:43.200
That will then be our new todo.

138
00:06:43.200 --> 00:06:45.850
So we'll then have our new todo with the text

139
00:06:45.850 --> 00:06:48.160
and with the autogenerated id.

140
00:06:48.160 --> 00:06:50.590
We don't need to add this to our local array anymore,

141
00:06:50.590 --> 00:06:53.853
we can get rid of that, and we still return it however.

142
00:06:54.860 --> 00:06:56.690
And if we now save all of that,

143
00:06:56.690 --> 00:06:58.870
we can quit that backend server

144
00:06:58.870 --> 00:07:01.960
and rerun it with deno run allow net.

145
00:07:01.960 --> 00:07:04.680
And this will now download the MongoDB package

146
00:07:04.680 --> 00:07:06.900
and try to start our server.

147
00:07:06.900 --> 00:07:09.400
But for me, it crashes.

148
00:07:09.400 --> 00:07:11.550
Why does this happen?

149
00:07:11.550 --> 00:07:16.550
Well, under the hood, this Mongo module uses a Rust plugin.

150
00:07:17.220 --> 00:07:20.060
I mentioned that Deno would be written with Rust,

151
00:07:20.060 --> 00:07:22.090
and that the Mongo module

152
00:07:22.090 --> 00:07:25.550
in the end just wraps the Rust Mongo package.

153
00:07:25.550 --> 00:07:28.870
Now this is something which is actively supported by Deno.

154
00:07:28.870 --> 00:07:32.470
But it uses a feature built into Deno,

155
00:07:32.470 --> 00:07:34.910
which is called plugins.

156
00:07:34.910 --> 00:07:37.650
So under the hood Deno has a plugin system

157
00:07:37.650 --> 00:07:41.180
and the Mongo library uses this system.

158
00:07:41.180 --> 00:07:44.400
Now currently, at the point of time I'm recording this,

159
00:07:44.400 --> 00:07:45.660
this is only supported

160
00:07:45.660 --> 00:07:49.420
if we add the unstable flag to our execution.

161
00:07:49.420 --> 00:07:51.540
This might not be the case in the future,

162
00:07:51.540 --> 00:07:53.450
but currently it is the case.

163
00:07:53.450 --> 00:07:55.040
So when we run our app.ts file,

164
00:07:55.040 --> 00:07:58.270
we need to add --unstable.

165
00:07:58.270 --> 00:08:01.250
Even with that, however, it will still fail.

166
00:08:01.250 --> 00:08:05.530
It now fails with a PermissionDenied error for reading.

167
00:08:05.530 --> 00:08:07.920
Because it turns out that the Mongo library

168
00:08:07.920 --> 00:08:10.210
also wants to read some files.

169
00:08:10.210 --> 00:08:14.690
So we should also add --allow-read here as a permission,

170
00:08:14.690 --> 00:08:16.940
and then try executing this again.

171
00:08:16.940 --> 00:08:20.090
But now you see, it also wants write access.

172
00:08:20.090 --> 00:08:24.020
So let's add this as well, allow-write.

173
00:08:24.020 --> 00:08:28.133
And with that added, now it's downloading the Mongo library.

174
00:08:29.100 --> 00:08:31.500
And it crashes with a plugin error,

175
00:08:31.500 --> 00:08:34.160
that's the last permission we need to add, promised,

176
00:08:34.160 --> 00:08:35.910
I'm just showing all these errors

177
00:08:35.910 --> 00:08:39.140
so that you see that we really need those permissions.

178
00:08:39.140 --> 00:08:43.640
The last permission we need to add here is --allow-plugin.

179
00:08:43.640 --> 00:08:45.680
So you see that this Deno application

180
00:08:45.680 --> 00:08:48.400
now needs a lot of permissions already to run.

181
00:08:48.400 --> 00:08:50.640
And that's, by the way, all is what I meant earlier.

182
00:08:50.640 --> 00:08:52.560
We're now granting all those permissions

183
00:08:52.560 --> 00:08:55.280
and we're again trusting the Mongo library,

184
00:08:55.280 --> 00:08:56.900
the Mongo module here,

185
00:08:56.900 --> 00:09:00.760
that it's not doing anything fishy with those permissions.

186
00:09:00.760 --> 00:09:04.270
So we're almost back in the Node world here.

187
00:09:04.270 --> 00:09:06.113
Nonetheless, I can now hit Enter.

188
00:09:07.370 --> 00:09:09.240
And now the only error I'm getting

189
00:09:09.240 --> 00:09:11.300
is one regarding my URL,

190
00:09:11.300 --> 00:09:14.850
we should have a slash here after MongoDB.net,

191
00:09:14.850 --> 00:09:16.660
tiny mistake from my side.

192
00:09:16.660 --> 00:09:19.530
Let's add this and then try rerunning that.

193
00:09:19.530 --> 00:09:22.240
And now it should spin up our server successfully,

194
00:09:22.240 --> 00:09:25.660
and it should connect to your MongoDB cluster successfully.

195
00:09:25.660 --> 00:09:28.320
Assuming you configured that cluster correctly,

196
00:09:28.320 --> 00:09:30.230
you whitelisted your local IP,

197
00:09:30.230 --> 00:09:33.453
and you have no firewall in between or anything like that.

198
00:09:34.390 --> 00:09:37.910
And with that done, let's see whether storing in a database

199
00:09:37.910 --> 00:09:40.083
and fetching from a database works.

200
00:09:40.950 --> 00:09:45.950
For that, I'll go back to the React application, reload it,

201
00:09:46.150 --> 00:09:49.293
and add a new todo, Learn Deno.

202
00:09:50.370 --> 00:09:53.530
I click Add Todo, it appears here.

203
00:09:53.530 --> 00:09:55.780
I get no error on the backend.

204
00:09:55.780 --> 00:09:58.520
And now if storing in a database worked,

205
00:09:58.520 --> 00:10:02.240
I should be able to shut down this backend Deno server,

206
00:10:02.240 --> 00:10:05.010
which I did now, and restart it.

207
00:10:05.010 --> 00:10:06.280
With that normally,

208
00:10:06.280 --> 00:10:09.530
all the data stored in memory will be lost.

209
00:10:09.530 --> 00:10:13.010
So now if we are still able to fetch that todo,

210
00:10:13.010 --> 00:10:16.430
that means that it indeed was stored in a database.

211
00:10:16.430 --> 00:10:19.750
So if I now reload, here it is, here it appears,

212
00:10:19.750 --> 00:10:22.400
and that means that storing in a database works,

213
00:10:22.400 --> 00:10:25.430
and that we're all able to fetch from it.

214
00:10:25.430 --> 00:10:28.090
Now, we already spent some time working on the database.

215
00:10:28.090 --> 00:10:29.160
Let's now make sure

216
00:10:29.160 --> 00:10:32.383
that updating and deleting now also works.

