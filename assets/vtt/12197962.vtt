WEBVTT

1
00:00:02.750 --> 00:00:04.990
<v Maximilian>So let's use that query here</v>

2
00:00:04.990 --> 00:00:06.550
from the front end.

3
00:00:06.550 --> 00:00:10.170
And for that, I'll go to my React application, of course.

4
00:00:10.170 --> 00:00:11.960
There, the Feed.js file,

5
00:00:11.960 --> 00:00:16.960
and here we have to scroll up a little bit to load posts.

6
00:00:17.270 --> 00:00:18.870
There we have some pagination logic,

7
00:00:18.870 --> 00:00:20.850
which we can ignore for now.

8
00:00:20.850 --> 00:00:24.540
And then I'll write my GraphQL query here

9
00:00:27.010 --> 00:00:31.260
which is a JavaScript object where I have a query

10
00:00:31.260 --> 00:00:34.830
which now is that multi line string.

11
00:00:34.830 --> 00:00:36.960
And in that multi line string

12
00:00:36.960 --> 00:00:40.640
I now will start with curly braces right away.

13
00:00:40.640 --> 00:00:43.713
And in there, just as I did it in GraphiQL,

14
00:00:45.990 --> 00:00:48.723
and therefore we can, of course, again, copy that.

15
00:00:49.620 --> 00:00:51.653
I'll look for posts.

16
00:00:53.600 --> 00:00:55.290
This is the name of my query.

17
00:00:55.290 --> 00:00:58.590
And in there, this happens to return this post data object

18
00:00:58.590 --> 00:01:00.450
which has posts and total posts.

19
00:01:00.450 --> 00:01:03.290
And for every post I'm interested in the ID,

20
00:01:03.290 --> 00:01:08.290
title, content, image URL, also creator

21
00:01:08.370 --> 00:01:13.140
and also created at, creator again as a complex object

22
00:01:13.140 --> 00:01:15.340
and there I'm interested in the name.

23
00:01:15.340 --> 00:01:16.610
So this is the data I need

24
00:01:16.610 --> 00:01:19.050
to render my posts efficiently.

25
00:01:19.050 --> 00:01:24.050
Now to run that query, let's change that URL down there.

26
00:01:25.560 --> 00:01:27.360
And you know which URL that is.

27
00:01:27.360 --> 00:01:30.707
It's localhost:8080/graphQL.

28
00:01:34.690 --> 00:01:37.550
The method will be post, of course,

29
00:01:37.550 --> 00:01:42.550
headers is the token, but also the content type,

30
00:01:42.750 --> 00:01:47.410
which should be application/json.

31
00:01:47.410 --> 00:01:50.600
And of course, I need to add my body here

32
00:01:50.600 --> 00:01:54.980
and that body will be stringify with the json package,

33
00:01:54.980 --> 00:01:58.510
and that will be that GraphQL query I wrote up there.

34
00:01:58.510 --> 00:02:01.520
And please note again, that we see the entire

35
00:02:01.520 --> 00:02:05.080
flexibility of GraphQL doing its job here.

36
00:02:05.080 --> 00:02:07.960
We're fetching exactly that post data we need.

37
00:02:07.960 --> 00:02:10.460
We don't fetch things like the creator email

38
00:02:10.460 --> 00:02:11.530
which we don't need.

39
00:02:11.530 --> 00:02:14.570
We don't fetch the updated at field, which we don't need.

40
00:02:14.570 --> 00:02:16.390
We only fetch what we need

41
00:02:16.390 --> 00:02:18.500
and we actually don't even need the image URL here,

42
00:02:18.500 --> 00:02:19.680
now that I think about it.

43
00:02:19.680 --> 00:02:22.930
We're not rendering that image on that starting page.

44
00:02:22.930 --> 00:02:25.350
So really, we only fetch what we need

45
00:02:25.350 --> 00:02:29.490
and we use GraphQL to its fullest potential here.

46
00:02:29.490 --> 00:02:31.550
But back to our request.

47
00:02:31.550 --> 00:02:33.340
I'm now sending this request.

48
00:02:33.340 --> 00:02:38.340
Now, again, handling errors like this will not succeed.

49
00:02:38.400 --> 00:02:42.420
Instead, we wanna handle it as we did down there.

50
00:02:42.420 --> 00:02:45.040
We don't need to check for validation errors though

51
00:02:45.040 --> 00:02:49.780
because in this query we can't send incorrect data.

52
00:02:49.780 --> 00:02:53.030
So we'll simply check if we got any other errors

53
00:02:53.030 --> 00:02:56.170
and I'll then say fetching posts failed

54
00:02:56.170 --> 00:02:58.950
and otherwise we'll have our posts

55
00:02:58.950 --> 00:03:01.890
and we can't access them on resData posts though,

56
00:03:01.890 --> 00:03:03.080
as you know.

57
00:03:03.080 --> 00:03:05.920
Instead, if we have a look at our schema

58
00:03:05.920 --> 00:03:10.630
our post data will be found on data then posts

59
00:03:10.630 --> 00:03:12.520
because that's the name of the query.

60
00:03:12.520 --> 00:03:15.510
That will be an object of this type

61
00:03:15.510 --> 00:03:17.810
with another field of posts in there.

62
00:03:17.810 --> 00:03:20.083
And then we drill into our post data.

63
00:03:21.180 --> 00:03:24.730
So here the posts, the final posts can be found

64
00:03:24.730 --> 00:03:28.910
on resData.data.posts.posts.

65
00:03:28.910 --> 00:03:32.020
This is the query, and this is then the posts field

66
00:03:32.020 --> 00:03:33.820
in the return data of the query.

67
00:03:33.820 --> 00:03:37.500
And then we can let React do its job.

68
00:03:37.500 --> 00:03:41.860
For the total posts it's all the resData.data.posts,

69
00:03:41.860 --> 00:03:44.860
and then it's not total items, but total posts.

70
00:03:44.860 --> 00:03:47.890
I renamed that on my backend.

71
00:03:47.890 --> 00:03:49.520
If we now save that and we go back

72
00:03:49.520 --> 00:03:53.480
to our React application, we can already see it.

73
00:03:53.480 --> 00:03:55.480
That error is coming from the user's status.

74
00:03:55.480 --> 00:03:59.140
But behind that, we see our posts are getting rendered.

75
00:03:59.140 --> 00:04:02.090
We see the user name, so that is all working.

76
00:04:02.090 --> 00:04:06.720
And now let's also add the code to add a new post

77
00:04:06.720 --> 00:04:08.280
to this page immediately,

78
00:04:08.280 --> 00:04:10.690
before we then also add pagination,

79
00:04:10.690 --> 00:04:12.840
and then also have a look at how we can get

80
00:04:12.840 --> 00:04:14.393
our image onto the server.

81
00:04:15.330 --> 00:04:17.210
So let's quickly add the code.

82
00:04:17.210 --> 00:04:19.410
To add a new post immediately,

83
00:04:19.410 --> 00:04:21.590
we do that in the Feed.js file

84
00:04:21.590 --> 00:04:25.500
off the front end code in the finishEditHandler.

85
00:04:25.500 --> 00:04:27.870
And there we scroll down to the place

86
00:04:27.870 --> 00:04:30.110
where we create our post object.

87
00:04:30.110 --> 00:04:33.570
We're not actually doing anything with that thus far

88
00:04:33.570 --> 00:04:35.683
so that's time to change.

89
00:04:36.740 --> 00:04:40.050
So there with this post, I prepared some code

90
00:04:40.050 --> 00:04:41.230
which you can now use.

91
00:04:41.230 --> 00:04:44.900
You can just copy it in and replace

92
00:04:44.900 --> 00:04:48.000
this prevstate statement with the attached code

93
00:04:48.000 --> 00:04:51.470
and thereafter, go back to your application

94
00:04:52.990 --> 00:04:55.833
and add another cup, for example,

95
00:05:00.500 --> 00:05:04.960
also hot and hit accept, and you see that cup here too.

96
00:05:04.960 --> 00:05:06.490
Pagination is not working

97
00:05:06.490 --> 00:05:07.990
but it'll take care about that later.

98
00:05:07.990 --> 00:05:09.270
For now, we can add that

99
00:05:09.270 --> 00:05:11.623
and we can load our posts in general.

