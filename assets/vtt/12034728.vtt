WEBVTT

00:02.190 --> 00:06.090
You can simply Google for Stripe and you should find their page.

00:06.450 --> 00:10.410
And they have a really great documentation, by the way, in case you want to use it.

00:10.410 --> 00:16.380
So definitely dive into developer documentation, but we can simply click create account here and then

00:16.380 --> 00:17.970
create an account real quick.

00:18.270 --> 00:21.780
Now once you got your account created, you can already get started.

00:22.020 --> 00:25.350
First of all, you need to validate your account.

00:25.350 --> 00:27.630
So make sure you click on that verify email link.

00:27.660 --> 00:29.220
You get in an extra email.

00:30.120 --> 00:33.300
And once you did that, you are ready to get started.

00:33.510 --> 00:34.530
Now, important.

00:35.520 --> 00:42.000
Under developers, you'll find a bunch of API keys which you will need to add Stripe.

00:42.000 --> 00:46.250
And we are seeing special testing data here, which is fine for our development.

00:46.260 --> 00:51.660
If you want to build a real application, you want to push it to production, you would switch to your

00:51.660 --> 00:55.950
life data here for this you have to activate your account though will not do that here.

00:55.950 --> 01:02.160
We'll work with the test data to get started and with that we can go back to home and there click on

01:02.160 --> 01:06.450
Grow Your Online Business with payments and read the docs.

01:06.750 --> 01:09.780
Now this takes us to the Stripe documentation.

01:09.900 --> 01:16.620
It turns out that you have various different ways of implementing payments with Stripe, and of course

01:16.620 --> 01:22.470
you can check out their entire documentation to learn all about the different ways of collecting payments.

01:22.620 --> 01:27.810
Now here we can go to web under, build your own and click on Integrate Stripe.

01:27.810 --> 01:32.970
JS This simply allows us to implement a JavaScript library on the front end.

01:32.970 --> 01:38.820
So in our views, to make that whole payment process very, very smooth and straightforward.

01:39.330 --> 01:46.290
So what we'll do is we'll pick this script here and go back to our code and they're in the checkout.

01:46.290 --> 01:47.640
Edge's file.

01:48.430 --> 01:56.560
Let's go to that diff where we output our sum and let's actually add a new diff below it, which also

01:56.560 --> 01:58.840
has that centered class.

01:59.230 --> 02:00.970
And in this new diff.

02:02.220 --> 02:05.040
We can paste in that script, but not just this script.

02:05.040 --> 02:13.800
Let's also add a button here with an ID of order dash BTN and a class of button for the styling where

02:13.800 --> 02:15.960
we can say Order just like this.

02:16.530 --> 02:22.830
Now let's add another script tag here where we now will write some inline script and that's all front

02:22.830 --> 02:23.970
end JavaScript.

02:23.970 --> 02:30.690
So not running with Node.js on our server, but instead executing in the browser of our users.

02:31.410 --> 02:41.970
Now here we can, first of all, call Stripe with a capital S like this and insert your local testing

02:41.970 --> 02:42.400
key.

02:42.420 --> 02:44.850
Now you'll find it here in the documentation already.

02:44.850 --> 02:45.900
Prefilled.

02:45.930 --> 02:47.050
This is the key.

02:47.070 --> 02:51.900
You can also see in the developer part of your home screen.

02:51.900 --> 02:56.190
So put in other words, here under developers API keys.

02:56.310 --> 02:57.360
This.

02:59.030 --> 03:00.920
Is the key I'm talking about.

03:01.980 --> 03:04.230
This is the same key you see here.

03:04.260 --> 03:07.680
So you can grab that key and enter this as a string.

03:08.400 --> 03:11.010
As an argument here for this strip function call.

03:11.010 --> 03:15.900
This strip function is available because we're running this scripture, we're importing this script,

03:16.380 --> 03:23.220
and thereafter let's get access to our order button by using document, get element by ID, that's DOM

03:23.220 --> 03:28.530
API, which we can use in JavaScript, which runs in the browser to get access to an element on the

03:28.530 --> 03:29.130
page.

03:29.250 --> 03:34.020
And here I will get access to that button by its ID by simply passing the ID here.

03:34.020 --> 03:39.030
So now we simply have access to the button where I now want to listen for a click.

03:40.980 --> 03:48.540
So on the order button we can add an event listener, a click event listener, and then pass a function

03:48.540 --> 03:51.300
which should execute when that button gets clicked.

03:51.360 --> 03:59.850
Now here, we'll not send the user to our own back and to our own roots, which we registered instead.

03:59.850 --> 04:02.660
Here we'll let Stripe do some magic.

04:02.670 --> 04:04.470
We'll use that stripe.

04:05.080 --> 04:11.500
Object which we created up there and call redirect to checkout written like this.

04:12.270 --> 04:16.260
Now redirect to checkout takes a JavaScript object where we can configure this.

04:16.260 --> 04:21.810
What this will do in the end is it will redirect the user to some of stripe's pages where the user then

04:21.810 --> 04:24.120
enters credit card data and so on.

04:24.120 --> 04:29.250
And once all of this is done and the payment is confirmed there, the user is redirected back to us.

04:29.280 --> 04:34.260
Now here we have to provide a session ID and that's the interesting thing.

04:34.260 --> 04:38.970
That should be a string, but at the moment we have no such session ID.

04:39.930 --> 04:42.540
So what do we do there?

04:42.590 --> 04:44.430
Well, how do we get that session ID?

04:45.180 --> 04:50.520
Well, for that we have to go to the controller where we in the end render check out Aegis.

04:50.730 --> 04:58.920
And that, of course, is here in shop charges, the get checkout controller here, here in get checkout.

04:58.920 --> 05:05.880
We now have to adjust our code a little bit because besides rendering this checkout page, we have to

05:05.880 --> 05:11.850
prepare such a stripe session in the end now to prepare that.

05:12.470 --> 05:18.500
We have to install a new package, so I'll quit my development server and go ahead and install it by

05:18.500 --> 05:19.220
running NPM.

05:19.220 --> 05:22.400
Install Dash Dash Save Stripe.

05:22.400 --> 05:24.940
Stripe is the package name which we need to install.

05:24.950 --> 05:28.790
This is now a package which we can use on our server side code.

05:28.790 --> 05:30.590
So in Node.js.

05:31.400 --> 05:33.260
So let's wait for this to finish.

05:35.170 --> 05:37.900
And then restart my server.

05:38.610 --> 05:45.840
And now here at the top, we can import stripe by requiring stripe like this.

05:45.840 --> 05:51.270
But then this actually gives us a function which we need to execute to which we now need to pass our

05:51.270 --> 05:53.060
private stripe key.

05:53.070 --> 05:55.470
That's the key you have to reveal here.

05:55.470 --> 06:01.170
And by the way, of course, I'll change those keys after this recording session so you can't use mine.

06:01.680 --> 06:03.330
Copy that key here.

06:04.110 --> 06:05.050
And Enter is here.

06:05.070 --> 06:09.540
Now always keep this key private, so only use it in your Node.js code.

06:09.540 --> 06:14.280
Never expose it in one of your views because there your users could see it.

06:14.280 --> 06:17.190
And this is a key you should always keep private.

06:18.110 --> 06:22.340
Now with Stripe imported like this, let's go back to get checkout.

06:22.340 --> 06:28.640
So to the controller where we prepare the checkout page and in there of course we want to gather all

06:28.640 --> 06:29.630
the product data.

06:29.630 --> 06:30.820
That's all fine.

06:30.830 --> 06:37.910
However, I will adjust as a bit and create a variable products here right at the beginning of the function.

06:37.910 --> 06:44.510
Also a total which is zero initially and change this here to not create a new constant or a new variable

06:44.540 --> 06:50.630
here, but instead use these variables here which now simply are available everywhere in this function

06:50.630 --> 06:57.140
in any nested function as well, whereas before this only was available inside of this function and

06:57.140 --> 07:03.200
that will just not be enough once we made the changes we're about to make, leave that code as it is

07:03.200 --> 07:03.740
otherwise.

07:03.740 --> 07:09.020
But instead of rendering immediately here, we now need to do something different.

07:09.020 --> 07:13.430
Here, we need to do something else here in this promise and this then block.

07:13.430 --> 07:17.510
We should return stripe checkout.

07:18.170 --> 07:20.600
Dot sessions create.

07:20.600 --> 07:24.870
Remember, we needed such a session key in our template.

07:24.890 --> 07:30.590
Now here we're going to create such a session which ultimately gives us such a key to create.

07:30.590 --> 07:33.620
You pass an object where you configure that session.

07:34.130 --> 07:42.890
Now one thing we can already do is we can grab render here, cut that and add a new then block thereafter,

07:43.250 --> 07:50.210
which is why I had to outsource some data into global or into function wide variables.

07:50.210 --> 07:54.350
And in this then block you will get the stripe session eventually.

07:54.350 --> 07:57.140
We're not done configuring it, but you will get it there.

07:57.590 --> 08:04.550
And then here you can then render the checkout page and all the paths, let's say a session ID key to

08:04.550 --> 08:07.460
the template which holds session ID.

08:07.460 --> 08:12.710
So this session you're getting here, it will have ID field, which is that stripe session.

08:12.710 --> 08:14.690
Now we'll use that in a view in a second.

08:14.690 --> 08:20.300
Before we do so let's configure that session because there are some things which we do need to configure.

08:21.160 --> 08:28.960
For one, we need to add a payment underscore method, underscore types key here that holds an array.

08:28.960 --> 08:33.790
And there we want to add card as a type, which means we accept credit card payments.

08:34.920 --> 08:38.220
Next, let's add a line, underscore items key.

08:38.220 --> 08:43.560
And there we need to specify which items will be checked out.

08:43.800 --> 08:50.700
So here I want to use my products, which I basically created here and map this a little bit because

08:50.700 --> 08:53.070
each product needs to look a bit different.

08:53.070 --> 08:57.870
So every product will be transformed with help of the built in map method.

08:57.870 --> 09:05.010
JavaScript offers on arrays and there the new object I return for every product in the product's array,

09:05.010 --> 09:08.250
which will therefore be part of the newly returned products array.

09:08.250 --> 09:13.440
We past line items will have a name which is p dot product.

09:13.440 --> 09:15.270
ID dot title.

09:16.160 --> 09:21.860
Description, which is product ID description.

09:21.860 --> 09:27.740
In case you're wondering why we can access title and description on product ID, keep in mind that we

09:27.740 --> 09:29.990
populated that product ID field.

09:29.990 --> 09:36.170
So it's not just the product ID, it's the complete product data, which is why we can access the title

09:36.170 --> 09:36.710
ID description.

09:36.710 --> 09:45.290
For example, the amount is PPI, product ID price times 100 because we need to specify this in sense.

09:45.800 --> 09:52.480
The currency is used for a US dollar and the quantity is not quantity.

09:52.490 --> 09:55.610
That is data which stripe needs in the end.

09:55.610 --> 09:57.500
And that's the format Stripe needs.

09:57.500 --> 10:03.680
It needs an array of objects which have currency, quantity and amount and then all the here our extra

10:03.680 --> 10:08.840
name and description fields and this needs to be named name, for example.

10:08.840 --> 10:14.750
So with this reformatted data, we also give Stripe the data it needs to process the payment, but we're

10:14.750 --> 10:15.470
still not done.

10:15.470 --> 10:18.470
There is more we need to configure on this session.

10:18.470 --> 10:25.550
Specifically, we need to add a success, underscore URL and a cancel underscore URL.

10:25.580 --> 10:27.470
These are your URLs.

10:27.470 --> 10:34.100
Stripe will redirect the user to you once the transaction was completed or failed.

10:34.860 --> 10:35.400
Here.

10:35.400 --> 10:42.180
I want to dynamically derive the URL and domain of the server this node script is running on so that

10:42.180 --> 10:48.030
it is valid both here in development where we are on localhost as well as later once we deploy this

10:48.030 --> 10:50.370
on the page with any IP or domain.

10:50.700 --> 10:58.260
So here I will use request protocol which is a property again I can get from this request object express

10:58.290 --> 10:58.980
gives us.

11:00.040 --> 11:02.780
That is simply HTTP or https.

11:02.800 --> 11:06.240
Plus colon, forward slash, forward slash.

11:06.250 --> 11:08.980
So this will build us something like http colon.

11:09.010 --> 11:09.670
Forward slash.

11:09.670 --> 11:11.950
Forward slash plus request.

11:11.950 --> 11:13.160
Get host.

11:13.180 --> 11:15.040
This will give us our host address.

11:15.040 --> 11:21.730
So, for example, local host 3000 during development or later once we deployed it, the IP address

11:21.730 --> 11:24.340
or domain of the host we deployed it onto.

11:25.310 --> 11:29.660
So now this will give us that start of the redirection URL.

11:29.690 --> 11:34.160
Thereafter, I want to go to slash checkout slash success here.

11:34.970 --> 11:41.330
And now I will copy that and add it here as well and redirect to slash cancel.

11:42.340 --> 11:50.440
So these are in the end routes which Stripe will redirect us to once we ever confirmed the payment or

11:50.440 --> 11:51.340
cancelled it.

11:53.350 --> 11:54.010
With Dad.

11:54.010 --> 11:58.030
We're creating such a session, we're forwarding the session ID to The View.

11:58.030 --> 12:02.890
So back in checkout edges, we now need to output the session ID here.

12:02.890 --> 12:05.170
Now we do so with edges.

12:05.170 --> 12:09.730
We can also inject something into JavaScript code, which is pretty neat.

12:09.850 --> 12:18.880
We can inject our session ID here with the familiar EJ's syntax just inside of JavaScript code.

12:18.880 --> 12:22.060
In this case, inside of a string of our JavaScript code.

12:23.780 --> 12:27.920
With that we can be redirected to strip hopefully and then back.

12:27.920 --> 12:30.740
But the pages were redirected to.

12:30.740 --> 12:35.450
Once the transactions succeeded or failed, check out success or check out cancel.

12:35.480 --> 12:38.270
Well, these routes might not exist yet.

12:38.480 --> 12:41.360
Indeed, if we check our routes.

12:41.360 --> 12:42.770
File here to shop.

12:42.770 --> 12:43.430
File.

12:44.530 --> 12:45.700
We have no.

12:46.910 --> 12:50.050
Check out success and check out cancel roots there.

12:50.060 --> 12:59.810
So let's add them maybe here below check out we need to add to get roots slash check out slash success.

13:00.610 --> 13:05.080
And then another one slash checkout, slash, cancel.

13:05.140 --> 13:10.780
Now, when we cancel, I will in the end execute the get checkout controller again.

13:10.780 --> 13:13.630
I simply want to redirect the user back to the checkout page.

13:13.630 --> 13:17.050
If we cancel, if we succeed.

13:17.080 --> 13:19.480
I need a new controller though.

13:19.480 --> 13:26.590
And there I want to do the same thing I did before in post order so we can simply redirect the user

13:26.590 --> 13:27.850
here to post order.

13:28.090 --> 13:32.440
Now we already use post order here on slash create order.

13:32.440 --> 13:39.100
That is a route we don't need anymore though because we will now replace that thanks to our new checkout

13:39.100 --> 13:39.460
flow.

13:39.460 --> 13:42.040
So we only need checkout success and checkout cancel.

13:42.040 --> 13:45.700
And for checkout success we go to post order.

13:45.880 --> 13:46.720
We're actually here.

13:46.720 --> 13:49.840
I will create a new controller, get checkout success.

13:49.840 --> 13:52.570
But you could have used post order as well.

13:53.280 --> 13:59.100
Now let's go to shop Jews and their let's copy post order and simply create a new controller function

13:59.100 --> 14:04.830
named get check out success though as I said, you could have also just kept post order.

14:04.830 --> 14:09.810
I'm just doing it here to also have to get word at the beginning because in the end a get request will

14:09.810 --> 14:11.640
reach this controller here.

14:12.570 --> 14:16.000
Now in this function, you can leave everything as it is.

14:16.020 --> 14:20.340
We're gathering all the products from the cart and then we're creating an order, storing that in the

14:20.340 --> 14:23.370
database, and then we redirect the user to orders.

14:24.270 --> 14:26.790
If we now save that, let's give it a try.

14:26.820 --> 14:32.670
Let's go back to our page here and there to the cart where I have two items in there.

14:32.670 --> 14:33.900
Click on order now.

14:34.720 --> 14:36.190
And I got an error.

14:36.900 --> 14:40.030
Now the reason for that error is actually related to Stripe.

14:40.050 --> 14:44.610
You could debug it by going to app trace and logging the error we're handling here.

14:45.410 --> 14:47.690
I and yet need to add a name here.

14:48.520 --> 14:49.390
Max.

14:50.720 --> 14:52.340
To be able to use this.

14:52.340 --> 14:55.970
So after naming this here, if I reload.

14:57.390 --> 14:58.250
This looks better.

14:58.260 --> 15:03.810
Now, here I have the order button and if I click that, you should be redirected to Stripes page.

15:04.170 --> 15:08.970
Now here you can enter any email address and then some dummy card data.

15:08.970 --> 15:09.840
Like for two.

15:09.840 --> 15:10.950
For two, for two.

15:10.980 --> 15:19.290
A lot of four choose some date which is in the future here and then any CVC code of your choice and

15:19.290 --> 15:20.880
simply any name on the card.

15:20.910 --> 15:29.100
Click Pay and this now processes this should succeed and redirects you to the orders page in yen because

15:29.100 --> 15:32.160
it goes to the checkout success page where it is this created.

15:32.160 --> 15:34.770
And indeed you should see that your cart is empty now.

15:35.160 --> 15:36.630
Now that all works.

15:36.630 --> 15:40.080
But this approach has a flaw currently.

15:40.080 --> 15:47.340
In the end, we confirm that an order was successful by simply running the logic and get checkout success.

15:47.340 --> 15:52.200
Now we can always trigger that if we just manually route to this page.

15:52.200 --> 15:55.200
If I add a product to the card again.

15:56.600 --> 16:03.530
And now I don't order it, but I simply go to slash check out slash success here.

16:04.530 --> 16:05.760
Does all this succeeds?

16:05.790 --> 16:11.010
My card is empty and I place the order without paying for it.

16:11.880 --> 16:16.590
You can always see your orders here in Stripe, though, if you go there.

16:18.060 --> 16:20.070
You will see your post orders.

16:20.070 --> 16:21.960
And there, of course, you only see one order.

16:21.960 --> 16:24.390
And that's the order we processed through Stripe.

16:24.390 --> 16:30.980
So the order I hacked here with manually entering the URL, of course does not show up here.

16:30.990 --> 16:35.280
Only the orders that really went through stripe's form can be seen here.

16:36.210 --> 16:43.080
And of course, you can look into the payments you received here and for example, see the date, the

16:43.080 --> 16:49.440
email address, the amount paid, the payment method, the name of the user and so on.

16:49.470 --> 16:57.480
Now the advantage is with that, you can actually compare that to the orders you see in your database

16:57.750 --> 17:01.320
and check if there are any fraudulent orders in there.

17:01.320 --> 17:03.780
So you should always do that when using this approach.

17:03.780 --> 17:10.170
But of course, for a large scale shop, manually comparing orders is not really an ideal solution.

17:10.560 --> 17:16.050
And indeed this is a weakness that is also listed here in the docs of Stripe.

17:16.110 --> 17:21.450
If you go to Stripe checkout one time payments, you basically learn about the approach we just set

17:21.450 --> 17:21.630
up.

17:21.630 --> 17:25.500
And there you see that you should not rely on the success URL alone.

17:25.860 --> 17:33.000
Instead, you have to fulfill a payment, which means make sure that stripe tells you when a payment

17:33.000 --> 17:35.700
happened instead of a URL telling you.

17:36.590 --> 17:43.280
Now actually here you see that you can manually use the dashboard to check if an order really was placed.

17:43.280 --> 17:45.200
So that would be our solution here.

17:45.530 --> 17:51.710
As your application grows, web hooks here would actually be the preferred solution.

17:51.800 --> 17:57.980
The idea here is that you can configure Stripe such that it sends a request to a URL of your choice,

17:57.980 --> 18:01.250
which you would have to manage here in your application with routing.

18:01.490 --> 18:07.670
And that then tells you that the order succeeded because Stripe sends you that request behind the scenes.

18:07.670 --> 18:12.140
It does not send the request to a URL of your page anyone can enter.

18:12.140 --> 18:15.260
Instead, it will be a request validated by Stripe.

18:15.260 --> 18:17.390
That's not as easy to fake.

18:17.570 --> 18:22.280
Setting up web hooks is a bit more complex though, but the documentation here is really great if you

18:22.280 --> 18:23.090
want to do it.

18:23.270 --> 18:29.750
The biggest problem we have at the moment is we couldn't really test web hooks here because for web

18:29.750 --> 18:35.630
hooks to work, Stripe needs to be able to send the request behind the scenes to your Web page.

18:35.630 --> 18:39.470
And therefore, your web page needs to be exposed to the real Internet.

18:39.470 --> 18:41.900
And that's not the case for us here during development.

18:41.900 --> 18:46.820
It's only running on our local machine, which is why redirecting the user works but sending such a

18:46.820 --> 18:49.040
behind the scenes request would not work.

18:49.190 --> 18:55.580
Hence, if you need that automated process, the stripe docs are the way to go for the moment, using

18:55.580 --> 19:02.360
the dashboard to validate orders and to make sure that you're really only shipping goods to users who

19:02.360 --> 19:07.730
placed a valid order is the way to go and that is how you can implement payment with Stripe.

19:07.910 --> 19:12.470
As I mentioned, there is way more you can do with Stripe and of course the official docs are the place

19:12.470 --> 19:13.010
to go.

19:13.040 --> 19:17.690
If you really want to build an online shop and use all the cool features Stripe offers.

19:17.690 --> 19:21.020
But this lecture hopefully got you started with Stripe.
