WEBVTT

00:02.440 --> 00:08.900
We are able to skip and limit the amount of items we fetch and we can control that with query parameters

00:09.100 --> 00:13.840
but my buttons are hardcoded right now and that is not ideal of course,

00:13.840 --> 00:20.610
instead I rather maybe want to highlight the page I'm currently on and then show the next page number

00:20.690 --> 00:24.180
or the previous page number. For this

00:24.210 --> 00:26.340
I need to fetch more information.

00:27.130 --> 00:34.060
I will find my products and call count here, then I can also add then and catch.

00:34.360 --> 00:39.080
The important thing is I don't need catch because I'll concatenate my other promise chain later,

00:39.190 --> 00:43.920
the important thing here is this will now not to retrieve all the products but simply just a number,

00:44.080 --> 00:50.770
so number of products is what I get back in this then block function here and in that function, I then

00:50.830 --> 00:59.450
want to kick off my request where I really do fetch all the data. So we'll return product find in here

01:01.040 --> 01:04.860
with skip and limit chained after it, that's important

01:05.060 --> 01:06.560
and then I'll add this

01:06.620 --> 01:08.050
then block to continue.

01:08.050 --> 01:13.520
So I'll first of all find the count, then I have this number of products here and then I kick off my normal

01:13.520 --> 01:19.900
find method where I then really fetch the items and I skip and limit them. Here

01:19.900 --> 01:33.390
I'll add a variable, total items and I'll set total items equal to num products in here.

01:33.600 --> 01:40.440
So now I will have the total number of products stored in that variable here and when I render the index

01:40.440 --> 01:41.250
page,

01:41.330 --> 01:49.790
then I want to return that information as well, so not just the products but also total products and

01:49.820 --> 01:57.190
that will be total items, so that will be a number in the end and I also want to pass the information

01:57.310 --> 02:03.850
whether there is a next page, so maybe has next page which only will be the case if the total number

02:03.910 --> 02:07.690
of items is greater than the page we are on

02:07.690 --> 02:09.260
times the items per page.

02:09.370 --> 02:10.960
So we have a next page

02:11.140 --> 02:19.360
if items per page times page is smaller than total items because if we have 10 total items and we are

02:19.360 --> 02:26.950
on page 4, then we have 2 times 4, 8 items which we are seeing or which we saw and

02:27.050 --> 02:31.190
we have 10 left so there will be a next page. Simultaneously

02:31.210 --> 02:37.690
I can add has previous page here where I can simply return the information whether the current page

02:37.690 --> 02:39.490
is greater than 1.

02:40.030 --> 02:45.520
If that is true then there is this a previous page because there will be page one, if that is false because we are

02:45.520 --> 02:46.550
on page one already,

02:46.570 --> 02:50.220
well then there is no previous page because we can't go lower than one.

02:50.730 --> 02:57.170
I can also return some extra information like the next page and that will be page plus one of course,

02:57.500 --> 03:05.390
if we are on page 1 the next page would be page 2 and previous page would be page -1

03:05.400 --> 03:17.140
obviously. We can also add last page to have a way of displaying the highest page number and that is math

03:18.650 --> 03:19.880
seal

03:20.270 --> 03:24.270
total items divided by items per page.

03:24.320 --> 03:31.670
So if we have let's say 11 total items and we have items per page of two, then the result would be 5.5

03:32.040 --> 03:37.910
and then math.seal would return us 6 which would be the correct value because we would need 6 pages

03:37.910 --> 03:39.920
to display all 11 items

03:39.920 --> 03:47.060
if we show 2 items per page. So now I'm passing all that information to my products page, to my index page

03:47.060 --> 03:49.970
here to be precise and there, I now want to use it.
