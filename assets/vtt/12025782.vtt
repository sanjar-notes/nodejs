WEBVTT

00:02.230 --> 00:06.970
So in our application, we get a bunch of error handling in place already,

00:07.060 --> 00:08.190
let's start in the app.js.

00:08.200 --> 00:17.320
There I do already handle the case or I do have a catch block at least where I try to fetch my user

00:17.330 --> 00:23.590
at the beginning of the request and fetch the user from a session and then store that user

00:23.590 --> 00:24.610
object,

00:24.610 --> 00:28.690
still we can improve that and we will improve that in a second.

00:28.720 --> 00:31.470
In my controllers, I also have some error handling,

00:31.510 --> 00:34.170
let's say in the auth.js file. There

00:34.270 --> 00:43.720
I do check in login whether this email address does exist and if not, I do already return the same page

00:43.960 --> 00:45.700
with an error code

00:45.710 --> 00:53.410
actually where I do pass that information that the input was invalid. We do the same with the validation

00:53.410 --> 00:54.640
logic we added earlier

00:54.640 --> 01:01.750
by the way, here in the routes where we use the express validator package to add built-in validation

01:01.750 --> 01:09.760
functions, so built into that package. There behind the scenes, this package also throws and handles errors

01:10.000 --> 01:16.300
and allows us to simply collect all these errors which are now not these technical error objects but

01:16.300 --> 01:20.760
which are simply, which is data managed by that package,

01:20.800 --> 01:24.170
we collect these errors here and then we handle them manually.

01:24.190 --> 01:32.830
That would be the right side of this slide here because there, we handle errors manually or we added

01:32.950 --> 01:38.080
an if check where we check if data we got is enough to continue or not.

01:38.080 --> 01:40.980
We get no technical error being thrown here,

01:41.020 --> 01:44.920
these technical errors by the way can always be seen if you have an error message down there in the

01:44.920 --> 01:45.790
terminal,

01:45.790 --> 01:51.910
we have no such error but we still have invalid code and therefore we check this manually and proceed

01:51.910 --> 01:55.520
on our own. In our custom validators

01:55.530 --> 02:01.530
however, if we have a look at that, there I do throw a technical error

02:01.530 --> 02:03.840
for example when passwords do not match.

02:03.840 --> 02:09.230
Now this error would normally bubble up and would be handled by express but this express validator

02:09.230 --> 02:11.500
package happens to also handle it.

02:11.580 --> 02:17.490
And now it's this error handling which I want to dive into first before we then start implementing proper

02:17.490 --> 02:20.300
solutions for the different kinds of errors we could have.
