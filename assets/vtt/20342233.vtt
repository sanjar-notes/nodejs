WEBVTT

1
00:00:02.240 --> 00:00:03.800
We wrote some Deno code,

2
00:00:03.800 --> 00:00:05.290
but when we wanna execute it,

3
00:00:05.290 --> 00:00:06.860
it compiles,

4
00:00:06.860 --> 00:00:10.650
but then, it does not execute, but instead fraud is error.

5
00:00:10.650 --> 00:00:12.840
And this is not a bug with Deno,

6
00:00:12.840 --> 00:00:15.430
and this is not an error in our code,

7
00:00:15.430 --> 00:00:18.383
instead, this is a Deno feature.

8
00:00:19.650 --> 00:00:21.470
Remember that third feature,

9
00:00:21.470 --> 00:00:24.630
which I advertised earlier in the module,

10
00:00:24.630 --> 00:00:27.280
Deno is secure by default.

11
00:00:27.280 --> 00:00:28.970
What does this mean?

12
00:00:28.970 --> 00:00:32.120
It does not mean that Deno code that we write,

13
00:00:32.120 --> 00:00:36.500
is more or less secure than node code.

14
00:00:36.500 --> 00:00:39.240
It's us who write the code, and we as a developer,

15
00:00:39.240 --> 00:00:41.710
we can write good, and we can write bad code.

16
00:00:41.710 --> 00:00:45.190
So just because we use Deno does not mean,

17
00:00:45.190 --> 00:00:47.870
that our code is always secure.

18
00:00:47.870 --> 00:00:52.210
We can still open up security holes, when writing Deno code.

19
00:00:52.210 --> 00:00:54.010
This means something else,

20
00:00:54.010 --> 00:00:56.620
it means that when we run a script

21
00:00:56.620 --> 00:01:00.250
with Deno, that script does not by default,

22
00:01:00.250 --> 00:01:02.990
have all possible permissions.

23
00:01:02.990 --> 00:01:06.230
For example, something like reading or writing files,

24
00:01:06.230 --> 00:01:08.540
or sending network requests,

25
00:01:08.540 --> 00:01:11.130
or listening to network requests.

26
00:01:11.130 --> 00:01:13.060
These are all operations,

27
00:01:13.060 --> 00:01:17.520
that are always unlocked and possible with node,

28
00:01:17.520 --> 00:01:19.570
any node script can do anything.

29
00:01:19.570 --> 00:01:22.010
When you execute a JavaScript file

30
00:01:22.010 --> 00:01:25.630
with node, that file is able to do everything,

31
00:01:25.630 --> 00:01:28.400
it could delete all files on your system,

32
00:01:28.400 --> 00:01:31.420
and nothing would stop it from doing that.

33
00:01:31.420 --> 00:01:34.070
Therefore, when you execute code with node,

34
00:01:34.070 --> 00:01:36.560
you have to trust that code,

35
00:01:36.560 --> 00:01:38.970
either because you wrote it on your own,

36
00:01:38.970 --> 00:01:41.710
or because it's some third party library,

37
00:01:41.710 --> 00:01:43.060
which you trust,

38
00:01:43.060 --> 00:01:47.140
because code could potentially do a lot of bad things.

39
00:01:47.140 --> 00:01:50.220
With Deno, there's a different model, that's being used.

40
00:01:50.220 --> 00:01:53.870
Deno by default, is not allowed to do everything.

41
00:01:53.870 --> 00:01:57.010
Instead, by default, it must not do a lot.

42
00:01:57.010 --> 00:02:00.190
By default, when you execute code with Deno,

43
00:02:00.190 --> 00:02:03.650
that code may not write to files,

44
00:02:03.650 --> 00:02:06.600
that code may not read files,

45
00:02:06.600 --> 00:02:10.670
and it may not send or get HTTP requests.

46
00:02:10.670 --> 00:02:13.920
So therefore, here when we try to write to a file,

47
00:02:13.920 --> 00:02:18.920
this is denied by default, as part of Deno's security model.

48
00:02:20.580 --> 00:02:24.330
By the way, I keep on saying Deno, as I mentioned earlier,

49
00:02:24.330 --> 00:02:25.760
you could say Dino,

50
00:02:25.760 --> 00:02:27.610
it probably would be the more correct term,

51
00:02:27.610 --> 00:02:29.270
I simply got started with Deno,

52
00:02:29.270 --> 00:02:31.970
and I can't get rid of it Sorry.

53
00:02:31.970 --> 00:02:35.700
Anyways, that's not part of, Denos security model,

54
00:02:35.700 --> 00:02:38.350
so, here when we do want to write a file,

55
00:02:38.350 --> 00:02:41.560
we have to set the appropriate permissions,

56
00:02:41.560 --> 00:02:44.230
we have to let Deno know,

57
00:02:44.230 --> 00:02:48.180
that we want to be able to write to a file.

58
00:02:48.180 --> 00:02:50.410
And we do this by running the script,

59
00:02:50.410 --> 00:02:52.070
but not just like this,

60
00:02:52.070 --> 00:02:55.370
but instead before we specify the file name,

61
00:02:55.370 --> 00:02:58.900
we can add extra flags to this execution,

62
00:02:58.900 --> 00:03:02.130
and we can set some security specific flex,

63
00:03:02.130 --> 00:03:05.040
some security specific options,

64
00:03:05.040 --> 00:03:09.870
and there is the dash dash allow dash right flag.

65
00:03:09.870 --> 00:03:13.780
If we execute this code, with this flag,

66
00:03:13.780 --> 00:03:18.593
then we do allow app ts to write to files.

67
00:03:19.560 --> 00:03:23.610
There always allow read flag to do the opposite,

68
00:03:23.610 --> 00:03:25.530
you can also narrow this down,

69
00:03:25.530 --> 00:03:27.960
you can provide an optional argument,

70
00:03:27.960 --> 00:03:30.940
to allow right to make it clear to which files,

71
00:03:30.940 --> 00:03:32.060
this app may write.

72
00:03:32.060 --> 00:03:35.850
Here for example, I could allow writing to message dot txt,

73
00:03:35.850 --> 00:03:39.440
and I could add more files, separated with a comma.

74
00:03:39.440 --> 00:03:43.340
But our files could not be written to, So that's up to you.

75
00:03:43.340 --> 00:03:45.740
But if we execute the code now, for example,

76
00:03:45.740 --> 00:03:49.460
with this flag with this option, if I hit Enter,

77
00:03:49.460 --> 00:03:52.010
now you'll see it executes successfully,

78
00:03:52.010 --> 00:03:55.120
it prints out this success response.

79
00:03:55.120 --> 00:03:59.550
And here's our text instead of message or text.

80
00:03:59.550 --> 00:04:01.213
So this is how Deno,

81
00:04:02.130 --> 00:04:04.730
whatever you wanna name it works,

82
00:04:04.730 --> 00:04:07.760
you see, it's not too far off from node,

83
00:04:07.760 --> 00:04:10.900
it has this core difference besides the fact

84
00:04:10.900 --> 00:04:13.680
that it supports TypeScript, of course.

85
00:04:13.680 --> 00:04:15.470
Now we'll dig deeper into Deno,

86
00:04:15.470 --> 00:04:17.570
and we'll write more code with it.

87
00:04:17.570 --> 00:04:20.960
But before we do that, to have a comparison,

88
00:04:20.960 --> 00:04:24.420
let's write the exact same script with node.

89
00:04:24.420 --> 00:04:25.960
Definitely try this on your own.

90
00:04:25.960 --> 00:04:28.883
First, we'll do it together in the next lecture.

