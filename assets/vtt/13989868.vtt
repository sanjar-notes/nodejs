WEBVTT

00:02.720 --> 00:09.960
So we want to check whether that promise we have in there eventually returns an error.

00:09.980 --> 00:11.810
For this test we're writing here.

00:11.810 --> 00:14.720
Right, because we're testing for an error code of 500.

00:15.140 --> 00:18.410
Now for that, let's make a tiny adjustment here.

00:19.530 --> 00:22.200
In our off controller file.

00:23.470 --> 00:25.950
Let's add a return statement here at the end.

00:25.960 --> 00:31.510
This will implicitly return the promise we have hidden behind async await in here.

00:31.690 --> 00:32.950
We can now.

00:34.630 --> 00:35.540
Change this code.

00:35.560 --> 00:38.930
Reach out to the off controller, log in and called it.

00:38.950 --> 00:44.320
And of course, there, just as before, this is a middleware function and express and it needs a request

00:44.320 --> 00:48.040
object, response object and a next key or next function.

00:48.040 --> 00:53.650
Here, the request object should have a body field which has an email and a body field which has a password

00:54.010 --> 00:55.960
and well then we should fail anyway.

00:55.960 --> 01:00.190
So we don't really need to care about what else we're doing in the rest of this code here.

01:00.760 --> 01:05.530
So let's create our dummy request object here.

01:06.270 --> 01:08.310
And that request object.

01:09.130 --> 01:15.550
Well, now I have a body field and that in turn will have an email test, a test on call maybe, and

01:15.550 --> 01:18.940
it will have a password tester, whatever you want.

01:18.940 --> 01:22.690
And I passed it into my login method here.

01:22.800 --> 01:29.860
I also pass in an empty object forward to response and I also pass an empty function here for the next

01:29.860 --> 01:30.490
method.

01:30.700 --> 01:36.550
Now I can add then here because we return a promise in the login method implicitly.

01:37.000 --> 01:38.860
And then.

01:39.690 --> 01:42.930
Should now be executed once it is finished.

01:43.020 --> 01:44.190
And there.

01:44.750 --> 01:48.350
We now want to check for our error status code.

01:51.570 --> 01:53.280
So I get my result here.

01:54.170 --> 01:59.060
And I'll, first of all, simply console lock the results so that we can have a look into this.

01:59.450 --> 02:01.790
And now let me run NPM test.

02:02.730 --> 02:07.950
Now what we see is, first of all, all pass, which is strange, but if we scroll up a bit, we see

02:07.950 --> 02:09.210
all the undefined here.

02:09.480 --> 02:12.000
The reason for that is we go back to the off controller.

02:12.030 --> 02:14.460
I do return here, but indeed I return undefined.

02:14.460 --> 02:14.600
Right.

02:14.610 --> 02:18.870
And that is what I overall return as a value of that promise that gets returned here.

02:19.350 --> 02:25.650
So what I actually want to return here is my error object or a bit earlier here.

02:25.680 --> 02:27.180
There, maybe it's undefined.

02:27.180 --> 02:30.770
So in the success case I return nothing in that promise, which in the end gets returned.

02:30.780 --> 02:32.850
Here, I return the error.

02:33.450 --> 02:36.060
So now if I rerun NPM test.

02:37.850 --> 02:41.090
Now we see that our object being locked up there.

02:42.070 --> 02:43.240
Does not look better.

02:43.270 --> 02:51.400
There's not allows us to change our record a little bit and actually expect result to be NW.

02:51.430 --> 02:54.790
And now here you can actually pass an error.

02:55.300 --> 02:59.470
China is able to detect a couple of types of data and error is one of them.

02:59.500 --> 03:02.890
Of course, the official docs are the place to go to learn all about that.

03:02.920 --> 03:08.320
Our possible values would be string object, null promise, and so on.

03:08.320 --> 03:13.240
So here I expect it to be an error and I expect result.

03:14.850 --> 03:16.470
Q half a.

03:17.480 --> 03:18.470
Property.

03:18.620 --> 03:22.610
So to have property, I expect it to have property.

03:24.970 --> 03:26.560
Off status code, right?

03:26.560 --> 03:29.200
Because my error object should have that status code.

03:29.200 --> 03:33.760
So I expect a property status code which should be 500.

03:34.850 --> 03:38.060
Now ever run npm test on first look it looks good.

03:38.060 --> 03:43.730
Everything passes but actually this is a false pass here.

03:44.660 --> 03:52.250
It passes because Mark doesn't wait for this test case to finish because we actually have async code

03:52.250 --> 03:56.570
in there and by default it does not wait for that async code to resolve.

03:56.600 --> 04:01.910
It executes this code synchronously step by step and does not wait for this promise to resolve no matter

04:01.910 --> 04:03.170
how fast is this?

04:03.620 --> 04:06.050
Now of course we can tell MoCCA to wait.

04:06.050 --> 04:13.400
We do this by adding an extra argument in this function we pass to it, and that's the done argument.

04:13.970 --> 04:17.930
Now this is optional and it is indeed a function which you can call.

04:17.930 --> 04:23.690
So Mark, it gives you a function here which you can call once this test case is done by default, it's

04:23.690 --> 04:25.970
done once it executed the code top to bottom.

04:25.970 --> 04:31.670
But if you accept this argument, it will actually wait for you to call it and then you can call it

04:31.670 --> 04:34.160
in an asynchronous code snippet.

04:34.160 --> 04:41.240
So here now inside of this, then block here, I call done and I signal that I want marker to wait for

04:41.240 --> 04:46.550
this code to execute because before it treats this test case as done.

04:47.060 --> 04:51.200
And now if I run NPM test again, now it passes again.

04:51.200 --> 04:56.900
But now this is actually a valid test and we can confirm this by changing this expected status code

04:56.900 --> 04:58.370
to 401.

04:58.370 --> 04:59.510
Because now.

05:01.940 --> 05:03.830
Does actually fails, as you can tell.

05:03.860 --> 05:05.990
It should throw an arrow cut of 500.

05:06.290 --> 05:14.660
And if you scroll up a little bit here, you see you got an error code of 401 of 500, but expected

05:14.660 --> 05:15.650
one of 401.

05:15.650 --> 05:17.000
That's what we wrote here.

05:17.000 --> 05:19.940
And indeed it now failed without done.

05:19.940 --> 05:25.940
And you must alter remove it as an argument because if you have it as an argument, marker will actually

05:25.940 --> 05:31.660
by default check whether you have code that executes asynchronously.

05:31.670 --> 05:37.720
So without that argument, without calling it, therefore now if you run this again, all tests pass.

05:37.730 --> 05:44.180
So it's really important to pass done and then call it once you are done to make sure that your tests

05:44.180 --> 05:45.080
were correctly.

05:45.110 --> 05:50.460
So now if I change this back to 500, which is the realistic expectation, now they all pass and now

05:50.460 --> 05:51.770
it is really is correct.
