WEBVTT

00:03.180 --> 00:08.570
Attached to this video, you find a new project and this is now not a nodejs

00:08.580 --> 00:10.410
project, instead

00:10.420 --> 00:11.760
this is now a reactjs

00:11.770 --> 00:13.980
project. Reactjs

00:13.980 --> 00:16.720
is a frontend javascript framework,

00:16.740 --> 00:21.630
it runs in the browser and it allows you to create such a single page application which I mentioned

00:21.720 --> 00:23.450
in the last course module.

00:23.670 --> 00:29.850
You can simply download the attached project, extract it into a new folder and then navigate into that

00:29.850 --> 00:36.630
folder in a terminal or simply open that folder in an IDE like visual studio code and then

00:36.720 --> 00:44.250
inside of that extracted project, run npm install to install all the dependencies of that project.

00:44.250 --> 00:46.420
Now I mentioned that this is not a nodejs

00:46.430 --> 00:47.500
project,

00:47.550 --> 00:50.190
why do we need to run npm install then?

00:50.250 --> 00:56.700
Because it's pretty common that we manage any dependencies in javascript projects even for browser side

00:56.700 --> 01:00.410
projects with npm, with the node package manager.

01:00.480 --> 01:05.000
The packages I'm installing here are only packages that are getting used in the browser

01:05.010 --> 01:09.630
though, there are no node express or anything like that packages beneath them.

01:09.630 --> 01:14.860
Indeed if you have a look at the package.json file, you'll only find react related packages here

01:14.970 --> 01:20.840
which do run in the browser. So don't be confused by the fact that we're using npm, these packages here

01:20.850 --> 01:26.610
still only run in the browser and we're just using npm to install these packages because in modern front

01:26.610 --> 01:33.150
end development, you have very complex setups, you have very complex package dependencies and using a

01:33.160 --> 01:35.980
package manager like npm can speed that up.

01:36.000 --> 01:42.330
Now once you ran all of that, you can run npm start to start a development server which is now actually

01:42.330 --> 01:42.730
a nodejs

01:42.750 --> 01:48.240
server serving your application but it's not related to the node server

01:48.240 --> 01:49.130
we will build,

01:49.170 --> 01:56.050
it's not related to our backend, this is only a dummy development server which simply serves the build

01:56.250 --> 02:01.720
version of our frontend application, so it serves a simple html file

02:01.730 --> 02:06.660
which you can actually see in the public folder, this one which does not have a lot of content which is

02:06.840 --> 02:12.390
what I mentioned earlier or in the last module actually that single page applications have very trivial

02:12.410 --> 02:20.100
html files but we have some hooks here which are used by the react application which is built in

02:20.100 --> 02:21.070
the source folder,

02:21.090 --> 02:27.870
there is the source code and that will be mounted onto these hooks here automatically in the browser which

02:27.870 --> 02:29.850
leads to an application like this.

02:29.920 --> 02:35.310
You will see an error by default when you first start this up, we'll fix the error throughout the module and there,

02:35.430 --> 02:40.240
you will see this interface and this interface is now fully rendered through reactjs

02:40.270 --> 02:41.130
.

02:41.370 --> 02:46.640
If you inspect the source code, so if you view the page source, you will find the html page

02:46.650 --> 02:53.790
I just showed you with these hooks and then a couple of script imports at the bottom and if you inspect

02:53.790 --> 02:55.980
the dom though, you will see way more

02:56.000 --> 03:03.000
html elements and these are all rendered dynamically by react, so by the browser side javascript framework

03:03.320 --> 03:07.020
and if you want to learn more about react, I get a whole course on that of course

03:07.050 --> 03:08.190
so check that out.

03:08.370 --> 03:10.700
We'll not write react code here,

03:10.830 --> 03:14.690
almost all the code we'll work with is already prepared by me,

03:14.700 --> 03:18.870
we'll just have to tweak some things as we create our rest API

03:19.050 --> 03:22.650
but this is the frontend we'll use together with our rest API

03:22.740 --> 03:26.900
and the idea of course is that you get a feeling for how frontend and backend,

03:26.970 --> 03:33.110
so the react app and the rest API are decoupled and can still work together now.

03:33.210 --> 03:35.470
So this is the project we'll work with,

03:35.490 --> 03:41.550
it's a very simple social network blog messaging like application,

03:41.550 --> 03:44.730
we can have our users status which you can update here,

03:44.760 --> 03:50.630
we can create new posts here, we can later also edit and delete posts and we'll later also add

03:50.630 --> 03:51.750
authentication.

03:51.750 --> 03:55.120
Right now nothing is working because I got no backend attached,

03:55.230 --> 04:00.200
this is also the reason why we have an error message right at the start but we will get rid of that throughout

04:00.210 --> 04:01.920
this module of course.

04:01.920 --> 04:07.530
So this is the frontend and this is now the frontend I want to connect to my backend. So let's now see

04:07.890 --> 04:14.940
which kind of restful API endpoints this frontend could need before we then start implementing them

04:14.940 --> 04:15.690
step by step.
