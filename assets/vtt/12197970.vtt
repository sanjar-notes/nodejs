WEBVTT

00:02.350 --> 00:08.870
So let's make sure we can also fetch a single post and for that, I'll go to my schema again because on

00:08.900 --> 00:11.310
the schema is where I will work

00:11.380 --> 00:20.790
and so here, I will add a new query, post which will get an input, an ID of that single post I want to

00:20.790 --> 00:21.580
fetch

00:22.930 --> 00:24.880
and will return a post in the end.

00:24.910 --> 00:28.750
This is how my query should look like in the schema definition.

00:28.780 --> 00:33.590
Now let's of course also add a resolver for this single post and for that,

00:33.610 --> 00:35.910
I'll go to my resolvers.js file,

00:35.940 --> 00:37.330
add it down there,

00:37.330 --> 00:43.060
use the async function syntax like this

00:44.630 --> 00:46.310
and in that function here,

00:46.430 --> 00:52.990
just as in the function up there, I'll get arguments and the request object, with object destructuring

00:53.270 --> 00:58.000
I can get my post ID or whatever you chose as a name here,

00:58.010 --> 01:01.660
so in my case just ID out of that request

01:01.700 --> 01:09.230
arguments object. I get the request object as well and first of all, I can check whether the user is authenticated.

01:09.420 --> 01:17.750
So I will copy this check and add this here and then as a next step, I will add the logic to retrieve

01:17.750 --> 01:21.610
a single post and for that,

01:21.830 --> 01:29.990
I'll get my post by awaiting post find by ID for the ID I get as an argument.

01:30.140 --> 01:37.160
Now I will also populate the creator here so that we have all the user data and not just the ID and

01:37.160 --> 01:47.200
thereafter, I'll check if we did not find a post in which case I'll create a new error, no post found and

01:47.300 --> 01:51.790
also set a code of 404 and throw the error

01:51.980 --> 01:59.390
but if we make it after or past this if check, we know we have a post and then I'll return an object where

01:59.390 --> 02:07.290
I get all the data from that post and then again I overwrite the ID because I can't return object IDs,

02:07.680 --> 02:16.420
so post_id to string and the same for createdAt because I can't return dates, createdAt

02:16.630 --> 02:25.850
to ISO string and updateAt will also be changed to ISO string.

02:25.900 --> 02:30.280
With that in place, I have everything I need to fetch a single post

02:30.310 --> 02:35.600
I'd say, let's now go back to the frontend and wire that up and there,

02:35.620 --> 02:37.500
I'm interested in a single post in the

02:37.540 --> 02:42.490
well single post page here. In there, in componentDidMount

02:42.490 --> 02:45.640
I'm sending my request and I'll again adjust the

02:45.640 --> 02:56.610
url to go to localhost8080/graphql, the method here will be a post request. For the

02:56.610 --> 02:57.320
headers

02:57.330 --> 03:08.340
I add my content type application json header and I will need to prepare my graphql query here

03:09.070 --> 03:17.530
which is as before an object with a query key and then the query is surrounded by these back ticks and in

03:17.530 --> 03:18.020
there,

03:18.100 --> 03:21.130
well I want to reach out to my post query.

03:21.370 --> 03:29.850
I will send my ID, so my post ID I get up there, should be surrounded with quotation marks

03:31.240 --> 03:33.800
and regarding the fields that I'm interested in,

03:33.880 --> 03:41.250
well thereafter I use the creator name, the title, the image url, the date, the createdAt date

03:41.260 --> 03:43.240
to be precise and the content,

03:43.630 --> 03:52.600
so I want to fetch that. I want to fetch the title, content, image url, creator and for the creator, only

03:52.600 --> 03:53.540
the name

03:53.710 --> 03:57.510
and then also createdAt. That is what I'm interested in

03:57.760 --> 04:01.570
and this is now what I will append as a body to my request,

04:01.570 --> 04:10.740
so json stringify and add this graphql query here. With that, we are sending that request as you learn

04:10.740 --> 04:12.230
before, handling the error

04:12.240 --> 04:14.110
there will not really work,

04:14.160 --> 04:20.890
we want to handle that error after we parsed the response data and then we can check for errors,

04:20.910 --> 04:24.930
so I'll copy that logic from feed.js into single post.js,

04:24.960 --> 04:30.900
here where I check if we have any erros and then I throw an error. If we have no errors,

04:30.930 --> 04:36.640
we just need to drill into the response and for that, you must not forget how your schema looks like.

04:37.680 --> 04:44.490
We'll have data, then we have that name of the query which is post and then we can access our different

04:44.490 --> 04:46.460
post properties.

04:46.500 --> 04:54.760
So here we access res data.data and then indeed, .post, .title and so on.

04:54.820 --> 05:01.470
So just .data has to be added to all these places where I extract some data

05:04.230 --> 05:09.990
and with that, I should be able to load a single post. Save that and make sure your backend is saved

05:10.140 --> 05:13.590
and click on view and looks like I have an error

05:13.590 --> 05:14.170
in my url,

05:14.280 --> 05:18.040
yes this colon needs to go and

05:18.050 --> 05:23.740
now let's click view, I get user login failed.

05:23.840 --> 05:26.810
That is the wrong error message I copied there,

05:27.170 --> 05:29.970
fetching post failed but somehow it failed so 

05:29.990 --> 05:32.140
let's quickly check what's wrong.

05:32.720 --> 05:35.450
Yes there is a syntax error in the query,

05:35.450 --> 05:44.580
we need to have surrounding curly braces around the overall query. So edit your query to have an opening and

05:44.580 --> 05:49.010
closing curly brace right at the start and end and thereafter

05:49.350 --> 05:54.650
if you click on a single post, now you'll load the post data there.

05:54.880 --> 05:56.200
So this is now working,

05:56.350 --> 06:00.150
what's missing is a possibility to edit and delete posts

06:00.250 --> 06:02.980
and of course to work with the user status.

06:03.010 --> 06:04.730
So let's work on that next.
