WEBVTT

00:02.180 --> 00:04.020
So let's wrap this module up

00:04.040 --> 00:09.720
and right before we finish, let's actually start wrapping it up by improving our code a little bit.

00:09.980 --> 00:16.220
We've got all this code in this file and actually typically you write multiples or work with multiple

00:16.220 --> 00:17.010
files

00:17.450 --> 00:23.880
and why don't we create a new file that actually contains our routing logic,

00:23.960 --> 00:27.590
so the logic where we check the url and do different things.

00:27.890 --> 00:30.930
So I'll create a new file here, routes.js,

00:30.980 --> 00:35.670
the name is up to you and I get this special icon by my IDE,

00:35.690 --> 00:37.340
it is a normal javascript file,

00:37.340 --> 00:38.710
don't be confused.

00:38.780 --> 00:45.830
And in that file, I basically want to have my if statements here and my default response code,

00:46.070 --> 00:52.840
so I'll cut all of that out of here so that this is a pretty lean file and move it into routes.js.

00:52.850 --> 00:54.400
Now this wouldn't work like that,

00:54.410 --> 00:56.290
let me say that, we'll have to tweak that

00:56.660 --> 00:59.300
but this is now the code moved over.

00:59.600 --> 01:01.640
I don't need the file system in

01:01.650 --> 01:04.410
app.js anymore so we can remove that import,

01:04.520 --> 01:10.130
we do need http because we still use that there and we don't need the url and method here so let's

01:10.130 --> 01:12.570
remove that, go over routes.js,

01:12.650 --> 01:16.500
add this fs imported on top

01:16.670 --> 01:18.860
and now start working with that.

01:18.890 --> 01:21.710
Now what do we need to do in this file?

01:21.710 --> 01:25.800
We somehow need to be able to connect app.js to routes.js,

01:25.820 --> 01:26.430
right

01:26.450 --> 01:31.430
because we need to be able to send our incoming request to that file

01:31.460 --> 01:38.890
so to say. And for that, let's create a new function, I'll name it

01:40.200 --> 01:45.360
request handler and we can either create a function like this,

01:45.360 --> 01:51.450
it should receive request and response as arguments, just as this function does because we'll effectively

01:51.450 --> 01:56.340
replace that function or we use an ES6 function,

01:56.340 --> 02:02.580
storing it in a constant, request handler which looks like this. Bit of a strange syntax if you've never

02:02.580 --> 02:08.090
seen it before but we're essentially creating an anonymous arrow function which we store in a constant

02:08.160 --> 02:10.970
and this therefore is the function name.

02:10.980 --> 02:18.360
Now here we again receive request and response and in that function, we now move all that code because

02:18.360 --> 02:21.320
that code obviously uses the request and response object,

02:21.330 --> 02:27.690
so we need to have them available as local variables and we do now because these arguments are now named

02:27.720 --> 02:28.920
this way.

02:28.920 --> 02:31.180
We also use url and method,

02:31.260 --> 02:39.510
so we need to re-add these constants by getting that data out from the request, request url and request

02:39.570 --> 02:47.440
method and now we just need to export this handler. We're importing with this require syntax

02:47.450 --> 02:50.750
but how are we exporting in nodejs?

02:50.880 --> 02:53.010
There are two ways of exporting,

02:53.090 --> 02:58.350
the first one is to go at the bottom and add module.exports,

02:58.370 --> 03:06.500
this is another keyword or object which is exposed globally to you by nodejs which has an exports

03:06.740 --> 03:07.680
property

03:08.000 --> 03:12.550
and we can assign a value to this, like our request handler,

03:12.560 --> 03:18.080
so this constant which holds this function, it's now stored in module exports.

03:18.170 --> 03:23.740
And since this is a global object exposed by node, node is actually able to work with this

03:23.900 --> 03:32.450
and we can now import from that routes.js file by requiring it and node will look for module exports

03:32.450 --> 03:37.600
and see if something was registered for this file here

03:37.640 --> 03:43.180
and we do register something in module exports, the request handler and you can register anything here.

03:43.280 --> 03:48.600
You can add a new javascript object with multiple key value pairs, whatever you need, here

03:48.620 --> 03:50.830
I'll just register my function.

03:51.320 --> 03:58.250
So now I can go back to app.js and import my routes, the name of that constant is up to you,

03:58.880 --> 04:00.720
by requiring it

04:00.740 --> 04:06.660
and since this is now not a global module, we don't just type routes,

04:06.860 --> 04:15.740
instead we want to add a local path to it with ./ and you can omit .js because nodejs

04:15.740 --> 04:17.920
will automatically attach this at the end.

04:18.050 --> 04:19.240
You can add it though

04:19.370 --> 04:20.860
but I'll just type

04:20.890 --> 04:26.900
./routes separated from the core modules to make it really clear that this is a custom

04:26.900 --> 04:27.730
file

04:27.890 --> 04:31.360
and now node will go ahead and look for a routes.js

04:31.410 --> 04:38.390
file in the same folder as app.js which it will find and in that file, it will look for module

04:38.390 --> 04:41.460
exports and see what's registered in there

04:41.550 --> 04:46.250
and now we export that request handler method and now we can use that,

04:46.280 --> 04:51.890
it will be stored in that routes because we assign whatever is exported from that file in that routes

04:51.890 --> 04:52.780
constant,

04:53.000 --> 04:57.600
so this routes constant will ultimately hold this function

04:57.830 --> 05:01.250
and now we can use that here as a handler,

05:01.380 --> 05:03.390
routes. Don't execute it,

05:03.410 --> 05:11.300
so no parentheses, just pass the name telling node hey please execute the function that's stored in

05:11.300 --> 05:13.560
routes for incoming requests.

05:14.560 --> 05:21.670
And now if we save that and we restart the server and we reload this page, this is looking good

05:22.800 --> 05:24.240
and this is also looking good,

05:24.300 --> 05:28.320
we should have tests stored in message.text and we do.

05:28.620 --> 05:35.310
So now we simply split our code over two files, having one file which is very lean that just spins

05:35.310 --> 05:36.190
up the server

05:36.360 --> 05:38.040
but and that's important,

05:38.100 --> 05:45.090
that also creates a connection to another file through that import and through that export where we

05:45.090 --> 05:49.480
export our request handler function here.

05:49.590 --> 05:51.570
This is how that works,

05:51.570 --> 05:58.860
now one important note about nodes module system, the file content here is actually cached by node and

05:58.860 --> 06:00.970
we can't edit it externally,

06:01.050 --> 06:07.470
so if we somehow would define routes as an object and we tried to add a new property on the fly here, this

06:07.470 --> 06:10.340
would not manipulate the original file,

06:10.350 --> 06:14.140
so this is basically logged, not accessible from outside,

06:14.160 --> 06:18.820
we can only export stuff that we can now read from outside. Though

06:18.870 --> 06:24.120
you could have functions which you export that start changing stuff inside of that file

06:24.270 --> 06:26.540
but let's not make that too complicated for now,

06:26.550 --> 06:31.520
we'll see all of that throughout the course obviously. For now we have that connection,

06:31.770 --> 06:36.650
there's one other syntax you could use, instead of module exports,

06:36.720 --> 06:44.780
sometimes you export many things and you could do that by having an object which has like the handler

06:44.790 --> 06:47.930
key and that is my request handler function

06:48.060 --> 06:55.930
and then also it has some text key which is some hardcoded text

06:55.930 --> 07:02.500
in this case, now we would export two things and that is how you can group that or separate these two

07:02.500 --> 07:06.990
things and still have one export being managed here which is the most you can have

07:07.390 --> 07:11.940
and now in app.js, routes would be that object and not that function.

07:11.950 --> 07:16.720
So here we would have to access the handler property,

07:16.720 --> 07:25.930
so this property which holds the function reference we want to use and we could also simply output console

07:26.140 --> 07:28.840
log routes some text here.

07:28.930 --> 07:32.590
So this is how we can have multiple exports in one file,

07:32.590 --> 07:38.720
now you see some hardcoded text here from this console log and we still have the same functionality

07:38.720 --> 07:39.660
as before.

07:40.760 --> 07:43.830
Now there also is a different way of exporting multiple things,

07:44.030 --> 07:52.100
besides this code which you can of course use, you can also have module.exports.handler request

07:52.100 --> 08:02.230
handler and then also module.exports. some text, some hardcoded text.

08:02.230 --> 08:05.550
Now it might look different but we still only have one export,

08:05.560 --> 08:12.490
we still have module exports which bundles all the exports but we explicitly assigned the different properties

08:12.490 --> 08:13.180
like this,

08:13.180 --> 08:15.990
so this is basically equivalent to this code.

08:16.270 --> 08:24.780
If I now save this and restart my server, we see some hardcoded text and if I submit this, it also

08:24.870 --> 08:26.170
still works.

08:26.170 --> 08:29.470
Last but not least, there is a shortcut for this syntax,

08:29.490 --> 08:32.820
you can now omit module and just write exports,

08:32.850 --> 08:37.760
this is simply a shortcut supported by nodejs, not some general javascript magic,

08:37.760 --> 08:45.690
it's just an explicit shortcut supported by nodejs where now we also have multiple exports being merged

08:45.690 --> 08:47.790
together into one export,

08:47.820 --> 08:49.880
so therefore again when I execute this,

08:49.890 --> 09:01.020
we see some hardcoded text and some last value being submitted here still works and still ends up in

09:01.020 --> 09:02.820
message.text.

09:02.850 --> 09:10.150
So this is how we can connect multiple files by exporting either one element, one function as we had

09:10.160 --> 09:15.460
it initially with module.exports equals request handler,

09:15.720 --> 09:16.050
right

09:16.050 --> 09:17.860
this is what we had initially,

09:17.910 --> 09:25.530
let me comment this out with two slashes in front of it or module exports pointing at an object to combine

09:25.530 --> 09:37.050
multiple things or using module.exports.handler equals request handler and module.exports.

09:37.050 --> 09:42.670
some text equal some text or again,

09:46.160 --> 09:51.740
this shortcut which is the same as this, just with this shortcut offered by nodejs.

09:51.780 --> 09:56.790
So this is how imports and exports work, how the module system works and we'll work with a lot of files

09:56.790 --> 09:57.480
throughout the course

09:57.470 --> 09:59.870
so this is important to understand.

10:00.050 --> 10:03.720
With that out of the way, let's now finally wrap this module up.
