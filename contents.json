{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "home",
      "children": [
        {
          "type": "file",
          "value": "home/1_motivation.md"
        },
        {
          "type": "file",
          "value": "home/2_resources.md"
        },
        {
          "type": "file",
          "value": "home/3_roadmap.md"
        },
        {
          "type": "dir",
          "name": "4_resource_itineraries",
          "children": [
            {
              "type": "dir",
              "name": "1_codevolution_nodejs_beginners",
              "children": [
                {
                  "type": "dir",
                  "name": "1_Definition_of_Node_js",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/1_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/2_ECMAScript.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/3_Chrome_V8_engine.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/4_JavaScript_Runtime.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/5_Nodejs_overview.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/6_Hello_world_and_setup.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/7_Browser_vs_Nodejs.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2_Modules_in_Node_js",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/11_Module_scope.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/12_Module_wrapper.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/13_Module_caching.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/14_Import_Export_patterns.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/15_module_exports_vs_exports.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/16_ES_modules.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/17_Importing_JSON_and_Watch_mode.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/18-Detect-run-as-main-or-module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/8_Definition_and_types_of_modules.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/9_Local_modules.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3_Built_in_modules",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/18_Built_in_modules.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/19_The_path_module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/20_Callback_pattern.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/21_Events_module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/22_Extending_from_EventEmitter.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/23_Character_sets_and_encoding.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/24_Streams_and_Buffers.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/25_Asynchronous_JavaScript.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/26_fs_module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/27_fs_with_Promises.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/28_Streams.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/29_Pipes.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "4_HTTP_module",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/30_HTTP_module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/31_Creating_a_Node_server.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/32_JSON_response.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/33_HTML_response.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/34_HTML_templates.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/35_HTTP_routing.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/36_Web_frameworks.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5_Nodejs_internals",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/37_Nodejs_Runtime_recap.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/38_libuv.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/39_Thread_pool_deferring_till_48.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/40_Thread_pool_size_DEFER.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/41_The_Event_loop_DEFER.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6_npm",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/49_What_is_npm.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/50_package_json.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/51_Installing_packages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/52_Using_packages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/53_Dependencies.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/54_Versioning.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/55_global_packages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/56_npm_scripts.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/57_Publishing_an_npm_package.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "7_Creating_CLI_apps",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/58_Building_CLI_tools.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_1_CLI_options.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_2_process_variable.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_1_Keyboard-input-readline-module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_2_CLI_prompts.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "8_High_performance_constructs",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/61_Cluster_module.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/62_Worker_Threads_module.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "9_Miscellaneous",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/63_Deploying_Node_js_apps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/64_Wrapping_up.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/info.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/todo.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2_Node_js_complete_guide_academind",
              "children": [
                {
                  "type": "dir",
                  "name": "10_SQL_Introduction",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/135_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/136_Choosing_a_Database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/138_Comparison_overview.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/139_Setting_up_MySQL.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/140_Connecting_our_App_to_the_SQL_database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/141_Running_queries_in_our_app.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/142_General_SQL_questions.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "11_Understanding_Sequelize",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/149_What_is_an_ORM.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/150_Sequelize_concepts.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/151_Connecting_to_the_Database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/152_Defining_a_Model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/153_Syncing_Models_to_the_Database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/154_Queries.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/161_Creating_a_User_model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/162_Associations.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/163_Mock_User_Authentication.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/164_More_Sequelize_methods.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/165_Heuristics_for_associations_and_ORM_usage.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/166_Moving_on_with_the_project.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/173_Resetting_the_cart.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/174_Wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "12_Working_with_NoSQL_and_MongoDB",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/176_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/177_What_is_MongoDB.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/178_Relations_in_NoSQL_MongoDB.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/179_Setting_up_MongoDB.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/181_Creating_and_managing_the_connection.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/183_Creating_a_collection.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/184_Creating_models_and_instances.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/185_MongoDB_Compass.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/186_Fetching_products_multiple.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/187_Fetching_product_single.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_2_Getting_selected_attributes_only.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_Edit_and_delete_product.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/189_Updating_attributes_nested_paths_remotely.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/190_Mongodb_array_ops.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/194_Creating_the_User_model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/195_Storing_associated_User_in_Product.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/196_The_Cart_model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/199_Get_cart_page.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/201_Cart_actions.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/202_Adding_the_Order_features.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/204_Getting_orders.md"
                    },
                    {
                      "type": "dir",
                      "name": "extras",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/1_limit_sort_and_count.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/2_query_operators.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/3_in_oneOf.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/4_Get_all_collections.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/5_Dropping_collections.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/tempREADME_archived.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/todo_archived.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "13_Working_with_Mongoose",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/209_Module_Introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/210_Core_concepts_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Connection_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Using_MongoDB_and_Mongoose_together.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/212_Creating_Schemas_and_Models.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/213_Saving_data_through_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/214_Fetching_products.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/215_lean_and__doc_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/216_Editing_and_deleting_Products.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/217_Updating_attributes_nested_paths_remotely_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/218_Adding_the_Cart_model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/219_Using_relations_ref_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/220_How_the_3_relations_work_in_NoSQL.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/221_select_and_populate.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_1_Add_custom_model_methods.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_2_Query_helpers.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/223_exec_and_execPopulate_in_Mongoose.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/224_Adding_the_Order_model_and_features.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/228_timestamps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/229_Wrap_up.md"
                    },
                    {
                      "type": "dir",
                      "name": "extras",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/1_limit_sort_and_count_Mongoose.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/2_query_operators_in_Mongoose.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/3_in_oneOf_in_Mongoose.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/4_ObjectId_in_Mongoose.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/tempREADME_archived.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "14_Sessions_and_Cookies",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/230_Module_intro.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/231_Cookies_and_Session_Fundamentals.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/232_Add_login_flow.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/233_Cookie_code.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/234_Sessions_code.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/235_Cookie_experiments.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/info.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "18_Understanding_Validation",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/289_Validation_why_and_how.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/290_3_layers_of_validation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/291_Validation_as_middlewares.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/292_express_validator_package_and_two_piece_arch.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/293_Chainability_and_custom_error_messages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/294_Custom_validators.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/295_More_validators.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/296_Validating_multiple_fields_mutually.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/297_Async_validation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/298_Save_users_work_UX.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/301_Sanitization.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/304_Wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "19_Error_Handling",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/306_Module_intro_and_the_error_sink.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/311_Throw_error_page.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/312_Express_default_error_handler_middleware.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/313_Creating_the_error_sink.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/315_HTTP_status_codes.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/316_Unhandled_async_errors_missing_await.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/317_wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "1_Introduction",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/5_Understanding_the_role_and_usage_of_Node.js.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/6_Course_Outline.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "20_File_uploads_and_downloads",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/319_Module_intro.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/320_Adding_a_file_picker_on_the_frontend.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/321_Handling_Multipart_Formdata.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/322_Handling_body_with_multer.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/323_Configuring_multer.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/324_Filter_file_types.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/325_Storing_File_in_database.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/326_Serving_saved_assets.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/328_Downloading_files_with_Authentication.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/329_Setting_file_type_during_send.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/331_Streaming_vs_preloading_data.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/332_PDFKit_runtime_PDF_generation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/334_Deleting_files.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/336_Wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "21_Pagination",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/338_Module_intro.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/339_Pagination_general_contract.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/340_Implementing_pagination.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "22_Understanding_Async_Requests_AJAX",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/22_Understanding_Async_Requests_AJAX/347_Just_AJAX.md.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "23_Adding_Payments",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/23_Adding_Payments/info.md.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "24_REST_APIs_Basics",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/359_Module_intro.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/360_API_general_flow.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/361_API_Data_formats.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/362_Routing_and_HTTP_methods.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/363_REST_and_core_principles.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/365_CORS_error.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "25_Making_API_app",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/25_Making_API_app/370_Module_Intro.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3_Understanding_the_basics",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/25_How_the_Web_works.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/27_The_Node_lifecycle_and_Event_loop.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/29_Understanding_Requests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/30_Sending_Responses.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/32_Routing_requests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/33_Redirecting_requests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/34_Parsing_Request_bodies.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/39_Wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "4_Improved_Development_Workflow_and_Debugging",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/4_Improved_Development_Workflow_and_Debugging/51_Using_the_Debugger.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5_Express_js",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/57_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/58_What_is_Express_js.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/59. Installing Express.js.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/60_Adding_Middlewares.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_1_Handling_routes.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_2_Handling_HTTP_methods.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/62_Express_Router.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/63_Chain_of_middlewares.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/64_Conditional_middlewares.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/66_Responses.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/67_Requests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/todo.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6_1_Sending_vanilla_HTML",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/69_Creating_HTML_pages.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/70_Adding_404_page.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/71_Serving_Files_Statically.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/75_Assignment_3.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/76_Section_5_wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6_2_Templating_Engines_and_Dynamic_content",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/78_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/79_Sharing_Data_across_Requests_and_Users.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/80_Template_engines_overview.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/81_Installing_Pug_and_using_it.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/82_Layouts_in_Pug.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/83_Handlebars_skipping.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/84_EJS.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "7_The_MVC_pattern",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/104_Wrap_up.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/96_Module_intro.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/97_What_is_MVC.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/98_Adding_controllers.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/99_Adding_models.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/defer.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "8_Enhancing_the_shop_app_optional",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/8_Enhancing_the_shop_app_optional/107_Create_the_Shop_structure.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "9_Dynamic_routes_and_Advanced_Models",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/115_Module_introduction.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/118_Adding_Product_ID_to_the_path.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/119_Extracting_Dynamic_Params.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/122_Passing_data_with_POST_Requests.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/123_Adding_a_Cart_Model.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/124_Continuing_on.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/133_Wrap_up.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "home/5_projects.md"
        },
        {
          "type": "file",
          "value": "home/6_setup.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "tooling",
      "children": [
        {
          "type": "file",
          "value": "tooling/README.md"
        },
        {
          "type": "dir",
          "name": "obsidian-templates",
          "children": [
            {
              "type": "file",
              "value": "tooling/obsidian-templates/README.md"
            },
            {
              "type": "dir",
              "name": "templater",
              "children": [
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/timestamp.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/title_and_date.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/w2h.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "vault",
      "children": [
        {
          "type": "dir",
          "name": "1_Setup",
          "children": [
            {
              "type": "file",
              "value": "vault/1_Setup/Environment_variables.md"
            },
            {
              "type": "file",
              "value": "vault/1_Setup/Node_versions.md"
            },
            {
              "type": "file",
              "value": "vault/1_Setup/fetch-available-v18.md"
            }
          ]
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# nodejs\nNodejs as a way of doing back end web development\n\nnotes\n\nParent note repo - https://github.com/sanjar-notes/web-dev-backend\n\n<details><summary>caveat</summary>\n  \n  I already had working experience with server-side apps in Ruby on Rails, Node.js and React.js, but it wasn't a granular study. Since I already know that, I skip stuff like JavaScript lang, AJAX, HTTP verbs, and frontend concepts. \n  *I still have links and short notes for such stuff, btw*.\n</details> \n",
      "html": "<h1 id=\"nodejs\">nodejs <a class=\"heading-anchor-permalink\" href=\"#nodejs\">#</a></h1>\n<p>Nodejs as a way of doing back end web development</p>\n<p>notes</p>\n<p>Parent note repo - <a href=\"https://github.com/sanjar-notes/web-dev-backend\">https://github.com/sanjar-notes/web-dev-backend</a></p>\n<details><summary>caveat</summary>\n<p>I already had working experience with server-side apps in Ruby on Rails, Node.js and React.js, but it wasn’t a granular study. Since I already know that, I skip stuff like JavaScript lang, AJAX, HTTP verbs, and frontend concepts.\n<em>I still have links and short notes for such stuff, btw</em>.</p>\n</details> \n",
      "id": 0
    },
    {
      "path": "home/1_motivation.md",
      "url": "home/1_motivation.html",
      "content": "# 1. Motivation\nThe goal here is to implement what I have learn in backend web development [theory](https://github.com/sanjar-notes/web-dev-backend).\nNodejs is a runtime, not a framework.\n\nThis repository will contain knowledge about the differences of nodejs and the browser, and talk about various libraries framework available for the runtime.\n",
      "html": "<h1 id=\"1.-motivation\">1. Motivation <a class=\"heading-anchor-permalink\" href=\"#1.-motivation\">#</a></h1>\n<p>The goal here is to implement what I have learn in backend web development <a href=\"https://github.com/sanjar-notes/web-dev-backend\">theory</a>.\nNodejs is a runtime, not a framework.</p>\n<p>This repository will contain knowledge about the differences of nodejs and the browser, and talk about various libraries framework available for the runtime.</p>\n",
      "id": 1
    },
    {
      "path": "home/2_resources.md",
      "url": "home/2_resources.html",
      "content": "# 2. Resources\nCreated Monday 13 February 2023 at 05:18 am\n\n1. [Codevolution - Node.js fundamentals for beginners](https://youtube.com/playlist?list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY) - core Node.js, basic modules, http module. Does not talk about specific app development libraries/frameworks. Finished, except event loop notes.\n2. [Academind @Udemy - NodeJS - The Complete Guide (MVC, REST APIs, GraphQL, Deno)](https://www.udemy.com/course/nodejs-the-complete-guide/) - a broad course with significant depth about creating backend apps.\n3. Udacity 253 (Web Development) - [YouTube playlist](https://www.youtube.com/playlist?list=PLAwxTw4SYaPlLXUhUNt1wINWrrH9axjcI) (434 videos, 14 hours). Taught by Steve Huffan (Reddit CEO). Covers low level, high level, caching, data clusters everything.",
      "html": "<h1 id=\"2.-resources\">2. Resources <a class=\"heading-anchor-permalink\" href=\"#2.-resources\">#</a></h1>\n<p>Created Monday 13 February 2023 at 05:18 am</p>\n<ol>\n<li><a href=\"https://youtube.com/playlist?list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY\">Codevolution - Node.js fundamentals for beginners</a> - core Node.js, basic modules, http module. Does not talk about specific app development libraries/frameworks. Finished, except event loop notes.</li>\n<li><a href=\"https://www.udemy.com/course/nodejs-the-complete-guide/\">Academind @Udemy - NodeJS - The Complete Guide (MVC, REST APIs, GraphQL, Deno)</a> - a broad course with significant depth about creating backend apps.</li>\n<li>Udacity 253 (Web Development) - <a href=\"https://www.youtube.com/playlist?list=PLAwxTw4SYaPlLXUhUNt1wINWrrH9axjcI\">YouTube playlist</a> (434 videos, 14 hours). Taught by Steve Huffan (Reddit CEO). Covers low level, high level, caching, data clusters everything.</li>\n</ol>\n",
      "id": 2
    },
    {
      "path": "home/3_roadmap.md",
      "url": "home/3_roadmap.html",
      "content": "",
      "html": "",
      "id": 3
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/1_Introduction.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/1_Introduction.html",
      "content": "# 1. Introduction\nCreated Sunday 22 January 2023 at 05:39 pm\n\n## What is Node.js\nAccording to https://nodejs.org, Node.js is \"an open-source, cross-platform, JavaScript runtime environment\".\n\n- Open source.\n- Cross platform - Node.js runs on Mac, Linux and Windows.\n- JavaScript runtime environment - ? will learn this here.\n\nNote: Node.js is also known as Node\n\n\n## Why learn Node.js\n- **One language** - Node.js can be used to build end-to-end apps in JavaScript. End-to-end meaning both the frontend and backend of a web-app.\n- **Popularity** - A number of major companies like LinkedIn, Netflix, PayPal all migrated (majorly) from other backend technologies to Node\n- **Job market** - Full stack development is a highly sought after skill by many companies\n- **Community** - Node.js has huge community support, including educational resources.\n\n\n## Course structure\n1. Learn terms and concepts needed to understand what is Node.js\n2. Modules (user defined)\n3. Built-in modules\n4. Node.js internals\n5. npm - Node package manager\n6. Project - build a CLI tool with Node.js\n7. Miscellaneous\n\nThis is **enough** to understand core Node.js - **the focus of this course**.\n\n**Practically** speaking, one uses libraries and frameworks that run on top of Node.js - that's a different skill set. Example - Express.js for web servers, Sequelize for ORM etc. **This is not covered in this course**.\n\n\n## Prerequisites\nJust one - modern JavaScript, including ES2015+ features.",
      "html": "<h1 id=\"1.-introduction\">1. Introduction <a class=\"heading-anchor-permalink\" href=\"#1.-introduction\">#</a></h1>\n<p>Created Sunday 22 January 2023 at 05:39 pm</p>\n<h2 id=\"what-is-node.js\">What is Node.js <a class=\"heading-anchor-permalink\" href=\"#what-is-node.js\">#</a></h2>\n<p>According to <a href=\"https://nodejs.org\">https://nodejs.org</a>, Node.js is “an open-source, cross-platform, JavaScript runtime environment”.</p>\n<ul>\n<li>Open source.</li>\n<li>Cross platform - Node.js runs on Mac, Linux and Windows.</li>\n<li>JavaScript runtime environment - ? will learn this here.</li>\n</ul>\n<p>Note: Node.js is also known as Node</p>\n<h2 id=\"why-learn-node.js\">Why learn Node.js <a class=\"heading-anchor-permalink\" href=\"#why-learn-node.js\">#</a></h2>\n<ul>\n<li><strong>One language</strong> - Node.js can be used to build end-to-end apps in JavaScript. End-to-end meaning both the frontend and backend of a web-app.</li>\n<li><strong>Popularity</strong> - A number of major companies like LinkedIn, Netflix, PayPal all migrated (majorly) from other backend technologies to Node</li>\n<li><strong>Job market</strong> - Full stack development is a highly sought after skill by many companies</li>\n<li><strong>Community</strong> - Node.js has huge community support, including educational resources.</li>\n</ul>\n<h2 id=\"course-structure\">Course structure <a class=\"heading-anchor-permalink\" href=\"#course-structure\">#</a></h2>\n<ol>\n<li>Learn terms and concepts needed to understand what is Node.js</li>\n<li>Modules (user defined)</li>\n<li>Built-in modules</li>\n<li>Node.js internals</li>\n<li>npm - Node package manager</li>\n<li>Project - build a CLI tool with Node.js</li>\n<li>Miscellaneous</li>\n</ol>\n<p>This is <strong>enough</strong> to understand core Node.js - <strong>the focus of this course</strong>.</p>\n<p><strong>Practically</strong> speaking, one uses libraries and frameworks that run on top of Node.js - that’s a different skill set. Example - Express.js for web servers, Sequelize for ORM etc. <strong>This is not covered in this course</strong>.</p>\n<h2 id=\"prerequisites\">Prerequisites <a class=\"heading-anchor-permalink\" href=\"#prerequisites\">#</a></h2>\n<p>Just one - modern JavaScript, including ES2015+ features.</p>\n",
      "id": 4
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/2_ECMAScript.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/2_ECMAScript.html",
      "content": "# 2. ECMAScript\nCreated Sunday 22 January 2023 at 06:28 pm\n\n## Interactivity, scripting languages and browser wars\nOne of the first popular web browsers was Netscape Navigator (released in 1994). There were some problems with this browser:\n1. It lacked dynamic behavior\n2. Supported static web pages only\n3. There was no interactivity after a page was loaded.\n\nTo address these problems, Netscape (the company behind Netscape Navigator) created a new *scripting* language called \"JavaScript\". The name was purely for marketing purpose since Java was the *\"hot new language\"*.\n\nNote: Java and JavaScript have nothing in common by design, except the C-like syntax.\n\nDuring the same time, **Microsoft** debuted their web browser - Internet Explorer (aka IE). This led to a browser war between Netscape and Microsoft. Microsoft realized that JavaScript fundamentally changed the browsing experience of the web, so, they wanted to have a similar *\"scripting\"* language for IE.\n\nSince Microsoft had no specification to follow, they reverse engineered Netscape Navigator's interpreter to create their own language called \"JScript\".\n\n\n## Compatibility, developer experience\nSince there was no standard, Netscape's \"JavaScript\" and Microsoft's \"JScript\" had very different implementations.\n\nThis became a big problem for developers, because they now had write each feature twice - for the two platforms. \n\nMany companies could not afford this double work - so tags like \"Best viewed in IE\" and \"Best viewed in Netscape\" came up.\n\n\n## Standardization and ECMA international\nTo resolve these issues, Netscape submitted JavaScript to Ecma International in 1996.\n\nEcma International is an industry association dedicated to standardization of information and communication systems.\n\nNetscape wanted a standard specification that all browser vendors could conform to as it would help keep other implementations consistent across browsers.\n\nFor each new specification, Ecma provides a standard specification and a committee.\n\nIn case of JavaScript, the standard is called ECMA-262 and the committee that works on this is called Technical Committee-39 (TC-39).\n\n## ECMAScript\nEcma used \"ECMAScript\" to talk about the resulting official language, because \"JavaScript\" is a trademark owned by Oracle.\n\nSo, ECMAScript refers to the standard language whereas JavaScript is the language we use in practice that is built on top of ECMAScript.\n\nES2015+ is called modern JavaScript.\n\nIn practice, JavaScript and ECMAScript are used interchangeably.",
      "html": "<h1 id=\"2.-ecmascript\">2. ECMAScript <a class=\"heading-anchor-permalink\" href=\"#2.-ecmascript\">#</a></h1>\n<p>Created Sunday 22 January 2023 at 06:28 pm</p>\n<h2 id=\"interactivity%2C-scripting-languages-and-browser-wars\">Interactivity, scripting languages and browser wars <a class=\"heading-anchor-permalink\" href=\"#interactivity%2C-scripting-languages-and-browser-wars\">#</a></h2>\n<p>One of the first popular web browsers was Netscape Navigator (released in 1994). There were some problems with this browser:</p>\n<ol>\n<li>It lacked dynamic behavior</li>\n<li>Supported static web pages only</li>\n<li>There was no interactivity after a page was loaded.</li>\n</ol>\n<p>To address these problems, Netscape (the company behind Netscape Navigator) created a new <em>scripting</em> language called “JavaScript”. The name was purely for marketing purpose since Java was the <em>“hot new language”</em>.</p>\n<p>Note: Java and JavaScript have nothing in common by design, except the C-like syntax.</p>\n<p>During the same time, <strong>Microsoft</strong> debuted their web browser - Internet Explorer (aka IE). This led to a browser war between Netscape and Microsoft. Microsoft realized that JavaScript fundamentally changed the browsing experience of the web, so, they wanted to have a similar <em>“scripting”</em> language for IE.</p>\n<p>Since Microsoft had no specification to follow, they reverse engineered Netscape Navigator’s interpreter to create their own language called “JScript”.</p>\n<h2 id=\"compatibility%2C-developer-experience\">Compatibility, developer experience <a class=\"heading-anchor-permalink\" href=\"#compatibility%2C-developer-experience\">#</a></h2>\n<p>Since there was no standard, Netscape’s “JavaScript” and Microsoft’s “JScript” had very different implementations.</p>\n<p>This became a big problem for developers, because they now had write each feature twice - for the two platforms.</p>\n<p>Many companies could not afford this double work - so tags like “Best viewed in IE” and “Best viewed in Netscape” came up.</p>\n<h2 id=\"standardization-and-ecma-international\">Standardization and ECMA international <a class=\"heading-anchor-permalink\" href=\"#standardization-and-ecma-international\">#</a></h2>\n<p>To resolve these issues, Netscape submitted JavaScript to Ecma International in 1996.</p>\n<p>Ecma International is an industry association dedicated to standardization of information and communication systems.</p>\n<p>Netscape wanted a standard specification that all browser vendors could conform to as it would help keep other implementations consistent across browsers.</p>\n<p>For each new specification, Ecma provides a standard specification and a committee.</p>\n<p>In case of JavaScript, the standard is called ECMA-262 and the committee that works on this is called Technical Committee-39 (TC-39).</p>\n<h2 id=\"ecmascript\">ECMAScript <a class=\"heading-anchor-permalink\" href=\"#ecmascript\">#</a></h2>\n<p>Ecma used “ECMAScript” to talk about the resulting official language, because “JavaScript” is a trademark owned by Oracle.</p>\n<p>So, ECMAScript refers to the standard language whereas JavaScript is the language we use in practice that is built on top of ECMAScript.</p>\n<p>ES2015+ is called modern JavaScript.</p>\n<p>In practice, JavaScript and ECMAScript are used interchangeably.</p>\n",
      "id": 5
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/3_Chrome_V8_engine.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/3_Chrome_V8_engine.html",
      "content": "# 3. Chrome's V8 engine\nCreated Sunday 22 January 2023 at 09:00 pm\n\n## JavaScript engines\nJavaScript is a high level lang. A JavaScript engine converts JS code to machine code that can be run directly.\n\nEngines are typically developed by web browser vendors. Some popular ones are:\n- V8 - open-source, powers Google Chrome and developed by the same team\n- SpiderMonkey - powers Mozilla Firefox\n- JavaScriptCore - open-source, powers Safari. Developed by Apple\n- Chakra - developed for the original Microsoft Edge (the latest one uses V8)\n\nOur **focus** is on V8, since it's at the core of Node.js.\n\n\n## V8\nLet's see the V8 source code.\n\n- Implements ECMA-262\n- Written in C++\n- It can run standalone, or can be *embedded* into any C++ application. **This fact helped in the creation of Node.js**.\n\nSince C++ is great for low level operations like file handling, database connections, network operations - and as V8 is a JS <--> C++ bridge, we can now use JavaScript outside the browser.\n\nSo, all we need to do is create *a C++ program* that embeds V8.\n\nThis *C++ program* with a lot of other functionality is Node.js.\n\n\n## Summary\n- In 2008, Google created a JS engine called V8.\n- V8 can be used independently or as a part in C++ programs.\n- This means we can write a C++ program that accepts JS and interacts with the computer (outside the browser). This is the core idea behind Node.js.",
      "html": "<h1 id=\"3.-chrome%E2%80%99s-v8-engine\">3. Chrome’s V8 engine <a class=\"heading-anchor-permalink\" href=\"#3.-chrome%E2%80%99s-v8-engine\">#</a></h1>\n<p>Created Sunday 22 January 2023 at 09:00 pm</p>\n<h2 id=\"javascript-engines\">JavaScript engines <a class=\"heading-anchor-permalink\" href=\"#javascript-engines\">#</a></h2>\n<p>JavaScript is a high level lang. A JavaScript engine converts JS code to machine code that can be run directly.</p>\n<p>Engines are typically developed by web browser vendors. Some popular ones are:</p>\n<ul>\n<li>V8 - open-source, powers Google Chrome and developed by the same team</li>\n<li>SpiderMonkey - powers Mozilla Firefox</li>\n<li>JavaScriptCore - open-source, powers Safari. Developed by Apple</li>\n<li>Chakra - developed for the original Microsoft Edge (the latest one uses V8)</li>\n</ul>\n<p>Our <strong>focus</strong> is on V8, since it’s at the core of Node.js.</p>\n<h2 id=\"v8\">V8 <a class=\"heading-anchor-permalink\" href=\"#v8\">#</a></h2>\n<p>Let’s see the V8 source code.</p>\n<ul>\n<li>Implements ECMA-262</li>\n<li>Written in C++</li>\n<li>It can run standalone, or can be <em>embedded</em> into any C++ application. <strong>This fact helped in the creation of Node.js</strong>.</li>\n</ul>\n<p>Since C++ is great for low level operations like file handling, database connections, network operations - and as V8 is a JS &lt;–&gt; C++ bridge, we can now use JavaScript outside the browser.</p>\n<p>So, all we need to do is create <em>a C++ program</em> that embeds V8.</p>\n<p>This <em>C++ program</em> with a lot of other functionality is Node.js.</p>\n<h2 id=\"summary\">Summary <a class=\"heading-anchor-permalink\" href=\"#summary\">#</a></h2>\n<ul>\n<li>In 2008, Google created a JS engine called V8.</li>\n<li>V8 can be used independently or as a part in C++ programs.</li>\n<li>This means we can write a C++ program that accepts JS and interacts with the computer (outside the browser). This is the core idea behind Node.js.</li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/4_JavaScript_Runtime.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/4_JavaScript_Runtime.html",
      "content": "# 4. JavaScript Runtime\nCreated Monday 23 January 2023 at 12:52 am\n\n- A JavaScript runtime is a environment which provides all the necessary components needed to run a JavaScript program.\n- A runtime's components depend on the kind of tasks it does (\"with the outside world\"). For Example\n\t1. For a browser - the runtime consists browser APIs (DOM, Storage, Timers, etc) and other things.\n\t2. For a server - the runtime consists of bindings that can interface with operating system utilities.\n\t3. Game runtime (guess) - might consist of how to change stuff on screen, interact with the GPU, sound system. The engine would be the one running the JS code.\n- Additionally, a runtime may also implement constructs that are not specified in the language specification, or things a standard language compiler/interpreter (if something like this exists) doesn't implement.\n- In case of both the Node.js and Chrome Browser, the *single threaded non-blocking* nature of JavaScript (as specified by ECMA-262) is implemented outside the engine, and as part of the runtime. The constructs which make this \"nature\" possible are:\n\t1. **Task queues** - callback (aka task) queue and the micro-task queue\n\t2. An **event loop** - a bridge between the engine and queues that actually runs code.\n![](../../../../assets/4_JavaScript_Runtime-image-1-e0590904.png)\nNote:\n1. Responsibilities of an engine and the runtime are not clearly defined. The only concrete thing that can be said here is that a runtime is a complete/practical thing, whereas an engine is more of a compiler.\n2. I've used runtime to mean both (engine + \"components of the runtime other than engine\") and to mean \"components of the runtime other than engine\". Both are used interchangeably.\n\n- Let's visualize the components - the engine is what converts the code to/from a language various parts of the runtime can understand. The runtime components then talk to the OS. Diagrammatically:\n1. Engine <-- consumes JS\n2. Engine <--> Runtime\n3. Runtime <--> OS\n4. OS <--> Hardware\n5. Hardware <--> Outside world\n\nIn a nutshell, a JavaScript runtime is a program that let's us run JavaScript outside the browser (in the real world - meaning \"all terminal commands work\").\n",
      "html": "<h1 id=\"4.-javascript-runtime\">4. JavaScript Runtime <a class=\"heading-anchor-permalink\" href=\"#4.-javascript-runtime\">#</a></h1>\n<p>Created Monday 23 January 2023 at 12:52 am</p>\n<ul>\n<li>A JavaScript runtime is a environment which provides all the necessary components needed to run a JavaScript program.</li>\n<li>A runtime’s components depend on the kind of tasks it does (“with the outside world”). For Example\n<ol>\n<li>For a browser - the runtime consists browser APIs (DOM, Storage, Timers, etc) and other things.</li>\n<li>For a server - the runtime consists of bindings that can interface with operating system utilities.</li>\n<li>Game runtime (guess) - might consist of how to change stuff on screen, interact with the GPU, sound system. The engine would be the one running the JS code.</li>\n</ol>\n</li>\n<li>Additionally, a runtime may also implement constructs that are not specified in the language specification, or things a standard language compiler/interpreter (if something like this exists) doesn’t implement.</li>\n<li>In case of both the Node.js and Chrome Browser, the <em>single threaded non-blocking</em> nature of JavaScript (as specified by ECMA-262) is implemented outside the engine, and as part of the runtime. The constructs which make this “nature” possible are:\n<ol>\n<li><strong>Task queues</strong> - callback (aka task) queue and the micro-task queue</li>\n<li>An <strong>event loop</strong> - a bridge between the engine and queues that actually runs code.\n<img src=\"../../../../assets/4_JavaScript_Runtime-image-1-e0590904.png\" alt=\"\">\nNote:</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>Responsibilities of an engine and the runtime are not clearly defined. The only concrete thing that can be said here is that a runtime is a complete/practical thing, whereas an engine is more of a compiler.</li>\n<li>I’ve used runtime to mean both (engine + “components of the runtime other than engine”) and to mean “components of the runtime other than engine”. Both are used interchangeably.</li>\n</ol>\n<ul>\n<li>Let’s visualize the components - the engine is what converts the code to/from a language various parts of the runtime can understand. The runtime components then talk to the OS. Diagrammatically:</li>\n</ul>\n<ol>\n<li>Engine &lt;-- consumes JS</li>\n<li>Engine &lt;–&gt; Runtime</li>\n<li>Runtime &lt;–&gt; OS</li>\n<li>OS &lt;–&gt; Hardware</li>\n<li>Hardware &lt;–&gt; Outside world</li>\n</ol>\n<p>In a nutshell, a JavaScript runtime is a program that let’s us run JavaScript outside the browser (in the real world - meaning “all terminal commands work”).</p>\n",
      "id": 7
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/5_Nodejs_overview.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/5_Nodejs_overview.html",
      "content": "# 5. Node.js overview\nCreated Monday 23 January 2023 at 01:20 am\n\n\n## What is Node.js? (revisit)\nLet's go back to the definition. Node.js is open-source, cross-platform JavaScript runtime environment. We understood all parts.\n\n\n## What can one build with Node.js\nSince Node.js can run outside the browser, it opens a new world of possibilities. Some examples:\n1. Traditional websites <details><summary>(but Node.js runs only outside the browser, right?)</summary>Yes. But we can have frontend libraries/frameworks that spit out HTML, CSS, JS in an automated way. We can do this with any language, but it's easier to have a system in the same language (isn't that the primary reason why we made Node.js, 😅😂)</details>\n2. Backend services like APIs\n3. Real-time applications\n4. Streaming services\n5. CLI tools\n6. Multiplayer games\n7. Anything that any other general purpose programming language can do.\n\nThe crux is that Node.js allows us to build complex and powerful applications.\n\n\n## Components of Node.js (exploring the source code)\n- **deps** (dependencies - external code Node uses). Some are:\n\t- V8 - JS engine\n\t- libuv - provides Node.js access to OS features like filesystem, networking. But the unique feature is a fully featured event loop. Also provides process constructs (IPC, child processes, thread pools, locks, sync primitives).\n\t- crypto - cryptography tool library.\n\n![](../../../../assets/5_Nodejs_overview-image-1-e0590904.png)\n- **src** (source) folder - contains the C++ code of Node.js. Since JavaScript was not designed to run outside the browser (but C++ was) the code here implements the features of Node.js like filesystem, networking.\n\n![](../../../../assets/5_Nodejs_overview-image-2-e0590904.png)\n- **lib** - contains JS code (functions, classes) that apps will use.\n\t- OS level functions - `fs`, `http`\n\t- utility functions\n\t- This is the final component that faces the application (JS) code.\n\n![](../../../../assets/5_Nodejs_overview-image-3-e0590904.png)\n\nNote:\n- Unlike the browser runtime, the Node.js does not implement `window`, `document` or other \"browser APIs\", since it's does no tasks of that could need these.\n\n\n## Summary\n- Node.js is _plug_definition_here_\n- It's a runtime - not a language, library or framework.\n- It can execute JavaScript outside the browser.\n- It can execute not only standard ECMAScript but also new syntax and features that are made available through C++ bindings using the V8 engine.\n- Node.js consists of C++ files which form it's core features and it exposes them through JavaScript files, to make system programming accessible via JavaScript.\n",
      "html": "<h1 id=\"5.-node.js-overview\">5. Node.js overview <a class=\"heading-anchor-permalink\" href=\"#5.-node.js-overview\">#</a></h1>\n<p>Created Monday 23 January 2023 at 01:20 am</p>\n<h2 id=\"what-is-node.js%3F-(revisit)\">What is Node.js? (revisit) <a class=\"heading-anchor-permalink\" href=\"#what-is-node.js%3F-(revisit)\">#</a></h2>\n<p>Let’s go back to the definition. Node.js is open-source, cross-platform JavaScript runtime environment. We understood all parts.</p>\n<h2 id=\"what-can-one-build-with-node.js\">What can one build with Node.js <a class=\"heading-anchor-permalink\" href=\"#what-can-one-build-with-node.js\">#</a></h2>\n<p>Since Node.js can run outside the browser, it opens a new world of possibilities. Some examples:</p>\n<ol>\n<li>Traditional websites <details><summary>(but Node.js runs only outside the browser, right?)</summary>Yes. But we can have frontend libraries/frameworks that spit out HTML, CSS, JS in an automated way. We can do this with any language, but it’s easier to have a system in the same language (isn’t that the primary reason why we made Node.js, 😅😂)</details></li>\n<li>Backend services like APIs</li>\n<li>Real-time applications</li>\n<li>Streaming services</li>\n<li>CLI tools</li>\n<li>Multiplayer games</li>\n<li>Anything that any other general purpose programming language can do.</li>\n</ol>\n<p>The crux is that Node.js allows us to build complex and powerful applications.</p>\n<h2 id=\"components-of-node.js-(exploring-the-source-code)\">Components of Node.js (exploring the source code) <a class=\"heading-anchor-permalink\" href=\"#components-of-node.js-(exploring-the-source-code)\">#</a></h2>\n<ul>\n<li><strong>deps</strong> (dependencies - external code Node uses). Some are:\n<ul>\n<li>V8 - JS engine</li>\n<li>libuv - provides Node.js access to OS features like filesystem, networking. But the unique feature is a fully featured event loop. Also provides process constructs (IPC, child processes, thread pools, locks, sync primitives).</li>\n<li>crypto - cryptography tool library.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../../../../assets/5_Nodejs_overview-image-1-e0590904.png\" alt=\"\"></p>\n<ul>\n<li><strong>src</strong> (source) folder - contains the C++ code of Node.js. Since JavaScript was not designed to run outside the browser (but C++ was) the code here implements the features of Node.js like filesystem, networking.</li>\n</ul>\n<p><img src=\"../../../../assets/5_Nodejs_overview-image-2-e0590904.png\" alt=\"\"></p>\n<ul>\n<li><strong>lib</strong> - contains JS code (functions, classes) that apps will use.\n<ul>\n<li>OS level functions - <code>fs</code>, <code>http</code></li>\n<li>utility functions</li>\n<li>This is the final component that faces the application (JS) code.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../../../../assets/5_Nodejs_overview-image-3-e0590904.png\" alt=\"\"></p>\n<p>Note:</p>\n<ul>\n<li>Unlike the browser runtime, the Node.js does not implement <code>window</code>, <code>document</code> or other “browser APIs”, since it’s does no tasks of that could need these.</li>\n</ul>\n<h2 id=\"summary\">Summary <a class=\"heading-anchor-permalink\" href=\"#summary\">#</a></h2>\n<ul>\n<li>Node.js is <em>plug_definition_here</em></li>\n<li>It’s a runtime - not a language, library or framework.</li>\n<li>It can execute JavaScript outside the browser.</li>\n<li>It can execute not only standard ECMAScript but also new syntax and features that are made available through C++ bindings using the V8 engine.</li>\n<li>Node.js consists of C++ files which form it’s core features and it exposes them through JavaScript files, to make system programming accessible via JavaScript.</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/6_Hello_world_and_setup.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/6_Hello_world_and_setup.html",
      "content": "# 6. Hello world and setup\nCreated Monday 23 January 2023 at 02:11 am\n\n## Setup the dev environment\n1. Install an editor\n2. Install Node.js using official instructions. I already know about `nvm`, so done.\n\n\n## Writing a Hello World program (REPL)\n1. Open the terminal\n2. Run the command `node`\n3. Enter some JavaScript and press enter to execute the code.\n\n\n## Writing a Hello World program (file)\n1. Create a new folder.\n2. Create a file ending with `.js`. The convention is to call the \"main\" file `index.js`.\n3. Write some JavaScript in it.\n4. To execute the code, run the command `node` followed by the filename. There are some other options here:\n```bash\nnode myFile.js\nnode index.js   # example\n\n# (optionally) can omit the extension if it's .js\nnode index\n\n# (optionally) directory name, runs index.js inside it\nnode .                      # from inside the folder\nnode path/to/my-project-dir # from outside\n```",
      "html": "<h1 id=\"6.-hello-world-and-setup\">6. Hello world and setup <a class=\"heading-anchor-permalink\" href=\"#6.-hello-world-and-setup\">#</a></h1>\n<p>Created Monday 23 January 2023 at 02:11 am</p>\n<h2 id=\"setup-the-dev-environment\">Setup the dev environment <a class=\"heading-anchor-permalink\" href=\"#setup-the-dev-environment\">#</a></h2>\n<ol>\n<li>Install an editor</li>\n<li>Install Node.js using official instructions. I already know about <code>nvm</code>, so done.</li>\n</ol>\n<h2 id=\"writing-a-hello-world-program-(repl)\">Writing a Hello World program (REPL) <a class=\"heading-anchor-permalink\" href=\"#writing-a-hello-world-program-(repl)\">#</a></h2>\n<ol>\n<li>Open the terminal</li>\n<li>Run the command <code>node</code></li>\n<li>Enter some JavaScript and press enter to execute the code.</li>\n</ol>\n<h2 id=\"writing-a-hello-world-program-(file)\">Writing a Hello World program (file) <a class=\"heading-anchor-permalink\" href=\"#writing-a-hello-world-program-(file)\">#</a></h2>\n<ol>\n<li>Create a new folder.</li>\n<li>Create a file ending with <code>.js</code>. The convention is to call the “main” file <code>index.js</code>.</li>\n<li>Write some JavaScript in it.</li>\n<li>To execute the code, run the command <code>node</code> followed by the filename. There are some other options here:</li>\n</ol>\n<pre><code class=\"language-bash\">node myFile.js\nnode index.js   # example\n\n# (optionally) can omit the extension if it's .js\nnode index\n\n# (optionally) directory name, runs index.js inside it\nnode .                      # from inside the folder\nnode path/to/my-project-dir # from outside\n</code></pre>\n",
      "id": 9
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/7_Browser_vs_Nodejs.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/1_Definition_of_Node_js/7_Browser_vs_Nodejs.html",
      "content": "# Browser vs Node.js\nCreated Monday 23 January 2023 at 02:26 am\n\n## Available APIs\n1. The browser is a platform to consume sites, whereas the other is a general purpose runtime. **Result**: browser gives us access to DOM API, Cookies, Storage API and other web platform APIs. Node.js is not a site consumption runtime, so it doesn't provide these APIs.\n2. The Browser has tight security, so much so that one cannot interact with the file system - except downloading/uploading and some internal housekeeping the browser does. **Result**: the browser does not provide us access to filesystem modules, or other OS utilities, but Node.js does.\n   \n\n## Choosing JavaScript versions\nWith Node.js, we specify/control the code execution environment (including the JS engine).\nSo we can use all the new JavaScript versions like ES2015 or later, and also any custom features we define.\n\nIn the browser, we are at the mercy of users and browser vendors when it comes to running JavaScript. Reason being that we can execute only selected versions of JavaScript that the browser vendor has implemented for that browser. And users choose the browsers.\n\n\nIn the subsequent sections, we'll focus on the features of Node.js one at a time.",
      "html": "<h1 id=\"browser-vs-node.js\">Browser vs Node.js <a class=\"heading-anchor-permalink\" href=\"#browser-vs-node.js\">#</a></h1>\n<p>Created Monday 23 January 2023 at 02:26 am</p>\n<h2 id=\"available-apis\">Available APIs <a class=\"heading-anchor-permalink\" href=\"#available-apis\">#</a></h2>\n<ol>\n<li>The browser is a platform to consume sites, whereas the other is a general purpose runtime. <strong>Result</strong>: browser gives us access to DOM API, Cookies, Storage API and other web platform APIs. Node.js is not a site consumption runtime, so it doesn’t provide these APIs.</li>\n<li>The Browser has tight security, so much so that one cannot interact with the file system - except downloading/uploading and some internal housekeeping the browser does. <strong>Result</strong>: the browser does not provide us access to filesystem modules, or other OS utilities, but Node.js does.</li>\n</ol>\n<h2 id=\"choosing-javascript-versions\">Choosing JavaScript versions <a class=\"heading-anchor-permalink\" href=\"#choosing-javascript-versions\">#</a></h2>\n<p>With Node.js, we specify/control the code execution environment (including the JS engine).\nSo we can use all the new JavaScript versions like ES2015 or later, and also any custom features we define.</p>\n<p>In the browser, we are at the mercy of users and browser vendors when it comes to running JavaScript. Reason being that we can execute only selected versions of JavaScript that the browser vendor has implemented for that browser. And users choose the browsers.</p>\n<p>In the subsequent sections, we’ll focus on the features of Node.js one at a time.</p>\n",
      "id": 10
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/11_Module_scope.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/11_Module_scope.html",
      "content": "# Module scope\nCreated Tuesday 24 January 2023 at 12:44 am\n\n## Experiment\nLet's create two modules:\n1. batman.js\n\t```js\n\tconst superHero = \"Batman\"\n\tconsole.log(superHero);\n\t```\n2. superman.js\n\t```js\n\tconst superHero = \"SuperMan\";\n\tconsole.log(superHero);\n\t```\nIn a third (main) file `index.js`\n```js\nrequire('./batman.js')\nrequire('./superman.js')\n```\n\nWhat happens when we run `index.js`? Specifically, what is the value of `superHero`?\nThe output is:\n```sh\nBatman\nSuperman\n```\n\nResult: Both names are logged, **there are no collisions, overrides or errors**, since both files (aka modules) are isolated.\n\n\n## Module scope\nEach module has it's own scope. Module scope is internally implemented using the IIFE(Immediately Invoked Function Execution) pattern. i.e. All code inside a module is run actually run inside an IIFE.\n\nThe experiment's code can be edited to an equivalent form in a single file:\n```js\n(function() => {\n \tconst superHero = \"Batman\"\n\tconsole.log(superHero);\n})();\n\n(function() => {\n\tconst superHero = \"SuperMan\";\n\tconsole.log(superHero);\n})();\n```\n\nSo, before a module is exported, Node.js wraps all the code (of that module) in an IIFE, effectively creating the \"module\" scope. This is good for two reasons:\n1. We don't have to worry about conflicting variable or function names.\n2. We don't have to worry about unintended reads/writes to variables from other modules.\n3. This is proper encapsulation.\n4. Re-usability remains unaffected.\n\n\n## Summary\n- Each loaded module in Node.js is wrapped inside an IIFE, creating a private scoping of code.\n- IFFE allows us to repeat identifiers without any conflicts.",
      "html": "<h1 id=\"module-scope\">Module scope <a class=\"heading-anchor-permalink\" href=\"#module-scope\">#</a></h1>\n<p>Created Tuesday 24 January 2023 at 12:44 am</p>\n<h2 id=\"experiment\">Experiment <a class=\"heading-anchor-permalink\" href=\"#experiment\">#</a></h2>\n<p>Let’s create two modules:</p>\n<ol>\n<li>batman.js<pre><code class=\"language-js\">const superHero = &quot;Batman&quot;\nconsole.log(superHero);\n</code></pre>\n</li>\n<li>superman.js<pre><code class=\"language-js\">const superHero = &quot;SuperMan&quot;;\nconsole.log(superHero);\n</code></pre>\n</li>\n</ol>\n<p>In a third (main) file <code>index.js</code></p>\n<pre><code class=\"language-js\">require('./batman.js')\nrequire('./superman.js')\n</code></pre>\n<p>What happens when we run <code>index.js</code>? Specifically, what is the value of <code>superHero</code>?\nThe output is:</p>\n<pre><code class=\"language-sh\">Batman\nSuperman\n</code></pre>\n<p>Result: Both names are logged, <strong>there are no collisions, overrides or errors</strong>, since both files (aka modules) are isolated.</p>\n<h2 id=\"module-scope-2\">Module scope <a class=\"heading-anchor-permalink\" href=\"#module-scope-2\">#</a></h2>\n<p>Each module has it’s own scope. Module scope is internally implemented using the IIFE(Immediately Invoked Function Execution) pattern. i.e. All code inside a module is run actually run inside an IIFE.</p>\n<p>The experiment’s code can be edited to an equivalent form in a single file:</p>\n<pre><code class=\"language-js\">(function() =&gt; {\n \tconst superHero = &quot;Batman&quot;\n\tconsole.log(superHero);\n})();\n\n(function() =&gt; {\n\tconst superHero = &quot;SuperMan&quot;;\n\tconsole.log(superHero);\n})();\n</code></pre>\n<p>So, before a module is exported, Node.js wraps all the code (of that module) in an IIFE, effectively creating the “module” scope. This is good for two reasons:</p>\n<ol>\n<li>We don’t have to worry about conflicting variable or function names.</li>\n<li>We don’t have to worry about unintended reads/writes to variables from other modules.</li>\n<li>This is proper encapsulation.</li>\n<li>Re-usability remains unaffected.</li>\n</ol>\n<h2 id=\"summary\">Summary <a class=\"heading-anchor-permalink\" href=\"#summary\">#</a></h2>\n<ul>\n<li>Each loaded module in Node.js is wrapped inside an IIFE, creating a private scoping of code.</li>\n<li>IFFE allows us to repeat identifiers without any conflicts.</li>\n</ul>\n",
      "id": 11
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/12_Module_wrapper.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/12_Module_wrapper.html",
      "content": "# 12. Module wrapper\nCreated Tuesday 24 January 2023 at 01:09 am\n\nQ: We learnt that code inside a module is run inside an IFFE. How then, can it communicate with the outside world, especially exports and imports?\nAnswer: The IFFE that runs module code has some parameters that allow the module to interact with the outside world.\n\n\n# Parameters of the module wrapper\nSo code within a module, e.g.\n```js\nconst superHero = \"Batman\"\nconsole.log(superHero);\n```\nruns in a wrapper with 5 parameters, like so:\n![](../../../../assets/12_Module_wrapper-image-1-6228faf7.png)\nIn other words, `module`, `require` are not \"magical\" global variables. They are injected by Node.js at runtime as parameters of the module wrapper IIFE.\n\n\n## About the parameters\nTo explore the parameters, let's use a debugger (VScode has a built-in debugger for JavaScript running in Node.js).\n\n![](../../../../assets/12_Module_wrapper-image-2-6228faf7.png)\nThe parameters:\n- `__dirname` - path to current module's folder\n- `__filename` - path to the current module (file)\n- `require` - used for importing modules\n- `module` - an object representing the current module. Used for exporting stuff.\n- `exports` - will study later in the section\n\nNote: \"current\" means the module being executed.\n",
      "html": "<h1 id=\"12.-module-wrapper\">12. Module wrapper <a class=\"heading-anchor-permalink\" href=\"#12.-module-wrapper\">#</a></h1>\n<p>Created Tuesday 24 January 2023 at 01:09 am</p>\n<p>Q: We learnt that code inside a module is run inside an IFFE. How then, can it communicate with the outside world, especially exports and imports?\nAnswer: The IFFE that runs module code has some parameters that allow the module to interact with the outside world.</p>\n<h1 id=\"parameters-of-the-module-wrapper\">Parameters of the module wrapper <a class=\"heading-anchor-permalink\" href=\"#parameters-of-the-module-wrapper\">#</a></h1>\n<p>So code within a module, e.g.</p>\n<pre><code class=\"language-js\">const superHero = &quot;Batman&quot;\nconsole.log(superHero);\n</code></pre>\n<p>runs in a wrapper with 5 parameters, like so:\n<img src=\"../../../../assets/12_Module_wrapper-image-1-6228faf7.png\" alt=\"\">\nIn other words, <code>module</code>, <code>require</code> are not “magical” global variables. They are injected by Node.js at runtime as parameters of the module wrapper IIFE.</p>\n<h2 id=\"about-the-parameters\">About the parameters <a class=\"heading-anchor-permalink\" href=\"#about-the-parameters\">#</a></h2>\n<p>To explore the parameters, let’s use a debugger (VScode has a built-in debugger for JavaScript running in Node.js).</p>\n<p><img src=\"../../../../assets/12_Module_wrapper-image-2-6228faf7.png\" alt=\"\">\nThe parameters:</p>\n<ul>\n<li><code>__dirname</code> - path to current module’s folder</li>\n<li><code>__filename</code> - path to the current module (file)</li>\n<li><code>require</code> - used for importing modules</li>\n<li><code>module</code> - an object representing the current module. Used for exporting stuff.</li>\n<li><code>exports</code> - will study later in the section</li>\n</ul>\n<p>Note: “current” means the module being executed.</p>\n",
      "id": 12
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/13_Module_caching.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/13_Module_caching.html",
      "content": "# 13. Module caching\nCreated Tuesday 24 January 2023 at 01:37 am\n\n## Situations\n###  Loading only\nRunning `require()` multiple times seems to have no effect.\nConsider two files, apple.js:\n```js\nconsole.log(\"Running apple.js\");\n```\nand `index.js`:\n```js\nrequire('./apple.js'); // prints 'Running apple.js'\nrequire('./apple.js'); // prints nothing\n```\nWhy does this happen?\n\n###  Exporting too\nConsider two files, mango.js\n```js\nconst myMango = { country: \"India\" };\nconsole.log('Running myMango.js')\nmodule.export = myMango;\n```\nand index.js:\n```js\nconst mango1 = require('./myMango.js'); // console.log happens\nmango1.country = \"Egypt\";\n\nconst mango2 = require('./myMango.js'); // console.log DOES NOT occur\nconsole.log(mango2); // prints \"Egypt\" instead of \"India\"\n```\nWhy does this happen?\n\n\n## Module caching (the reason)\nDefault Node.js behavior is that when a file is first imported, Node.js caches (in RAM not disk) anything it exports (which could be nothing). All subsequent imports (from the said file or from other files, doesn't matter) for the said file are returned from cached value - i.e. `require()` just returns the cached value (without running the file again, of course).\n\nOne can use `require` multiple times for a path, that's not a problem - but it'll always return the saved value.\n\nNote: the cached value is not serialized or anything (like deep cloning, removing references etc) - i.e. if multiple files import a variable the same module, they're actually working with the same physical variable. i.e. the variable is readable and writable.\n\n\n## Actionable advice (my guess)\nTo avoid this \"module caching\" pitfall:\n1. Don't \"write\" to imported variables. Keep them read only, as much as possible. This rule is indirectly broken as part of certain well known patterns, btw.\n2. Try to minimize direct closures in exported code.\n3. Export standalone classes and functions instead of objects (containing data) directly, as much as possible.\n\nThese things don't have to be thought of very much. Practically, following simple programming best-practices covers these things.",
      "html": "<h1 id=\"13.-module-caching\">13. Module caching <a class=\"heading-anchor-permalink\" href=\"#13.-module-caching\">#</a></h1>\n<p>Created Tuesday 24 January 2023 at 01:37 am</p>\n<h2 id=\"situations\">Situations <a class=\"heading-anchor-permalink\" href=\"#situations\">#</a></h2>\n<h3 id=\"loading-only\">Loading only <a class=\"heading-anchor-permalink\" href=\"#loading-only\">#</a></h3>\n<p>Running <code>require()</code> multiple times seems to have no effect.\nConsider two files, apple.js:</p>\n<pre><code class=\"language-js\">console.log(&quot;Running apple.js&quot;);\n</code></pre>\n<p>and <code>index.js</code>:</p>\n<pre><code class=\"language-js\">require('./apple.js'); // prints 'Running apple.js'\nrequire('./apple.js'); // prints nothing\n</code></pre>\n<p>Why does this happen?</p>\n<h3 id=\"exporting-too\">Exporting too <a class=\"heading-anchor-permalink\" href=\"#exporting-too\">#</a></h3>\n<p>Consider two files, mango.js</p>\n<pre><code class=\"language-js\">const myMango = { country: &quot;India&quot; };\nconsole.log('Running myMango.js')\nmodule.export = myMango;\n</code></pre>\n<p>and index.js:</p>\n<pre><code class=\"language-js\">const mango1 = require('./myMango.js'); // console.log happens\nmango1.country = &quot;Egypt&quot;;\n\nconst mango2 = require('./myMango.js'); // console.log DOES NOT occur\nconsole.log(mango2); // prints &quot;Egypt&quot; instead of &quot;India&quot;\n</code></pre>\n<p>Why does this happen?</p>\n<h2 id=\"module-caching-(the-reason)\">Module caching (the reason) <a class=\"heading-anchor-permalink\" href=\"#module-caching-(the-reason)\">#</a></h2>\n<p>Default Node.js behavior is that when a file is first imported, Node.js caches (in RAM not disk) anything it exports (which could be nothing). All subsequent imports (from the said file or from other files, doesn’t matter) for the said file are returned from cached value - i.e. <code>require()</code> just returns the cached value (without running the file again, of course).</p>\n<p>One can use <code>require</code> multiple times for a path, that’s not a problem - but it’ll always return the saved value.</p>\n<p>Note: the cached value is not serialized or anything (like deep cloning, removing references etc) - i.e. if multiple files import a variable the same module, they’re actually working with the same physical variable. i.e. the variable is readable and writable.</p>\n<h2 id=\"actionable-advice-(my-guess)\">Actionable advice (my guess) <a class=\"heading-anchor-permalink\" href=\"#actionable-advice-(my-guess)\">#</a></h2>\n<p>To avoid this “module caching” pitfall:</p>\n<ol>\n<li>Don’t “write” to imported variables. Keep them read only, as much as possible. This rule is indirectly broken as part of certain well known patterns, btw.</li>\n<li>Try to minimize direct closures in exported code.</li>\n<li>Export standalone classes and functions instead of objects (containing data) directly, as much as possible.</li>\n</ol>\n<p>These things don’t have to be thought of very much. Practically, following simple programming best-practices covers these things.</p>\n",
      "id": 13
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/14_Import_Export_patterns.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/14_Import_Export_patterns.html",
      "content": "# 14. Import/Export patterns\nCreated Tuesday 24 January 2023 at 02:05 am\n\n*Everything except the last point here is already known/obvious to me*.\n\nThese are some common patterns that are used in projects.\n1. Exporting a single thing (already using)\n```js\n// add.js\nconst add = (a, b) => a + b;\nmodule.exports = add;\n\n// index.js\nconst add = require('./add'); // imported code name can be anything\n```\n2. Direct export of single thing. Makes sense - CommonJS is only concerned with objects (`module.exports`) and functions (`require`)\n```js\n// add.js\n// const add = (a, b) => a + b;\nmodule.exports = (a, b) => a + b; // export directly\n\n\n// index.js\nconst add = require('./add'); // no change in import\n```\n3. Export multiple things - assign an object containing stuff to `module.exports`. Or assign to an array (not preferred due to DX reasons but works).\n```js\n// math.js\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\n\nmodule.exports = {\n  add: add,\n  subtract: subtract\n}\n\n// OR equivalently. Since identifier and key name is the same\nmodule.exports = { add, subtract };\n\n\n// index.js\nconst math = require('./math');\n\nconst add = math.add;\nconst subtract = math.subtract;\n\n// OR, use destructuring\nconst { add, math } = require('./math');\n```\n4. Directly attach stuff to be exported to the `module.exports` via a key.\n```js\n// math.js\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\n\nmodule.exports.add = add;\nmodule.exports.subtract = subtract;\n\n\n// index.js - no change in import\n```\n5. Use `exports` instead of `module` (`.exports`) to export stuff. This is *discouraged*, let's see why in the next video. It's better to use `module.exports`.\n```js\n// add.js\nconst add = (a, b) => a + b;\nexports = add;\n\n// index.js - no change here\nconst add = require('./add');\n```",
      "html": "<h1 id=\"14.-import%2Fexport-patterns\">14. Import/Export patterns <a class=\"heading-anchor-permalink\" href=\"#14.-import%2Fexport-patterns\">#</a></h1>\n<p>Created Tuesday 24 January 2023 at 02:05 am</p>\n<p><em>Everything except the last point here is already known/obvious to me</em>.</p>\n<p>These are some common patterns that are used in projects.</p>\n<ol>\n<li>Exporting a single thing (already using)</li>\n</ol>\n<pre><code class=\"language-js\">// add.js\nconst add = (a, b) =&gt; a + b;\nmodule.exports = add;\n\n// index.js\nconst add = require('./add'); // imported code name can be anything\n</code></pre>\n<ol start=\"2\">\n<li>Direct export of single thing. Makes sense - CommonJS is only concerned with objects (<code>module.exports</code>) and functions (<code>require</code>)</li>\n</ol>\n<pre><code class=\"language-js\">// add.js\n// const add = (a, b) =&gt; a + b;\nmodule.exports = (a, b) =&gt; a + b; // export directly\n\n\n// index.js\nconst add = require('./add'); // no change in import\n</code></pre>\n<ol start=\"3\">\n<li>Export multiple things - assign an object containing stuff to <code>module.exports</code>. Or assign to an array (not preferred due to DX reasons but works).</li>\n</ol>\n<pre><code class=\"language-js\">// math.js\nconst add = (a, b) =&gt; a + b;\nconst subtract = (a, b) =&gt; a - b;\n\nmodule.exports = {\n  add: add,\n  subtract: subtract\n}\n\n// OR equivalently. Since identifier and key name is the same\nmodule.exports = { add, subtract };\n\n\n// index.js\nconst math = require('./math');\n\nconst add = math.add;\nconst subtract = math.subtract;\n\n// OR, use destructuring\nconst { add, math } = require('./math');\n</code></pre>\n<ol start=\"4\">\n<li>Directly attach stuff to be exported to the <code>module.exports</code> via a key.</li>\n</ol>\n<pre><code class=\"language-js\">// math.js\nconst add = (a, b) =&gt; a + b;\nconst subtract = (a, b) =&gt; a - b;\n\nmodule.exports.add = add;\nmodule.exports.subtract = subtract;\n\n\n// index.js - no change in import\n</code></pre>\n<ol start=\"5\">\n<li>Use <code>exports</code> instead of <code>module</code> (<code>.exports</code>) to export stuff. This is <em>discouraged</em>, let’s see why in the next video. It’s better to use <code>module.exports</code>.</li>\n</ol>\n<pre><code class=\"language-js\">// add.js\nconst add = (a, b) =&gt; a + b;\nexports = add;\n\n// index.js - no change here\nconst add = require('./add');\n</code></pre>\n",
      "id": 14
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/15_module_exports_vs_exports.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/15_module_exports_vs_exports.html",
      "content": "# 15. `module.exports` vs `exports`\nCreated Thursday 26 January 2023 at 05:25 pm\n\nQ: We have another way to export stuff - using `exports` instead of `module.exports`.\nBut `module.exports` is the recommended approach. Why?\nA: It's actually simple. There are two parts to it:\n1. `require()` returns `module.exports`, and not `exports`.\n2. `exports` is a reference to `module.exports`\n<details><summary>Long explanation in words</summary>At the \"top-level\" (above the module, i.e. IFFE generator) `module` is an object with an attribute `exports` initialized to an empty object. On the same level as `module`, `exports` is a *variable* that references `module.exports`. **So**, mutations (i.e. adding/removing attributes) on `exports` are propagated/apply to `module.exports`, but reassigning `exports` removes the connection (no change happens `module.exports`).</details>\n\nIt's easier to understand via code.\nFirst: `module` and `exports` are initialized before passing to the IFFE, like so (my guess):\n```js\nconst module = {\n\texports: {},\n\t... other_irrevelant_things\n};\n\nlet exports = module.exports;\n```\nNow, inside an app file:\n```js\n// mutating attributes is fine\nexports.add = ...; // `module.exports` and `exports` are in sync\n\n// assigment does't work\nexports = ...; // default export\nexports = {\n\tadd: ...   // named export\n}\n// reason: `module.exports` and `exports` refer to different objects\n```\nHere, `exports` does have all there is to export. But it is not what the `require()` returns, `require()` returns `module.exports`. Which, in this case hasn't changed.\n\n## Simple solution\n`module.exports` has no such caveats:\n```js\nmodule.exports.add = ...;      // works\nmodule.exports = ...;          // works\nmodule.exports = { add: ... }; // works\n```\n\n\n## Conclusion\nAvoid `exports` because it requires \"thinking\".\nUse `module.exports` always.",
      "html": "<h1 id=\"15.-module.exports-vs-exports\">15. <code>module.exports</code> vs <code>exports</code> <a class=\"heading-anchor-permalink\" href=\"#15.-module.exports-vs-exports\">#</a></h1>\n<p>Created Thursday 26 January 2023 at 05:25 pm</p>\n<p>Q: We have another way to export stuff - using <code>exports</code> instead of <code>module.exports</code>.\nBut <code>module.exports</code> is the recommended approach. Why?\nA: It’s actually simple. There are two parts to it:</p>\n<ol>\n<li><code>require()</code> returns <code>module.exports</code>, and not <code>exports</code>.</li>\n<li><code>exports</code> is a reference to <code>module.exports</code></li>\n</ol>\n<details><summary>Long explanation in words</summary>At the \"top-level\" (above the module, i.e. IFFE generator) `module` is an object with an attribute `exports` initialized to an empty object. On the same level as `module`, `exports` is a *variable* that references `module.exports`. **So**, mutations (i.e. adding/removing attributes) on `exports` are propagated/apply to `module.exports`, but reassigning `exports` removes the connection (no change happens `module.exports`).</details>\n<p>It’s easier to understand via code.\nFirst: <code>module</code> and <code>exports</code> are initialized before passing to the IFFE, like so (my guess):</p>\n<pre><code class=\"language-js\">const module = {\n\texports: {},\n\t... other_irrevelant_things\n};\n\nlet exports = module.exports;\n</code></pre>\n<p>Now, inside an app file:</p>\n<pre><code class=\"language-js\">// mutating attributes is fine\nexports.add = ...; // `module.exports` and `exports` are in sync\n\n// assigment does't work\nexports = ...; // default export\nexports = {\n\tadd: ...   // named export\n}\n// reason: `module.exports` and `exports` refer to different objects\n</code></pre>\n<p>Here, <code>exports</code> does have all there is to export. But it is not what the <code>require()</code> returns, <code>require()</code> returns <code>module.exports</code>. Which, in this case hasn’t changed.</p>\n<h2 id=\"simple-solution\">Simple solution <a class=\"heading-anchor-permalink\" href=\"#simple-solution\">#</a></h2>\n<p><code>module.exports</code> has no such caveats:</p>\n<pre><code class=\"language-js\">module.exports.add = ...;      // works\nmodule.exports = ...;          // works\nmodule.exports = { add: ... }; // works\n</code></pre>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>Avoid <code>exports</code> because it requires “thinking”.\nUse <code>module.exports</code> always.</p>\n",
      "id": 15
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/16_ES_modules.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/16_ES_modules.html",
      "content": "# 16. ES modules\nCreated Thursday 26 January 2023 at 07:35 pm\n\n## CommonJS\nWe've learnt about CommonJS module standard, where each file is isolated by default. We share code using `module.exports` and the `require` function.\n\nCommonJS works fine and is easy.\n\n\n## ESM\n\"ES modules\" is a new (since 2015) module system for JavaScript. \n\n**Question, why do we need another module system?**\nBefore 2015, Node.js defaulted to CommonJS out of need, since JavaScript didn't have any module system at the time.\n\nNote that CommonJS is not an ECMAScript specification.\n\nSince 2015, ECMAScript does have a standardized module system. It is called EcmaScript Modules or ES Modules or ESM. \n\nIt took a long time for Node.js and browser vendors to fully implement ESM.\n\n\n## ESM details\n- File extension for an ES module is `.mjs` (for both exporter and importer file).\n- There are two types of exports:\n\t1. **Default exports** - name doesn't have to match. Uses the keyword `default` for exporting. Only one entity is exported this way, and a file (module) can have only one \"default\" export.\n\t2. **Named exports** - name has to match (due to destructuring). Uses `const` in place of `default` for exporting. Multiple entities can be imported. Can be used multiple times in a module.\n- About the syntax - `ESM` uses a *sugary* syntax for exports and imports, instead of concrete object and function syntax like `module.exports` and `require`.\n- Support:\n\t- Node.js - stable support since Node v14 (since 2020)\n\t- Browsers - Chrome, Safari, Firefox since 2019 (safe)\n- Usage\n\t- Node.js - CommonJS is still popular for backend dev.\n\t- Browsers - ESM is popular for frontend codebases.\n- Note: A file can have both default, named or both kind of exports at the same time.\n\n## Patterns (default exports)\n1. Export a single thing\n```js\n// math-esm.mjs\nconst add = (a, b) => a + b;\n\nexport default add;\n\n\n// index.js\nimport add from './math-esm.mjs'; // name doesn't matter\nconsole.log(add(2, 3));\n```\n2. Export a single thing - alternate pattern\n```js\n// math-esm.js\nexport default (a, b) => a + b;\n```\n3. Export multiple things\n```js\n// math-esm.mjs\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\n\nexport default { add: add, subtract: subtract };\nexport default { add, subtract }; // OR, equivalently\n\n\n// index.js\nimport math from './math-esm.mjs'; // name doesn't matter\nconsole.log(math.add(2, 3));\nconsole.log(math.subtract(2, 3));\n```\n4. Export multiple things, de-structure imported entity.\n```js\n// math-esm.mjs (same as above)\n\n// index.js\nimport math from './math-esm.mjs'; // name does't matter\nconst { add, subtract } = math;\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n\n\n// this DOES NOT WORK (weird) - \"looks like\" the above case, right?\nimport { add, subtract } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n```\n\n\n## Patterns (named exports)\n1. Export a single thing\n```js\n// math-esm.mjs\nexport const add = (a, b) => a + b;\n\n// index.js\nimport { add } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\n```\n2. Export multiple things (most popular)\n```js\n// math-esm.mjs\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// index.js\nimport { add, subtract } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n```\n3. Export multiple things, import *all*\n```js\n// math-esm.mjs (same as above)\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// index.js\nimport * as math from './math-esm.mjs';\n\nconsole.log(math.add(2, 3));\nconsole.log(math.subtract(2, 3));\n```\n4. Export multiple things, de-structure the *all* entity.\n```js\n// math-esm.mjs (same as above)\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// index.js\nimport * as math from './math-esm.mjs';\nconst { add, subtract } = math;\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n```\nThere may be other patterns, like aliases etc. I'll not waste time enumerating all.\n\nWe'll be using CommonJS for the remainder of the course, since it's the popular format for Node.js.",
      "html": "<h1 id=\"16.-es-modules\">16. ES modules <a class=\"heading-anchor-permalink\" href=\"#16.-es-modules\">#</a></h1>\n<p>Created Thursday 26 January 2023 at 07:35 pm</p>\n<h2 id=\"commonjs\">CommonJS <a class=\"heading-anchor-permalink\" href=\"#commonjs\">#</a></h2>\n<p>We’ve learnt about CommonJS module standard, where each file is isolated by default. We share code using <code>module.exports</code> and the <code>require</code> function.</p>\n<p>CommonJS works fine and is easy.</p>\n<h2 id=\"esm\">ESM <a class=\"heading-anchor-permalink\" href=\"#esm\">#</a></h2>\n<p>“ES modules” is a new (since 2015) module system for JavaScript.</p>\n<p><strong>Question, why do we need another module system?</strong>\nBefore 2015, Node.js defaulted to CommonJS out of need, since JavaScript didn’t have any module system at the time.</p>\n<p>Note that CommonJS is not an ECMAScript specification.</p>\n<p>Since 2015, ECMAScript does have a standardized module system. It is called EcmaScript Modules or ES Modules or ESM.</p>\n<p>It took a long time for Node.js and browser vendors to fully implement ESM.</p>\n<h2 id=\"esm-details\">ESM details <a class=\"heading-anchor-permalink\" href=\"#esm-details\">#</a></h2>\n<ul>\n<li>File extension for an ES module is <code>.mjs</code> (for both exporter and importer file).</li>\n<li>There are two types of exports:\n<ol>\n<li><strong>Default exports</strong> - name doesn’t have to match. Uses the keyword <code>default</code> for exporting. Only one entity is exported this way, and a file (module) can have only one “default” export.</li>\n<li><strong>Named exports</strong> - name has to match (due to destructuring). Uses <code>const</code> in place of <code>default</code> for exporting. Multiple entities can be imported. Can be used multiple times in a module.</li>\n</ol>\n</li>\n<li>About the syntax - <code>ESM</code> uses a <em>sugary</em> syntax for exports and imports, instead of concrete object and function syntax like <code>module.exports</code> and <code>require</code>.</li>\n<li>Support:\n<ul>\n<li>Node.js - stable support since Node v14 (since 2020)</li>\n<li>Browsers - Chrome, Safari, Firefox since 2019 (safe)</li>\n</ul>\n</li>\n<li>Usage\n<ul>\n<li>Node.js - CommonJS is still popular for backend dev.</li>\n<li>Browsers - ESM is popular for frontend codebases.</li>\n</ul>\n</li>\n<li>Note: A file can have both default, named or both kind of exports at the same time.</li>\n</ul>\n<h2 id=\"patterns-(default-exports)\">Patterns (default exports) <a class=\"heading-anchor-permalink\" href=\"#patterns-(default-exports)\">#</a></h2>\n<ol>\n<li>Export a single thing</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs\nconst add = (a, b) =&gt; a + b;\n\nexport default add;\n\n\n// index.js\nimport add from './math-esm.mjs'; // name doesn't matter\nconsole.log(add(2, 3));\n</code></pre>\n<ol start=\"2\">\n<li>Export a single thing - alternate pattern</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.js\nexport default (a, b) =&gt; a + b;\n</code></pre>\n<ol start=\"3\">\n<li>Export multiple things</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs\nconst add = (a, b) =&gt; a + b;\nconst subtract = (a, b) =&gt; a - b;\n\nexport default { add: add, subtract: subtract };\nexport default { add, subtract }; // OR, equivalently\n\n\n// index.js\nimport math from './math-esm.mjs'; // name doesn't matter\nconsole.log(math.add(2, 3));\nconsole.log(math.subtract(2, 3));\n</code></pre>\n<ol start=\"4\">\n<li>Export multiple things, de-structure imported entity.</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs (same as above)\n\n// index.js\nimport math from './math-esm.mjs'; // name does't matter\nconst { add, subtract } = math;\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n\n\n// this DOES NOT WORK (weird) - &quot;looks like&quot; the above case, right?\nimport { add, subtract } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n</code></pre>\n<h2 id=\"patterns-(named-exports)\">Patterns (named exports) <a class=\"heading-anchor-permalink\" href=\"#patterns-(named-exports)\">#</a></h2>\n<ol>\n<li>Export a single thing</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs\nexport const add = (a, b) =&gt; a + b;\n\n// index.js\nimport { add } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\n</code></pre>\n<ol start=\"2\">\n<li>Export multiple things (most popular)</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs\nexport const add = (a, b) =&gt; a + b;\nexport const subtract = (a, b) =&gt; a - b;\n\n// index.js\nimport { add, subtract } from './math-esm.mjs';\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n</code></pre>\n<ol start=\"3\">\n<li>Export multiple things, import <em>all</em></li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs (same as above)\nexport const add = (a, b) =&gt; a + b;\nexport const subtract = (a, b) =&gt; a - b;\n\n// index.js\nimport * as math from './math-esm.mjs';\n\nconsole.log(math.add(2, 3));\nconsole.log(math.subtract(2, 3));\n</code></pre>\n<ol start=\"4\">\n<li>Export multiple things, de-structure the <em>all</em> entity.</li>\n</ol>\n<pre><code class=\"language-js\">// math-esm.mjs (same as above)\nexport const add = (a, b) =&gt; a + b;\nexport const subtract = (a, b) =&gt; a - b;\n\n// index.js\nimport * as math from './math-esm.mjs';\nconst { add, subtract } = math;\n\nconsole.log(add(2, 3));\nconsole.log(subtract(2, 3));\n</code></pre>\n<p>There may be other patterns, like aliases etc. I’ll not waste time enumerating all.</p>\n<p>We’ll be using CommonJS for the remainder of the course, since it’s the popular format for Node.js.</p>\n",
      "id": 16
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/17_Importing_JSON_and_Watch_mode.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/17_Importing_JSON_and_Watch_mode.html",
      "content": "# 17. Importing JSON and Watch mode\nCreated Thursday 26 January 2023 at 09:55 pm\n\n## Importing JSON\nJSON (JavaScript Object Notation) is a data interchange format commonly used by web servers.\n\n- JSON files can be imported using `require`, no special syntax needed.\n- Optionally, `.json` extension can be omitted. However, this is discouraged, since Node.js will look for a file with `.js` before considering `.json` and there could be `.js` file of the same name.\n  \n\"data.json\"\n```json\n{\n  \"name\": \"Bruce Wayne\",\n  \"address\": { \"street\": \"Wayne Manor\", \"city\": \"Gotham\" }\n}\n```\n\"index.js\"\n```js\nconst data = require(\"./data.json\");\nconsole.log(data);      // works\nconsole.log(data.name); // works\n```\nThis is helpful for storing mock data, configs\n\n## Watch mode\nAn in-built feature like nodemon or LiveServer (the vscode extension). This was introduced in Node v18.\n\nTo use, run `node` with the `--watch` option with a file as argument.\nExamples:\n```sh\nnode --watch index.js\nnode --watch index\nnode --watch .\n\nnode --watch myFile.js\n```",
      "html": "<h1 id=\"17.-importing-json-and-watch-mode\">17. Importing JSON and Watch mode <a class=\"heading-anchor-permalink\" href=\"#17.-importing-json-and-watch-mode\">#</a></h1>\n<p>Created Thursday 26 January 2023 at 09:55 pm</p>\n<h2 id=\"importing-json\">Importing JSON <a class=\"heading-anchor-permalink\" href=\"#importing-json\">#</a></h2>\n<p>JSON (JavaScript Object Notation) is a data interchange format commonly used by web servers.</p>\n<ul>\n<li>JSON files can be imported using <code>require</code>, no special syntax needed.</li>\n<li>Optionally, <code>.json</code> extension can be omitted. However, this is discouraged, since Node.js will look for a file with <code>.js</code> before considering <code>.json</code> and there could be <code>.js</code> file of the same name.</li>\n</ul>\n<p>“data.json”</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;Bruce Wayne&quot;,\n  &quot;address&quot;: { &quot;street&quot;: &quot;Wayne Manor&quot;, &quot;city&quot;: &quot;Gotham&quot; }\n}\n</code></pre>\n<p>“index.js”</p>\n<pre><code class=\"language-js\">const data = require(&quot;./data.json&quot;);\nconsole.log(data);      // works\nconsole.log(data.name); // works\n</code></pre>\n<p>This is helpful for storing mock data, configs</p>\n<h2 id=\"watch-mode\">Watch mode <a class=\"heading-anchor-permalink\" href=\"#watch-mode\">#</a></h2>\n<p>An in-built feature like nodemon or LiveServer (the vscode extension). This was introduced in Node v18.</p>\n<p>To use, run <code>node</code> with the <code>--watch</code> option with a file as argument.\nExamples:</p>\n<pre><code class=\"language-sh\">node --watch index.js\nnode --watch index\nnode --watch .\n\nnode --watch myFile.js\n</code></pre>\n",
      "id": 17
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/18-Detect-run-as-main-or-module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/18-Detect-run-as-main-or-module.html",
      "content": "---\ntags:\n  - main\n  - direct\n  - module\n  - direct-vs-module\n  - detect\n---\n# 18. Detect run as main or module\nCreated Mon Jan 1, 2024 at 1:11 PM\n\n*There's a simple way in Python to know if current file is being run directly (via python command) or as an import, using the `__main__` variable. Any such way in Node.js?*\n\nYes, there is.\n\n## CommonJS\n```js\nif (require.main === module) {\n  console.log('This file is being run directly.');\n} else {\n  console.log('This file is being imported as a module.');\n}\n```\n\n\n## ESM\n```js\n// mainModule.mjs\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('This ESM module is being run directly.');\n} else {\n  console.log('This ESM module is being imported as a module.');\n}\n```\n\n## What's the use of this?\nI write Node.js scripts for personal use, and it's good to have usage examples that console.log something. If a script is being run directly, it'll print the usage examples, otherwise it'll stay silent.",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>main</li>\n<li>direct</li>\n<li>module</li>\n<li>direct-vs-module</li>\n<li>detect</li>\n</ul>\n<hr>\n<h1 id=\"18.-detect-run-as-main-or-module\">18. Detect run as main or module <a class=\"heading-anchor-permalink\" href=\"#18.-detect-run-as-main-or-module\">#</a></h1>\n<p>Created Mon Jan 1, 2024 at 1:11 PM</p>\n<p><em>There’s a simple way in Python to know if current file is being run directly (via python command) or as an import, using the <code>__main__</code> variable. Any such way in Node.js?</em></p>\n<p>Yes, there is.</p>\n<h2 id=\"commonjs\">CommonJS <a class=\"heading-anchor-permalink\" href=\"#commonjs\">#</a></h2>\n<pre><code class=\"language-js\">if (require.main === module) {\n  console.log('This file is being run directly.');\n} else {\n  console.log('This file is being imported as a module.');\n}\n</code></pre>\n<h2 id=\"esm\">ESM <a class=\"heading-anchor-permalink\" href=\"#esm\">#</a></h2>\n<pre><code class=\"language-js\">// mainModule.mjs\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('This ESM module is being run directly.');\n} else {\n  console.log('This ESM module is being imported as a module.');\n}\n</code></pre>\n<h2 id=\"what%E2%80%99s-the-use-of-this%3F\">What’s the use of this? <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-the-use-of-this%3F\">#</a></h2>\n<p>I write Node.js scripts for personal use, and it’s good to have usage examples that console.log something. If a script is being run directly, it’ll print the usage examples, otherwise it’ll stay silent.</p>\n",
      "id": 18
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/8_Definition_and_types_of_modules.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/8_Definition_and_types_of_modules.html",
      "content": "# 8. Definition and types of modules\nCreated Monday 23 January 2023 at 07:32 pm\n\n## What is a module\nA module is an encapsulated and reusable chunk of code that has it's own context\n\nIn Node.js, each file is treated as a separate module.\n\n\n## Types of modules\nIn total, there are 3 types of modules:\n1. **Local** modules - modules that we create in our app. Aka 'user defined' or 'custom' modules.\n2. **Built-in** modules - modules that Node.js ships with out of the box\n3. **Third-party** modules - modules written by other developers that we can use in our app\n\nIn this section, we'll learn about modules in Node.js, and more specifically about 'local modules'.",
      "html": "<h1 id=\"8.-definition-and-types-of-modules\">8. Definition and types of modules <a class=\"heading-anchor-permalink\" href=\"#8.-definition-and-types-of-modules\">#</a></h1>\n<p>Created Monday 23 January 2023 at 07:32 pm</p>\n<h2 id=\"what-is-a-module\">What is a module <a class=\"heading-anchor-permalink\" href=\"#what-is-a-module\">#</a></h2>\n<p>A module is an encapsulated and reusable chunk of code that has it’s own context</p>\n<p>In Node.js, each file is treated as a separate module.</p>\n<h2 id=\"types-of-modules\">Types of modules <a class=\"heading-anchor-permalink\" href=\"#types-of-modules\">#</a></h2>\n<p>In total, there are 3 types of modules:</p>\n<ol>\n<li><strong>Local</strong> modules - modules that we create in our app. Aka ‘user defined’ or ‘custom’ modules.</li>\n<li><strong>Built-in</strong> modules - modules that Node.js ships with out of the box</li>\n<li><strong>Third-party</strong> modules - modules written by other developers that we can use in our app</li>\n</ol>\n<p>In this section, we’ll learn about modules in Node.js, and more specifically about ‘local modules’.</p>\n",
      "id": 19
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/9_Local_modules.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/2_Modules_in_Node_js/9_Local_modules.html",
      "content": "# 9. Local modules\nCreated Monday 23 January 2023 at 11:18 pm\n\n- Local modules are modules we create. \n- Each JavaScript file is a module.\n\n## Breaking a file into modules\nSuppose all our code is written into a single file `app.js`.\n```js\n// file 1 - util code\nconst add = (a, b) => a + b;\n\n// file 2 - app code\nconst sum = add(1, 2) \nconsole.log(sum); \n```\nNow, we wish to split the code into two files (for better organization).\n\nAssume we do this segregation. But how do we tell Node to run both files in proper order and make the `add` function available to the second file.\n\nThis is where CommonJS comes in. JavaScript, for a long time, didn't have a module system. It was only later that a module system was standardized. \"CommonJS\" was the first standard (that's still supported by all systems). It uses a function and object approach to export and import code between modules.\n\n\n## How to import/export\n1. To import  - use the `require` function which takes the path of the module(file) as argument. `require` is available inside every file.\n`myMain.js`\n```js\nconst addFunction = require('./add.js');\n\nconsole.log(addFunction(1, 2));\n```\n2. To export something (variable or object or class) - use the `module` object, specifically the `module.exports` attribute. `module` object is available inside every file.\n`add.js`\n```js\nconst add = (a, b) => a + b;\n\nmodule.exports = add;\n```\nTo run the app, just run `myMain.js`.\n\nNote:\n1. **Names don't matter** - There's no need to use the same name for importing and exporting stuff. CommonJS uses a function (`require`) and an object `module` for import/export - so names don't matter.\n2. **Importing a module executes it** - A file will execute completely, if it exports something. i.e. you can't import stuff from a file without causing a full execution of that file.\n3. **Omit `.js` extension** - we can omit the `.js` extension in `require`. This is optional.\n4. **\"Loading\" a file** - `require`ing a module that exports nothing will just run the file. There will be no errors. This is also called \"loading\" a file, which is sometimes needed, e.g. we wish to do (void function) things in order but they are unrelated, so \"exporting\" doesn't make sense. Also, loading them from a single file is definitely better than providing multiple arguments to `node` in the correct order.\n5. **\"Named\" and \"default\" exports** - `module.exports` is the single source of exports from a file. So, if we need to export only one thing (a \"default\" export), one can directly write to it. But for exporting multiple things, we just export an object or an array containing the things we wish to export. Imports work like usual, i.e. we destructure or use dot notation to access exported things.\n\t```js\n\t// mathFuncs.js\n\tconst add = (a, b) => a + b;\n\t\n\tmodule.exports = {\n\t\tadd,\n\t\tsubtract: (a, b) => a - b\n\t}\n\t\n\t// or equivalently\n\tmodule.exports.add = add;\n\tmodule.exports.subtract = (a, b) => a - b };\n\t```\n\n\n## Local modules execution flow\nLet's add some print statements to observe the execution flow.\n`myMain.js`\n```js\nconsole.log(\"myMain.js started execution\"); // 1 (start)\n\nconst addFunction = require('./add.js'); // 2\n\nconsole.log(\"back in myMain.js\"); // 8\n\nconsole.log(addFunction(1, 2)); // 9\n\nconsole.log(\"myMain.js finished execution\"); // 10 (end)\n```\n`add.js`\n```js\nconsole.log(\"Inside add.js\"); // 3\nconst add = (a, b) => a + b;  // 4\n\nconsole.log(\"Still executing add.js\"); // 5\n\nmodule.exports = add; //6 // file execution does not stop here\n\nconsole.log(\"Completing add.js execution\"); // 7 // this DOES execute\n```\nThis is the flow.\nNote: \"exporting\" does not end execution of a file, i.e. it's not like a `return` inside function.\n\n\n## More about local modules\n- Each module is isolated from all others, by default. \n- **In other words**, Node.js does not 'watch'/'consider' all files in the projects before running something. The scenario where multiple files are run is If a file (say `app.js`) imports another one (`sound.js`),  and is run, the other file (`sound.js`) will be run, but only because it was imported.\n- It's best to have a single top-level file (module) which imports some modules (which import some other module ...). This makes it easier to run the app, since only a single argument needed to be passed.\n\nThis is sufficient to work on any Node.js project, but we'll dive a little deeper and see how modules work.",
      "html": "<h1 id=\"9.-local-modules\">9. Local modules <a class=\"heading-anchor-permalink\" href=\"#9.-local-modules\">#</a></h1>\n<p>Created Monday 23 January 2023 at 11:18 pm</p>\n<ul>\n<li>Local modules are modules we create.</li>\n<li>Each JavaScript file is a module.</li>\n</ul>\n<h2 id=\"breaking-a-file-into-modules\">Breaking a file into modules <a class=\"heading-anchor-permalink\" href=\"#breaking-a-file-into-modules\">#</a></h2>\n<p>Suppose all our code is written into a single file <code>app.js</code>.</p>\n<pre><code class=\"language-js\">// file 1 - util code\nconst add = (a, b) =&gt; a + b;\n\n// file 2 - app code\nconst sum = add(1, 2) \nconsole.log(sum); \n</code></pre>\n<p>Now, we wish to split the code into two files (for better organization).</p>\n<p>Assume we do this segregation. But how do we tell Node to run both files in proper order and make the <code>add</code> function available to the second file.</p>\n<p>This is where CommonJS comes in. JavaScript, for a long time, didn’t have a module system. It was only later that a module system was standardized. “CommonJS” was the first standard (that’s still supported by all systems). It uses a function and object approach to export and import code between modules.</p>\n<h2 id=\"how-to-import%2Fexport\">How to import/export <a class=\"heading-anchor-permalink\" href=\"#how-to-import%2Fexport\">#</a></h2>\n<ol>\n<li>To import  - use the <code>require</code> function which takes the path of the module(file) as argument. <code>require</code> is available inside every file.\n<code>myMain.js</code></li>\n</ol>\n<pre><code class=\"language-js\">const addFunction = require('./add.js');\n\nconsole.log(addFunction(1, 2));\n</code></pre>\n<ol start=\"2\">\n<li>To export something (variable or object or class) - use the <code>module</code> object, specifically the <code>module.exports</code> attribute. <code>module</code> object is available inside every file.\n<code>add.js</code></li>\n</ol>\n<pre><code class=\"language-js\">const add = (a, b) =&gt; a + b;\n\nmodule.exports = add;\n</code></pre>\n<p>To run the app, just run <code>myMain.js</code>.</p>\n<p>Note:</p>\n<ol>\n<li><strong>Names don’t matter</strong> - There’s no need to use the same name for importing and exporting stuff. CommonJS uses a function (<code>require</code>) and an object <code>module</code> for import/export - so names don’t matter.</li>\n<li><strong>Importing a module executes it</strong> - A file will execute completely, if it exports something. i.e. you can’t import stuff from a file without causing a full execution of that file.</li>\n<li><strong>Omit <code>.js</code> extension</strong> - we can omit the <code>.js</code> extension in <code>require</code>. This is optional.</li>\n<li><strong>&quot;Loading&quot; a file</strong> - <code>require</code>ing a module that exports nothing will just run the file. There will be no errors. This is also called “loading” a file, which is sometimes needed, e.g. we wish to do (void function) things in order but they are unrelated, so “exporting” doesn’t make sense. Also, loading them from a single file is definitely better than providing multiple arguments to <code>node</code> in the correct order.</li>\n<li><strong>&quot;Named&quot; and “default” exports</strong> - <code>module.exports</code> is the single source of exports from a file. So, if we need to export only one thing (a “default” export), one can directly write to it. But for exporting multiple things, we just export an object or an array containing the things we wish to export. Imports work like usual, i.e. we destructure or use dot notation to access exported things.<pre><code class=\"language-js\">// mathFuncs.js\nconst add = (a, b) =&gt; a + b;\n\nmodule.exports = {\n\tadd,\n\tsubtract: (a, b) =&gt; a - b\n}\n\n// or equivalently\nmodule.exports.add = add;\nmodule.exports.subtract = (a, b) =&gt; a - b };\n</code></pre>\n</li>\n</ol>\n<h2 id=\"local-modules-execution-flow\">Local modules execution flow <a class=\"heading-anchor-permalink\" href=\"#local-modules-execution-flow\">#</a></h2>\n<p>Let’s add some print statements to observe the execution flow.\n<code>myMain.js</code></p>\n<pre><code class=\"language-js\">console.log(&quot;myMain.js started execution&quot;); // 1 (start)\n\nconst addFunction = require('./add.js'); // 2\n\nconsole.log(&quot;back in myMain.js&quot;); // 8\n\nconsole.log(addFunction(1, 2)); // 9\n\nconsole.log(&quot;myMain.js finished execution&quot;); // 10 (end)\n</code></pre>\n<p><code>add.js</code></p>\n<pre><code class=\"language-js\">console.log(&quot;Inside add.js&quot;); // 3\nconst add = (a, b) =&gt; a + b;  // 4\n\nconsole.log(&quot;Still executing add.js&quot;); // 5\n\nmodule.exports = add; //6 // file execution does not stop here\n\nconsole.log(&quot;Completing add.js execution&quot;); // 7 // this DOES execute\n</code></pre>\n<p>This is the flow.\nNote: “exporting” does not end execution of a file, i.e. it’s not like a <code>return</code> inside function.</p>\n<h2 id=\"more-about-local-modules\">More about local modules <a class=\"heading-anchor-permalink\" href=\"#more-about-local-modules\">#</a></h2>\n<ul>\n<li>Each module is isolated from all others, by default.</li>\n<li><strong>In other words</strong>, Node.js does not ‘watch’/‘consider’ all files in the projects before running something. The scenario where multiple files are run is If a file (say <code>app.js</code>) imports another one (<code>sound.js</code>),  and is run, the other file (<code>sound.js</code>) will be run, but only because it was imported.</li>\n<li>It’s best to have a single top-level file (module) which imports some modules (which import some other module …). This makes it easier to run the app, since only a single argument needed to be passed.</li>\n</ul>\n<p>This is sufficient to work on any Node.js project, but we’ll dive a little deeper and see how modules work.</p>\n",
      "id": 20
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/18_Built_in_modules.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/18_Built_in_modules.html",
      "content": "# 18. Built-in modules\nCreated Friday 27 January 2023 at 12:06 am\n\n## Built-in modules (info)\nAs mentioned before, there are 3 types of modules in Node.js - local, built-in and third party. We studied local modules in the last section. This section is about built-in modules.\n\n- Built-in modules are also known core modules.\n- They are available as part of the Node.js installation. They don't need to be installed separately.\n- They DO need to be imported before use.\n\n\n## Importing built-in modules\n- Use the `require` function\n- Built-in modules are imported by *name* instead of *path* (relative or absolute). So no `./` or anything.\n- Use the namespace `node` to indicate the module is a built-in one. This is recommended but not required - when importing a module by name, Node.js will look try to match a built-in module if a namespace has not been specified.\n```js\nconst path = require('node:path'); // recommended way\n\nconst path = require('path');      // works, but can lead to confusion\n```\n\n\n## Useful built-in modules\nThere are a lot of built-in modules, but we'll take a look at 5 most common (and useful) ones:\n1. path\n2. events\n3. fs\n4. stream\n5. http\n\npath is easy to understand, but the remaining 4 are a little more complex.\n\n\n## Exploring source code of built-in modules\nThe source code for these can be found under the `lib` folder of Node.js's [source code](https://github.com/nodejs/node/tree/main/lib).",
      "html": "<h1 id=\"18.-built-in-modules\">18. Built-in modules <a class=\"heading-anchor-permalink\" href=\"#18.-built-in-modules\">#</a></h1>\n<p>Created Friday 27 January 2023 at 12:06 am</p>\n<h2 id=\"built-in-modules-(info)\">Built-in modules (info) <a class=\"heading-anchor-permalink\" href=\"#built-in-modules-(info)\">#</a></h2>\n<p>As mentioned before, there are 3 types of modules in Node.js - local, built-in and third party. We studied local modules in the last section. This section is about built-in modules.</p>\n<ul>\n<li>Built-in modules are also known core modules.</li>\n<li>They are available as part of the Node.js installation. They don’t need to be installed separately.</li>\n<li>They DO need to be imported before use.</li>\n</ul>\n<h2 id=\"importing-built-in-modules\">Importing built-in modules <a class=\"heading-anchor-permalink\" href=\"#importing-built-in-modules\">#</a></h2>\n<ul>\n<li>Use the <code>require</code> function</li>\n<li>Built-in modules are imported by <em>name</em> instead of <em>path</em> (relative or absolute). So no <code>./</code> or anything.</li>\n<li>Use the namespace <code>node</code> to indicate the module is a built-in one. This is recommended but not required - when importing a module by name, Node.js will look try to match a built-in module if a namespace has not been specified.</li>\n</ul>\n<pre><code class=\"language-js\">const path = require('node:path'); // recommended way\n\nconst path = require('path');      // works, but can lead to confusion\n</code></pre>\n<h2 id=\"useful-built-in-modules\">Useful built-in modules <a class=\"heading-anchor-permalink\" href=\"#useful-built-in-modules\">#</a></h2>\n<p>There are a lot of built-in modules, but we’ll take a look at 5 most common (and useful) ones:</p>\n<ol>\n<li>path</li>\n<li>events</li>\n<li>fs</li>\n<li>stream</li>\n<li>http</li>\n</ol>\n<p>path is easy to understand, but the remaining 4 are a little more complex.</p>\n<h2 id=\"exploring-source-code-of-built-in-modules\">Exploring source code of built-in modules <a class=\"heading-anchor-permalink\" href=\"#exploring-source-code-of-built-in-modules\">#</a></h2>\n<p>The source code for these can be found under the <code>lib</code> folder of Node.js’s <a href=\"https://github.com/nodejs/node/tree/main/lib\">source code</a>.</p>\n",
      "id": 21
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/19_The_path_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/19_The_path_module.html",
      "content": "# 19. The path module\nCreated Friday 27 January 2023 at 12:16 am\n\n## path module\nMeant for manipulating paths (filesystem locations).\nI doesn't *do* anything - for that you'll need the \"fs\" module.\n\n## Two path related convenience variables\nNode.js provides two convenience variables that are available by default (no import needed). They are:\n1. `__dirname` - absolute path current directory .\n2. `__filename` - absolute path of current module (file).\n\nIn short, if you just need these, there's no need to use the `path` module.\n\n\n## Path API\nPath module has 14 properties and methods. We'll look at the 7 most used ones.\n- `path.basename(\"my_path_here\")` - last portion of a given path\n- `path.extname(\"my_path_here\")` - extension of the file at path. Returns empty string otherwise - for a directory or invalid path.\n- `path.parse(\"my_path_here\")` - an object containing useful information about the path.\n- `path.format(pathObject)` - returns an absolute path string for given \"path\" like object.\n- `path.isAbsolute(\"my_path_here\")` - boolean\n- `path.join()` - returns an absolute path by joining path segments. Additionally, it takes care of platform specific delimiters and does normalizing (ignoring, adding delimiters and process nesting delimiters if any). Delimiters - `/`, `\\`, `.`, `..`\n- `path.resolve()` - behaves like `join()`, except it is processed right to left. Also the latest (right most argument) becomes the root if it has a `/`. If no argument has a `/`, the actual system root path becomes the root. Returns an absolute path in all cases.\n\nExample:\n```js\nconst path = require(\"node:path\");\n\nconst currentDirectoryConvenienceVariable = __dirname;\nconsole.log(currentDirectoryConvenienceVariable);\nconst currentModuleConvenienceVariable = __filename;\nconsole.log(currentModuleConvenienceVariable);\n\n\nconsole.log(\"\\n# basename\");\nconsole.log(path.basename(__dirname));\n\n\nconsole.log(\"\\n# extname\");\nconsole.log(path.extname(__filename));\n\n\nconsole.log(\"\\n# parse\");\nconsole.log(path.parse(__filename));\nconsole.log(path.parse(__dirname));\n\n\nconsole.log(\"\\n# format\");\nconst obj1 = path.parse(__filename);\nconst obj2 = path.parse(__dirname);\nconsole.log(path.format(obj1));\nconsole.log(path.format(obj2));\n\n\nconsole.log(\"\\n# path.join\");\nconsole.log(path.join(\"folder1\", \"folder2\", \"index.html\")); // simple join\nconsole.log(path.join(\"/folder1\", \"folder2\", \"index.html\")); // simple join\nconsole.log(path.join(\"/folder1\", \"//folder2\", \"index.html\")); // smartly ignores redundant\nconsole.log(path.join(\"/folder1\", \"//folder2\", \"../index.html\")); // smartly ignores redundant, processes nesting\nconsole.log(path.join(__dirname, \"data.json\"));\n\n\nconsole.log(\"\\n# path.resolve\");\nconsole.log(path.resolve(\"folder1\", \"folder2\", \"index.html\")); // no root like argument, so actual root becomes root\nconsole.log(path.resolve(\"/folder1\", \"folder2\", \"index.html\")); // has a root like argument, so it becomes root\n\nconsole.log(path.resolve(\"/folder1\", \"//folder2\", \"index.html\"));\n// has multiple root like arguments, the latest one becomes root, smartly ignores redundant delimiter\n\nconsole.log(path.resolve(\"/folder1\", \"//folder2\", \"../index.html\"));\n// has multiple root like arguments, the latest one becomes root, smartly ignores redundant delimiter, processes nesting\n\nconsole.log(path.resolve(__dirname, \"data.json\"));\n```",
      "html": "<h1 id=\"19.-the-path-module\">19. The path module <a class=\"heading-anchor-permalink\" href=\"#19.-the-path-module\">#</a></h1>\n<p>Created Friday 27 January 2023 at 12:16 am</p>\n<h2 id=\"path-module\">path module <a class=\"heading-anchor-permalink\" href=\"#path-module\">#</a></h2>\n<p>Meant for manipulating paths (filesystem locations).\nI doesn’t <em>do</em> anything - for that you’ll need the “fs” module.</p>\n<h2 id=\"two-path-related-convenience-variables\">Two path related convenience variables <a class=\"heading-anchor-permalink\" href=\"#two-path-related-convenience-variables\">#</a></h2>\n<p>Node.js provides two convenience variables that are available by default (no import needed). They are:</p>\n<ol>\n<li><code>__dirname</code> - absolute path current directory .</li>\n<li><code>__filename</code> - absolute path of current module (file).</li>\n</ol>\n<p>In short, if you just need these, there’s no need to use the <code>path</code> module.</p>\n<h2 id=\"path-api\">Path API <a class=\"heading-anchor-permalink\" href=\"#path-api\">#</a></h2>\n<p>Path module has 14 properties and methods. We’ll look at the 7 most used ones.</p>\n<ul>\n<li><code>path.basename(&quot;my_path_here&quot;)</code> - last portion of a given path</li>\n<li><code>path.extname(&quot;my_path_here&quot;)</code> - extension of the file at path. Returns empty string otherwise - for a directory or invalid path.</li>\n<li><code>path.parse(&quot;my_path_here&quot;)</code> - an object containing useful information about the path.</li>\n<li><code>path.format(pathObject)</code> - returns an absolute path string for given “path” like object.</li>\n<li><code>path.isAbsolute(&quot;my_path_here&quot;)</code> - boolean</li>\n<li><code>path.join()</code> - returns an absolute path by joining path segments. Additionally, it takes care of platform specific delimiters and does normalizing (ignoring, adding delimiters and process nesting delimiters if any). Delimiters - <code>/</code>, <code>\\</code>, <code>.</code>, <code>..</code></li>\n<li><code>path.resolve()</code> - behaves like <code>join()</code>, except it is processed right to left. Also the latest (right most argument) becomes the root if it has a <code>/</code>. If no argument has a <code>/</code>, the actual system root path becomes the root. Returns an absolute path in all cases.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-js\">const path = require(&quot;node:path&quot;);\n\nconst currentDirectoryConvenienceVariable = __dirname;\nconsole.log(currentDirectoryConvenienceVariable);\nconst currentModuleConvenienceVariable = __filename;\nconsole.log(currentModuleConvenienceVariable);\n\n\nconsole.log(&quot;\\n# basename&quot;);\nconsole.log(path.basename(__dirname));\n\n\nconsole.log(&quot;\\n# extname&quot;);\nconsole.log(path.extname(__filename));\n\n\nconsole.log(&quot;\\n# parse&quot;);\nconsole.log(path.parse(__filename));\nconsole.log(path.parse(__dirname));\n\n\nconsole.log(&quot;\\n# format&quot;);\nconst obj1 = path.parse(__filename);\nconst obj2 = path.parse(__dirname);\nconsole.log(path.format(obj1));\nconsole.log(path.format(obj2));\n\n\nconsole.log(&quot;\\n# path.join&quot;);\nconsole.log(path.join(&quot;folder1&quot;, &quot;folder2&quot;, &quot;index.html&quot;)); // simple join\nconsole.log(path.join(&quot;/folder1&quot;, &quot;folder2&quot;, &quot;index.html&quot;)); // simple join\nconsole.log(path.join(&quot;/folder1&quot;, &quot;//folder2&quot;, &quot;index.html&quot;)); // smartly ignores redundant\nconsole.log(path.join(&quot;/folder1&quot;, &quot;//folder2&quot;, &quot;../index.html&quot;)); // smartly ignores redundant, processes nesting\nconsole.log(path.join(__dirname, &quot;data.json&quot;));\n\n\nconsole.log(&quot;\\n# path.resolve&quot;);\nconsole.log(path.resolve(&quot;folder1&quot;, &quot;folder2&quot;, &quot;index.html&quot;)); // no root like argument, so actual root becomes root\nconsole.log(path.resolve(&quot;/folder1&quot;, &quot;folder2&quot;, &quot;index.html&quot;)); // has a root like argument, so it becomes root\n\nconsole.log(path.resolve(&quot;/folder1&quot;, &quot;//folder2&quot;, &quot;index.html&quot;));\n// has multiple root like arguments, the latest one becomes root, smartly ignores redundant delimiter\n\nconsole.log(path.resolve(&quot;/folder1&quot;, &quot;//folder2&quot;, &quot;../index.html&quot;));\n// has multiple root like arguments, the latest one becomes root, smartly ignores redundant delimiter, processes nesting\n\nconsole.log(path.resolve(__dirname, &quot;data.json&quot;));\n</code></pre>\n",
      "id": 22
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/20_Callback_pattern.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/20_Callback_pattern.html",
      "content": "# 20. Callback pattern\nCreated Saturday 28 January 2023 at 11:44 am\n\n## Jargon\n1. \"Callback\" - A function being passed/consumed/returned is called a \"callback\". Also means an argument accepted by a piece of code (functio, object class), which will run the function with relevant parameters when some desired/undesired state is reached in that piece of code.\n2. \"Higher order function\" - A function that accepts/works-with/returns \"callback\" functions.\n\n\n## Types of callbacks (based on execution time)\n1. Synchronous callback - a callback function that's executed immediately.\n\t- \"Immediately\" means as part of a synchronous chain. \n\t- Examples - map, filter, reducer functions, custom functions.\n2. Asynchronous callback - a callback function that's not executed immediately.\n\t- \"Not immediately\" means deferred execution based on time or event or on error, etc.\n\t- Examples - eventListeners ('click' event in the DOM), reading/writing to files, querying databases, making network requests.\n\nNothing new here.",
      "html": "<h1 id=\"20.-callback-pattern\">20. Callback pattern <a class=\"heading-anchor-permalink\" href=\"#20.-callback-pattern\">#</a></h1>\n<p>Created Saturday 28 January 2023 at 11:44 am</p>\n<h2 id=\"jargon\">Jargon <a class=\"heading-anchor-permalink\" href=\"#jargon\">#</a></h2>\n<ol>\n<li>“Callback” - A function being passed/consumed/returned is called a “callback”. Also means an argument accepted by a piece of code (functio, object class), which will run the function with relevant parameters when some desired/undesired state is reached in that piece of code.</li>\n<li>“Higher order function” - A function that accepts/works-with/returns “callback” functions.</li>\n</ol>\n<h2 id=\"types-of-callbacks-(based-on-execution-time)\">Types of callbacks (based on execution time) <a class=\"heading-anchor-permalink\" href=\"#types-of-callbacks-(based-on-execution-time)\">#</a></h2>\n<ol>\n<li>Synchronous callback - a callback function that’s executed immediately.\n<ul>\n<li>“Immediately” means as part of a synchronous chain.</li>\n<li>Examples - map, filter, reducer functions, custom functions.</li>\n</ul>\n</li>\n<li>Asynchronous callback - a callback function that’s not executed immediately.\n<ul>\n<li>“Not immediately” means deferred execution based on time or event or on error, etc.</li>\n<li>Examples - eventListeners (‘click’ event in the DOM), reading/writing to files, querying databases, making network requests.</li>\n</ul>\n</li>\n</ol>\n<p>Nothing new here.</p>\n",
      "id": 23
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/21_Events_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/21_Events_module.html",
      "content": "# 21. Events module\nCreated Saturday 28 January 2023 at 12:23 pm\n\nThe events module is meant to help with the event driven programming paradigm, that's very popular in the Node.js ecosystem since Node.js focuses on non-blocking execution.\n\nIn simple words, suppose your code (that you're going to write) is going to be used as part of an external entity. And your code has the responsibility to let the external entity know when certain events have occurred within your code. The external entity is most probably a high level system like a UI or or even a script, and your code is probably some low-level/domain-specific code being used as a system code or external library.\n\nThis module, will help you write such a \"piece of code\", i.e. a JS module that emits events.\n\n## Importing the events module\n- The module exposes a class.\n- This class is usually named \"EventEmitter\" instead of \"Events\". This is optional since the name does not matter in CommonJS.\n- To start working with events, create an instance. This instance can be used to register and emit events.\n```js\nconst EventEmitter = require(\"node:events\");\nconst emitter = new EventEmitter(); // constructor syntax, no arguments needed by default\n\n// you'll export tangible functions, object etc, like usual\n//\n// you'll also export the `emitter` (above), so the importing file can add events that it wishes to listen for, i.e. the import module will subscribe to your module\n```\n\nNote (FIXME - gpt ok, makes sense, check again): \n- If only one instance of this module (which emits events) is going to be used, the above is fine.\n- if multiple instances of the module are needed, just create a class (or use factory function pattern) that contains both the work code, as well as the emitter. This way we don't generate any data in the module, and data and emitter instances belong to the usage scope, allowing for multiplicity with isolation, and safety from shared state or Node's cache on first run limitation.\n\n## Registering and emitting events\nThe class has the two functions:\n1. `.on(eventNameOrSymbol, callbackFn)` - register a callback to respond to events (i.e. it will run when the event occurs).\n2. `.emit(eventNameOrSymbol, [arg1, arg2])` - emit an event. The optional arguments are passed as is to the registered callback function, they are data associated with the event.\n```js\nconst EventEmitter = require(\"node:events\");\nconst emitter = new EventEmitter();\n\n\nemitter.on(\"order-pizza\", () => { console.log(\"Order placed\"); });\n\nemitter.emit(\"order-pizza\");\n```\n- Event identifiers can be strings or `Symbol`.\n- A \"listener\" a short term for \"registered callback for an event\".\n\nNote (optional - not part of the course): \n- `.once` - used to register a callback that executes only the first time (same syntax as `.on`)\n- `.addListener` is an alias of `.on`\n- `.removeListener(eventNameOrSymbol, callback)` - removes an existing listener for the given event. Of course, the callback cannot be an anonymous function here, since function comparison is intractable. Note: this removes only one instance of the listener - i.e. it won't remove duplicates if they exist.\n- `.removeAllListeners(eventNameOrSymbol)` - remove all registered callbacks for a given event.\n- `.eventNames()` - returns an array of all events.\n\n## Examples and patterns\n### 1. Pass data with an event - callback arguments\n```js\nemitter.on(\"order-pizza\", (instructionsText) => {\n  console.log(`Order received! Baking a pizza`);\n  if (instructionsText) console.log(`Instructions: ${instructionsText}`);\n});\n\nemitter.emit(\"order-pizza\", \"Add extra cheese\");\n```\n### 2. Pass multiple data with an event - callback arguments\n```js\nemitter.on(\"order-pizza\", (instructionsText, sides) => {\n  console.log(`Order received! Baking a pizza`);\n  if (instructionsText) console.log(`Instructions: ${instructionsText}`);\n  if (sides) console.log(`Sides: ${sides}`);\n});\n\nemitter.emit(\"order-pizza\", \"Add extra cheese\", \"French fries and soda\");\n```\n### 3. Multiple callbacks can be registered for the same event\n```js\nemitter.on(\"order-pizza\", () => console.log(\"Callback 1 called\"));\nemitter.on(\"order-pizza\", () => console.log(\"Callback 2 called\"));\n\nemitter.emit(\"order-pizza\");\n```\n### 4. Emitting events from callbacks is allowed\nNothing unusual, but this can be hard to reason about in a large codebase. There's possibility of inadvertent infinite loops. Also, since separations of concern in software is preferred, the emitting module most likely doesn't call main \"events\" on its own.\n```js\nemitter.on(\"pizza-ready\", () => console.log(\"Order is ready!\"));\nemitter.on(\"order-pizza\", () => {\n  console.log(\"Order received!\");\n  // make pizza code here\n  emitter.emit(\"pizza-ready\");\n});\n\nemitter.emit(\"order-pizza\");\n```\n\n\n## Non-blocking nature of events\n- Registering an event is a non-blocking operation, obviously.\n- Emitting events is a blocking operation, since it triggers the registered callbacks to run. *There is a possibility that callbacks themselves use promises, but anyway, atleast the queueing up is synchronous*.\nExample:\n```js\nconsole.log(\"Sync 1\");\nemitter.on(\"order-pizza\", () => console.log(\"Callback 1 called\"));\nconsole.log(\"Sync 2\");\nemitter.on(\"order-pizza\", () => console.log(\"Callback 2 called\"));\nconsole.log(\"Sync 3\");\nemitter.emit(\"order-pizza\", \"Add extra cheese\", \"French fries and soda\"); // blocking\nconsole.log(\"Sync 4\");\n\n\n/* Output\n\nSync 1\nSync 2\nSync 3\nCallback 1 called\nCallback 2 called\nSync 4\n\n*/\n```",
      "html": "<h1 id=\"21.-events-module\">21. Events module <a class=\"heading-anchor-permalink\" href=\"#21.-events-module\">#</a></h1>\n<p>Created Saturday 28 January 2023 at 12:23 pm</p>\n<p>The events module is meant to help with the event driven programming paradigm, that’s very popular in the Node.js ecosystem since Node.js focuses on non-blocking execution.</p>\n<p>In simple words, suppose your code (that you’re going to write) is going to be used as part of an external entity. And your code has the responsibility to let the external entity know when certain events have occurred within your code. The external entity is most probably a high level system like a UI or or even a script, and your code is probably some low-level/domain-specific code being used as a system code or external library.</p>\n<p>This module, will help you write such a “piece of code”, i.e. a JS module that emits events.</p>\n<h2 id=\"importing-the-events-module\">Importing the events module <a class=\"heading-anchor-permalink\" href=\"#importing-the-events-module\">#</a></h2>\n<ul>\n<li>The module exposes a class.</li>\n<li>This class is usually named “EventEmitter” instead of “Events”. This is optional since the name does not matter in CommonJS.</li>\n<li>To start working with events, create an instance. This instance can be used to register and emit events.</li>\n</ul>\n<pre><code class=\"language-js\">const EventEmitter = require(&quot;node:events&quot;);\nconst emitter = new EventEmitter(); // constructor syntax, no arguments needed by default\n\n// you'll export tangible functions, object etc, like usual\n//\n// you'll also export the `emitter` (above), so the importing file can add events that it wishes to listen for, i.e. the import module will subscribe to your module\n</code></pre>\n<p>Note (FIXME - gpt ok, makes sense, check again):</p>\n<ul>\n<li>If only one instance of this module (which emits events) is going to be used, the above is fine.</li>\n<li>if multiple instances of the module are needed, just create a class (or use factory function pattern) that contains both the work code, as well as the emitter. This way we don’t generate any data in the module, and data and emitter instances belong to the usage scope, allowing for multiplicity with isolation, and safety from shared state or Node’s cache on first run limitation.</li>\n</ul>\n<h2 id=\"registering-and-emitting-events\">Registering and emitting events <a class=\"heading-anchor-permalink\" href=\"#registering-and-emitting-events\">#</a></h2>\n<p>The class has the two functions:</p>\n<ol>\n<li><code>.on(eventNameOrSymbol, callbackFn)</code> - register a callback to respond to events (i.e. it will run when the event occurs).</li>\n<li><code>.emit(eventNameOrSymbol, [arg1, arg2])</code> - emit an event. The optional arguments are passed as is to the registered callback function, they are data associated with the event.</li>\n</ol>\n<pre><code class=\"language-js\">const EventEmitter = require(&quot;node:events&quot;);\nconst emitter = new EventEmitter();\n\n\nemitter.on(&quot;order-pizza&quot;, () =&gt; { console.log(&quot;Order placed&quot;); });\n\nemitter.emit(&quot;order-pizza&quot;);\n</code></pre>\n<ul>\n<li>Event identifiers can be strings or <code>Symbol</code>.</li>\n<li>A “listener” a short term for “registered callback for an event”.</li>\n</ul>\n<p>Note (optional - not part of the course):</p>\n<ul>\n<li><code>.once</code> - used to register a callback that executes only the first time (same syntax as <code>.on</code>)</li>\n<li><code>.addListener</code> is an alias of <code>.on</code></li>\n<li><code>.removeListener(eventNameOrSymbol, callback)</code> - removes an existing listener for the given event. Of course, the callback cannot be an anonymous function here, since function comparison is intractable. Note: this removes only one instance of the listener - i.e. it won’t remove duplicates if they exist.</li>\n<li><code>.removeAllListeners(eventNameOrSymbol)</code> - remove all registered callbacks for a given event.</li>\n<li><code>.eventNames()</code> - returns an array of all events.</li>\n</ul>\n<h2 id=\"examples-and-patterns\">Examples and patterns <a class=\"heading-anchor-permalink\" href=\"#examples-and-patterns\">#</a></h2>\n<h3 id=\"1.-pass-data-with-an-event---callback-arguments\">1. Pass data with an event - callback arguments <a class=\"heading-anchor-permalink\" href=\"#1.-pass-data-with-an-event---callback-arguments\">#</a></h3>\n<pre><code class=\"language-js\">emitter.on(&quot;order-pizza&quot;, (instructionsText) =&gt; {\n  console.log(`Order received! Baking a pizza`);\n  if (instructionsText) console.log(`Instructions: ${instructionsText}`);\n});\n\nemitter.emit(&quot;order-pizza&quot;, &quot;Add extra cheese&quot;);\n</code></pre>\n<h3 id=\"2.-pass-multiple-data-with-an-event---callback-arguments\">2. Pass multiple data with an event - callback arguments <a class=\"heading-anchor-permalink\" href=\"#2.-pass-multiple-data-with-an-event---callback-arguments\">#</a></h3>\n<pre><code class=\"language-js\">emitter.on(&quot;order-pizza&quot;, (instructionsText, sides) =&gt; {\n  console.log(`Order received! Baking a pizza`);\n  if (instructionsText) console.log(`Instructions: ${instructionsText}`);\n  if (sides) console.log(`Sides: ${sides}`);\n});\n\nemitter.emit(&quot;order-pizza&quot;, &quot;Add extra cheese&quot;, &quot;French fries and soda&quot;);\n</code></pre>\n<h3 id=\"3.-multiple-callbacks-can-be-registered-for-the-same-event\">3. Multiple callbacks can be registered for the same event <a class=\"heading-anchor-permalink\" href=\"#3.-multiple-callbacks-can-be-registered-for-the-same-event\">#</a></h3>\n<pre><code class=\"language-js\">emitter.on(&quot;order-pizza&quot;, () =&gt; console.log(&quot;Callback 1 called&quot;));\nemitter.on(&quot;order-pizza&quot;, () =&gt; console.log(&quot;Callback 2 called&quot;));\n\nemitter.emit(&quot;order-pizza&quot;);\n</code></pre>\n<h3 id=\"4.-emitting-events-from-callbacks-is-allowed\">4. Emitting events from callbacks is allowed <a class=\"heading-anchor-permalink\" href=\"#4.-emitting-events-from-callbacks-is-allowed\">#</a></h3>\n<p>Nothing unusual, but this can be hard to reason about in a large codebase. There’s possibility of inadvertent infinite loops. Also, since separations of concern in software is preferred, the emitting module most likely doesn’t call main “events” on its own.</p>\n<pre><code class=\"language-js\">emitter.on(&quot;pizza-ready&quot;, () =&gt; console.log(&quot;Order is ready!&quot;));\nemitter.on(&quot;order-pizza&quot;, () =&gt; {\n  console.log(&quot;Order received!&quot;);\n  // make pizza code here\n  emitter.emit(&quot;pizza-ready&quot;);\n});\n\nemitter.emit(&quot;order-pizza&quot;);\n</code></pre>\n<h2 id=\"non-blocking-nature-of-events\">Non-blocking nature of events <a class=\"heading-anchor-permalink\" href=\"#non-blocking-nature-of-events\">#</a></h2>\n<ul>\n<li>Registering an event is a non-blocking operation, obviously.</li>\n<li>Emitting events is a blocking operation, since it triggers the registered callbacks to run. <em>There is a possibility that callbacks themselves use promises, but anyway, atleast the queueing up is synchronous</em>.\nExample:</li>\n</ul>\n<pre><code class=\"language-js\">console.log(&quot;Sync 1&quot;);\nemitter.on(&quot;order-pizza&quot;, () =&gt; console.log(&quot;Callback 1 called&quot;));\nconsole.log(&quot;Sync 2&quot;);\nemitter.on(&quot;order-pizza&quot;, () =&gt; console.log(&quot;Callback 2 called&quot;));\nconsole.log(&quot;Sync 3&quot;);\nemitter.emit(&quot;order-pizza&quot;, &quot;Add extra cheese&quot;, &quot;French fries and soda&quot;); // blocking\nconsole.log(&quot;Sync 4&quot;);\n\n\n/* Output\n\nSync 1\nSync 2\nSync 3\nCallback 1 called\nCallback 2 called\nSync 4\n\n*/\n</code></pre>\n",
      "id": 24
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/22_Extending_from_EventEmitter.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/22_Extending_from_EventEmitter.html",
      "content": "# 22. Extending from EventEmitter\nCreated Saturday 28 January 2023 at 12:57 pm\n\n## Doing it\nWe learnt about the events module that returns an \"EventEmitter\" like class, that has `.emit` and `.on` for emitting and registering events.\n\nThere's another way to use the `events` module - by inheriting from it. See the [code](https://github.com/exemplar-codes/codevolution-nodejs/commit/e3e4c991ab34370428f93d84745c8978ee1d0d56).\n\nFIXME: compositions would have worked just as well.\n\n## Why\n1. Manage, emit and respond to it's own events.\n2.  We can use multiple modules without tight coupling of events.\n3. It's like an isolated events chamber. Easier to manage and debug.\n4. Event collisions (due to name/symbol) are prevented (which would not be the case if a single EventEmitter instance)\n5. Events are cleaned up automatically when the custom class instance dies.\n\nFIXME: learn how this is done systematically\n\nCore modules like `fs`, `streams` and `http` also inherit from the `events` module.\n\n## Alternative to inheritance\nIf you don't prefer classes, or inheritance. Using a the factory function pattern is just fine. Discussed on the previous [page](./21_Events_module.md).",
      "html": "<h1 id=\"22.-extending-from-eventemitter\">22. Extending from EventEmitter <a class=\"heading-anchor-permalink\" href=\"#22.-extending-from-eventemitter\">#</a></h1>\n<p>Created Saturday 28 January 2023 at 12:57 pm</p>\n<h2 id=\"doing-it\">Doing it <a class=\"heading-anchor-permalink\" href=\"#doing-it\">#</a></h2>\n<p>We learnt about the events module that returns an “EventEmitter” like class, that has <code>.emit</code> and <code>.on</code> for emitting and registering events.</p>\n<p>There’s another way to use the <code>events</code> module - by inheriting from it. See the <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/e3e4c991ab34370428f93d84745c8978ee1d0d56\">code</a>.</p>\n<p>FIXME: compositions would have worked just as well.</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ol>\n<li>Manage, emit and respond to it’s own events.</li>\n<li>We can use multiple modules without tight coupling of events.</li>\n<li>It’s like an isolated events chamber. Easier to manage and debug.</li>\n<li>Event collisions (due to name/symbol) are prevented (which would not be the case if a single EventEmitter instance)</li>\n<li>Events are cleaned up automatically when the custom class instance dies.</li>\n</ol>\n<p>FIXME: learn how this is done systematically</p>\n<p>Core modules like <code>fs</code>, <code>streams</code> and <code>http</code> also inherit from the <code>events</code> module.</p>\n<h2 id=\"alternative-to-inheritance\">Alternative to inheritance <a class=\"heading-anchor-permalink\" href=\"#alternative-to-inheritance\">#</a></h2>\n<p>If you don’t prefer classes, or inheritance. Using a the factory function pattern is just fine. Discussed on the previous <a href=\"./21_Events_module.html\">page</a>.</p>\n",
      "id": 25
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/23_Character_sets_and_encoding.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/23_Character_sets_and_encoding.html",
      "content": "# 23 Character Sets and encoding\nCreated Saturday 28 January 2023 at 02:08 pm\n\nThis is a detour from learning about modules.\n\nGood to know: Character <--> ASCII equivalent number in JS\n```js\n// string to number\n\"V\".charCodeAt(); // 86\n\"⚡️\".charCodeAt(); // 9889\n\n'ABC'.charCodeAt(2); // 67. multi size string supported. \n// Also, that means default param is 0.\n```\n\n```js\n// number to string\nString.fromCharCode(65); // 'A'\n\nString.fromCharCode(65, 66, 67); // 'ABC', comma separated supported\n```\n\n\n## Character sets (number <--> character mapping)\nCharacter sets are number <--> character mapping.\n1. ASCII\n2. Unicode\n\nCharacter sets, by nature, are arbitary.\n\n\n## Character encoding (character number <--> binary mapping)\nCharacter encoding are character number <--> binary mapping.\n\nIt's needed because of the following situation: we have a number for a given character. How do we convert it into binary?\n1. Use 2's complement?\n2. What about endianness?\n3. How many bits to use?\n\nAll this logic for (number for a character <--> binary) is called character encoding.\n\nSome popular character encodings:\n1. UTF-8: 2's complement, little-endian, 8 bits.\n\nSimilarly, there are \"encodings\" for video, audio, pictures, etc.\n",
      "html": "<h1 id=\"23-character-sets-and-encoding\">23 Character Sets and encoding <a class=\"heading-anchor-permalink\" href=\"#23-character-sets-and-encoding\">#</a></h1>\n<p>Created Saturday 28 January 2023 at 02:08 pm</p>\n<p>This is a detour from learning about modules.</p>\n<p>Good to know: Character &lt;–&gt; ASCII equivalent number in JS</p>\n<pre><code class=\"language-js\">// string to number\n&quot;V&quot;.charCodeAt(); // 86\n&quot;⚡️&quot;.charCodeAt(); // 9889\n\n'ABC'.charCodeAt(2); // 67. multi size string supported. \n// Also, that means default param is 0.\n</code></pre>\n<pre><code class=\"language-js\">// number to string\nString.fromCharCode(65); // 'A'\n\nString.fromCharCode(65, 66, 67); // 'ABC', comma separated supported\n</code></pre>\n<h2 id=\"character-sets-(number-%3C%E2%80%93%3E-character-mapping)\">Character sets (number &lt;–&gt; character mapping) <a class=\"heading-anchor-permalink\" href=\"#character-sets-(number-%3C%E2%80%93%3E-character-mapping)\">#</a></h2>\n<p>Character sets are number &lt;–&gt; character mapping.</p>\n<ol>\n<li>ASCII</li>\n<li>Unicode</li>\n</ol>\n<p>Character sets, by nature, are arbitary.</p>\n<h2 id=\"character-encoding-(character-number-%3C%E2%80%93%3E-binary-mapping)\">Character encoding (character number &lt;–&gt; binary mapping) <a class=\"heading-anchor-permalink\" href=\"#character-encoding-(character-number-%3C%E2%80%93%3E-binary-mapping)\">#</a></h2>\n<p>Character encoding are character number &lt;–&gt; binary mapping.</p>\n<p>It’s needed because of the following situation: we have a number for a given character. How do we convert it into binary?</p>\n<ol>\n<li>Use 2’s complement?</li>\n<li>What about endianness?</li>\n<li>How many bits to use?</li>\n</ol>\n<p>All this logic for (number for a character &lt;–&gt; binary) is called character encoding.</p>\n<p>Some popular character encodings:</p>\n<ol>\n<li>UTF-8: 2’s complement, little-endian, 8 bits.</li>\n</ol>\n<p>Similarly, there are “encodings” for video, audio, pictures, etc.</p>\n",
      "id": 26
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/24_Streams_and_Buffers.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/24_Streams_and_Buffers.html",
      "content": "# 24. Streams and Buffers\nCreated Saturday 28 January 2023 at 04:00 pm\n\n## Stream\nMeaning: pieces of data in transit, i.e. that is being moved from one point to another over time.\n\nExamples:\n1. A file being transferred from one computer to another over the internet (or some other channel).\n2. Data being transferred from one file to another within the same computer.\n\nThe reason behind the concept is to process/transport a large block of data in chunks, as soon as they arrive at the compute location (e.g. part of the program, memory, or physical system at a location), instead of waiting for the entire data to be available for before processing.\nThis prevents unnecessary data downloads and optimizes memory usage.\n\n\n## Buffer\nBuffer is an area where data that's yet to be processed/consumed is kept. i.e. waiting area.\n\n- A buffer is used both if there is a lot (or too less) of data to process but we don't want to do it all at once (for some reason like capacity, efficiency etc).\n- Examples - file larger than RAM capacity, streaming a video online - it's not very efficient to let the whole download complete, so chunking is preferred.\n- Real life example - a roller-coaster ride with capacity of 30 people. There are two cases:\n\t1. Too much - 100 people arrive. 70 have to wait in the buffer.\n\t2. Too few - only 2 people arrive. The ride manager will delay (for atleast 10 people to arrive) or reject starting the ride since it's too expensive to run for so few people.\n\n\n## Buffers in Node.js\n- *Control of Data Arrival*: The server (so Node.js) cannot control the pace at which data arrives in a connection stream.\n- *Timing of data processing*: It can only decide when is the right time to process the data. Based on specified criteria or event.\n- *Buffer Usage*:\n\t- If there's data already being processed or there's too little data, Node.js puts the arriving data in the buffer.\n\t- It is an intentionally ~~small~~ *specified* area that Node.js maintains in the runtime to process a stream of data.\n\t- Buffer max size can be specified, and Node.js auto handles *backpressure* and *wait-until-significant-size* controls if Buffers are working in tandem. See [chatgpt chat](https://chat.openai.com/c/4346dd1f-eb30-44d0-a8fb-863472d483f5)\n\nExamples: \n1. *Playing a video online*: The client (browser) maintains a buffer where video chunks are kept. These chunks are processed and played at their given timestamp. This has many advantages:\n\t1. The user doesn't have to wait for the whole video to download completely.\n\t2. The server doesn't have to load the whole video in RAM, as it sends chunks only.\n\t3. The user can start a video from somewhere in the middle, and doesn't have to download the part before or after. This also makes running the server efficient.\n\t4. The client stops making requests when the buffer is full (say the next 5 minutes have been downloaded). It will start requests only when the buffer has 1 minute of remaining content. This is good for both client and server, since a user may stop watching a video after some time.\n2. *Working with large files*: Over a network or even locally, there are a lot of files that are quite large (w.r.t RAM) like database files, media, files in general. This is an bigger problem for servers. Buffers help with this.\n\nNote: \n- ECMAScript does has specs on Buffer\n- Browsers and Node have different APIs for buffers. Need to be stu\n## Writing some code\n`Buffer` is available globally without importing.\n- [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/c5623674cad1bdb19fbca5e00dc31bf22c703166): using the \"Buffer\" class.\n- [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/147ee60013a120e8655c627e540f254a1cf65b85): Writing to buffers\n\n- Node.js uses buffers internally when required, and we may never need to work with buffers directly.\n- We could have worked well with `fs`, `http` without the knowledge of buffers in this level of detail. But knowing fundamentals is a good thing.\n\n\n## Opinion - BLOBs are not common in core business servers (FIXME: guess)\nWorking with stream, buffers, receiving/sending large files is not a usual thing for most _CRUD_ server side apps.\n\nThe reason is that core business web-apps (servers) work mostly with text data (JSON) etc. All images, videos, files in apps are not uploaded/downloaded from/to the server. Instead the server just provides \"links\" (text) with some authorization data to clients. Clients then download files from 3rd part cloud computing storage services, as needed. Uploads too, are handled this way, i.e. client side code directly uploads to the external service, and shows progress/success based on responses from the external service. Upon success, the client receives a URL and auth data from the external service, which is passed along to the core business server, which stores the link + data.\n\nIn other words, APIs in core business web-servers don't work with BLOBs. They offload all BLOBs to external services and just work with URLs and authorization data (which is text).\n\n\n**Q1**: Don't we still need to work with streams since we do have to write client side upload code, based on which we show progress?\n**A1**: Mostly no. External storage services provide a SDKs (for both client and server) that do the uploading and expose \"scalar\" values that we can poll against, or it provides events that do something equivalent. We use these for showing progress.\n\n**Q2**: Why do businesses use 3rd party services for large storage?\n**A2**: On prem-servers are rare, unless it's a very big business. I'll assume that the business is already using cloud services even for small \"scalar data\". \nThere are many reasons for using 3rd party services for large storage:\n1. Using a simple compute + storage service is expensive, compared to a storage service offered by the same platform.\n2. Having a dedicated endpoint for BLOBs makes development easy, as compared to having both BLOB APIs and \"scalar\" APIs run on the same server, since a BLOB operation could significantly hinder even small \"scalar\" API requests.\n3. Development/maintenance costs - writing custom BLOB APIs, using file databases means hiring more developers with niche experience - this can be very expensive, especially for small businesses. Maintaining the code is another task.\n\nBTW, using cloud services also has it's own challenges - huge accidental expenses, large bills in general, vendor lock in, lack of customization, rate limits etc.\n\nThis is becoming even more common, as 3rd party services and cloud computing is becoming popular.\n",
      "html": "<h1 id=\"24.-streams-and-buffers\">24. Streams and Buffers <a class=\"heading-anchor-permalink\" href=\"#24.-streams-and-buffers\">#</a></h1>\n<p>Created Saturday 28 January 2023 at 04:00 pm</p>\n<h2 id=\"stream\">Stream <a class=\"heading-anchor-permalink\" href=\"#stream\">#</a></h2>\n<p>Meaning: pieces of data in transit, i.e. that is being moved from one point to another over time.</p>\n<p>Examples:</p>\n<ol>\n<li>A file being transferred from one computer to another over the internet (or some other channel).</li>\n<li>Data being transferred from one file to another within the same computer.</li>\n</ol>\n<p>The reason behind the concept is to process/transport a large block of data in chunks, as soon as they arrive at the compute location (e.g. part of the program, memory, or physical system at a location), instead of waiting for the entire data to be available for before processing.\nThis prevents unnecessary data downloads and optimizes memory usage.</p>\n<h2 id=\"buffer\">Buffer <a class=\"heading-anchor-permalink\" href=\"#buffer\">#</a></h2>\n<p>Buffer is an area where data that’s yet to be processed/consumed is kept. i.e. waiting area.</p>\n<ul>\n<li>A buffer is used both if there is a lot (or too less) of data to process but we don’t want to do it all at once (for some reason like capacity, efficiency etc).</li>\n<li>Examples - file larger than RAM capacity, streaming a video online - it’s not very efficient to let the whole download complete, so chunking is preferred.</li>\n<li>Real life example - a roller-coaster ride with capacity of 30 people. There are two cases:\n<ol>\n<li>Too much - 100 people arrive. 70 have to wait in the buffer.</li>\n<li>Too few - only 2 people arrive. The ride manager will delay (for atleast 10 people to arrive) or reject starting the ride since it’s too expensive to run for so few people.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"buffers-in-node.js\">Buffers in Node.js <a class=\"heading-anchor-permalink\" href=\"#buffers-in-node.js\">#</a></h2>\n<ul>\n<li><em>Control of Data Arrival</em>: The server (so Node.js) cannot control the pace at which data arrives in a connection stream.</li>\n<li><em>Timing of data processing</em>: It can only decide when is the right time to process the data. Based on specified criteria or event.</li>\n<li><em>Buffer Usage</em>:\n<ul>\n<li>If there’s data already being processed or there’s too little data, Node.js puts the arriving data in the buffer.</li>\n<li>It is an intentionally <s>small</s> <em>specified</em> area that Node.js maintains in the runtime to process a stream of data.</li>\n<li>Buffer max size can be specified, and Node.js auto handles <em>backpressure</em> and <em>wait-until-significant-size</em> controls if Buffers are working in tandem. See <a href=\"https://chat.openai.com/c/4346dd1f-eb30-44d0-a8fb-863472d483f5\">chatgpt chat</a></li>\n</ul>\n</li>\n</ul>\n<p>Examples:</p>\n<ol>\n<li><em>Playing a video online</em>: The client (browser) maintains a buffer where video chunks are kept. These chunks are processed and played at their given timestamp. This has many advantages:\n<ol>\n<li>The user doesn’t have to wait for the whole video to download completely.</li>\n<li>The server doesn’t have to load the whole video in RAM, as it sends chunks only.</li>\n<li>The user can start a video from somewhere in the middle, and doesn’t have to download the part before or after. This also makes running the server efficient.</li>\n<li>The client stops making requests when the buffer is full (say the next 5 minutes have been downloaded). It will start requests only when the buffer has 1 minute of remaining content. This is good for both client and server, since a user may stop watching a video after some time.</li>\n</ol>\n</li>\n<li><em>Working with large files</em>: Over a network or even locally, there are a lot of files that are quite large (w.r.t RAM) like database files, media, files in general. This is an bigger problem for servers. Buffers help with this.</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>ECMAScript does has specs on Buffer</li>\n<li>Browsers and Node have different APIs for buffers. Need to be stu</li>\n</ul>\n<h2 id=\"writing-some-code\">Writing some code <a class=\"heading-anchor-permalink\" href=\"#writing-some-code\">#</a></h2>\n<p><code>Buffer</code> is available globally without importing.</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/c5623674cad1bdb19fbca5e00dc31bf22c703166\">Code</a>: using the “Buffer” class.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/147ee60013a120e8655c627e540f254a1cf65b85\">Code</a>: Writing to buffers</p>\n</li>\n<li>\n<p>Node.js uses buffers internally when required, and we may never need to work with buffers directly.</p>\n</li>\n<li>\n<p>We could have worked well with <code>fs</code>, <code>http</code> without the knowledge of buffers in this level of detail. But knowing fundamentals is a good thing.</p>\n</li>\n</ul>\n<h2 id=\"opinion---blobs-are-not-common-in-core-business-servers-(fixme%3A-guess)\">Opinion - BLOBs are not common in core business servers (FIXME: guess) <a class=\"heading-anchor-permalink\" href=\"#opinion---blobs-are-not-common-in-core-business-servers-(fixme%3A-guess)\">#</a></h2>\n<p>Working with stream, buffers, receiving/sending large files is not a usual thing for most <em>CRUD</em> server side apps.</p>\n<p>The reason is that core business web-apps (servers) work mostly with text data (JSON) etc. All images, videos, files in apps are not uploaded/downloaded from/to the server. Instead the server just provides “links” (text) with some authorization data to clients. Clients then download files from 3rd part cloud computing storage services, as needed. Uploads too, are handled this way, i.e. client side code directly uploads to the external service, and shows progress/success based on responses from the external service. Upon success, the client receives a URL and auth data from the external service, which is passed along to the core business server, which stores the link + data.</p>\n<p>In other words, APIs in core business web-servers don’t work with BLOBs. They offload all BLOBs to external services and just work with URLs and authorization data (which is text).</p>\n<p><strong>Q1</strong>: Don’t we still need to work with streams since we do have to write client side upload code, based on which we show progress?\n<strong>A1</strong>: Mostly no. External storage services provide a SDKs (for both client and server) that do the uploading and expose “scalar” values that we can poll against, or it provides events that do something equivalent. We use these for showing progress.</p>\n<p><strong>Q2</strong>: Why do businesses use 3rd party services for large storage?\n<strong>A2</strong>: On prem-servers are rare, unless it’s a very big business. I’ll assume that the business is already using cloud services even for small “scalar data”.\nThere are many reasons for using 3rd party services for large storage:</p>\n<ol>\n<li>Using a simple compute + storage service is expensive, compared to a storage service offered by the same platform.</li>\n<li>Having a dedicated endpoint for BLOBs makes development easy, as compared to having both BLOB APIs and “scalar” APIs run on the same server, since a BLOB operation could significantly hinder even small “scalar” API requests.</li>\n<li>Development/maintenance costs - writing custom BLOB APIs, using file databases means hiring more developers with niche experience - this can be very expensive, especially for small businesses. Maintaining the code is another task.</li>\n</ol>\n<p>BTW, using cloud services also has it’s own challenges - huge accidental expenses, large bills in general, vendor lock in, lack of customization, rate limits etc.</p>\n<p>This is becoming even more common, as 3rd party services and cloud computing is becoming popular.</p>\n",
      "id": 27
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/25_Asynchronous_JavaScript.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/25_Asynchronous_JavaScript.html",
      "content": "# 25. Asynchronous JavaScript\nCreated Sunday 29 January 2023 at 02:27 am\n\n## JS - most basic form\nJS, in it's most basic form is synchronous, blocking and single-threaded.\n1. Synchronous - by default.\n2. Blocking - due to synchronous nature.\n3. Single threaded - default by choice.\n\n\n## JS - problems with most basic form\nJS in this form is not helpful. Let's think:\n- Browsers will freeze until there's a network response.\n- If JS is made asynchronous (and thus non-blocking), then making HTTP requests is possible, since \"work\" is done by external devices (internet) - browsers won't freeze.\n- Writing server-side however, is almost impossible. At most, the server will be able to handle 1 request at a time. This is different from \"HTTP requests\" since \"HTTP responses\" need work to be done by the server.\n- Server-side - even if JS is made asynchronous, single-threaded nature will allow only 1 request to be handled at a time (since database, file system reads need be done, and there's only 1 thread)\n\nIn other words, this form of JS is not beneficial for writing apps - client-side as well as \n\n\n## Making JS asynchronous, non-blocking and \\*single-threaded\n1. Synchronous - JS is made asynchronous by having an event-loop and task-queues.\n2. Non-blocking - JS is automatically made non-blocking when asynchronous operations are possible.\n3. Single threaded - To solve this problem, we need to create an abstraction of \"single-threadedness\" by having runtime components (on the server-side) that either are multi-threaded completely or can atleast get work done in a multi-threaded way using OS level utilities. FIXME: I guess this is what Node.js and the browser (think \"service workers\") runtimes do. **So, JS becomes \\*single-threaded, in the sense that all JavaScript code is single-threaded but it is allowed to use data processed by other threads**. FIXME: \\#3 is an educated guess, just verify it once.\n\n\n## Asynchronous JS programming constructs\nI already know these.\n1. Events\n2. Callbacks, promises, async-await\n\nNote: all these \"improvements\" constructs - event-loop, task-queues, \"single-threaded\" wrappers are parts of the runtime, not the JS engine.\n\n[Polling vs Interrupts - document](/assets/ChatGPT-interrupts-vs-polling.pdf)",
      "html": "<h1 id=\"25.-asynchronous-javascript\">25. Asynchronous JavaScript <a class=\"heading-anchor-permalink\" href=\"#25.-asynchronous-javascript\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 02:27 am</p>\n<h2 id=\"js---most-basic-form\">JS - most basic form <a class=\"heading-anchor-permalink\" href=\"#js---most-basic-form\">#</a></h2>\n<p>JS, in it’s most basic form is synchronous, blocking and single-threaded.</p>\n<ol>\n<li>Synchronous - by default.</li>\n<li>Blocking - due to synchronous nature.</li>\n<li>Single threaded - default by choice.</li>\n</ol>\n<h2 id=\"js---problems-with-most-basic-form\">JS - problems with most basic form <a class=\"heading-anchor-permalink\" href=\"#js---problems-with-most-basic-form\">#</a></h2>\n<p>JS in this form is not helpful. Let’s think:</p>\n<ul>\n<li>Browsers will freeze until there’s a network response.</li>\n<li>If JS is made asynchronous (and thus non-blocking), then making HTTP requests is possible, since “work” is done by external devices (internet) - browsers won’t freeze.</li>\n<li>Writing server-side however, is almost impossible. At most, the server will be able to handle 1 request at a time. This is different from “HTTP requests” since “HTTP responses” need work to be done by the server.</li>\n<li>Server-side - even if JS is made asynchronous, single-threaded nature will allow only 1 request to be handled at a time (since database, file system reads need be done, and there’s only 1 thread)</li>\n</ul>\n<p>In other words, this form of JS is not beneficial for writing apps - client-side as well as</p>\n<h2 id=\"making-js-asynchronous%2C-non-blocking-and-*single-threaded\">Making JS asynchronous, non-blocking and *single-threaded <a class=\"heading-anchor-permalink\" href=\"#making-js-asynchronous%2C-non-blocking-and-*single-threaded\">#</a></h2>\n<ol>\n<li>Synchronous - JS is made asynchronous by having an event-loop and task-queues.</li>\n<li>Non-blocking - JS is automatically made non-blocking when asynchronous operations are possible.</li>\n<li>Single threaded - To solve this problem, we need to create an abstraction of “single-threadedness” by having runtime components (on the server-side) that either are multi-threaded completely or can atleast get work done in a multi-threaded way using OS level utilities. FIXME: I guess this is what Node.js and the browser (think “service workers”) runtimes do. <strong>So, JS becomes *single-threaded, in the sense that all JavaScript code is single-threaded but it is allowed to use data processed by other threads</strong>. FIXME: #3 is an educated guess, just verify it once.</li>\n</ol>\n<h2 id=\"asynchronous-js-programming-constructs\">Asynchronous JS programming constructs <a class=\"heading-anchor-permalink\" href=\"#asynchronous-js-programming-constructs\">#</a></h2>\n<p>I already know these.</p>\n<ol>\n<li>Events</li>\n<li>Callbacks, promises, async-await</li>\n</ol>\n<p>Note: all these “improvements” constructs - event-loop, task-queues, “single-threaded” wrappers are parts of the runtime, not the JS engine.</p>\n<p><a href=\"/assets/ChatGPT-interrupts-vs-polling.pdf\">Polling vs Interrupts - document</a></p>\n",
      "id": 28
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/26_fs_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/26_fs_module.html",
      "content": "# 26. fs module\nCreated Sunday 29 January 2023 at 02:59 am\n\nfs is a core module meant for filesystem operations (list, find, create, read, update, delete).\n\n## Importing\n- fs needs to be imported.\n- It returns an object with various methods.\n```js\nconst fs = require(\"node:fs\");\n```\n\n\n## fs API\n- `readFileSync(\"some_path\" [,encoding])` - returns all contents of the file as a \"buffer\" by default. \n\t- If \"utf-8\" (or \"UTF-8\") encoding is specified, returns the file contents as a `string`. \n\t- Executes synchronously (blocking).\n- `writeFileSync(\"some_path\", content [, option])` - write given content to the file. \n\t- Content can be `string` or buffer. \n\t- \"option\" is an object. Example - `{ flag: 'a' }` is used for writing in append mode.\n\t- Executes synchronously (blocking).\n- `readFile(\"some_path\" [,encoding], callback)` - just like `readFileSync` but executes asynchronously.\n\t- callback: has two parameters - error and data. Error is null if no error occurs. data is a buffer or a string (if encoding \"UTF-8\" was specified).\n- `writeFile(\"some_path\", content [, option, callback])` - just like `writeFileSync` but executes asynchronously. \n\t- callback has one parameter - error. Error is null if no error occurs.\n- `unlink(\"some_path\", callbackCompulsory)` - delete single file.\n\nNote:\n- All these function accepts both relative and absolute paths.\n- In case of writing, Node.js creates a file if it does not exist.\n- Async modes follow \"error first pattern\" for callbacks, i.e. the first param is the error, second is the data (if any).\n- \"utf-8\" and \"UTF-8\" can be used interchangeably.\n- Deletions (rmdir, unlink etc): https://hackernoon.com/mastering-nodejs-how-to-delete-files-inside-a-nested-folder\n\n[Code example](https://github.com/exemplar-codes/codevolution-nodejs/commit/68910a170d61be572cefe4dd07df832eee279702)",
      "html": "<h1 id=\"26.-fs-module\">26. fs module <a class=\"heading-anchor-permalink\" href=\"#26.-fs-module\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 02:59 am</p>\n<p>fs is a core module meant for filesystem operations (list, find, create, read, update, delete).</p>\n<h2 id=\"importing\">Importing <a class=\"heading-anchor-permalink\" href=\"#importing\">#</a></h2>\n<ul>\n<li>fs needs to be imported.</li>\n<li>It returns an object with various methods.</li>\n</ul>\n<pre><code class=\"language-js\">const fs = require(&quot;node:fs&quot;);\n</code></pre>\n<h2 id=\"fs-api\">fs API <a class=\"heading-anchor-permalink\" href=\"#fs-api\">#</a></h2>\n<ul>\n<li><code>readFileSync(&quot;some_path&quot; [,encoding])</code> - returns all contents of the file as a “buffer” by default.\n<ul>\n<li>If “utf-8” (or “UTF-8”) encoding is specified, returns the file contents as a <code>string</code>.</li>\n<li>Executes synchronously (blocking).</li>\n</ul>\n</li>\n<li><code>writeFileSync(&quot;some_path&quot;, content [, option])</code> - write given content to the file.\n<ul>\n<li>Content can be <code>string</code> or buffer.</li>\n<li>“option” is an object. Example - <code>{ flag: 'a' }</code> is used for writing in append mode.</li>\n<li>Executes synchronously (blocking).</li>\n</ul>\n</li>\n<li><code>readFile(&quot;some_path&quot; [,encoding], callback)</code> - just like <code>readFileSync</code> but executes asynchronously.\n<ul>\n<li>callback: has two parameters - error and data. Error is null if no error occurs. data is a buffer or a string (if encoding “UTF-8” was specified).</li>\n</ul>\n</li>\n<li><code>writeFile(&quot;some_path&quot;, content [, option, callback])</code> - just like <code>writeFileSync</code> but executes asynchronously.\n<ul>\n<li>callback has one parameter - error. Error is null if no error occurs.</li>\n</ul>\n</li>\n<li><code>unlink(&quot;some_path&quot;, callbackCompulsory)</code> - delete single file.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>All these function accepts both relative and absolute paths.</li>\n<li>In case of writing, Node.js creates a file if it does not exist.</li>\n<li>Async modes follow “error first pattern” for callbacks, i.e. the first param is the error, second is the data (if any).</li>\n<li>“utf-8” and “UTF-8” can be used interchangeably.</li>\n<li>Deletions (rmdir, unlink etc): <a href=\"https://hackernoon.com/mastering-nodejs-how-to-delete-files-inside-a-nested-folder\">https://hackernoon.com/mastering-nodejs-how-to-delete-files-inside-a-nested-folder</a></li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/68910a170d61be572cefe4dd07df832eee279702\">Code example</a></p>\n",
      "id": 29
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/27_fs_with_Promises.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/27_fs_with_Promises.html",
      "content": "# 27. fs with Promises\nCreated Sunday 29 January 2023 at 03:47 am\n\n## fs with Promises\n- `fs` module with Promises instead of callbacks.\n- Async-await can also be used here, since it's just a syntax sugar over Promises.\n- This a new thing, and is common in new codebases, especially ones that use ESM.\n- Since promises are handled in the micro-task queue, they are given preference of events.\n\nNote - prefer `fs` over `fs/promises` if maximal performance is needed. (FIXME: `fs/promises` has been fixed now, I [guess](https://stackoverflow.com/questions/68883155/node-js-fs-module-callback-api-vs-promises-api-performance-difference/75271525#75271525))\n\n\n### Import `fs/promises`\nUse `fs/promises` instead of `fs` as import name.\n```js\nconst fs = require(\"node:fs/promises\");\n```\n\n\n### `fs/promises` API\n- `readFile` - same as callback based `readFile` except that it returns a promise instead of taking a callback. Promise contains file content as a buffer (by default) or string (if \"UTF-8\" was specified).\n- `writeFile` - same as callback based `writeFile` except that it returns a promise instead of taking a callback. Promise will reject with an error value if an error occurs.\n\n[Code example](https://github.com/exemplar-codes/codevolution-nodejs/commit/1e3a6dc9307f5b4c0e3a2aee09beb99bce287a6f)\n\n",
      "html": "<h1 id=\"27.-fs-with-promises\">27. fs with Promises <a class=\"heading-anchor-permalink\" href=\"#27.-fs-with-promises\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 03:47 am</p>\n<h2 id=\"fs-with-promises\">fs with Promises <a class=\"heading-anchor-permalink\" href=\"#fs-with-promises\">#</a></h2>\n<ul>\n<li><code>fs</code> module with Promises instead of callbacks.</li>\n<li>Async-await can also be used here, since it’s just a syntax sugar over Promises.</li>\n<li>This a new thing, and is common in new codebases, especially ones that use ESM.</li>\n<li>Since promises are handled in the micro-task queue, they are given preference of events.</li>\n</ul>\n<p>Note - prefer <code>fs</code> over <code>fs/promises</code> if maximal performance is needed. (FIXME: <code>fs/promises</code> has been fixed now, I <a href=\"https://stackoverflow.com/questions/68883155/node-js-fs-module-callback-api-vs-promises-api-performance-difference/75271525#75271525\">guess</a>)</p>\n<h3 id=\"import-fs%2Fpromises\">Import <code>fs/promises</code> <a class=\"heading-anchor-permalink\" href=\"#import-fs%2Fpromises\">#</a></h3>\n<p>Use <code>fs/promises</code> instead of <code>fs</code> as import name.</p>\n<pre><code class=\"language-js\">const fs = require(&quot;node:fs/promises&quot;);\n</code></pre>\n<h3 id=\"fs%2Fpromises-api\"><code>fs/promises</code> API <a class=\"heading-anchor-permalink\" href=\"#fs%2Fpromises-api\">#</a></h3>\n<ul>\n<li><code>readFile</code> - same as callback based <code>readFile</code> except that it returns a promise instead of taking a callback. Promise contains file content as a buffer (by default) or string (if “UTF-8” was specified).</li>\n<li><code>writeFile</code> - same as callback based <code>writeFile</code> except that it returns a promise instead of taking a callback. Promise will reject with an error value if an error occurs.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/1e3a6dc9307f5b4c0e3a2aee09beb99bce287a6f\">Code example</a></p>\n",
      "id": 30
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/28_Streams.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/28_Streams.html",
      "content": "# 28. Streams\nCreated Sunday 29 January 2023 at 06:42 pm\n\n## Thinking out loud\n// FIXME: rough - done. Not immediately important. Just for fundamentals\n// will probably help in completion - https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93\n\nLet's learn about streams using the fs module.\n\nA stream is a sequence of data that is being moved from one point to another over time.\nExample - moving a large file within a computer\n\nThe idea is to work with data in chunks instead of loading(in RAM)/downloading/uploading entire data at once.\n\nThis \"chunking\" prevents unnecessary memory usage. Secondary advantages are low internet bills.\n\n\nStream is in fact a built-in node module that inherits from the event emitter class.\n\nWe rarely work with streams directly.\n\nOther modules internally use streams for their functioning.\n\nLet's explore how the `fs` module uses streams to read and write data.\n\nTo read data, we use \"readable stream\" available via `fs.createReadStream(\"my_path\", options)`, example of \"options\" - `{encoding: \"utf-8\"}`. Using this we can create a stream that reads data from `file1.txt`.\n\nSimilarly create a writable stream using `fs.createWriteStream(\"my_path\" [, options])`. Example options -  `{flags: 'a'}` for append mode.\n\nNow, \"Streams\" inherit from the EventEmitter class. Streams emit an event whenever they update. We can  add listeners...\n\nReadable stream has a \"data\" event that we can add a listener for. This listener receives a chunk of the data from the stream. We can write to the writable stream via `.write` from inside this listener.\n\n`myReadableStream.on(\"data\", (chunk) => {})\"`\n\n[Code example](https://github.com/exemplar-codes/codevolution-nodejs/commit/d6bb66feef879d5e35f718d3984ef065be0b5c9e)\n```js\nconst fs = require(\"node:fs\");\n\nconst readableStream = fs.createReadStream(\"./file.txt\", { encoding: \"utf-8\" });\n\nconst writeableStream = fs.createWriteStream(\"./file2.txt\");\n\nreadableStream.on(\"data\", (chunk) => {\n  writeableStream.write(chunk);\n});\n```\n\n[Code example for append write](https://github.com/exemplar-codes/codevolution-nodejs/commit/5d4efacf6849affdbf20a5f4aeb0c0be4d6fcdf8)\n\nQuestion: how big is the chunk?\nAnswer: the default \"read\" buffer is 64 KB. So, if the file is less than this size, the \"chunk\" contains the whole file contents. Yet, to simulate a large file, we can change the buffer size. `highWaterMark` in bytes. [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/b7bed560a8a27b38e95d9c9d30be5bd363e925e3).\n\nQuestion2: Isn't write an async operation too, shouldn't we use events for that as well. Or can we just batch writes?\nAnswer: IDk\n\n\nHTTP module also uses streams. the \"HTTP request\" is a readable stream, and \"HTTP response\" is a writeable  stream.\n\n## Types of Streams\n1. Readable streams - from which data can be read.\n2. Writable streams - to which we can write data.\n3. Duplex streams - are both readable and writable\n4. Transform streams - that can modify or transform the data as it is written and read\n\nExamples:\n- Reading, writing from a file are readable, writable streams respectively \n- Sockets is a duplex stream\n- File compression where we can write compressed data and read de-compressed data to and from a file as a transform stream.\n\n## Streams concepts undiscussed (FIXME)\nsource: [chatgpt](https://chat.openai.com/c/4346dd1f-eb30-44d0-a8fb-863472d483f5)\n> Streams are a powerful and efficient mechanism in Node.js for handling data, especially when dealing with large datasets or real-time processing. They provide a way to read or write data in chunks, making it memory-efficient and allowing for asynchronous processing.\n\nHere are some key concepts and features related to Node.js streams that you might find interesting:\n\n1. **Readable Streams:**\n   - Represent a source of data that you can read from.\n\n2. **Writable Streams:**\n   - Represent a destination for data that you can write to.\n\n3. **Transform Streams:**\n   - Act as both readable and writable streams, allowing for data transformation during the process.\n\n4. **Piping:**\n   - The `pipe` method allows you to easily connect readable and writable streams, creating a seamless data flow.\n\n5. **Events:**\n   - Streams emit events like 'data', 'end', and 'error', allowing you to respond to different phases of the streaming process.\n\n6. **Object Mode:**\n   - Streams can operate in object mode, where each chunk is treated as a discrete object, rather than a chunk of binary or string data.\n\n7. **Backpressure:**\n   - Streams handle backpressure automatically, ensuring that the producer doesn't overwhelm the consumer with data.\n\n8. **Custom Streams:**\n   - You can create custom streams by extending the `Transform`, `Writable`, or `Readable` classes, tailoring them to your specific needs.\n\nNode.js streams are an essential part of building scalable and performant applications, especially when dealing with I/O operations, network communication, or data processing. Feel free to ask any specific questions or explore more aspects of Node.js streams as you dive into learning and experimentation!",
      "html": "<h1 id=\"28.-streams\">28. Streams <a class=\"heading-anchor-permalink\" href=\"#28.-streams\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 06:42 pm</p>\n<h2 id=\"thinking-out-loud\">Thinking out loud <a class=\"heading-anchor-permalink\" href=\"#thinking-out-loud\">#</a></h2>\n<p>// FIXME: rough - done. Not immediately important. Just for fundamentals\n// will probably help in completion - <a href=\"https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93\">https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93</a></p>\n<p>Let’s learn about streams using the fs module.</p>\n<p>A stream is a sequence of data that is being moved from one point to another over time.\nExample - moving a large file within a computer</p>\n<p>The idea is to work with data in chunks instead of loading(in RAM)/downloading/uploading entire data at once.</p>\n<p>This “chunking” prevents unnecessary memory usage. Secondary advantages are low internet bills.</p>\n<p>Stream is in fact a built-in node module that inherits from the event emitter class.</p>\n<p>We rarely work with streams directly.</p>\n<p>Other modules internally use streams for their functioning.</p>\n<p>Let’s explore how the <code>fs</code> module uses streams to read and write data.</p>\n<p>To read data, we use “readable stream” available via <code>fs.createReadStream(&quot;my_path&quot;, options)</code>, example of “options” - <code>{encoding: &quot;utf-8&quot;}</code>. Using this we can create a stream that reads data from <code>file1.txt</code>.</p>\n<p>Similarly create a writable stream using <code>fs.createWriteStream(&quot;my_path&quot; [, options])</code>. Example options -  <code>{flags: 'a'}</code> for append mode.</p>\n<p>Now, “Streams” inherit from the EventEmitter class. Streams emit an event whenever they update. We can  add listeners…</p>\n<p>Readable stream has a “data” event that we can add a listener for. This listener receives a chunk of the data from the stream. We can write to the writable stream via <code>.write</code> from inside this listener.</p>\n<p><code>myReadableStream.on(&quot;data&quot;, (chunk) =&gt; {})&quot;</code></p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/d6bb66feef879d5e35f718d3984ef065be0b5c9e\">Code example</a></p>\n<pre><code class=\"language-js\">const fs = require(&quot;node:fs&quot;);\n\nconst readableStream = fs.createReadStream(&quot;./file.txt&quot;, { encoding: &quot;utf-8&quot; });\n\nconst writeableStream = fs.createWriteStream(&quot;./file2.txt&quot;);\n\nreadableStream.on(&quot;data&quot;, (chunk) =&gt; {\n  writeableStream.write(chunk);\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/5d4efacf6849affdbf20a5f4aeb0c0be4d6fcdf8\">Code example for append write</a></p>\n<p>Question: how big is the chunk?\nAnswer: the default “read” buffer is 64 KB. So, if the file is less than this size, the “chunk” contains the whole file contents. Yet, to simulate a large file, we can change the buffer size. <code>highWaterMark</code> in bytes. <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/b7bed560a8a27b38e95d9c9d30be5bd363e925e3\">Code</a>.</p>\n<p>Question2: Isn’t write an async operation too, shouldn’t we use events for that as well. Or can we just batch writes?\nAnswer: IDk</p>\n<p>HTTP module also uses streams. the “HTTP request” is a readable stream, and “HTTP response” is a writeable  stream.</p>\n<h2 id=\"types-of-streams\">Types of Streams <a class=\"heading-anchor-permalink\" href=\"#types-of-streams\">#</a></h2>\n<ol>\n<li>Readable streams - from which data can be read.</li>\n<li>Writable streams - to which we can write data.</li>\n<li>Duplex streams - are both readable and writable</li>\n<li>Transform streams - that can modify or transform the data as it is written and read</li>\n</ol>\n<p>Examples:</p>\n<ul>\n<li>Reading, writing from a file are readable, writable streams respectively</li>\n<li>Sockets is a duplex stream</li>\n<li>File compression where we can write compressed data and read de-compressed data to and from a file as a transform stream.</li>\n</ul>\n<h2 id=\"streams-concepts-undiscussed-(fixme)\">Streams concepts undiscussed (FIXME) <a class=\"heading-anchor-permalink\" href=\"#streams-concepts-undiscussed-(fixme)\">#</a></h2>\n<p>source: <a href=\"https://chat.openai.com/c/4346dd1f-eb30-44d0-a8fb-863472d483f5\">chatgpt</a></p>\n<blockquote>\n<p>Streams are a powerful and efficient mechanism in Node.js for handling data, especially when dealing with large datasets or real-time processing. They provide a way to read or write data in chunks, making it memory-efficient and allowing for asynchronous processing.</p>\n</blockquote>\n<p>Here are some key concepts and features related to Node.js streams that you might find interesting:</p>\n<ol>\n<li>\n<p><strong>Readable Streams:</strong></p>\n<ul>\n<li>Represent a source of data that you can read from.</li>\n</ul>\n</li>\n<li>\n<p><strong>Writable Streams:</strong></p>\n<ul>\n<li>Represent a destination for data that you can write to.</li>\n</ul>\n</li>\n<li>\n<p><strong>Transform Streams:</strong></p>\n<ul>\n<li>Act as both readable and writable streams, allowing for data transformation during the process.</li>\n</ul>\n</li>\n<li>\n<p><strong>Piping:</strong></p>\n<ul>\n<li>The <code>pipe</code> method allows you to easily connect readable and writable streams, creating a seamless data flow.</li>\n</ul>\n</li>\n<li>\n<p><strong>Events:</strong></p>\n<ul>\n<li>Streams emit events like ‘data’, ‘end’, and ‘error’, allowing you to respond to different phases of the streaming process.</li>\n</ul>\n</li>\n<li>\n<p><strong>Object Mode:</strong></p>\n<ul>\n<li>Streams can operate in object mode, where each chunk is treated as a discrete object, rather than a chunk of binary or string data.</li>\n</ul>\n</li>\n<li>\n<p><strong>Backpressure:</strong></p>\n<ul>\n<li>Streams handle backpressure automatically, ensuring that the producer doesn’t overwhelm the consumer with data.</li>\n</ul>\n</li>\n<li>\n<p><strong>Custom Streams:</strong></p>\n<ul>\n<li>You can create custom streams by extending the <code>Transform</code>, <code>Writable</code>, or <code>Readable</code> classes, tailoring them to your specific needs.</li>\n</ul>\n</li>\n</ol>\n<p>Node.js streams are an essential part of building scalable and performant applications, especially when dealing with I/O operations, network communication, or data processing. Feel free to ask any specific questions or explore more aspects of Node.js streams as you dive into learning and experimentation!</p>\n",
      "id": 31
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/29_Pipes.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/29_Pipes.html",
      "content": "# 29. Pipes\nCreated Sunday 29 January 2023 at 07:36 pm\n\n## Basic\n// FIXME: rough done. Not immediately important. Just for fundamentals\nIn the previous lesson, we learnt about streams to read and write files.\nThis seems to be a common pattern in server programming and systems programming.\nNode.js has a simpler and better pattern that does the same - called piping.\n\nIn non-technical terms, we understand what a pipe is. A pipe transports matter from one device to another, over some period of time.\n\nSimilarly, in Node.js, the \"pipe\" method connects the readable stream to a writable stream.\n![](../../../../assets/29_Pipes-image-1-fdde2790.png)\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/85f89e279119f9096eddea4882f445644a58aed5)\n\nPipes, by their very nature are chain-able. However, only a non-writable stream can be chained. This is because all parts of a chain should update one by one, and not abruptly (i.e. its like mutating an array while traversing it, not a good idea). Here we are using writableStream, so we cannot pipe further.\n\nTo demonstrate piping, let's create a compressed file containing some text. [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/ef9cb9b25dc2ae09e63aedcad4ecbc4afa97fc42)\n\n## Stream/pipe flow control (FIXME)\nTLDR; Node.js helps a lot as a runtime\n1. **Automatic Flow Control:**\n   - Node.js provides automatic flow control through the built-in `stream` module. When using pipes, backpressure mechanisms are in place to handle the flow of data between readable and writable streams.\n\n2. **Pause and Resume:**\n   - If the writable stream (second buffer) encounters a situation where it can't keep up with the incoming data, it emits a 'drain' event to signal that it's ready to receive more. This event automatically pauses the readable stream (first buffer) until the writable stream is ready.\n\n3. **Buffering Requests:**\n   - If the first buffer stops receiving requests due to a near-full blocking scenario, the readable stream will pause automatically. When the situation improves, and the writable stream signals that it's ready for more data, the readable stream will automatically resume, allowing the flow to continue.\n\n4. **Event Orchestration:**\n   - Node.js orchestrates events between streams to manage flow control. The 'drain' event and automatic pausing and resuming are part of this orchestration.\n\n5. **Handling External Events:**\n   - If you need to close the entire flow due to some external event, you can do so by handling that event and closing the streams appropriately. Closing the streams will ensure that resources are released, and the entire flow is terminated.\n\nIn summary, Node.js provides automatic event orchestration and flow control between streams using backpressure mechanisms. The system can automatically handle pauses and resumes based on the readiness of the writable stream. However, it's important to handle external events appropriately to close the streams when necessary for a clean shutdown.",
      "html": "<h1 id=\"29.-pipes\">29. Pipes <a class=\"heading-anchor-permalink\" href=\"#29.-pipes\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 07:36 pm</p>\n<h2 id=\"basic\">Basic <a class=\"heading-anchor-permalink\" href=\"#basic\">#</a></h2>\n<p>// FIXME: rough done. Not immediately important. Just for fundamentals\nIn the previous lesson, we learnt about streams to read and write files.\nThis seems to be a common pattern in server programming and systems programming.\nNode.js has a simpler and better pattern that does the same - called piping.</p>\n<p>In non-technical terms, we understand what a pipe is. A pipe transports matter from one device to another, over some period of time.</p>\n<p>Similarly, in Node.js, the “pipe” method connects the readable stream to a writable stream.\n<img src=\"../../../../assets/29_Pipes-image-1-fdde2790.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/85f89e279119f9096eddea4882f445644a58aed5\">Code</a></p>\n<p>Pipes, by their very nature are chain-able. However, only a non-writable stream can be chained. This is because all parts of a chain should update one by one, and not abruptly (i.e. its like mutating an array while traversing it, not a good idea). Here we are using writableStream, so we cannot pipe further.</p>\n<p>To demonstrate piping, let’s create a compressed file containing some text. <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/ef9cb9b25dc2ae09e63aedcad4ecbc4afa97fc42\">Code</a></p>\n<h2 id=\"stream%2Fpipe-flow-control-(fixme)\">Stream/pipe flow control (FIXME) <a class=\"heading-anchor-permalink\" href=\"#stream%2Fpipe-flow-control-(fixme)\">#</a></h2>\n<p>TLDR; Node.js helps a lot as a runtime</p>\n<ol>\n<li>\n<p><strong>Automatic Flow Control:</strong></p>\n<ul>\n<li>Node.js provides automatic flow control through the built-in <code>stream</code> module. When using pipes, backpressure mechanisms are in place to handle the flow of data between readable and writable streams.</li>\n</ul>\n</li>\n<li>\n<p><strong>Pause and Resume:</strong></p>\n<ul>\n<li>If the writable stream (second buffer) encounters a situation where it can’t keep up with the incoming data, it emits a ‘drain’ event to signal that it’s ready to receive more. This event automatically pauses the readable stream (first buffer) until the writable stream is ready.</li>\n</ul>\n</li>\n<li>\n<p><strong>Buffering Requests:</strong></p>\n<ul>\n<li>If the first buffer stops receiving requests due to a near-full blocking scenario, the readable stream will pause automatically. When the situation improves, and the writable stream signals that it’s ready for more data, the readable stream will automatically resume, allowing the flow to continue.</li>\n</ul>\n</li>\n<li>\n<p><strong>Event Orchestration:</strong></p>\n<ul>\n<li>Node.js orchestrates events between streams to manage flow control. The ‘drain’ event and automatic pausing and resuming are part of this orchestration.</li>\n</ul>\n</li>\n<li>\n<p><strong>Handling External Events:</strong></p>\n<ul>\n<li>If you need to close the entire flow due to some external event, you can do so by handling that event and closing the streams appropriately. Closing the streams will ensure that resources are released, and the entire flow is terminated.</li>\n</ul>\n</li>\n</ol>\n<p>In summary, Node.js provides automatic event orchestration and flow control between streams using backpressure mechanisms. The system can automatically handle pauses and resumes based on the readiness of the writable stream. However, it’s important to handle external events appropriately to close the streams when necessary for a clean shutdown.</p>\n",
      "id": 32
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/30_HTTP_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/30_HTTP_module.html",
      "content": "# 30. HTTP module\nCreated Sunday 29 January 2023 at 10:34 pm\n\n// FIXME: rough \nLet's understand how the web works.\n\n- Computers connected to the internet are called clients and servers (they can be both at the same time too).\n- Clients have web accessing software available on them, the most common one being the browser. Example - laptops, phones, game consoles etc.\n- Servers are computers that store web pages, sites, media and run applications.\n- Client-Server model - the client sends a \"request\" to the server, and the server sends back a \"response \" containing a web page, media or just text responses.\n\nQ: What is the format for the request, response? Also, what about other rules like failure, retries etc.\nA: The HTTP (Hyper Text Transfer Protocol) defines the format and other rules.\n\nQ: HTTP and Node\nA: We can create a web server using Node.js. Node.js has access to OS level functionality like networking. Also, since Node.js has an asynchronous (and therefore non-blocking) nature, it is perfect for handling large volumes of requests.\n\nOf course, the Node server we create should still respect the HTTP format.\n\nThe `http` module is used for creating web-servers that can transfer data over HTTP. In addition to creating servers (i.e. responding to requests), it also has functionality to make requests.",
      "html": "<h1 id=\"30.-http-module\">30. HTTP module <a class=\"heading-anchor-permalink\" href=\"#30.-http-module\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 10:34 pm</p>\n<p>// FIXME: rough\nLet’s understand how the web works.</p>\n<ul>\n<li>Computers connected to the internet are called clients and servers (they can be both at the same time too).</li>\n<li>Clients have web accessing software available on them, the most common one being the browser. Example - laptops, phones, game consoles etc.</li>\n<li>Servers are computers that store web pages, sites, media and run applications.</li>\n<li>Client-Server model - the client sends a “request” to the server, and the server sends back a &quot;response &quot; containing a web page, media or just text responses.</li>\n</ul>\n<p>Q: What is the format for the request, response? Also, what about other rules like failure, retries etc.\nA: The HTTP (Hyper Text Transfer Protocol) defines the format and other rules.</p>\n<p>Q: HTTP and Node\nA: We can create a web server using Node.js. Node.js has access to OS level functionality like networking. Also, since Node.js has an asynchronous (and therefore non-blocking) nature, it is perfect for handling large volumes of requests.</p>\n<p>Of course, the Node server we create should still respect the HTTP format.</p>\n<p>The <code>http</code> module is used for creating web-servers that can transfer data over HTTP. In addition to creating servers (i.e. responding to requests), it also has functionality to make requests.</p>\n",
      "id": 33
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/31_Creating_a_Node_server.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/31_Creating_a_Node_server.html",
      "content": "# 31. Creating a Node server\nCreated Sunday 29 January 2023 at 10:45 pm\n\n// FIXME: rough\nLet's write code to create a web server.\n\nAlso, the `http` module extends the EventEmitter class.\n\nTo create a server, use the `http.createServer(callback)`. The \"callback\" here is the request listener, i.e. it runs when a request is received.\n\nThe callback receives two arguments -  request and response. The request param contains info about the request. The response argument is used to \"build\" the response we wish to send back. Of course, they can be named anything. Popular names are (req, res), (request, response).\n\nWe can end request processing (and start responding) by using `response.end(some_string)` method which optionally accepts a string. `res.end()`(optionally with preceding `res.write()`) is meant for building the [response](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#responses) body.\n\n`res.writeHead(statusCode [, headerObject])` can be used to specify the response status code and (optionally) header values.\n\nTo start listening for requests (i.e. start the server), use the `myServer.listen(port_number[, callback])` method. Think of it as a door number in an apartment that has many houses. Optionally, we can pass a callback function that's called when the server starts. It has no params.\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/089f7f8b64123ed80746eefc487a9af2c563ae64)\n\nSo, it's very easy to get started with making servers with Node.js.\n\n---\nAlthough not necessary, it is a a good practice to specify the \"Content-Type\" header. \"Content-Type\": \"text/plain\" is the one if `response.end(string)` is used. Technically, browsers guess (default being \"text/plain\") the response \"Content-Type\" is it's not specified. HTML value is \"text/html\".\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/12f6d1c5c25c03695994fc6c8472a88d4c660221)\n\nNote: a plaintext response is not the same as an HTML response. Both are strings, yes, but they're interpreted differently. The \"Content-Type\" header is used for choosing the interpretation. A plaintext response could be ignored by the browser, and HTML one is always rendered. In case of Chrome (and other popular browsers), a plaintext response will be rendered within an HTML page generated by the browser itself.\n\n---\nLet's go through the flow once again:\n1. The server starts are listens for incoming requests at the give port.\n2. When a request is received, Node.js runs the callback. This happens for each incoming request.\n3. Node.js automatically injects request and response params in the callback.\n4. request object contains data and related methods about the request.\n5. response object is an \"actionable\" parameter, i.e. response object is used to run code, \"build\" the response and finally send the response. It also contains data.\n\n---\n- To run the server on a free and random port, pass 0 as the port number\n- To get the assigned port number, use `myServer.address().port` once the server starts, for example, inside the `myServer.listen` callback.\n\nExample:\n```js\nconst http = require(\"node:http\");\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200); // status code\n  res.end(\"Hello world\");\n});\n\nserver.listen(0, () => {\n  // 0 means random port\n  console.log(`Server started on PORT ${server.address().port}`);\n});\n```\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/875e861a984dcbf0cba58e559a18abf9e2dfa055)\n\nSee also: [Code - start server at random port and open browser](https://github.com/exemplar-codes/codevolution-nodejs/commit/872d3ac427275ecb18e51ae5e38841bed321a624). ",
      "html": "<h1 id=\"31.-creating-a-node-server\">31. Creating a Node server <a class=\"heading-anchor-permalink\" href=\"#31.-creating-a-node-server\">#</a></h1>\n<p>Created Sunday 29 January 2023 at 10:45 pm</p>\n<p>// FIXME: rough\nLet’s write code to create a web server.</p>\n<p>Also, the <code>http</code> module extends the EventEmitter class.</p>\n<p>To create a server, use the <code>http.createServer(callback)</code>. The “callback” here is the request listener, i.e. it runs when a request is received.</p>\n<p>The callback receives two arguments -  request and response. The request param contains info about the request. The response argument is used to “build” the response we wish to send back. Of course, they can be named anything. Popular names are (req, res), (request, response).</p>\n<p>We can end request processing (and start responding) by using <code>response.end(some_string)</code> method which optionally accepts a string. <code>res.end()</code>(optionally with preceding <code>res.write()</code>) is meant for building the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#responses\">response</a> body.</p>\n<p><code>res.writeHead(statusCode [, headerObject])</code> can be used to specify the response status code and (optionally) header values.</p>\n<p>To start listening for requests (i.e. start the server), use the <code>myServer.listen(port_number[, callback])</code> method. Think of it as a door number in an apartment that has many houses. Optionally, we can pass a callback function that’s called when the server starts. It has no params.</p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/089f7f8b64123ed80746eefc487a9af2c563ae64\">Code</a></p>\n<p>So, it’s very easy to get started with making servers with Node.js.</p>\n<hr>\n<p>Although not necessary, it is a a good practice to specify the “Content-Type” header. “Content-Type”: “text/plain” is the one if <code>response.end(string)</code> is used. Technically, browsers guess (default being “text/plain”) the response “Content-Type” is it’s not specified. HTML value is “text/html”.</p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/12f6d1c5c25c03695994fc6c8472a88d4c660221\">Code</a></p>\n<p>Note: a plaintext response is not the same as an HTML response. Both are strings, yes, but they’re interpreted differently. The “Content-Type” header is used for choosing the interpretation. A plaintext response could be ignored by the browser, and HTML one is always rendered. In case of Chrome (and other popular browsers), a plaintext response will be rendered within an HTML page generated by the browser itself.</p>\n<hr>\n<p>Let’s go through the flow once again:</p>\n<ol>\n<li>The server starts are listens for incoming requests at the give port.</li>\n<li>When a request is received, Node.js runs the callback. This happens for each incoming request.</li>\n<li>Node.js automatically injects request and response params in the callback.</li>\n<li>request object contains data and related methods about the request.</li>\n<li>response object is an “actionable” parameter, i.e. response object is used to run code, “build” the response and finally send the response. It also contains data.</li>\n</ol>\n<hr>\n<ul>\n<li>To run the server on a free and random port, pass 0 as the port number</li>\n<li>To get the assigned port number, use <code>myServer.address().port</code> once the server starts, for example, inside the <code>myServer.listen</code> callback.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-js\">const http = require(&quot;node:http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200); // status code\n  res.end(&quot;Hello world&quot;);\n});\n\nserver.listen(0, () =&gt; {\n  // 0 means random port\n  console.log(`Server started on PORT ${server.address().port}`);\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/875e861a984dcbf0cba58e559a18abf9e2dfa055\">Code</a></p>\n<p>See also: <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/872d3ac427275ecb18e51ae5e38841bed321a624\">Code - start server at random port and open browser</a>.</p>\n",
      "id": 34
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/32_JSON_response.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/32_JSON_response.html",
      "content": "# 32. JSON response\nCreated Monday 30 January 2023 at 12:07 pm\n// rough\nIn the previous video, we responded with plain text by using `res.end` and set \"Content-Type\" header to \"text/plain\" using `res.writeHead`.\n\nSimilarly, we can send JSON (as the response body) by populating the response body (using `res.end()`). Important checks when sending JSON data:\n1. Set \"Content-Type\" to `\"application/json\"` so the client can interpret it properly.\n2. \"Stringifying\" the JSON - since `res.end()`(or `res.write()`) only take a string or buffer as argument, we'll have to \"stringify\" the object we wish to send as JSON, using `JSON.stringify(myObject)`. \n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/bfa636d8f3bf1257b2e2e5504085402068a23645)\n```js\nconst http = require(\"node:http\");\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"application/json\" });\n  const superHero = {\n    firstName: \"Bruce\",\n    lastName: \"Wayne\",\n  };\n  res.end(JSON.stringify(superHero));\n});\n\nserver.listen(3000, () => {\n  console.log(\"Server started on port 3000\");\n});\n```\n\nNote: `JSON` is available globally without import. It's implemented inside the JS engine (V8 in case of Node.js, Chrome) itself. To convert a JSON string to an object, the `JSON.parse(json_string)` function is available.\n\n## Client code - text vs json\nThe response object in the browser has both `.text` and `.json`, both are async.\n\nNote `.text` will always work, but yields a string. `.json` will work only for JSON types, and yields an object. Code:\n```js\n// text or HTML\nfetch('http://localhost:3000')\n  .then(resp => res.text())\n  .then(str => console.log(str));\n\n// json\nfetch('http://localhost:3000')\n  .then(resp => res.json())\n  .then(obj => console.log(obj.x));\n\n```",
      "html": "<h1 id=\"32.-json-response\">32. JSON response <a class=\"heading-anchor-permalink\" href=\"#32.-json-response\">#</a></h1>\n<p>Created Monday 30 January 2023 at 12:07 pm\n// rough\nIn the previous video, we responded with plain text by using <code>res.end</code> and set “Content-Type” header to “text/plain” using <code>res.writeHead</code>.</p>\n<p>Similarly, we can send JSON (as the response body) by populating the response body (using <code>res.end()</code>). Important checks when sending JSON data:</p>\n<ol>\n<li>Set “Content-Type” to <code>&quot;application/json&quot;</code> so the client can interpret it properly.</li>\n<li>“Stringifying” the JSON - since <code>res.end()</code>(or <code>res.write()</code>) only take a string or buffer as argument, we’ll have to “stringify” the object we wish to send as JSON, using <code>JSON.stringify(myObject)</code>.</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/bfa636d8f3bf1257b2e2e5504085402068a23645\">Code</a></p>\n<pre><code class=\"language-js\">const http = require(&quot;node:http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;application/json&quot; });\n  const superHero = {\n    firstName: &quot;Bruce&quot;,\n    lastName: &quot;Wayne&quot;,\n  };\n  res.end(JSON.stringify(superHero));\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(&quot;Server started on port 3000&quot;);\n});\n</code></pre>\n<p>Note: <code>JSON</code> is available globally without import. It’s implemented inside the JS engine (V8 in case of Node.js, Chrome) itself. To convert a JSON string to an object, the <code>JSON.parse(json_string)</code> function is available.</p>\n<h2 id=\"client-code---text-vs-json\">Client code - text vs json <a class=\"heading-anchor-permalink\" href=\"#client-code---text-vs-json\">#</a></h2>\n<p>The response object in the browser has both <code>.text</code> and <code>.json</code>, both are async.</p>\n<p>Note <code>.text</code> will always work, but yields a string. <code>.json</code> will work only for JSON types, and yields an object. Code:</p>\n<pre><code class=\"language-js\">// text or HTML\nfetch('http://localhost:3000')\n  .then(resp =&gt; res.text())\n  .then(str =&gt; console.log(str));\n\n// json\nfetch('http://localhost:3000')\n  .then(resp =&gt; res.json())\n  .then(obj =&gt; console.log(obj.x));\n\n</code></pre>\n",
      "id": 35
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/33_HTML_response.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/33_HTML_response.html",
      "content": "## 33. HTML response\nCreated Monday 30 January 2023 at 12:33 pm\n// rough\nJust like with text and JSON response, set the correct \"Content-Type\" (\"text/html\") and send the HTML as a string using `res.end()` (optionally with`res.write()`).\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/00715f610d73485a1e210d22c407f7551e9012ce\n)\n```js\nconst http = require(\"node:http\");\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"text/html\" });\n  res.end(\"<html><head><title>Test</title></head><body><h1>Hello, world</h1><body>\");\n});\n\nserver.listen(3000, () => {\n  console.log(\"Server started on port 3000\");\n});\n```\n\n---\nThis code above is fine for a demo. But a server sends HTML *files* and not strings, at the very least.\nTo send an HTML file, use the `fs` module to read the file. [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/7705af4df307a9cc8467c4c203898abd62293ba4\n)\n```js\n(req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"text/html\" });\n\n  const htmlFileContents = fs.readFileSync(\"./index.html\", \"utf-8\");\n  res.end(htmlFileContents);\n}\n```\n\n---\nSome optimizations. \n\nWe could make the process asynchronous by using callback or promises.\n[Code - callback](https://github.com/exemplar-codes/codevolution-nodejs/commit/aa3b6efc0d77d1911c5b0852d8bc35ae410dad46)\n[Code - Promise](https://github.com/exemplar-codes/codevolution-nodejs/commit/3e3e44efa424b07cd035d1de013459af73b37b7c)\n\nStill, we are reading the whole file (i.e. keeping it in RAM) at once.\nTo avoid this, we can use streams. Note that doing this result in a *slower* response. \n[Code - streams](https://github.com/exemplar-codes/codevolution-nodejs/commit/49e542aa5f3b7aa41b79db9d9759f6c809b036ea) or even simply [Code - streams with pipe](https://github.com/exemplar-codes/codevolution-nodejs/commit/13278a26abdbbc48caf54598a1945352ff47f66e) (also, realize that `res` param is actually a stream).\n\nHere, the response a continuous stream that takes a long time. i.e. the client will receive data in chunks.\n(FIXME: how is this continuous, I mean yes, multiple TCP transfers make sense, but aren't we calling `.end` once. Maybe there's something going on with \"keep-alive).\n\nFIXME: I'm getting confused between buffers, streams and `fs` functions (when and where do they expose/return streams).",
      "html": "<h2 id=\"33.-html-response\">33. HTML response <a class=\"heading-anchor-permalink\" href=\"#33.-html-response\">#</a></h2>\n<p>Created Monday 30 January 2023 at 12:33 pm\n// rough\nJust like with text and JSON response, set the correct “Content-Type” (“text/html”) and send the HTML as a string using <code>res.end()</code> (optionally with<code>res.write()</code>).</p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/00715f610d73485a1e210d22c407f7551e9012ce\">Code</a></p>\n<pre><code class=\"language-js\">const http = require(&quot;node:http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/html&quot; });\n  res.end(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;body&gt;&quot;);\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(&quot;Server started on port 3000&quot;);\n});\n</code></pre>\n<hr>\n<p>This code above is fine for a demo. But a server sends HTML <em>files</em> and not strings, at the very least.\nTo send an HTML file, use the <code>fs</code> module to read the file. <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/7705af4df307a9cc8467c4c203898abd62293ba4\">Code</a></p>\n<pre><code class=\"language-js\">(req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/html&quot; });\n\n  const htmlFileContents = fs.readFileSync(&quot;./index.html&quot;, &quot;utf-8&quot;);\n  res.end(htmlFileContents);\n}\n</code></pre>\n<hr>\n<p>Some optimizations.</p>\n<p>We could make the process asynchronous by using callback or promises.\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/aa3b6efc0d77d1911c5b0852d8bc35ae410dad46\">Code - callback</a>\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/3e3e44efa424b07cd035d1de013459af73b37b7c\">Code - Promise</a></p>\n<p>Still, we are reading the whole file (i.e. keeping it in RAM) at once.\nTo avoid this, we can use streams. Note that doing this result in a <em>slower</em> response.\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/49e542aa5f3b7aa41b79db9d9759f6c809b036ea\">Code - streams</a> or even simply <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/13278a26abdbbc48caf54598a1945352ff47f66e\">Code - streams with pipe</a> (also, realize that <code>res</code> param is actually a stream).</p>\n<p>Here, the response a continuous stream that takes a long time. i.e. the client will receive data in chunks.\n(FIXME: how is this continuous, I mean yes, multiple TCP transfers make sense, but aren’t we calling <code>.end</code> once. Maybe there’s something going on with &quot;keep-alive).</p>\n<p>FIXME: I’m getting confused between buffers, streams and <code>fs</code> functions (when and where do they expose/return streams).</p>\n",
      "id": 36
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/34_HTML_templates.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/34_HTML_templates.html",
      "content": "# 34. HTML templates\nCreated Monday 30 January 2023 at 02:30 pm\n// rough\nSending HTML \"as is\" is fine. A server that does this is called a \"static server\".\n\nBut this is not enough. It is very common to have a page which has some dynamic part, depending on whose making the request or some other criteria. Example - a profile page, that greets the user. Assuming we know who the user each, we should display their name.\n\nSuch a server is called a \"dynamic server\".\n\n---\nOne simple way to create a dynamic server is to have a \"template\" or \"skeleton\" HTML file which has placeholders for the dynamic parts. We can replace these placeholders with data before sending the HTML.\n\nHere's a basic dynamic server with a template HTML file containing a single placeholder \"{{name}}\"\". \n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/f024b46b376893c3be766e3a26b4fa0b231b9eb8)\n```js\n(req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"text/html\" });\n\n  const greetingName = \"Sanjar\"; // or get from DB, or external API\n  // using readFileSync just to keep things simple\n  let htmlFileContents = fs.readFileSync(\"./index.html\", \"utf-8\");\n  htmlFileContents = htmlFileContents.replace(\"{{name}}\", greetingName);\n  \n  res.end(htmlFileContents);\n}\n```\n\n---\nInjecting dynamic data using string replacement is fine. But this doesn't scale:\n1. There could be collisions with placeholders.\n2. What if we want to add a list of things dynamically, string interpolation would be too much work, i.e. we would have to write the nested HTML for the element too.\n3. The page content and the server code are tightly coupled.\n4. What if we really want to display some characters that occur in the placeholder as is?\n\nA good solution for these problems is to use a \"web template engine\". A template engine is a tool that:\n1. Defines a [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) for viewable content.\n2. Defines \"programming\" constructs like loops, conditionals that can be used for viewable content.\n3. Has some server-side plugin that can be used to interface with the DSL. i.e. connect JavaScript (programming language) to the DSL (\"view definition language\"?).\n\nExamples - [Pug - JavaScript](https://pugjs.org/api/getting-started.html), [Jinja - Python](https://en.wikipedia.org/wiki/Jinja_(template_engine)), [ERB - Ruby on Rails](https://guides.rubyonrails.org/layouts_and_rendering.html).",
      "html": "<h1 id=\"34.-html-templates\">34. HTML templates <a class=\"heading-anchor-permalink\" href=\"#34.-html-templates\">#</a></h1>\n<p>Created Monday 30 January 2023 at 02:30 pm\n// rough\nSending HTML “as is” is fine. A server that does this is called a “static server”.</p>\n<p>But this is not enough. It is very common to have a page which has some dynamic part, depending on whose making the request or some other criteria. Example - a profile page, that greets the user. Assuming we know who the user each, we should display their name.</p>\n<p>Such a server is called a “dynamic server”.</p>\n<hr>\n<p>One simple way to create a dynamic server is to have a “template” or “skeleton” HTML file which has placeholders for the dynamic parts. We can replace these placeholders with data before sending the HTML.</p>\n<p>Here’s a basic dynamic server with a template HTML file containing a single placeholder “{{name}}”&quot;.\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/f024b46b376893c3be766e3a26b4fa0b231b9eb8\">Code</a></p>\n<pre><code class=\"language-js\">(req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/html&quot; });\n\n  const greetingName = &quot;Sanjar&quot;; // or get from DB, or external API\n  // using readFileSync just to keep things simple\n  let htmlFileContents = fs.readFileSync(&quot;./index.html&quot;, &quot;utf-8&quot;);\n  htmlFileContents = htmlFileContents.replace(&quot;{{name}}&quot;, greetingName);\n  \n  res.end(htmlFileContents);\n}\n</code></pre>\n<hr>\n<p>Injecting dynamic data using string replacement is fine. But this doesn’t scale:</p>\n<ol>\n<li>There could be collisions with placeholders.</li>\n<li>What if we want to add a list of things dynamically, string interpolation would be too much work, i.e. we would have to write the nested HTML for the element too.</li>\n<li>The page content and the server code are tightly coupled.</li>\n<li>What if we really want to display some characters that occur in the placeholder as is?</li>\n</ol>\n<p>A good solution for these problems is to use a “web template engine”. A template engine is a tool that:</p>\n<ol>\n<li>Defines a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for viewable content.</li>\n<li>Defines “programming” constructs like loops, conditionals that can be used for viewable content.</li>\n<li>Has some server-side plugin that can be used to interface with the DSL. i.e. connect JavaScript (programming language) to the DSL (“view definition language”?).</li>\n</ol>\n<p>Examples - <a href=\"https://pugjs.org/api/getting-started.html\">Pug - JavaScript</a>, <a href=\"https://en.wikipedia.org/wiki/Jinja_(template_engine)\">Jinja - Python</a>, <a href=\"https://guides.rubyonrails.org/layouts_and_rendering.html\">ERB - Ruby on Rails</a>.</p>\n",
      "id": 37
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/35_HTTP_routing.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/35_HTTP_routing.html",
      "content": "# 35. HTTP routing\nCreated Monday 30 January 2023 at 03:43 pm\n// rough\n[Currently](https://github.com/exemplar-codes/codevolution-nodejs/commit/f024b46b376893c3be766e3a26b4fa0b231b9eb8), we return the same response for all routes (try it). This is of course, not the case in the real world.\n\nThe default route is `/`. Note that by route, we mean the URI.\n\nTo respond differently based on routes, access the route using `res.url`. Example:\n```js\nconst http = require(\"node:http\");\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"text/plain\" });\n\n  res.end(req.url);\n});\n\nserver.listen(3000, () => {\n  console.log(\"Server started on port 3000\");\n});\n```\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/075d783544353d0d276796facc84e3a7d1d0b7aa)\n\n---\nSince we know about the route, we can respond differently using conditionals, switch statements or some custom logic.\n\nLet's create a simple server that has 3 pages:\n1. \"/\" - returns home page HTML\n2. \"/about\" - returns about page HTML\n3. \"/api\" - returns some JSON\n4. Respond with 404 (not found) HTTP status code for all other routes.\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/0c927326e4dac24023ba2f7fa2cb8948be54a5aa)\n\n---\nThere are many other useful properties in the request param, like:\n1. `req.method` - the request's HTTP verb. Example values: \"GET\", \"POST\", \"PUT\", \"DELETE\".\n2. `req.httpVersion` - http version being used. Example values: \"1.1\", \"2.1\".\n\nA combination of these properties can be used to handle any kind of request.",
      "html": "<h1 id=\"35.-http-routing\">35. HTTP routing <a class=\"heading-anchor-permalink\" href=\"#35.-http-routing\">#</a></h1>\n<p>Created Monday 30 January 2023 at 03:43 pm\n// rough\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/f024b46b376893c3be766e3a26b4fa0b231b9eb8\">Currently</a>, we return the same response for all routes (try it). This is of course, not the case in the real world.</p>\n<p>The default route is <code>/</code>. Note that by route, we mean the URI.</p>\n<p>To respond differently based on routes, access the route using <code>res.url</code>. Example:</p>\n<pre><code class=\"language-js\">const http = require(&quot;node:http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });\n\n  res.end(req.url);\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(&quot;Server started on port 3000&quot;);\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/075d783544353d0d276796facc84e3a7d1d0b7aa\">Code</a></p>\n<hr>\n<p>Since we know about the route, we can respond differently using conditionals, switch statements or some custom logic.</p>\n<p>Let’s create a simple server that has 3 pages:</p>\n<ol>\n<li>“/” - returns home page HTML</li>\n<li>“/about” - returns about page HTML</li>\n<li>“/api” - returns some JSON</li>\n<li>Respond with 404 (not found) HTTP status code for all other routes.\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/0c927326e4dac24023ba2f7fa2cb8948be54a5aa\">Code</a></li>\n</ol>\n<hr>\n<p>There are many other useful properties in the request param, like:</p>\n<ol>\n<li><code>req.method</code> - the request’s HTTP verb. Example values: “GET”, “POST”, “PUT”, “DELETE”.</li>\n<li><code>req.httpVersion</code> - http version being used. Example values: “1.1”, “2.1”.</li>\n</ol>\n<p>A combination of these properties can be used to handle any kind of request.</p>\n",
      "id": 38
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/36_Web_frameworks.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/4_HTTP_module/36_Web_frameworks.html",
      "content": "# 36. Web frameworks\nCreated Monday 30 January 2023 at 04:10 pm\n// rough\nWe learnt many things about the http module. We created servers using it that can send back text, HTML, JSON, status code based on routes, methods etc.\n\nThis is fine.\n\nBut, this is not how one would make a large application. We'd instead use a \"framework\".\n\n---\nA framework simply abstracts the lower level code allowing us to focus on the requirements than the code itself. It does this by providing \"code\" (functions, classes) and \"rules\" (opinions on file structuring etc) on top of which we build apps. A library doesn't have the \"rules\" part.\n\nNote: apart from abstraction and rules. Frameworks also provide \"extra\" code that is incidentally (generally) needed for the main purpose.  Frameworks that have this are said to be \"batteries-included\".\n\nExample - Angular, React, Vue are all frameworks/libraries that help you build UIs without having to rely on the lower level DOM API in JavaScript.\n\nSimilarly there are \"backend\" frameworks that can be used to build server apps without having to work with Node's HTTP module. Examples - express, nest, hapi, koa and sails. We'll not learn about a specific framework in this course. This course is about core Node.js\n",
      "html": "<h1 id=\"36.-web-frameworks\">36. Web frameworks <a class=\"heading-anchor-permalink\" href=\"#36.-web-frameworks\">#</a></h1>\n<p>Created Monday 30 January 2023 at 04:10 pm\n// rough\nWe learnt many things about the http module. We created servers using it that can send back text, HTML, JSON, status code based on routes, methods etc.</p>\n<p>This is fine.</p>\n<p>But, this is not how one would make a large application. We’d instead use a “framework”.</p>\n<hr>\n<p>A framework simply abstracts the lower level code allowing us to focus on the requirements than the code itself. It does this by providing “code” (functions, classes) and “rules” (opinions on file structuring etc) on top of which we build apps. A library doesn’t have the “rules” part.</p>\n<p>Note: apart from abstraction and rules. Frameworks also provide “extra” code that is incidentally (generally) needed for the main purpose.  Frameworks that have this are said to be “batteries-included”.</p>\n<p>Example - Angular, React, Vue are all frameworks/libraries that help you build UIs without having to rely on the lower level DOM API in JavaScript.</p>\n<p>Similarly there are “backend” frameworks that can be used to build server apps without having to work with Node’s HTTP module. Examples - express, nest, hapi, koa and sails. We’ll not learn about a specific framework in this course. This course is about core Node.js</p>\n",
      "id": 39
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/37_Nodejs_Runtime_recap.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/37_Nodejs_Runtime_recap.html",
      "content": "# 37. Node.js Runtime recap\nCreated Monday 30 January 2023 at 08:34 pm\n// rough\nRecollect what the Node.js runtime is: it is an environment that provides all the necessary components to run JavaScript outside the browser. It's components (bottom to top are):\n1. External dependencies - V8, libuv, zlib, crypto and others./\n2. C/C++ features like file system access and networking\n3. JS library - functions and utilities to interface with the C/C++ features.\n---\nRecollect what asynchronous JavaScript is: JS, in it's most basic form, is a synchronous (code executes top to down), blocking (code written ahead doesn't execute before code before hasn't finished executing, i.e. due to synchronous nature) and single-threaded (only one operation can take place at any given time) language. \n\n**But**, this is not how JS (in Node.js atleast) behaves. Operations like `fs.readFile` and `res.end` have asynchronous and non-blocking behavior. \nAlso if multiple files are read independently (the overall time is less than total sequential time - i.e. multithreaded. FIXME, check this claim.\n\nAll these powers of \"actual\" JavaScript in Node.js are due to an external dependency called \"libuv\". Let's learn more about it.",
      "html": "<h1 id=\"37.-node.js-runtime-recap\">37. Node.js Runtime recap <a class=\"heading-anchor-permalink\" href=\"#37.-node.js-runtime-recap\">#</a></h1>\n<p>Created Monday 30 January 2023 at 08:34 pm\n// rough\nRecollect what the Node.js runtime is: it is an environment that provides all the necessary components to run JavaScript outside the browser. It’s components (bottom to top are):</p>\n<ol>\n<li>External dependencies - V8, libuv, zlib, crypto and others./</li>\n<li>C/C++ features like file system access and networking</li>\n<li>JS library - functions and utilities to interface with the C/C++ features.</li>\n</ol>\n<hr>\n<p>Recollect what asynchronous JavaScript is: JS, in it’s most basic form, is a synchronous (code executes top to down), blocking (code written ahead doesn’t execute before code before hasn’t finished executing, i.e. due to synchronous nature) and single-threaded (only one operation can take place at any given time) language.</p>\n<p><strong>But</strong>, this is not how JS (in Node.js atleast) behaves. Operations like <code>fs.readFile</code> and <code>res.end</code> have asynchronous and non-blocking behavior.\nAlso if multiple files are read independently (the overall time is less than total sequential time - i.e. multithreaded. FIXME, check this claim.</p>\n<p>All these powers of “actual” JavaScript in Node.js are due to an external dependency called “libuv”. Let’s learn more about it.</p>\n",
      "id": 40
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/38_libuv.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/38_libuv.html",
      "content": "# 38. libuv\nCreated Monday 30 January 2023 at 08:48 pm\n// rough\n## What\nlibuv is a cross platform open source library written in the C language\n\n\n## Why\nIt handles the asynchronous and non-blocking operations in Node.js (FIXME: multi-threading abstraction is provided by libuv or not?). It abstracts away the complexities of dealing with the OS (FIXME: you mean multi-threading, process management, scheduling right? Because not all OS utilities are hard to use).\n\n\n## How\nHow does libuv help with asynchronous and non-blocking nature? It does so with the help of two constructs:\n1. Thread pool\n2. Event loop\n\nOf course, these are a small part of libuv, but they are enough for us to understand how Node.js handles these 3 problems (of synchronous, blocking and single-threaded execution).",
      "html": "<h1 id=\"38.-libuv\">38. libuv <a class=\"heading-anchor-permalink\" href=\"#38.-libuv\">#</a></h1>\n<p>Created Monday 30 January 2023 at 08:48 pm\n// rough</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>libuv is a cross platform open source library written in the C language</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>It handles the asynchronous and non-blocking operations in Node.js (FIXME: multi-threading abstraction is provided by libuv or not?). It abstracts away the complexities of dealing with the OS (FIXME: you mean multi-threading, process management, scheduling right? Because not all OS utilities are hard to use).</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>How does libuv help with asynchronous and non-blocking nature? It does so with the help of two constructs:</p>\n<ol>\n<li>Thread pool</li>\n<li>Event loop</li>\n</ol>\n<p>Of course, these are a small part of libuv, but they are enough for us to understand how Node.js handles these 3 problems (of synchronous, blocking and single-threaded execution).</p>\n",
      "id": 41
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/39_Thread_pool_deferring_till_48.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/39_Thread_pool_deferring_till_48.html",
      "content": "# 39. Thread pool\nCreated Monday 30 January 2023 at 08:55 pm\n// rough\nLet's learn about libuv's thread pool and the role it plays in the async non-blocking nature of Node.js.\n\nConsider the following example:\n```js\nconst fs = require(\"node:fs\");\n\nconsole.log(\"First\");\n\nfs.readFile(\"./file1.txt\", \"utf-8\", (err, data) => {\n\tconsole.log(\"Third. Last. File contents\");\n})\n\nconsole.log(\"Second\");\n```\nIt is clear that `fs.readFile` is an asynchronous and non-blocking function. But how is Node.js handling this (considering \"JavaScript in simplest form\") - the answer is libuv's thread pool.\n\n---\nHere's a \"conversation\" between the main thread and libuv:\n**Main thread**: Hey libuv, I need to read file contents but that's a time consuming task. I don't want to block further code from being executed during this time. Can I offload this to you?\n**Libuv**: Sure. Unlike you, who is single threaded, I have a pool of threads that I can use to run some of these time consuming tasks. When the task is done (in this case when the file contents are retrieved), then the associated callback function can be run.\n\nThis is simple.\n\n---\nlibuv's thread pool, literally, is a pool of threads that Node.js uses to offload time consuming tasks and ensure the main thread is not blocked for a long time.\n![](../../../../assets/39_Thread_pool_deferring_till_48-image-1-18801e26.png)\n\n---\nLet's do an experiment. We'll run a method and measure the time it takes to execute.\nFor this we'll use a built-in module called \"crypto\" (the module provides cryptographic utilities).  \"crypto\" has some functions that are time consuming and are therefore handled by libuv. One such function is `pbkdf2`.\n\n### Experiment 1 - synchronous version\nOn using the synchronous version of this function. [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/dcfd578a0d3b779a8e4b0f4a756031fe028f547d)\n\nInferences:\n- Time increases linearly with number of calls - obvious.\n- Each call takes the same time, irrespective of the total number of calls made.\n\nEach method in Node.js that has the \"sync\" suffix always runs on the main thread and is blocking.\n![](../../../../assets/39_Thread_pool_deferring_till_48-image-2-18801e26.png)\n\n### Experiment 2 - async version\n",
      "html": "<h1 id=\"39.-thread-pool\">39. Thread pool <a class=\"heading-anchor-permalink\" href=\"#39.-thread-pool\">#</a></h1>\n<p>Created Monday 30 January 2023 at 08:55 pm\n// rough\nLet’s learn about libuv’s thread pool and the role it plays in the async non-blocking nature of Node.js.</p>\n<p>Consider the following example:</p>\n<pre><code class=\"language-js\">const fs = require(&quot;node:fs&quot;);\n\nconsole.log(&quot;First&quot;);\n\nfs.readFile(&quot;./file1.txt&quot;, &quot;utf-8&quot;, (err, data) =&gt; {\n\tconsole.log(&quot;Third. Last. File contents&quot;);\n})\n\nconsole.log(&quot;Second&quot;);\n</code></pre>\n<p>It is clear that <code>fs.readFile</code> is an asynchronous and non-blocking function. But how is Node.js handling this (considering “JavaScript in simplest form”) - the answer is libuv’s thread pool.</p>\n<hr>\n<p>Here’s a “conversation” between the main thread and libuv:\n<strong>Main thread</strong>: Hey libuv, I need to read file contents but that’s a time consuming task. I don’t want to block further code from being executed during this time. Can I offload this to you?\n<strong>Libuv</strong>: Sure. Unlike you, who is single threaded, I have a pool of threads that I can use to run some of these time consuming tasks. When the task is done (in this case when the file contents are retrieved), then the associated callback function can be run.</p>\n<p>This is simple.</p>\n<hr>\n<p>libuv’s thread pool, literally, is a pool of threads that Node.js uses to offload time consuming tasks and ensure the main thread is not blocked for a long time.\n<img src=\"../../../../assets/39_Thread_pool_deferring_till_48-image-1-18801e26.png\" alt=\"\"></p>\n<hr>\n<p>Let’s do an experiment. We’ll run a method and measure the time it takes to execute.\nFor this we’ll use a built-in module called “crypto” (the module provides cryptographic utilities).  “crypto” has some functions that are time consuming and are therefore handled by libuv. One such function is <code>pbkdf2</code>.</p>\n<h3 id=\"experiment-1---synchronous-version\">Experiment 1 - synchronous version <a class=\"heading-anchor-permalink\" href=\"#experiment-1---synchronous-version\">#</a></h3>\n<p>On using the synchronous version of this function. <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/dcfd578a0d3b779a8e4b0f4a756031fe028f547d\">Code</a></p>\n<p>Inferences:</p>\n<ul>\n<li>Time increases linearly with number of calls - obvious.</li>\n<li>Each call takes the same time, irrespective of the total number of calls made.</li>\n</ul>\n<p>Each method in Node.js that has the “sync” suffix always runs on the main thread and is blocking.\n<img src=\"../../../../assets/39_Thread_pool_deferring_till_48-image-2-18801e26.png\" alt=\"\"></p>\n<h3 id=\"experiment-2---async-version\">Experiment 2 - async version <a class=\"heading-anchor-permalink\" href=\"#experiment-2---async-version\">#</a></h3>\n",
      "id": 42
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/40_Thread_pool_size_DEFER.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/40_Thread_pool_size_DEFER.html",
      "content": "",
      "html": "",
      "id": 43
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/41_The_Event_loop_DEFER.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/5_Nodejs_internals/41_The_Event_loop_DEFER.html",
      "content": "# 41. The Event loop\n\nWatched, understood, but it'll take too much time to _write_. In a nutshell, the event loop has asymmetric/un-equal priorities, and some \"type\" of resources (files, cpu, network) are also tied to this. It's useful, but it may be difficult to argue that it's not arbitrary.\n\nDo this: https://youtube.com/playlist?list=PLC3y8-rFHvwj1_l8acs_lBi3a0HNb3bAN, or the same from the [original playlist](https://youtube.com/playlist?list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY).",
      "html": "<h1 id=\"41.-the-event-loop\">41. The Event loop <a class=\"heading-anchor-permalink\" href=\"#41.-the-event-loop\">#</a></h1>\n<p>Watched, understood, but it’ll take too much time to <em>write</em>. In a nutshell, the event loop has asymmetric/un-equal priorities, and some “type” of resources (files, cpu, network) are also tied to this. It’s useful, but it may be difficult to argue that it’s not arbitrary.</p>\n<p>Do this: <a href=\"https://youtube.com/playlist?list=PLC3y8-rFHvwj1_l8acs_lBi3a0HNb3bAN\">https://youtube.com/playlist?list=PLC3y8-rFHvwj1_l8acs_lBi3a0HNb3bAN</a>, or the same from the <a href=\"https://youtube.com/playlist?list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY\">original playlist</a>.</p>\n",
      "id": 44
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/49_What_is_npm.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/49_What_is_npm.html",
      "content": "# 49. What is npm?\nCreated Friday 3 February 2023 at 10:41 am\n\n\"npm\" is:\n1. A software registry - a website containing code written by various developer. It's a large public database of JavaScript code that developers from all over the world can use to share and borrow code. Anyone can publish a \"code package\" to the registry.\n2. A package manager - a CLI tool that helps in installing, removing and working with JavaScript code packages (mostly from the registry).\n\n- npm is the default package manager for Node.js, and is shipped with the Node installation.\n- There are other JavaScript packages, viz pnpm, yarn.\n- Historically, npm did go by the name NPM (node package manager). It has evolved since, and is simply package manager for JavaScript (hence the name npm in lowercase).\n\n**Why learn about npm** - to consume and contribute 3rd party code. This is essential for developing any app in a practical time frame.",
      "html": "<h1 id=\"49.-what-is-npm%3F\">49. What is npm? <a class=\"heading-anchor-permalink\" href=\"#49.-what-is-npm%3F\">#</a></h1>\n<p>Created Friday 3 February 2023 at 10:41 am</p>\n<p>“npm” is:</p>\n<ol>\n<li>A software registry - a website containing code written by various developer. It’s a large public database of JavaScript code that developers from all over the world can use to share and borrow code. Anyone can publish a “code package” to the registry.</li>\n<li>A package manager - a CLI tool that helps in installing, removing and working with JavaScript code packages (mostly from the registry).</li>\n</ol>\n<ul>\n<li>npm is the default package manager for Node.js, and is shipped with the Node installation.</li>\n<li>There are other JavaScript packages, viz pnpm, yarn.</li>\n<li>Historically, npm did go by the name NPM (node package manager). It has evolved since, and is simply package manager for JavaScript (hence the name npm in lowercase).</li>\n</ul>\n<p><strong>Why learn about npm</strong> - to consume and contribute 3rd party code. This is essential for developing any app in a practical time frame.</p>\n",
      "id": 45
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/50_package_json.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/50_package_json.html",
      "content": "# 50. package.json\nCreated Friday 3 February 2023 at 10:53 am\n\n## What\n- \"package.json\" is npm's configuration file the npm package or project or app.\n- It's both human and machine readable.\n- It is stored at the root directory of the project. Or, a code project containing a \"package.json\" most probably means it's a Node.js project.\n\n\n## Why\n- A central place to configure and describe how to interact with and run the package\n- It is primarily used by npm CLI\n- Contains dependencies' names and versions.\n\n- It's usually generated automatically by running the command `npm init` or `npm init -y` (avoid prompts and stick to the defaults) inside a directory.\n- The file is automatically updated by the npm CLI when a package is added/removed/updated.",
      "html": "<h1 id=\"50.-package.json\">50. package.json <a class=\"heading-anchor-permalink\" href=\"#50.-package.json\">#</a></h1>\n<p>Created Friday 3 February 2023 at 10:53 am</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>“package.json” is npm’s configuration file the npm package or project or app.</li>\n<li>It’s both human and machine readable.</li>\n<li>It is stored at the root directory of the project. Or, a code project containing a “package.json” most probably means it’s a Node.js project.</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>\n<p>A central place to configure and describe how to interact with and run the package</p>\n</li>\n<li>\n<p>It is primarily used by npm CLI</p>\n</li>\n<li>\n<p>Contains dependencies’ names and versions.</p>\n</li>\n<li>\n<p>It’s usually generated automatically by running the command <code>npm init</code> or <code>npm init -y</code> (avoid prompts and stick to the defaults) inside a directory.</p>\n</li>\n<li>\n<p>The file is automatically updated by the npm CLI when a package is added/removed/updated.</p>\n</li>\n</ul>\n",
      "id": 46
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/51_Installing_packages.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/51_Installing_packages.html",
      "content": "# 51. Installing packages\nCreated Friday 3 February 2023 at 11:11 am\n\n## Choosing a good package from the registry\nA few things to consider when choosing a package from the registry:\n1. Popularity (downloads per week)\n2. Last published (should be recent)\n3. Is actively maintained (should be)\n4. Issues (too many for a simple thing means not a good package)\n\n---\nTo install a package from the registry, run the following command (inside the directory):\n```bash\nnpm install myPackageName\n\n# more patterns\nnpm install myPackage@x.y.z # installs version x.y.z\n```\nPackages installed this way are installed \"locally\", i.e. they are meant to be used only by the current project.\n\n---\nLocally installed packages are stored inside a folder named \"node_modules\" (this is done automatically).\n- This folder contains raw source code used by the library.\n- It's not meant to be version controlled. It's usually ignored using the `.gitignore` file.\n- It should not be edited. If this is needed, something's probably wrong with the approach/solution.\n- It can be regenerated anytime by running `npm install` (which installs all dependencies).\n\n---\nPackages can be installed globally by using the `-g` option, by running the following command (location does not matter here):\n```bash\nnpm install myPackageName -g\n```\n\nHowever, packages installed this way are not accessible by default inside the Node.js REPL or scripts. To access these inside the REPL and scripts, the `NODE_PATH` environment variable needs to be set up. It's value is a list of paths Node.js will include at the time of module resolution  (i.e. finding the module). **If this is feels too complicated, just set the `NODE_PATH` to the output of `npm root -g`**.\n\n---\nNPM packages can be of three types based on CLI usage:\n1. Only CLI - packages that are meant to be run as a command only, i.e. not meant to be imported in code.\n2. No CLI - packages that are meant for imports only.\n3. Both - package that can be used through the CLI and inside scripts. It's not necessary that functionality offered will be the same in both modes.\n\nPackages to be used as a CLI are generally installed globally. Node.js automatically seeds a command with the package's name. Examples:\n- create-react-app\n- nodemon\n\n---\nCommonly used npm syntax:\n```bash\nnpm list -g # show all globally installed packages\nnpm i myPackage # 'i' is an alias for 'install'\nnpm uninstall myPackage # remove the package from current project, -g is available\n```",
      "html": "<h1 id=\"51.-installing-packages\">51. Installing packages <a class=\"heading-anchor-permalink\" href=\"#51.-installing-packages\">#</a></h1>\n<p>Created Friday 3 February 2023 at 11:11 am</p>\n<h2 id=\"choosing-a-good-package-from-the-registry\">Choosing a good package from the registry <a class=\"heading-anchor-permalink\" href=\"#choosing-a-good-package-from-the-registry\">#</a></h2>\n<p>A few things to consider when choosing a package from the registry:</p>\n<ol>\n<li>Popularity (downloads per week)</li>\n<li>Last published (should be recent)</li>\n<li>Is actively maintained (should be)</li>\n<li>Issues (too many for a simple thing means not a good package)</li>\n</ol>\n<hr>\n<p>To install a package from the registry, run the following command (inside the directory):</p>\n<pre><code class=\"language-bash\">npm install myPackageName\n\n# more patterns\nnpm install myPackage@x.y.z # installs version x.y.z\n</code></pre>\n<p>Packages installed this way are installed “locally”, i.e. they are meant to be used only by the current project.</p>\n<hr>\n<p>Locally installed packages are stored inside a folder named “node_modules” (this is done automatically).</p>\n<ul>\n<li>This folder contains raw source code used by the library.</li>\n<li>It’s not meant to be version controlled. It’s usually ignored using the <code>.gitignore</code> file.</li>\n<li>It should not be edited. If this is needed, something’s probably wrong with the approach/solution.</li>\n<li>It can be regenerated anytime by running <code>npm install</code> (which installs all dependencies).</li>\n</ul>\n<hr>\n<p>Packages can be installed globally by using the <code>-g</code> option, by running the following command (location does not matter here):</p>\n<pre><code class=\"language-bash\">npm install myPackageName -g\n</code></pre>\n<p>However, packages installed this way are not accessible by default inside the Node.js REPL or scripts. To access these inside the REPL and scripts, the <code>NODE_PATH</code> environment variable needs to be set up. It’s value is a list of paths Node.js will include at the time of module resolution  (i.e. finding the module). <strong>If this is feels too complicated, just set the <code>NODE_PATH</code> to the output of <code>npm root -g</code></strong>.</p>\n<hr>\n<p>NPM packages can be of three types based on CLI usage:</p>\n<ol>\n<li>Only CLI - packages that are meant to be run as a command only, i.e. not meant to be imported in code.</li>\n<li>No CLI - packages that are meant for imports only.</li>\n<li>Both - package that can be used through the CLI and inside scripts. It’s not necessary that functionality offered will be the same in both modes.</li>\n</ol>\n<p>Packages to be used as a CLI are generally installed globally. Node.js automatically seeds a command with the package’s name. Examples:</p>\n<ul>\n<li>create-react-app</li>\n<li>nodemon</li>\n</ul>\n<hr>\n<p>Commonly used npm syntax:</p>\n<pre><code class=\"language-bash\">npm list -g # show all globally installed packages\nnpm i myPackage # 'i' is an alias for 'install'\nnpm uninstall myPackage # remove the package from current project, -g is available\n</code></pre>\n",
      "id": 47
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/52_Using_packages.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/52_Using_packages.html",
      "content": "# 52. Using packages\nCreated Friday 3 February 2023 at 11:29 am\n\nTo use 3rd party modules, just import by name.\n```js\nconst thing = require(\"myPackageName\"); // CommonJS syntax\n\nimport thing from \"myPackageName\"; // ESM syntax\n```",
      "html": "<h1 id=\"52.-using-packages\">52. Using packages <a class=\"heading-anchor-permalink\" href=\"#52.-using-packages\">#</a></h1>\n<p>Created Friday 3 February 2023 at 11:29 am</p>\n<p>To use 3rd party modules, just import by name.</p>\n<pre><code class=\"language-js\">const thing = require(&quot;myPackageName&quot;); // CommonJS syntax\n\nimport thing from &quot;myPackageName&quot;; // ESM syntax\n</code></pre>\n",
      "id": 48
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/53_Dependencies.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/53_Dependencies.html",
      "content": "# 52. Dependencies\nCreated Friday 3 February 2023 at 11:33 am\n\n\"dependencies\" inside \"package.json\" is an object containing external package name as key and version number as values.\n\nIt has many uses:\n1. Setup - for setting up existing project again. npm installs all packages listed in \"dependencies\" with the correct version\n2. Specify version of package - a package may or may not support the project's code in the future. Specifying the version makes sure the project works even if the package is updated by the maintainer.\n3. ",
      "html": "<h1 id=\"52.-dependencies\">52. Dependencies <a class=\"heading-anchor-permalink\" href=\"#52.-dependencies\">#</a></h1>\n<p>Created Friday 3 February 2023 at 11:33 am</p>\n<p>“dependencies” inside “package.json” is an object containing external package name as key and version number as values.</p>\n<p>It has many uses:</p>\n<ol>\n<li>Setup - for setting up existing project again. npm installs all packages listed in “dependencies” with the correct version</li>\n<li>Specify version of package - a package may or may not support the project’s code in the future. Specifying the version makes sure the project works even if the package is updated by the maintainer.</li>\n<li></li>\n</ol>\n",
      "id": 49
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/54_Versioning.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/54_Versioning.html",
      "content": "# 52. Versioning\nCreated Friday 3 February 2023 at 11:44 am\n\nnpm versions use semantic versioning as notation.\n\nIn X.Y.Z\n- X: major version, updated if the changes are not backwards compatible.\n- Y: minor version, updated if the changes are backwards compatible.\n- Z: patch version, updated when there's a patch, that's backwards compatible.\n\n- Semantic versioning starts from 0.1.0 is the first version. Not 0.0.1 since there can't be a patch for \"nothing\".\n- When the code becomes production ready, the version becomes 1.0.0.\n",
      "html": "<h1 id=\"52.-versioning\">52. Versioning <a class=\"heading-anchor-permalink\" href=\"#52.-versioning\">#</a></h1>\n<p>Created Friday 3 February 2023 at 11:44 am</p>\n<p>npm versions use semantic versioning as notation.</p>\n<p>In X.Y.Z</p>\n<ul>\n<li>\n<p>X: major version, updated if the changes are not backwards compatible.</p>\n</li>\n<li>\n<p>Y: minor version, updated if the changes are backwards compatible.</p>\n</li>\n<li>\n<p>Z: patch version, updated when there’s a patch, that’s backwards compatible.</p>\n</li>\n<li>\n<p>Semantic versioning starts from 0.1.0 is the first version. Not 0.0.1 since there can’t be a patch for “nothing”.</p>\n</li>\n<li>\n<p>When the code becomes production ready, the version becomes 1.0.0.</p>\n</li>\n</ul>\n",
      "id": 50
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/55_global_packages.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/55_global_packages.html",
      "content": "# 55. Global packages\nCreated Sunday 5 February 2023 at 10:43 am\n\nAlready seen in [51_Installing_packages](51_Installing_packages.md). Also see:\n- [Dot file](https://gist.github.com/sanjarcode/92aa6a164d16e51c343eed926047fb1f#file-bashrc) - makes globally installed packages available in standalone scripts.\n- [Feature request for node](https://github.com/nodejs/node/issues/46475)",
      "html": "<h1 id=\"55.-global-packages\">55. Global packages <a class=\"heading-anchor-permalink\" href=\"#55.-global-packages\">#</a></h1>\n<p>Created Sunday 5 February 2023 at 10:43 am</p>\n<p>Already seen in <a href=\"51_Installing_packages.html\">51_Installing_packages</a>. Also see:</p>\n<ul>\n<li><a href=\"https://gist.github.com/sanjarcode/92aa6a164d16e51c343eed926047fb1f#file-bashrc\">Dot file</a> - makes globally installed packages available in standalone scripts.</li>\n<li><a href=\"https://github.com/nodejs/node/issues/46475\">Feature request for node</a></li>\n</ul>\n",
      "id": 51
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/56_npm_scripts.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/56_npm_scripts.html",
      "content": "---\ntags:\n  - npm\n  - npm-scripts\n  - scripts\n  - environment-variables\n---\n# 56. npm scripts\nCreated Sunday 5 February 2023 at 10:50 am\n\nDocs - https://docs.npmjs.com/cli/v10/using-npm/scripts\n## Why (have npm scripts)\nAn \"npm script\" is a convenient way to bundle common commands for use in a project. Examples - start the server, start the dev server, start test runner, lint all files etc.\n\n- \"npm scripts\" are stored in the package.json file.\n- They also ensure that everyone is using the same command with the same options. \n- They also help beginners/new-comers - they don't have to learn the command line tool or options.\n\n\n## What (details)\nnpm scripts are not \"scripts\" in the general sense. They're more like \"stored CLI aliases\". \n\nThey are **defined** under the \"scripts\" key in \"package.json\". Keys is the script name and value is the CLI command that will be run.\n\nExample:\n```json\n// package.json sample\n{\n  \"name\": \"my-custom-package-1\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"upper-case\": \"^2.0.2\"\n  }\n}\n```\n\nnpm scripts are **executed** using the command \n```bash\nnpm run <SCRIPT_NAME>\n```\nNote: The script name \"start\" is so common that one can omit \"run\" in this case, i.e. `npm start` and `npm run start` are the same thing.\n\n\n## Passing arguments (optional)\nEverything after `--` when using the script is placed directly after the script value before execution. Example:\n```json\n  \"scripts\": {\n    \"print\": \"echo\",\n    \"ls\": \"ls\"\n  },\n```\nDoing `npm run print -- Hello` is equivalent to `echo Hello`\nDoing `npm run print -- -l` is equivalent to `ls -l`\n\nFIXME: there's no need for this `--`, appending stuff directly to \"npm run <SCRIPT_NAME>\" works out of the box?\n\n\n## Access local packages commands\n3rd party sometimes export commands, but these are not available in the terminal if the module is installed locally.\n\ne.g. \"nodemon\" if installed locally, \"nodemon\" command in the terminal will still not work. But it *is made available inside a script*, i.e. npm injects all local dependencies of the project in the script's environment. Of course, global packages and all other system stuff is available as well.\n\nAssume nodemon is only install locally:\n```json\n  \"scripts\": {\n    \"myNodemon\": \"nodemon --help\",\n    \"nodemonx\": \"nodemon\" // ok to name the same, but want to show that any name is fine\n  },\n```\n\n```sh\nnodemon app.js # ERROR, \"nodemon\" command not found\n\nnpm run myNodemon # Ok\nnpm run nodemonx -- app.js # OK\n```\n\nNote: if a module is installed both globally and locally, the local one will be preferred if used in npm scripts.\n\n\n## Run npm script from anywhere\nSuppose I am at `~`, and I wish to run a script for project at `~/my-work/my-app`.\nThis can be done in one go without `cd`, like so:\n```sh\nnpm run COMMAND --prefix ~/my-work/my-app\n\n# or in general\nnpm run COMMAND --prefix some-location\n```\n\nThe following also works, identically\n```sh\nnode some-location/index.js\n```\n\nNote: these two ways, and doing them from inside the folder behave the same (filename and dirname are also printed the same).\nsource - [StackOverflow](https://stackoverflow.com/questions/36172442/how-can-i-get-npm-start-at-a-different-directory)\n\n\n## Access* package.json stuff in scripts/code\n*The \\* - only some built-in things can be accessed, but there is a user managed key available.*\n\nSee https://docs.npmjs.com/cli/v10/using-npm/scripts#packagejson-vars, [helpful article](https://dev.to/paulasantamaria/mastering-npm-scripts-2chd)\n\nNote here that:\n1. There are two modes here - you access variables inside scripts, or inside code. Mostly, the same thing works for both.\n\t1. Inside script - `$variable_name`. Example: `echo $npm_package_name`\n\t2. Inside code - `process.env.variable_name`. Example: `console.log(process.env.npm_package_name)`\n2. There are a lot of hidden variables also, which may not be useful, so I'll not discuss them here. Example: \"npm_node_execpath\"\n3. These variables are available only if code or script is run via `npm` command. Running via `node` command will not work, i.e. the variables will not exist.\n\n### `npm_package_` default\n3 values are available by default:\n1. `npm_package_name` - `'myproject'`\n2. `npm_package_version` - `'1.0.0'`\n3. `npm_package_json` - path to package.json\n\n### `npm_package_config_`\nThis is a user managed object, key being `config`. \nBy default, it doesn't even exist. \n\nThe keys you add to this object become accessible in underscore notation (instead of the usual dot). Nesting is allowed, and again, underscore will be added. \n\nAll variable names and values are strings. BTW, this also means that the root, `npm_package_config`, by itself, isn't a valid variable.\n\n```js\n// package.json\n...\n\n \"config\": {\n    \"my-var\": \"🐥Some value\",\n    \"portx\": \"🐥1234\"\n  }\n  \n...\n```\n\n`npm_package_config_portx` and `npm_package_config_my-var` are both available now.\n\n[Docs](https://docs.npmjs.com/cli/v10/configuring-npm/package-json#config)",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>npm</li>\n<li>npm-scripts</li>\n<li>scripts</li>\n<li>environment-variables</li>\n</ul>\n<hr>\n<h1 id=\"56.-npm-scripts\">56. npm scripts <a class=\"heading-anchor-permalink\" href=\"#56.-npm-scripts\">#</a></h1>\n<p>Created Sunday 5 February 2023 at 10:50 am</p>\n<p>Docs - <a href=\"https://docs.npmjs.com/cli/v10/using-npm/scripts\">https://docs.npmjs.com/cli/v10/using-npm/scripts</a></p>\n<h2 id=\"why-(have-npm-scripts)\">Why (have npm scripts) <a class=\"heading-anchor-permalink\" href=\"#why-(have-npm-scripts)\">#</a></h2>\n<p>An “npm script” is a convenient way to bundle common commands for use in a project. Examples - start the server, start the dev server, start test runner, lint all files etc.</p>\n<ul>\n<li>“npm scripts” are stored in the package.json file.</li>\n<li>They also ensure that everyone is using the same command with the same options.</li>\n<li>They also help beginners/new-comers - they don’t have to learn the command line tool or options.</li>\n</ul>\n<h2 id=\"what-(details)\">What (details) <a class=\"heading-anchor-permalink\" href=\"#what-(details)\">#</a></h2>\n<p>npm scripts are not “scripts” in the general sense. They’re more like “stored CLI aliases”.</p>\n<p>They are <strong>defined</strong> under the “scripts” key in “package.json”. Keys is the script name and value is the CLI command that will be run.</p>\n<p>Example:</p>\n<pre><code class=\"language-json\">// package.json sample\n{\n  &quot;name&quot;: &quot;my-custom-package-1&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node index.js&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;upper-case&quot;: &quot;^2.0.2&quot;\n  }\n}\n</code></pre>\n<p>npm scripts are <strong>executed</strong> using the command</p>\n<pre><code class=\"language-bash\">npm run &lt;SCRIPT_NAME&gt;\n</code></pre>\n<p>Note: The script name “start” is so common that one can omit “run” in this case, i.e. <code>npm start</code> and <code>npm run start</code> are the same thing.</p>\n<h2 id=\"passing-arguments-(optional)\">Passing arguments (optional) <a class=\"heading-anchor-permalink\" href=\"#passing-arguments-(optional)\">#</a></h2>\n<p>Everything after <code>--</code> when using the script is placed directly after the script value before execution. Example:</p>\n<pre><code class=\"language-json\">  &quot;scripts&quot;: {\n    &quot;print&quot;: &quot;echo&quot;,\n    &quot;ls&quot;: &quot;ls&quot;\n  },\n</code></pre>\n<p>Doing <code>npm run print -- Hello</code> is equivalent to <code>echo Hello</code>\nDoing <code>npm run print -- -l</code> is equivalent to <code>ls -l</code></p>\n<p>FIXME: there’s no need for this <code>--</code>, appending stuff directly to “npm run &lt;SCRIPT_NAME&gt;” works out of the box?</p>\n<h2 id=\"access-local-packages-commands\">Access local packages commands <a class=\"heading-anchor-permalink\" href=\"#access-local-packages-commands\">#</a></h2>\n<p>3rd party sometimes export commands, but these are not available in the terminal if the module is installed locally.</p>\n<p>e.g. “nodemon” if installed locally, “nodemon” command in the terminal will still not work. But it <em>is made available inside a script</em>, i.e. npm injects all local dependencies of the project in the script’s environment. Of course, global packages and all other system stuff is available as well.</p>\n<p>Assume nodemon is only install locally:</p>\n<pre><code class=\"language-json\">  &quot;scripts&quot;: {\n    &quot;myNodemon&quot;: &quot;nodemon --help&quot;,\n    &quot;nodemonx&quot;: &quot;nodemon&quot; // ok to name the same, but want to show that any name is fine\n  },\n</code></pre>\n<pre><code class=\"language-sh\">nodemon app.js # ERROR, &quot;nodemon&quot; command not found\n\nnpm run myNodemon # Ok\nnpm run nodemonx -- app.js # OK\n</code></pre>\n<p>Note: if a module is installed both globally and locally, the local one will be preferred if used in npm scripts.</p>\n<h2 id=\"run-npm-script-from-anywhere\">Run npm script from anywhere <a class=\"heading-anchor-permalink\" href=\"#run-npm-script-from-anywhere\">#</a></h2>\n<p>Suppose I am at <code>~</code>, and I wish to run a script for project at <code>~/my-work/my-app</code>.\nThis can be done in one go without <code>cd</code>, like so:</p>\n<pre><code class=\"language-sh\">npm run COMMAND --prefix ~/my-work/my-app\n\n# or in general\nnpm run COMMAND --prefix some-location\n</code></pre>\n<p>The following also works, identically</p>\n<pre><code class=\"language-sh\">node some-location/index.js\n</code></pre>\n<p>Note: these two ways, and doing them from inside the folder behave the same (filename and dirname are also printed the same).\nsource - <a href=\"https://stackoverflow.com/questions/36172442/how-can-i-get-npm-start-at-a-different-directory\">StackOverflow</a></p>\n<h2 id=\"access*-package.json-stuff-in-scripts%2Fcode\">Access* package.json stuff in scripts/code <a class=\"heading-anchor-permalink\" href=\"#access*-package.json-stuff-in-scripts%2Fcode\">#</a></h2>\n<p><em>The * - only some built-in things can be accessed, but there is a user managed key available.</em></p>\n<p>See <a href=\"https://docs.npmjs.com/cli/v10/using-npm/scripts#packagejson-vars\">https://docs.npmjs.com/cli/v10/using-npm/scripts#packagejson-vars</a>, <a href=\"https://dev.to/paulasantamaria/mastering-npm-scripts-2chd\">helpful article</a></p>\n<p>Note here that:</p>\n<ol>\n<li>There are two modes here - you access variables inside scripts, or inside code. Mostly, the same thing works for both.\n<ol>\n<li>Inside script - <code>$variable_name</code>. Example: <code>echo $npm_package_name</code></li>\n<li>Inside code - <code>process.env.variable_name</code>. Example: <code>console.log(process.env.npm_package_name)</code></li>\n</ol>\n</li>\n<li>There are a lot of hidden variables also, which may not be useful, so I’ll not discuss them here. Example: “npm_node_execpath”</li>\n<li>These variables are available only if code or script is run via <code>npm</code> command. Running via <code>node</code> command will not work, i.e. the variables will not exist.</li>\n</ol>\n<h3 id=\"npm_package_-default\"><code>npm_package_</code> default <a class=\"heading-anchor-permalink\" href=\"#npm_package_-default\">#</a></h3>\n<p>3 values are available by default:</p>\n<ol>\n<li><code>npm_package_name</code> - <code>'myproject'</code></li>\n<li><code>npm_package_version</code> - <code>'1.0.0'</code></li>\n<li><code>npm_package_json</code> - path to package.json</li>\n</ol>\n<h3 id=\"npm_package_config_\"><code>npm_package_config_</code> <a class=\"heading-anchor-permalink\" href=\"#npm_package_config_\">#</a></h3>\n<p>This is a user managed object, key being <code>config</code>.\nBy default, it doesn’t even exist.</p>\n<p>The keys you add to this object become accessible in underscore notation (instead of the usual dot). Nesting is allowed, and again, underscore will be added.</p>\n<p>All variable names and values are strings. BTW, this also means that the root, <code>npm_package_config</code>, by itself, isn’t a valid variable.</p>\n<pre><code class=\"language-js\">// package.json\n...\n\n &quot;config&quot;: {\n    &quot;my-var&quot;: &quot;🐥Some value&quot;,\n    &quot;portx&quot;: &quot;🐥1234&quot;\n  }\n  \n...\n</code></pre>\n<p><code>npm_package_config_portx</code> and <code>npm_package_config_my-var</code> are both available now.</p>\n<p><a href=\"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#config\">Docs</a></p>\n",
      "id": 52
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/57_Publishing_an_npm_package.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/6_npm/57_Publishing_an_npm_package.html",
      "content": "# 57. Publishing an npm package\nCreated Sunday 5 February 2023 at 11:38 am\n\n- Create a new Node.js project, using `npm init` or similar.\n- Add keywords and description.\n- Login using `npm login`\n- Publish using `npm publish`\n\n[Code](https://github.com/exemplar-codes/hello-world-sanjarcode-npm)\n\nThe package can now be installed by anyone.",
      "html": "<h1 id=\"57.-publishing-an-npm-package\">57. Publishing an npm package <a class=\"heading-anchor-permalink\" href=\"#57.-publishing-an-npm-package\">#</a></h1>\n<p>Created Sunday 5 February 2023 at 11:38 am</p>\n<ul>\n<li>Create a new Node.js project, using <code>npm init</code> or similar.</li>\n<li>Add keywords and description.</li>\n<li>Login using <code>npm login</code></li>\n<li>Publish using <code>npm publish</code></li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/hello-world-sanjarcode-npm\">Code</a></p>\n<p>The package can now be installed by anyone.</p>\n",
      "id": 53
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/58_Building_CLI_tools.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/58_Building_CLI_tools.html",
      "content": "# 58. Building CLI tools\nCreated Sunday 5 February 2023 at 12:43 pm\n\nCreate a basic CLI tool using node and npm\nPass options to the CLI\nAdd interactivity to the CLI\n\nSteps:\n1. Add shebang to the start (main) file. This is to specify the interpreter that OS will use.\n```js\n#!/usr/bin/env node\n\nconsole.log()\n// JS code here, this is index.js\n```\n2. Add the command name as attributes of \"bin\" in package.json. Command name is key and main file name is value. This adds the command to the environment variable.\n```json\n{\n\t\"bin\": {\n\t\t\"sanjarcode-pokedex\": \"index.js\"\n\t}\n}\n```\n3. The CLI tool can now be installed via the npm registry.\n4. (Optional), to install the tool without publishing, run `npm install -g` from within the folder.\n\nThe command can now be used directly in the terminal.\n\nNote: Like all other Node.js projects, we can install and use 3rd party modules.\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/2062dd8b3da1c86a3c97d56672d2f81f451584c1)",
      "html": "<h1 id=\"58.-building-cli-tools\">58. Building CLI tools <a class=\"heading-anchor-permalink\" href=\"#58.-building-cli-tools\">#</a></h1>\n<p>Created Sunday 5 February 2023 at 12:43 pm</p>\n<p>Create a basic CLI tool using node and npm\nPass options to the CLI\nAdd interactivity to the CLI</p>\n<p>Steps:</p>\n<ol>\n<li>Add shebang to the start (main) file. This is to specify the interpreter that OS will use.</li>\n</ol>\n<pre><code class=\"language-js\">#!/usr/bin/env node\n\nconsole.log()\n// JS code here, this is index.js\n</code></pre>\n<ol start=\"2\">\n<li>Add the command name as attributes of “bin” in package.json. Command name is key and main file name is value. This adds the command to the environment variable.</li>\n</ol>\n<pre><code class=\"language-json\">{\n\t&quot;bin&quot;: {\n\t\t&quot;sanjarcode-pokedex&quot;: &quot;index.js&quot;\n\t}\n}\n</code></pre>\n<ol start=\"3\">\n<li>The CLI tool can now be installed via the npm registry.</li>\n<li>(Optional), to install the tool without publishing, run <code>npm install -g</code> from within the folder.</li>\n</ol>\n<p>The command can now be used directly in the terminal.</p>\n<p>Note: Like all other Node.js projects, we can install and use 3rd party modules.</p>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/2062dd8b3da1c86a3c97d56672d2f81f451584c1\">Code</a></p>\n",
      "id": 54
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_1_CLI_options.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_1_CLI_options.html",
      "content": "# 59. CLI options\nCreated Thursday 9 February 2023 at 02:24 am\n\n## `process.argv`\n- Returns command line text (used to run the script) as an array. No need to import.\n- Removes spaces, appropriately (i.e. will retain space in bash strings)\n- CLI commands and `node` commands give same* output. \\*node and file path is different, options are the same\n\nExample output:\n```js\nconsole.log(process.argv);\n\n// node index.js\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/MEGAsync/Work_Section/study_dir/cse_dir/app_development/web_dev/projects/codevolution-nodejs/sanjarcode-first-node-cli/index'\n] //--- 1 \n\n// sanjarcode-pokedex\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex'\n] //--- 2\n\n// sanjarcode-pokedex hello\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  'hello'\n] //--- 3\n\n// sanjarcode-pokedex --pokemon=mew\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  '--pokemon=mew'\n] //--- 4\n\n// sanjarcode-pokedex 'hello world'\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  'hello world'\n] //--- 5\n```\n\n\n## (Optional) - \"yargs\" package to parse options\n\"yargs\" parses CLI options into an object. It:\n- Exposes a function.\n- Accepts `process.args` as input.\n- Returns an object with where key `argv` is an object, with option name as key and option value as value.\n- Assumes CLI options are passed as `--optionName=valueText`, space separated of course.\n\nExample (assuming, `yargs` package is installed:\n```js\nconst yargs = require('yargs');\nconst myOptions = yargs(process.argv).argv;\n\n// with CLI options `--pokemon=mew`\nconsole.log(myOptions.pokemon); // 'mew'\n\n// with CLI options `--darkmode=true`\nconsole.log(myOptions.darkmode); // 'true'\n```\n\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/059f0b132c3b37085c7f3805a5cbe30eb7e93cca)",
      "html": "<h1 id=\"59.-cli-options\">59. CLI options <a class=\"heading-anchor-permalink\" href=\"#59.-cli-options\">#</a></h1>\n<p>Created Thursday 9 February 2023 at 02:24 am</p>\n<h2 id=\"process.argv\"><code>process.argv</code> <a class=\"heading-anchor-permalink\" href=\"#process.argv\">#</a></h2>\n<ul>\n<li>Returns command line text (used to run the script) as an array. No need to import.</li>\n<li>Removes spaces, appropriately (i.e. will retain space in bash strings)</li>\n<li>CLI commands and <code>node</code> commands give same* output. *node and file path is different, options are the same</li>\n</ul>\n<p>Example output:</p>\n<pre><code class=\"language-js\">console.log(process.argv);\n\n// node index.js\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/MEGAsync/Work_Section/study_dir/cse_dir/app_development/web_dev/projects/codevolution-nodejs/sanjarcode-first-node-cli/index'\n] //--- 1 \n\n// sanjarcode-pokedex\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex'\n] //--- 2\n\n// sanjarcode-pokedex hello\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  'hello'\n] //--- 3\n\n// sanjarcode-pokedex --pokemon=mew\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  '--pokemon=mew'\n] //--- 4\n\n// sanjarcode-pokedex 'hello world'\n[\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/node',\n  '/home/sanjar/.nvm/versions/node/v18.13.0/bin/sanjarcode-pokedex',\n  'hello world'\n] //--- 5\n</code></pre>\n<h2 id=\"(optional)---%E2%80%9Cyargs%E2%80%9D-package-to-parse-options\">(Optional) - “yargs” package to parse options <a class=\"heading-anchor-permalink\" href=\"#(optional)---%E2%80%9Cyargs%E2%80%9D-package-to-parse-options\">#</a></h2>\n<p>“yargs” parses CLI options into an object. It:</p>\n<ul>\n<li>Exposes a function.</li>\n<li>Accepts <code>process.args</code> as input.</li>\n<li>Returns an object with where key <code>argv</code> is an object, with option name as key and option value as value.</li>\n<li>Assumes CLI options are passed as <code>--optionName=valueText</code>, space separated of course.</li>\n</ul>\n<p>Example (assuming, <code>yargs</code> package is installed:</p>\n<pre><code class=\"language-js\">const yargs = require('yargs');\nconst myOptions = yargs(process.argv).argv;\n\n// with CLI options `--pokemon=mew`\nconsole.log(myOptions.pokemon); // 'mew'\n\n// with CLI options `--darkmode=true`\nconsole.log(myOptions.darkmode); // 'true'\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/059f0b132c3b37085c7f3805a5cbe30eb7e93cca\">Code</a></p>\n",
      "id": 55
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_2_process_variable.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/59_2_process_variable.html",
      "content": "# 61. process variable\nCreated Wed Dec 27, 2023 at 10:57 PM\n\n[Docs](https://nodejs.org/dist/latest-v20.x/docs/api/process.html#process)\n\nThis is globally available variable. It's an object. It has many useful functions and data.\n\n- `process.platform` - one of `darwin`, `linux`, `win32`, `android`\n- `process.pid` - returns the PID of the process (self).\n- `process.argv` - an array of strings containing CLI args passed when the Node.js process was launched. First value is path to node, i.e. nothing is removed.\n- `process.debugPort` - port used by debugger, assuming it is enabled.\n- `process.env` - environment variables from OS as well as any inline ones. It's an object.\n    \n- `process.exit()` - exit the script. As opposed to `return`, which finishes current module execution, but the complete program keeps running.\n- `process.cpuUsage()` - object with CPU time in milliseconds. Example: output `{ user: 38579, system: 6986 }`. If a previous output is passed as argument, shows a diff reading. [Docs](https://nodejs.org/dist/latest-v20.x/docs/api/process.html#processcpuusagepreviousvalue)",
      "html": "<h1 id=\"61.-process-variable\">61. process variable <a class=\"heading-anchor-permalink\" href=\"#61.-process-variable\">#</a></h1>\n<p>Created Wed Dec 27, 2023 at 10:57 PM</p>\n<p><a href=\"https://nodejs.org/dist/latest-v20.x/docs/api/process.html#process\">Docs</a></p>\n<p>This is globally available variable. It’s an object. It has many useful functions and data.</p>\n<ul>\n<li>\n<p><code>process.platform</code> - one of <code>darwin</code>, <code>linux</code>, <code>win32</code>, <code>android</code></p>\n</li>\n<li>\n<p><code>process.pid</code> - returns the PID of the process (self).</p>\n</li>\n<li>\n<p><code>process.argv</code> - an array of strings containing CLI args passed when the Node.js process was launched. First value is path to node, i.e. nothing is removed.</p>\n</li>\n<li>\n<p><code>process.debugPort</code> - port used by debugger, assuming it is enabled.</p>\n</li>\n<li>\n<p><code>process.env</code> - environment variables from OS as well as any inline ones. It’s an object.</p>\n</li>\n<li>\n<p><code>process.exit()</code> - exit the script. As opposed to <code>return</code>, which finishes current module execution, but the complete program keeps running.</p>\n</li>\n<li>\n<p><code>process.cpuUsage()</code> - object with CPU time in milliseconds. Example: output <code>{ user: 38579, system: 6986 }</code>. If a previous output is passed as argument, shows a diff reading. <a href=\"https://nodejs.org/dist/latest-v20.x/docs/api/process.html#processcpuusagepreviousvalue\">Docs</a></p>\n</li>\n</ul>\n",
      "id": 56
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_1_Keyboard-input-readline-module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_1_Keyboard-input-readline-module.html",
      "content": "# 60. 1 Keyboard  input readline module\nCreated Sat Jan 6, 2024 at 1:25 PM\n\nThe [readline](https://nodejs.org/api/readline.html) module can be used for reading input into programs.\nA promise version [readline/promises](https://nodejs.org/api/readline.html#promises-api) is available (it's marked experimental), but works by default in v20.\n\nThe APIs of the module allow for very granular control if needed - like position of cursor, row/column position, reading a line vs per character reads.\n\nI'll demonstrate two commonly needed interfaces:\n1. Read a sentence (until user presses enter). Like C++'s cin.\n2. Read single character\n\n## 1. Read sentence (until 'Enter' is pressed)\nSince we get back something once, I'm using async-await.\n\nLogic (snippet)\n```js\n// node v20 ok\n/**\n * Take sentence input, until you press 'Enter'\n * Like C++ cin\n *\n * @param {String} message\n * @returns {String}\n */\nconst prompt = async (message) => {\n  const readline = require(\"readline/promises\");\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  \n  const answer = await rl.question(message);\n  \n  rl.close(); // stop listening\n  return answer;\n};\n```\n\nSample program\n```js\n// copy code from above here\nasync function simpleSum() {\n  const a = await prompt(\"Enter first number: \");\n  const b = await prompt(\"Enter second number: \");\n  console.log(\"Sum is\", Number(a) + Number(b));\n}\nsimpleSum();\n```\n\nA more interesting program\n```js\nasync function getGitHubName() {\n  const username = await prompt(\"GitHub username: \");\n  const resp = await fetch(`https://api.github.com/users/${username}`);\n  if (!resp.ok) {\n    console.log(\n      \"Error occurred\",\n      \",\",\n      \"Code:\",\n      resp.status,\n      \",\",\n      \"Message:\" + (await resp.text())\n    );\n  } else {\n    const data = await resp.json();\n    const name = data.name;\n    console.log(\"User found. Name:\", name);\n  }\n}\n\ngetGitHubName();\n```\n\n## 2. Run code for single character\nMore like run some code on keypress. This continuously listens for keypresses.\nSince each keypress runs some code, I'm using callback.\n\nExample: this is what Metro (React native dev process) runs like - when 'r' is pressed it reloads.\n\nLogic (snippet)\n```js\n// node v20 ok\n/**\n * Continues listening for keypresses, and run code for each keypress\n */\nconst listenKeyPresses = (callback = (key, data) => console.log({ key, data })) => {\n  const readline = require(\"readline/promises\");\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  rl.input.on(\"keypress\", callback);\n  return rl;\n};\n\nlistenKeyPresses.example = () => {\n  listenKeyPresses((key, data) => {\n    const isLetter =\n      key.toLowerCase().charCodeAt() >= \"a\".charCodeAt() &&\n      key.toLowerCase().charCodeAt() <= \"z\".charCodeAt();\n\n    console.log(`\\b${key} is a ${isLetter ? \"letter\" : \"Non-letter\"}`);\n    console.log(data);\n  });\n};\n```\n\nThis is very handy when testing, trying something new. Instead of creating a small frontend using HTML, CSS or JS, or setting up Postman. Just use this, setup key press and corresponding code run, and test quickly. Both input + output in the same terminal!",
      "html": "<h1 id=\"60.-1-keyboard-input-readline-module\">60. 1 Keyboard  input readline module <a class=\"heading-anchor-permalink\" href=\"#60.-1-keyboard-input-readline-module\">#</a></h1>\n<p>Created Sat Jan 6, 2024 at 1:25 PM</p>\n<p>The <a href=\"https://nodejs.org/api/readline.html\">readline</a> module can be used for reading input into programs.\nA promise version <a href=\"https://nodejs.org/api/readline.html#promises-api\">readline/promises</a> is available (it’s marked experimental), but works by default in v20.</p>\n<p>The APIs of the module allow for very granular control if needed - like position of cursor, row/column position, reading a line vs per character reads.</p>\n<p>I’ll demonstrate two commonly needed interfaces:</p>\n<ol>\n<li>Read a sentence (until user presses enter). Like C++'s cin.</li>\n<li>Read single character</li>\n</ol>\n<h2 id=\"1.-read-sentence-(until-%E2%80%98enter%E2%80%99-is-pressed)\">1. Read sentence (until ‘Enter’ is pressed) <a class=\"heading-anchor-permalink\" href=\"#1.-read-sentence-(until-%E2%80%98enter%E2%80%99-is-pressed)\">#</a></h2>\n<p>Since we get back something once, I’m using async-await.</p>\n<p>Logic (snippet)</p>\n<pre><code class=\"language-js\">// node v20 ok\n/**\n * Take sentence input, until you press 'Enter'\n * Like C++ cin\n *\n * @param {String} message\n * @returns {String}\n */\nconst prompt = async (message) =&gt; {\n  const readline = require(&quot;readline/promises&quot;);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  \n  const answer = await rl.question(message);\n  \n  rl.close(); // stop listening\n  return answer;\n};\n</code></pre>\n<p>Sample program</p>\n<pre><code class=\"language-js\">// copy code from above here\nasync function simpleSum() {\n  const a = await prompt(&quot;Enter first number: &quot;);\n  const b = await prompt(&quot;Enter second number: &quot;);\n  console.log(&quot;Sum is&quot;, Number(a) + Number(b));\n}\nsimpleSum();\n</code></pre>\n<p>A more interesting program</p>\n<pre><code class=\"language-js\">async function getGitHubName() {\n  const username = await prompt(&quot;GitHub username: &quot;);\n  const resp = await fetch(`https://api.github.com/users/${username}`);\n  if (!resp.ok) {\n    console.log(\n      &quot;Error occurred&quot;,\n      &quot;,&quot;,\n      &quot;Code:&quot;,\n      resp.status,\n      &quot;,&quot;,\n      &quot;Message:&quot; + (await resp.text())\n    );\n  } else {\n    const data = await resp.json();\n    const name = data.name;\n    console.log(&quot;User found. Name:&quot;, name);\n  }\n}\n\ngetGitHubName();\n</code></pre>\n<h2 id=\"2.-run-code-for-single-character\">2. Run code for single character <a class=\"heading-anchor-permalink\" href=\"#2.-run-code-for-single-character\">#</a></h2>\n<p>More like run some code on keypress. This continuously listens for keypresses.\nSince each keypress runs some code, I’m using callback.</p>\n<p>Example: this is what Metro (React native dev process) runs like - when ‘r’ is pressed it reloads.</p>\n<p>Logic (snippet)</p>\n<pre><code class=\"language-js\">// node v20 ok\n/**\n * Continues listening for keypresses, and run code for each keypress\n */\nconst listenKeyPresses = (callback = (key, data) =&gt; console.log({ key, data })) =&gt; {\n  const readline = require(&quot;readline/promises&quot;);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  rl.input.on(&quot;keypress&quot;, callback);\n  return rl;\n};\n\nlistenKeyPresses.example = () =&gt; {\n  listenKeyPresses((key, data) =&gt; {\n    const isLetter =\n      key.toLowerCase().charCodeAt() &gt;= &quot;a&quot;.charCodeAt() &amp;&amp;\n      key.toLowerCase().charCodeAt() &lt;= &quot;z&quot;.charCodeAt();\n\n    console.log(`\\b${key} is a ${isLetter ? &quot;letter&quot; : &quot;Non-letter&quot;}`);\n    console.log(data);\n  });\n};\n</code></pre>\n<p>This is very handy when testing, trying something new. Instead of creating a small frontend using HTML, CSS or JS, or setting up Postman. Just use this, setup key press and corresponding code run, and test quickly. Both input + output in the same terminal!</p>\n",
      "id": 57
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_2_CLI_prompts.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/7_Creating_CLI_apps/60_2_CLI_prompts.html",
      "content": "# 60. 2 CLI prompts\nCreated Thursday 9 February 2023 at 03:38 am\n\n[inquirer](https://github.com/SBoudrias/Inquirer.js#readme) is an awesome package to create interactive CLIs.\n\nIt:\n- Takes in input interactively (i.e. waits for input)\n- is Promise based\n- Accepts an array of prompts, returns an object containing responses.\n\nCode should suffice\n```js\nconst inquirer = require(\"inquirer\");\nconst prompt = inquirer.createPromptModule();\n\nprompt([\n  {\n    type: \"input\", // for text input. More: checkbox, confirm, editor\n    name: \"pokemon\",\n    message: \"Enter a pokemon name to view its first 5 moves\",\n  },\n]).then((answerObj) => {\n  const pokemonName = answerObj.pokemon; // \"name\" becomes the key\n  printFiveMoves(pokemonName);\n});\n```\n[Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/fc0fd51858b9a44fbbbf0c3d7117bfe28b83a484)\n\n- It has several default prompts and is also highly configurable.\n- Lots of plugins are available.",
      "html": "<h1 id=\"60.-2-cli-prompts\">60. 2 CLI prompts <a class=\"heading-anchor-permalink\" href=\"#60.-2-cli-prompts\">#</a></h1>\n<p>Created Thursday 9 February 2023 at 03:38 am</p>\n<p><a href=\"https://github.com/SBoudrias/Inquirer.js#readme\">inquirer</a> is an awesome package to create interactive CLIs.</p>\n<p>It:</p>\n<ul>\n<li>Takes in input interactively (i.e. waits for input)</li>\n<li>is Promise based</li>\n<li>Accepts an array of prompts, returns an object containing responses.</li>\n</ul>\n<p>Code should suffice</p>\n<pre><code class=\"language-js\">const inquirer = require(&quot;inquirer&quot;);\nconst prompt = inquirer.createPromptModule();\n\nprompt([\n  {\n    type: &quot;input&quot;, // for text input. More: checkbox, confirm, editor\n    name: &quot;pokemon&quot;,\n    message: &quot;Enter a pokemon name to view its first 5 moves&quot;,\n  },\n]).then((answerObj) =&gt; {\n  const pokemonName = answerObj.pokemon; // &quot;name&quot; becomes the key\n  printFiveMoves(pokemonName);\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/fc0fd51858b9a44fbbbf0c3d7117bfe28b83a484\">Code</a></p>\n<ul>\n<li>It has several default prompts and is also highly configurable.</li>\n<li>Lots of plugins are available.</li>\n</ul>\n",
      "id": 58
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/61_Cluster_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/61_Cluster_module.html",
      "content": "# 61. Cluster module\nCreated Saturday 11 February 2023 at 05:20 pm\n\n## Why (situation)\n- Node.js is single threaded for JS code it runs. From a performance POV, this is fine if the app is I/O or network intensive, but might struggle if there are CPU intensive ops.\n- To help with this \"CPU intensive\" blocking problem, Node.js introduced the \"cluster\" module.\n\nExample [code](https://github.com/exemplar-codes/codevolution-nodejs/commit/3b9332dd272f02d7d9bbb13d54d79eb42977c0f4):\n```js\nconst http = require(\"node:http\");\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { \"Content-Type\": \"text/plain\" });\n\n  if (req.url === \"/\") res.end(\"Home page\");\n  else if (req.url === \"/slow-page\") {\n    for (let i = 0; i < 6e9; i++) {} // slow op\n    res.end(\"Slow page\");\n  }\n});\n\nserver.listen(8000, () => console.log(\"Server is running on port 8000\"));\n```\n\nOn my current computer, fast page takes 3 ms and slow page takes 6 seconds (when run individually).\n\nNow, if we first run (in the browser) slow-page and then quickly run fast page in a second tab. The slow-page takes 6 seconds (same), but the fast page also takes ~6 seconds (if we open the second tab fast).\n\nWhy does the fast page slow down (3 ms --> 6 s)? The reason is quite obvious, because the \"slow page\" had a slow operation. While the first request was being worked on, the second request came in but the CPU was busy - it got queued (since it's a callback) but had to wait. In fact, all requests will have to wait if  one is being processed. This is bad.\n\n\n## How (does it work)\n- The cluster module enables the creation of child processes (also called workers) that run *simultaneously*.\n- All created workers share the same server port.\n- Each worker has it's own runtime (FIXME: mostly), as it's a process.\n\n![](../../../../assets/61_Cluster_module-image-1-1460c03c.png)\n\nMore details:\n- When we run a script in Node.js, it is run as a \"cluster master\".\n- The \"master\" is only in-charge of managing \"workers\", i.e. it's responsibility is starting and stopping \"workers\". It doesn't (not supposed to?) run the app code.\n- Workers are in charge of handling app code - handling  requests, reading files etc.\n- Each worker gets it's own **event loop**, **memory** and **V8 instance**. Running 4 workers (with a master, obviously).\n![](../../../../assets/61_Cluster_module-image-2-1460c03c.png)\n\nLet's play with this. [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/0bc07a91b3c124d4b1ca1a41046183920f81ffee).\n\n\n## What (syntax)\n- cluster is a built-in module. It still needs to be imported, of course.\n- `cluster.isMaster` is used to check if the instance is a master or worker.\n- `cluster.fork()` is used to create a worker. This `fork` function is absent in workers. *This implies that there can only be one master for a port*.\n\nHow many clusters to create? Depends on the app. At max, create as many as the CPU cores on the machine. If we create more workers than there are logical cores, it can cause a significant performance overhead. The built-in \"os\" module can be used to [check](https://github.com/exemplar-codes/codevolution-nodejs/commit/a3c7e07e22a70f9c3ff2f81b9fd0c952f8c730dc) number of cores on the machine:\n```js\nconst os = require(\"node:os\");\nconsole.log(os.cpus().length);\n```\n\n\n## PM2 (package) for dynamic cluster management\n- PM@ is a 3rd party Node.js package.\n- It manages clusters in an optimal way, dynamically.\n- As it manages clusters, there's no need for master code, and so, no need to import or use the`cluster` module. Just run a app code file as usual, using `pm2` instead of `node` command.\n\nPM2 is installed globally. Syntax - start, stop, delete, list, monit:\n```bash\n## Start - start/resume\npm2 start index.js -i 0 # dynamic mode, manage number of workers automatically and optimally\npm2 start index.js -i 2 # static mode, run fixed number of workers\n\n## Stop, actually pause\npm2 stop index.js       # Note: pm2 remembers stopped workers\npm2 stop all\n\n# Stop, permanently, i.e. stop\npm2 delete index.js     # Note: also clear pm2's memory\npm2 delete all\n\n# List - name, cpu and memory usage\npm2 list index.js\npm2 list all\n\n# Monitor - detailed stats\npm2 monit index.js\npm2 monit all\n```\n",
      "html": "<h1 id=\"61.-cluster-module\">61. Cluster module <a class=\"heading-anchor-permalink\" href=\"#61.-cluster-module\">#</a></h1>\n<p>Created Saturday 11 February 2023 at 05:20 pm</p>\n<h2 id=\"why-(situation)\">Why (situation) <a class=\"heading-anchor-permalink\" href=\"#why-(situation)\">#</a></h2>\n<ul>\n<li>Node.js is single threaded for JS code it runs. From a performance POV, this is fine if the app is I/O or network intensive, but might struggle if there are CPU intensive ops.</li>\n<li>To help with this “CPU intensive” blocking problem, Node.js introduced the “cluster” module.</li>\n</ul>\n<p>Example <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/3b9332dd272f02d7d9bbb13d54d79eb42977c0f4\">code</a>:</p>\n<pre><code class=\"language-js\">const http = require(&quot;node:http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });\n\n  if (req.url === &quot;/&quot;) res.end(&quot;Home page&quot;);\n  else if (req.url === &quot;/slow-page&quot;) {\n    for (let i = 0; i &lt; 6e9; i++) {} // slow op\n    res.end(&quot;Slow page&quot;);\n  }\n});\n\nserver.listen(8000, () =&gt; console.log(&quot;Server is running on port 8000&quot;));\n</code></pre>\n<p>On my current computer, fast page takes 3 ms and slow page takes 6 seconds (when run individually).</p>\n<p>Now, if we first run (in the browser) slow-page and then quickly run fast page in a second tab. The slow-page takes 6 seconds (same), but the fast page also takes ~6 seconds (if we open the second tab fast).</p>\n<p>Why does the fast page slow down (3 ms --&gt; 6 s)? The reason is quite obvious, because the “slow page” had a slow operation. While the first request was being worked on, the second request came in but the CPU was busy - it got queued (since it’s a callback) but had to wait. In fact, all requests will have to wait if  one is being processed. This is bad.</p>\n<h2 id=\"how-(does-it-work)\">How (does it work) <a class=\"heading-anchor-permalink\" href=\"#how-(does-it-work)\">#</a></h2>\n<ul>\n<li>The cluster module enables the creation of child processes (also called workers) that run <em>simultaneously</em>.</li>\n<li>All created workers share the same server port.</li>\n<li>Each worker has it’s own runtime (FIXME: mostly), as it’s a process.</li>\n</ul>\n<p><img src=\"../../../../assets/61_Cluster_module-image-1-1460c03c.png\" alt=\"\"></p>\n<p>More details:</p>\n<ul>\n<li>When we run a script in Node.js, it is run as a “cluster master”.</li>\n<li>The “master” is only in-charge of managing “workers”, i.e. it’s responsibility is starting and stopping “workers”. It doesn’t (not supposed to?) run the app code.</li>\n<li>Workers are in charge of handling app code - handling  requests, reading files etc.</li>\n<li>Each worker gets it’s own <strong>event loop</strong>, <strong>memory</strong> and <strong>V8 instance</strong>. Running 4 workers (with a master, obviously).\n<img src=\"../../../../assets/61_Cluster_module-image-2-1460c03c.png\" alt=\"\"></li>\n</ul>\n<p>Let’s play with this. <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/0bc07a91b3c124d4b1ca1a41046183920f81ffee\">Code</a>.</p>\n<h2 id=\"what-(syntax)\">What (syntax) <a class=\"heading-anchor-permalink\" href=\"#what-(syntax)\">#</a></h2>\n<ul>\n<li>cluster is a built-in module. It still needs to be imported, of course.</li>\n<li><code>cluster.isMaster</code> is used to check if the instance is a master or worker.</li>\n<li><code>cluster.fork()</code> is used to create a worker. This <code>fork</code> function is absent in workers. <em>This implies that there can only be one master for a port</em>.</li>\n</ul>\n<p>How many clusters to create? Depends on the app. At max, create as many as the CPU cores on the machine. If we create more workers than there are logical cores, it can cause a significant performance overhead. The built-in “os” module can be used to <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/a3c7e07e22a70f9c3ff2f81b9fd0c952f8c730dc\">check</a> number of cores on the machine:</p>\n<pre><code class=\"language-js\">const os = require(&quot;node:os&quot;);\nconsole.log(os.cpus().length);\n</code></pre>\n<h2 id=\"pm2-(package)-for-dynamic-cluster-management\">PM2 (package) for dynamic cluster management <a class=\"heading-anchor-permalink\" href=\"#pm2-(package)-for-dynamic-cluster-management\">#</a></h2>\n<ul>\n<li>PM@ is a 3rd party Node.js package.</li>\n<li>It manages clusters in an optimal way, dynamically.</li>\n<li>As it manages clusters, there’s no need for master code, and so, no need to import or use the<code>cluster</code> module. Just run a app code file as usual, using <code>pm2</code> instead of <code>node</code> command.</li>\n</ul>\n<p>PM2 is installed globally. Syntax - start, stop, delete, list, monit:</p>\n<pre><code class=\"language-bash\">## Start - start/resume\npm2 start index.js -i 0 # dynamic mode, manage number of workers automatically and optimally\npm2 start index.js -i 2 # static mode, run fixed number of workers\n\n## Stop, actually pause\npm2 stop index.js       # Note: pm2 remembers stopped workers\npm2 stop all\n\n# Stop, permanently, i.e. stop\npm2 delete index.js     # Note: also clear pm2's memory\npm2 delete all\n\n# List - name, cpu and memory usage\npm2 list index.js\npm2 list all\n\n# Monitor - detailed stats\npm2 monit index.js\npm2 monit all\n</code></pre>\n",
      "id": 59
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/62_Worker_Threads_module.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/8_High_performance_constructs/62_Worker_Threads_module.html",
      "content": "# 62. Worker Threads module\nCreated Sunday 12 February 2023 at 02:38 am\n\n## Why\n- A lighter alternative to cluster module.\n- The cluster module runs multiple instances of Node.js (the runtime). The worker threads module, on the other hand, runs multiple threads within a single Node.js instance.\n\n## How\n- When process isolation is not needed (i.e. no need for separate instances of V8, event loop and memory), use worker threads.\n- In short, worker threads are less resource heavy, but don't offer isolation.\n\nDoing the same thing again, as with cluster module. A normal endpoint and a slow endpoint. Note their individual load times. Next, run slow page first quickly run normal page. It can be seen that the normal page also takes a long time, i.e. it's blocked.\n\nWorked thread is yet another solution to this \"CPU intensive\" problem, but it's tight and less resource heavy as compared to using the cluster module. It has less isolation though, compared to the cluster module.\n\n\n## What (syntax)\nKeywords - `Worker` constructor, `parentPort`, `.on('message')`.\n\n```js\n// in main-thread.js\nconst { Worker } = require(\"node:worker_threads\");\n\nconst worker = new Worker(\"./worker-thread.js\");\n\nworker.on('message', (msg) => {\n\tconsole.log(msg);\n})\n```\n\n```js\n// in worker-thread.js\nimport { parentPort } = require(\"node:worker_threads\");\n\nconst msg = slowRunningCode;\nparentPort.postMessage(msg);\n```\n- There are other events too, like `exit`, `error`\n- An un-handled error in a worker will stop the parent too. Handle error either inside the worker or using the `'error'` event in the parent.\n- **Derived**: A worker doesn't have to post a message. It can run just as a side effect.\n- **Derived**: Async ops (promises, nextTicks, timeouts, timeintervals) from the main and worker threads all run in the same event loop - since all worker threads run on a single Node.js instance (i.e. they share the V8 instance, event loop and memory).\n\n#### Notes (doubts): \n1. The \"worker_threads\" module talks about threads alone, it doesn't care on which (or how many) cores they run.\n2. Also there's no constraint that one Node.js process use a single core (just like any other process - it can use as many threads and cores it wants). There are two doubt scenarios here: \n\t1. If not using \"worker_threads\": using multiple cores and threads is possible. Parallelism also possible (except with JS code). <details><summary> Explanation</summary>Even if one does not use \"worker_threads\", the OS level file IO and networking code (except the callback) will run on threads other than the main thread anyway. The only limitation here is that there'll only be one *JS thread*</details>\n\t2. Using \"worker_threads\" - same as \\#1, except that the limitation of single JS thread is removed.\n3. The cluster module is even easier to understand, since it has whole instances of Node.js running.\n4. There's no guarantee that a worker will be run in parallel. It'll happen only if a thread, and more importantly a CPU core, is available.\n\n\n#### How many workers to run\nIf the goal is true parallelism, the maximum number of workers is same as number of CPU cores on the machines. Number of threads don't matter (they are generally > number of cores) here. Number of CPU cores:\n```js\nconst os = require(\"node:os\");\nconsole.log(os.cpus().length);\n```\n\n- However, if the app also interacts with the file system, does networking in an async way (which is usually the case), it is better to have some CPU cores left for these things (i.e. Node.js internal code that's not JS).\n- Leave a core for the OS, as it's managing important processes other than the Node.js app - maybe Docker, cron jobs, firewalls, etc.\n\n\n## How does this solve the issue\nThe server starts - it's running on the main thread (single thread and single core - say t1 on c1). The first request (slow) is received, the main thread spins up a worker thread. Now since the main-thread is busy listening for requests, the worker-thread actually runs on a different core (say t2 on c2). The second request (fast endpoint arrives), it's received by the main-thread, which is free, and is handled (by t1 on c1). That's it.\n\nExperiment 3: Had there been another call for slow, yet another thread would have spun up (and handled by yet another core  t3 on c3). Let's test this - run /slow, /slow and /fast. Expectation, all take the same time, as if called individually when the server is free. I'm assuming all other processes, including OS are running on a single CPU core. **Confirmed, works!**. \n[Server code](https://github.com/exemplar-codes/codevolution-nodejs/commit/0e24dbbf749bb0f291029293be205603f1e477fd), client side code:\n```js\nasync function fast() {\n\tfetch('http://localhost:8000').then(_ => _.json()).then(console.log);\n}\n\nasync function slow() {\n\tfetch('http://localhost:8000/slow').then(_ => _.json()).then(console.log);\n}\n\n// experimenting machine has 8 CPUs\n[slow(), fast()]             // OK\n[slow(), slow(), fast()]     // OK\n[slow() /*6 times*/, fast()] // OK. 6 cores for slow, 1 for OS, 1 for the main thread (fast)\n[slow() /*7 times*/, fast()] // 7 cores for slow. 1 for main thread competing with OS. May still run fast\n\n[slow() /*8 times*/, fast()] // 7 cores for slow, 1 for main thread competing with OS.\n// main thread will defer creating a thread for the last /slow request, until one of the previous 7 end. In this case, this last (8th) slow will take double the time, or more (since OS is competing).\n```",
      "html": "<h1 id=\"62.-worker-threads-module\">62. Worker Threads module <a class=\"heading-anchor-permalink\" href=\"#62.-worker-threads-module\">#</a></h1>\n<p>Created Sunday 12 February 2023 at 02:38 am</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>A lighter alternative to cluster module.</li>\n<li>The cluster module runs multiple instances of Node.js (the runtime). The worker threads module, on the other hand, runs multiple threads within a single Node.js instance.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<ul>\n<li>When process isolation is not needed (i.e. no need for separate instances of V8, event loop and memory), use worker threads.</li>\n<li>In short, worker threads are less resource heavy, but don’t offer isolation.</li>\n</ul>\n<p>Doing the same thing again, as with cluster module. A normal endpoint and a slow endpoint. Note their individual load times. Next, run slow page first quickly run normal page. It can be seen that the normal page also takes a long time, i.e. it’s blocked.</p>\n<p>Worked thread is yet another solution to this “CPU intensive” problem, but it’s tight and less resource heavy as compared to using the cluster module. It has less isolation though, compared to the cluster module.</p>\n<h2 id=\"what-(syntax)\">What (syntax) <a class=\"heading-anchor-permalink\" href=\"#what-(syntax)\">#</a></h2>\n<p>Keywords - <code>Worker</code> constructor, <code>parentPort</code>, <code>.on('message')</code>.</p>\n<pre><code class=\"language-js\">// in main-thread.js\nconst { Worker } = require(&quot;node:worker_threads&quot;);\n\nconst worker = new Worker(&quot;./worker-thread.js&quot;);\n\nworker.on('message', (msg) =&gt; {\n\tconsole.log(msg);\n})\n</code></pre>\n<pre><code class=\"language-js\">// in worker-thread.js\nimport { parentPort } = require(&quot;node:worker_threads&quot;);\n\nconst msg = slowRunningCode;\nparentPort.postMessage(msg);\n</code></pre>\n<ul>\n<li>There are other events too, like <code>exit</code>, <code>error</code></li>\n<li>An un-handled error in a worker will stop the parent too. Handle error either inside the worker or using the <code>'error'</code> event in the parent.</li>\n<li><strong>Derived</strong>: A worker doesn’t have to post a message. It can run just as a side effect.</li>\n<li><strong>Derived</strong>: Async ops (promises, nextTicks, timeouts, timeintervals) from the main and worker threads all run in the same event loop - since all worker threads run on a single Node.js instance (i.e. they share the V8 instance, event loop and memory).</li>\n</ul>\n<h4 id=\"notes-(doubts)%3A\">Notes (doubts): <a class=\"heading-anchor-permalink\" href=\"#notes-(doubts)%3A\">#</a></h4>\n<ol>\n<li>The “worker_threads” module talks about threads alone, it doesn’t care on which (or how many) cores they run.</li>\n<li>Also there’s no constraint that one Node.js process use a single core (just like any other process - it can use as many threads and cores it wants). There are two doubt scenarios here:\n<ol>\n<li>If not using “worker_threads”: using multiple cores and threads is possible. Parallelism also possible (except with JS code). <details><summary> Explanation</summary>Even if one does not use “worker_threads”, the OS level file IO and networking code (except the callback) will run on threads other than the main thread anyway. The only limitation here is that there’ll only be one <em>JS thread</em></details></li>\n<li>Using “worker_threads” - same as #1, except that the limitation of single JS thread is removed.</li>\n</ol>\n</li>\n<li>The cluster module is even easier to understand, since it has whole instances of Node.js running.</li>\n<li>There’s no guarantee that a worker will be run in parallel. It’ll happen only if a thread, and more importantly a CPU core, is available.</li>\n</ol>\n<h4 id=\"how-many-workers-to-run\">How many workers to run <a class=\"heading-anchor-permalink\" href=\"#how-many-workers-to-run\">#</a></h4>\n<p>If the goal is true parallelism, the maximum number of workers is same as number of CPU cores on the machines. Number of threads don’t matter (they are generally &gt; number of cores) here. Number of CPU cores:</p>\n<pre><code class=\"language-js\">const os = require(&quot;node:os&quot;);\nconsole.log(os.cpus().length);\n</code></pre>\n<ul>\n<li>However, if the app also interacts with the file system, does networking in an async way (which is usually the case), it is better to have some CPU cores left for these things (i.e. Node.js internal code that’s not JS).</li>\n<li>Leave a core for the OS, as it’s managing important processes other than the Node.js app - maybe Docker, cron jobs, firewalls, etc.</li>\n</ul>\n<h2 id=\"how-does-this-solve-the-issue\">How does this solve the issue <a class=\"heading-anchor-permalink\" href=\"#how-does-this-solve-the-issue\">#</a></h2>\n<p>The server starts - it’s running on the main thread (single thread and single core - say t1 on c1). The first request (slow) is received, the main thread spins up a worker thread. Now since the main-thread is busy listening for requests, the worker-thread actually runs on a different core (say t2 on c2). The second request (fast endpoint arrives), it’s received by the main-thread, which is free, and is handled (by t1 on c1). That’s it.</p>\n<p>Experiment 3: Had there been another call for slow, yet another thread would have spun up (and handled by yet another core  t3 on c3). Let’s test this - run /slow, /slow and /fast. Expectation, all take the same time, as if called individually when the server is free. I’m assuming all other processes, including OS are running on a single CPU core. <strong>Confirmed, works!</strong>.\n<a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/0e24dbbf749bb0f291029293be205603f1e477fd\">Server code</a>, client side code:</p>\n<pre><code class=\"language-js\">async function fast() {\n\tfetch('http://localhost:8000').then(_ =&gt; _.json()).then(console.log);\n}\n\nasync function slow() {\n\tfetch('http://localhost:8000/slow').then(_ =&gt; _.json()).then(console.log);\n}\n\n// experimenting machine has 8 CPUs\n[slow(), fast()]             // OK\n[slow(), slow(), fast()]     // OK\n[slow() /*6 times*/, fast()] // OK. 6 cores for slow, 1 for OS, 1 for the main thread (fast)\n[slow() /*7 times*/, fast()] // 7 cores for slow. 1 for main thread competing with OS. May still run fast\n\n[slow() /*8 times*/, fast()] // 7 cores for slow, 1 for main thread competing with OS.\n// main thread will defer creating a thread for the last /slow request, until one of the previous 7 end. In this case, this last (8th) slow will take double the time, or more (since OS is competing).\n</code></pre>\n",
      "id": 60
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/63_Deploying_Node_js_apps.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/63_Deploying_Node_js_apps.html",
      "content": "# 63. Deploying Node.js apps\nCreated Monday 13 February 2023 at 03:19 am\n\nLet's learn how to deploy Node.js app.\n\nHeroku used to be a good choice, but it's not free anymore. We'll be using [Render](render.com) here. There are many other platforms and ways to deploy a Node.js app - [Fly](fly.io), [AWS](aws.com) (some manual work needed).\n\nSteps for render.com:\n- Step 1: Let's write some code that we'll deploy. Make sure it's inside a GitHub repo [Code](https://github.com/exemplar-codes/codevolution-nodejs/commit/2d1581c0310e981473276bf18c1cec2c0e460544) and has a `package.json` file (even if no packages are used).\n- Step 2: Signup, login to Render.\n- Step 3: Create a new \"Web Service\" and connect the GitHub repository containing the app code.\n- Step 4: Fill out details. Defaults are fine. In our case, we'll need to set the branch, build command to `npm install` and start command to `node index.js`. Let the free plan be.\n- Step 5: Environment (very important), add this by clicking \"Advanced\":\n\t1. Variables (add `PORT` to be anything, but read it inside app.js)\n\t2. Files:\n\t\t1. `.env`\n\t\t2. `.npmrc`\n- Step 6: Leave everything else as is.\n- Step 7: Click create web service. Done.\n\nThe deployment takes a few minutes.\n\nNotes:\n- Render.com supports `pnpm` natively, use it.\n- Render.com [does not](https://feedback.render.com/features/p/module-workspace-syntax-causes-error) accept module workspace notation in imports, i.e. use `require(\"http\")` instead of `require(\"node:http\")`.\n- Pushing to the branch will automatically trigger a re-deployment.\n\t- Manual deployment URL (should be kept private) is available. This can be used as an npm script (accessing .env). [Code](https://github.com/exemplar-codes/posts-express-api-app/commit/1edb7b79d3a3e17a974e3b0389c6fa3594da2243)",
      "html": "<h1 id=\"63.-deploying-node.js-apps\">63. Deploying Node.js apps <a class=\"heading-anchor-permalink\" href=\"#63.-deploying-node.js-apps\">#</a></h1>\n<p>Created Monday 13 February 2023 at 03:19 am</p>\n<p>Let’s learn how to deploy Node.js app.</p>\n<p>Heroku used to be a good choice, but it’s not free anymore. We’ll be using <a href=\"render.com\">Render</a> here. There are many other platforms and ways to deploy a Node.js app - <a href=\"fly.io\">Fly</a>, <a href=\"aws.com\">AWS</a> (some manual work needed).</p>\n<p>Steps for <a href=\"http://render.com\">render.com</a>:</p>\n<ul>\n<li>Step 1: Let’s write some code that we’ll deploy. Make sure it’s inside a GitHub repo <a href=\"https://github.com/exemplar-codes/codevolution-nodejs/commit/2d1581c0310e981473276bf18c1cec2c0e460544\">Code</a> and has a <code>package.json</code> file (even if no packages are used).</li>\n<li>Step 2: Signup, login to Render.</li>\n<li>Step 3: Create a new “Web Service” and connect the GitHub repository containing the app code.</li>\n<li>Step 4: Fill out details. Defaults are fine. In our case, we’ll need to set the branch, build command to <code>npm install</code> and start command to <code>node index.js</code>. Let the free plan be.</li>\n<li>Step 5: Environment (very important), add this by clicking “Advanced”:\n<ol>\n<li>Variables (add <code>PORT</code> to be anything, but read it inside app.js)</li>\n<li>Files:\n<ol>\n<li><code>.env</code></li>\n<li><code>.npmrc</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Step 6: Leave everything else as is.</li>\n<li>Step 7: Click create web service. Done.</li>\n</ul>\n<p>The deployment takes a few minutes.</p>\n<p>Notes:</p>\n<ul>\n<li><a href=\"http://Render.com\">Render.com</a> supports <code>pnpm</code> natively, use it.</li>\n<li><a href=\"http://Render.com\">Render.com</a> <a href=\"https://feedback.render.com/features/p/module-workspace-syntax-causes-error\">does not</a> accept module workspace notation in imports, i.e. use <code>require(&quot;http&quot;)</code> instead of <code>require(&quot;node:http&quot;)</code>.</li>\n<li>Pushing to the branch will automatically trigger a re-deployment.\n<ul>\n<li>Manual deployment URL (should be kept private) is available. This can be used as an npm script (accessing .env). <a href=\"https://github.com/exemplar-codes/posts-express-api-app/commit/1edb7b79d3a3e17a974e3b0389c6fa3594da2243\">Code</a></li>\n</ul>\n</li>\n</ul>\n",
      "id": 61
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/64_Wrapping_up.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/9_Miscellaneous/64_Wrapping_up.html",
      "content": "# 64. Wrapping up\nCreated Monday 13 February 2023 at 05:12 am\n\n\\[insert here] what we learnt in each section.\nWhere to go from here:\n- Learn Express.js, it's a popular framework to create servers.\n- Learn Jest or Vitest for writing unit tests for JavaScript apps.\n- Learn TypeScript - using it can reduce run time bugs and makes development easier (better auto-completion in code editors).\n\nVishwas will make videos on these topics after some time. I, will now start the Node.js videos.",
      "html": "<h1 id=\"64.-wrapping-up\">64. Wrapping up <a class=\"heading-anchor-permalink\" href=\"#64.-wrapping-up\">#</a></h1>\n<p>Created Monday 13 February 2023 at 05:12 am</p>\n<p>[insert here] what we learnt in each section.\nWhere to go from here:</p>\n<ul>\n<li>Learn Express.js, it’s a popular framework to create servers.</li>\n<li>Learn Jest or Vitest for writing unit tests for JavaScript apps.</li>\n<li>Learn TypeScript - using it can reduce run time bugs and makes development easier (better auto-completion in code editors).</li>\n</ul>\n<p>Vishwas will make videos on these topics after some time. I, will now start the Node.js videos.</p>\n",
      "id": 62
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/info.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/info.html",
      "content": "# info\nCreated Monday 13 February 2023 at 05:35 am\n\n## Purpose/intent\nLearn Node.js fundamentals in a simple way, without getting distracted by library/framework specific information.\n\n\n## Link\nwith branch: https://github.com/sanjar-notes/nodejs-notes/tree/resource/codevolution-nodejs-beginner",
      "html": "<h1 id=\"info\">info <a class=\"heading-anchor-permalink\" href=\"#info\">#</a></h1>\n<p>Created Monday 13 February 2023 at 05:35 am</p>\n<h2 id=\"purpose%2Fintent\">Purpose/intent <a class=\"heading-anchor-permalink\" href=\"#purpose%2Fintent\">#</a></h2>\n<p>Learn Node.js fundamentals in a simple way, without getting distracted by library/framework specific information.</p>\n<h2 id=\"link\">Link <a class=\"heading-anchor-permalink\" href=\"#link\">#</a></h2>\n<p>with branch: <a href=\"https://github.com/sanjar-notes/nodejs-notes/tree/resource/codevolution-nodejs-beginner\">https://github.com/sanjar-notes/nodejs-notes/tree/resource/codevolution-nodejs-beginner</a></p>\n",
      "id": 63
    },
    {
      "path": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/todo.md",
      "url": "home/4_resource_itineraries/1_codevolution_nodejs_beginners/todo.html",
      "content": "Created Monday 13 February 2023 at 05:26 am\n\nTODO: [Thread pool](5_Nodejs_internals/40_Thread_pool_size_DEFER.md) and [Event loop](5_Nodejs_internals/41_The_Event_loop_DEFER.md) notes pending. Have understood them well.",
      "html": "<p>Created Monday 13 February 2023 at 05:26 am</p>\n<p>TODO: <a href=\"5_Nodejs_internals/40_Thread_pool_size_DEFER.html\">Thread pool</a> and <a href=\"5_Nodejs_internals/41_The_Event_loop_DEFER.html\">Event loop</a> notes pending. Have understood them well.</p>\n",
      "id": 64
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/135_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/135_Module_introduction.html",
      "content": "# 135. Module introduction\nCreated Tuesday 21 March 2023 at 12:29 am\n\n## Situation\nRight now, we are storing data in files.\n\n\n## Problem(s)\nStoring data in files is not efficient:\n1. Reading and writing to files, especially larger ones is very inefficient.\n2. Performing minute read, writes - i.e. \"joins\", \"search\" is slow in files. Not per se, but atleast in the way we are doing. We need some efficient data structures that are efficient for these operations.\n3. There's no high level language to interact with data, we always have to write code from scratch. This also decreases the scope for optimizing interactions with the data.\n4. It's difficult to have authorization levels if data is stored across files. (FIXME: really?)\n\n\n## Solution (database)\nThe proper way to save application data, atleast if it's a significant amount, is to store it in a \"database\".\n\nPhysically, a database is a data stored in files and a program that manages the files (and therefore the data).\n\nGenerally, the term \"database\" refers to software that can manages data for us, on our computer.\n\nDatabases are good because:\n1. It uses optimal data structures to store data.\n2. It uses optimal algorithms to manage/manipulate data.\n3. USP - supports a high level language to interact with the data. e.g. SQL (Structured Query Language)\n\nIn short databases are a systematic and fast way to work with persistent data. They're also quite convenient - because they have much of the functionality built-in and a lot of them exist already.\n\nNote: optimality depends on the use case, amount of data, type of data and other requirements of the application.\n\n\n## In this module\n- SQL, NoSQL - We'll have a high-level view of two different kind of databases - Relational (aka *SQL*) databases and non-relational (aka *NoSQL*) databases\n- Learn SQL\n- Choosing a database - discuss how to decide what kind of database to use",
      "html": "<h1 id=\"135.-module-introduction\">135. Module introduction <a class=\"heading-anchor-permalink\" href=\"#135.-module-introduction\">#</a></h1>\n<p>Created Tuesday 21 March 2023 at 12:29 am</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Right now, we are storing data in files.</p>\n<h2 id=\"problem(s)\">Problem(s) <a class=\"heading-anchor-permalink\" href=\"#problem(s)\">#</a></h2>\n<p>Storing data in files is not efficient:</p>\n<ol>\n<li>Reading and writing to files, especially larger ones is very inefficient.</li>\n<li>Performing minute read, writes - i.e. “joins”, “search” is slow in files. Not per se, but atleast in the way we are doing. We need some efficient data structures that are efficient for these operations.</li>\n<li>There’s no high level language to interact with data, we always have to write code from scratch. This also decreases the scope for optimizing interactions with the data.</li>\n<li>It’s difficult to have authorization levels if data is stored across files. (FIXME: really?)</li>\n</ol>\n<h2 id=\"solution-(database)\">Solution (database) <a class=\"heading-anchor-permalink\" href=\"#solution-(database)\">#</a></h2>\n<p>The proper way to save application data, atleast if it’s a significant amount, is to store it in a “database”.</p>\n<p>Physically, a database is a data stored in files and a program that manages the files (and therefore the data).</p>\n<p>Generally, the term “database” refers to software that can manages data for us, on our computer.</p>\n<p>Databases are good because:</p>\n<ol>\n<li>It uses optimal data structures to store data.</li>\n<li>It uses optimal algorithms to manage/manipulate data.</li>\n<li>USP - supports a high level language to interact with the data. e.g. SQL (Structured Query Language)</li>\n</ol>\n<p>In short databases are a systematic and fast way to work with persistent data. They’re also quite convenient - because they have much of the functionality built-in and a lot of them exist already.</p>\n<p>Note: optimality depends on the use case, amount of data, type of data and other requirements of the application.</p>\n<h2 id=\"in-this-module\">In this module <a class=\"heading-anchor-permalink\" href=\"#in-this-module\">#</a></h2>\n<ul>\n<li>SQL, NoSQL - We’ll have a high-level view of two different kind of databases - Relational (aka <em>SQL</em>) databases and non-relational (aka <em>NoSQL</em>) databases</li>\n<li>Learn SQL</li>\n<li>Choosing a database - discuss how to decide what kind of database to use</li>\n</ul>\n",
      "id": 65
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/136_Choosing_a_Database.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/136_Choosing_a_Database.html",
      "content": "# 136. Choosing a Database\nCreated Tuesday 21 March 2023 at 12:43 am\n\nOur goals for a database are:\n1. Easy to use - for the developer\n2. Performance\n\n## Types of databases\nThere are many classifications possible. A simple one is based on if a database has SQL like language and \"relational nature\".\n\nThe two types are:\n- SQL - SQL like. Relational. Examples - MySQL, PostgreSQL\n- NoSQL - not like SQL database. Examples - MongoDB, Neo4j\n\n\n## \"SQL\" databases\nSQL (Structured Query Language) is a language and specification for a database.\n\nThere are many implementations of SQL. These implementations (i.e. database softwares) are called \"SQL database\". More generally, any database that has \"relational\" characteristics is usually tagged as an \"SQL database\".\n\nFundamental philosophies of \"SQL\" databases\":\n1. The primary construct is the \"table\". A table contains rows (aka records).\n2. Tables can have relations - one-one, one-to-many, many-to-many.\n3. Table schemas are strictly enforced.\n4. High level language is [SQL](https://en.wikipedia.org/wiki/SQL) like.\n\nNote: A \"database\" is a collection of \"tables\", that have relations between them.\n\n![](../../../../assets/136_Choosing_a_Database-image-1-c7e79388.png)\n![](../../../../assets/136_Choosing_a_Database-image-2-c7e79388.png)\n![](../../../../assets/136_Choosing_a_Database-image-3-c7e79388.png)\n![](../../../../assets/136_Choosing_a_Database-image-4-c7e79388.png)\n\n\n## \"NoSQL\" databases\n*NoSQL* database simply means not a *SQL* database\n\nFundamental philosophies of most \"NoSQL\" databases\":\n1. There is the \"database\", just like with a \"SQL\" database.\n2. A database has *collections*. A collection is the equivalent of a \"table\" (in SQL database). A collection has *documents* (equivalent to a *record/row* in a *table*).\n3. Collections usually have **no relations** between each other. Duplication is preferred over relations (this can be a significant advantage for unstructured data, and also if *joins* are undesirable).\n4. Documents in a collection don't adhere to a schema. There's some level of similarity, but it's not strictly enforced. A document may look like a JavaScript object (FIXME? why so).\n\n![](../../../../assets/136_Choosing_a_Database-image-5-c7e79388.png)\n![](../../../../assets/136_Choosing_a_Database-image-6-c7e79388.png)\n![](../../../../assets/136_Choosing_a_Database-image-7-c7e79388.png)\n",
      "html": "<h1 id=\"136.-choosing-a-database\">136. Choosing a Database <a class=\"heading-anchor-permalink\" href=\"#136.-choosing-a-database\">#</a></h1>\n<p>Created Tuesday 21 March 2023 at 12:43 am</p>\n<p>Our goals for a database are:</p>\n<ol>\n<li>Easy to use - for the developer</li>\n<li>Performance</li>\n</ol>\n<h2 id=\"types-of-databases\">Types of databases <a class=\"heading-anchor-permalink\" href=\"#types-of-databases\">#</a></h2>\n<p>There are many classifications possible. A simple one is based on if a database has SQL like language and “relational nature”.</p>\n<p>The two types are:</p>\n<ul>\n<li>SQL - SQL like. Relational. Examples - MySQL, PostgreSQL</li>\n<li>NoSQL - not like SQL database. Examples - MongoDB, Neo4j</li>\n</ul>\n<h2 id=\"%E2%80%9Csql%E2%80%9D-databases\">“SQL” databases <a class=\"heading-anchor-permalink\" href=\"#%E2%80%9Csql%E2%80%9D-databases\">#</a></h2>\n<p>SQL (Structured Query Language) is a language and specification for a database.</p>\n<p>There are many implementations of SQL. These implementations (i.e. database softwares) are called “SQL database”. More generally, any database that has “relational” characteristics is usually tagged as an “SQL database”.</p>\n<p>Fundamental philosophies of “SQL” databases&quot;:</p>\n<ol>\n<li>The primary construct is the “table”. A table contains rows (aka records).</li>\n<li>Tables can have relations - one-one, one-to-many, many-to-many.</li>\n<li>Table schemas are strictly enforced.</li>\n<li>High level language is <a href=\"https://en.wikipedia.org/wiki/SQL\">SQL</a> like.</li>\n</ol>\n<p>Note: A “database” is a collection of “tables”, that have relations between them.</p>\n<p><img src=\"../../../../assets/136_Choosing_a_Database-image-1-c7e79388.png\" alt=\"\">\n<img src=\"../../../../assets/136_Choosing_a_Database-image-2-c7e79388.png\" alt=\"\">\n<img src=\"../../../../assets/136_Choosing_a_Database-image-3-c7e79388.png\" alt=\"\">\n<img src=\"../../../../assets/136_Choosing_a_Database-image-4-c7e79388.png\" alt=\"\"></p>\n<h2 id=\"%E2%80%9Cnosql%E2%80%9D-databases\">“NoSQL” databases <a class=\"heading-anchor-permalink\" href=\"#%E2%80%9Cnosql%E2%80%9D-databases\">#</a></h2>\n<p><em>NoSQL</em> database simply means not a <em>SQL</em> database</p>\n<p>Fundamental philosophies of most “NoSQL” databases&quot;:</p>\n<ol>\n<li>There is the “database”, just like with a “SQL” database.</li>\n<li>A database has <em>collections</em>. A collection is the equivalent of a “table” (in SQL database). A collection has <em>documents</em> (equivalent to a <em>record/row</em> in a <em>table</em>).</li>\n<li>Collections usually have <strong>no relations</strong> between each other. Duplication is preferred over relations (this can be a significant advantage for unstructured data, and also if <em>joins</em> are undesirable).</li>\n<li>Documents in a collection don’t adhere to a schema. There’s some level of similarity, but it’s not strictly enforced. A document may look like a JavaScript object (FIXME? why so).</li>\n</ol>\n<p><img src=\"../../../../assets/136_Choosing_a_Database-image-5-c7e79388.png\" alt=\"\">\n<img src=\"../../../../assets/136_Choosing_a_Database-image-6-c7e79388.png\" alt=\"\">\n<img src=\"../../../../assets/136_Choosing_a_Database-image-7-c7e79388.png\" alt=\"\"></p>\n",
      "id": 66
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/138_Comparison_overview.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/138_Comparison_overview.html",
      "content": "# 138. Comparing SQL and NoSQL databases\nCreated Tuesday 21 March 2023 at 10:05 pm\n\n## Two ways of scaling\nTwo useful ways of approaches to scaling are:\n1. Horizontal scaling - increase the number of devices, of the same type/power. Of course, we need software and processes to keep the whole data coherent. This is difficult to manage, but can be used indefinitely.\n2. Vertical scaling - make the existing device(s) stronger, individually. This is very easy to do, but cannot be scaled indefinitely, due to fundamental physical constraints of hardware.\n\n![](../../../../assets/138_Comparison_overview-image-1-c7e79388.png)\n\n\n## Comparison overview\n| SQL                                                                     | NoSQL                                             |\n|-------------------------------------------------------------------------|---------------------------------------------------|\n| Data uses schemas                                                       | Schema-less                                       |\n| Relations                                                               | No (or very few) relations                        |\n| Data is kept in multiple tables                                         | Data is merged/nested in a few collections        |\n| Horizontal scaling is difficult/impossible.Vertical scaling is possible | Both horizontal and vertical scaling are possible |\n| Cannot handle large reads/writes per second                           | Easily handles a lot of reads/writes per second   |\n\nNoSQL may look like the clear winner here. But the choice of database depends on a lot of things:\n1. Amount of structure needed in the data?\n2. High throughput app?\n3. How frequently does the data change?\n4. Are there parts of the app that have different characteristics - maybe use different types of databases for different parts/services of the app?\n\n\nWe'll learn to use both types of databases in this course.\n",
      "html": "<h1 id=\"138.-comparing-sql-and-nosql-databases\">138. Comparing SQL and NoSQL databases <a class=\"heading-anchor-permalink\" href=\"#138.-comparing-sql-and-nosql-databases\">#</a></h1>\n<p>Created Tuesday 21 March 2023 at 10:05 pm</p>\n<h2 id=\"two-ways-of-scaling\">Two ways of scaling <a class=\"heading-anchor-permalink\" href=\"#two-ways-of-scaling\">#</a></h2>\n<p>Two useful ways of approaches to scaling are:</p>\n<ol>\n<li>Horizontal scaling - increase the number of devices, of the same type/power. Of course, we need software and processes to keep the whole data coherent. This is difficult to manage, but can be used indefinitely.</li>\n<li>Vertical scaling - make the existing device(s) stronger, individually. This is very easy to do, but cannot be scaled indefinitely, due to fundamental physical constraints of hardware.</li>\n</ol>\n<p><img src=\"../../../../assets/138_Comparison_overview-image-1-c7e79388.png\" alt=\"\"></p>\n<h2 id=\"comparison-overview\">Comparison overview <a class=\"heading-anchor-permalink\" href=\"#comparison-overview\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>SQL</th>\n<th>NoSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data uses schemas</td>\n<td>Schema-less</td>\n</tr>\n<tr>\n<td>Relations</td>\n<td>No (or very few) relations</td>\n</tr>\n<tr>\n<td>Data is kept in multiple tables</td>\n<td>Data is merged/nested in a few collections</td>\n</tr>\n<tr>\n<td>Horizontal scaling is difficult/impossible.Vertical scaling is possible</td>\n<td>Both horizontal and vertical scaling are possible</td>\n</tr>\n<tr>\n<td>Cannot handle large reads/writes per second</td>\n<td>Easily handles a lot of reads/writes per second</td>\n</tr>\n</tbody>\n</table>\n<p>NoSQL may look like the clear winner here. But the choice of database depends on a lot of things:</p>\n<ol>\n<li>Amount of structure needed in the data?</li>\n<li>High throughput app?</li>\n<li>How frequently does the data change?</li>\n<li>Are there parts of the app that have different characteristics - maybe use different types of databases for different parts/services of the app?</li>\n</ol>\n<p>We’ll learn to use both types of databases in this course.</p>\n",
      "id": 67
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/139_Setting_up_MySQL.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/139_Setting_up_MySQL.html",
      "content": "# 139. Setting up MySQL\nCreated Tuesday 21 March 2023 at 11:04 pm\n\n> For latest steps, see [computer setup](https://gist.github.com/sanjarcode/3dc47b0d69526435753a199dfd60dcfc#file-mysql-md)\n\n1. Install MySQL server, the community editions. Remember to save the password somewhere. [Steps](https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-20-04)\n2. Install MySQL workbench. Snap is available for Ubuntu - `sudo snap install mysql-workbench-community`. The Snap is sandboxed by default, and so, provide permissions by running `sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service`. [Source](https://askubuntu.com/a/1242777/976489)\n\n- To run MySQL in REPL mode: run `mysql -u root -p` and enter the password (stored earlier)\n- To run MySQL Workbench, either run `mysql-workbench-community` in the terminal or open it from \"Applications\"(GUI). The default database is already present as an entry.\n\nNote: [Fix for the annoying issue that you can't start the process](https://www.reddit.com/r/SQL/comments/11xnnq9/mysql_start_stupid_issue_every_f_ing_time_on/)\n\n\n---\nDo the following steps for the course.\n1. Open MySQL Workbench\n2. Using the left side bar, create a new schema, and name it \"node-complete\". Leave all defaults as is and proceed.\n",
      "html": "<h1 id=\"139.-setting-up-mysql\">139. Setting up MySQL <a class=\"heading-anchor-permalink\" href=\"#139.-setting-up-mysql\">#</a></h1>\n<p>Created Tuesday 21 March 2023 at 11:04 pm</p>\n<blockquote>\n<p>For latest steps, see <a href=\"https://gist.github.com/sanjarcode/3dc47b0d69526435753a199dfd60dcfc#file-mysql-md\">computer setup</a></p>\n</blockquote>\n<ol>\n<li>Install MySQL server, the community editions. Remember to save the password somewhere. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-20-04\">Steps</a></li>\n<li>Install MySQL workbench. Snap is available for Ubuntu - <code>sudo snap install mysql-workbench-community</code>. The Snap is sandboxed by default, and so, provide permissions by running <code>sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service</code>. <a href=\"https://askubuntu.com/a/1242777/976489\">Source</a></li>\n</ol>\n<ul>\n<li>To run MySQL in REPL mode: run <code>mysql -u root -p</code> and enter the password (stored earlier)</li>\n<li>To run MySQL Workbench, either run <code>mysql-workbench-community</code> in the terminal or open it from “Applications”(GUI). The default database is already present as an entry.</li>\n</ul>\n<p>Note: <a href=\"https://www.reddit.com/r/SQL/comments/11xnnq9/mysql_start_stupid_issue_every_f_ing_time_on/\">Fix for the annoying issue that you can’t start the process</a></p>\n<hr>\n<p>Do the following steps for the course.</p>\n<ol>\n<li>Open MySQL Workbench</li>\n<li>Using the left side bar, create a new schema, and name it “node-complete”. Leave all defaults as is and proceed.</li>\n</ol>\n",
      "id": 68
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/140_Connecting_our_App_to_the_SQL_database.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/140_Connecting_our_App_to_the_SQL_database.html",
      "content": "# 140. Connecting our App to the SQL database\nCreated Wednesday 22 March 2023 at 01:37 am\n\n#### Note\n- This is not specific to an \"app\". This page is a general method to connect any Node.js code (script, app etc) to the SQL database (software) running (independently) on the machine.\n- Yes, MySQL (or any other database software) keeps running independent of the Node.js code. It's generally never stopped.\n\n## mysql2\n- This is the \"database driver\" - i.e. a package with code that helps us communicate with the database.\n- Practically, it allows us to run raw SQL queries in our Node.js code.\n- The basic idea is to obtain a \"connection\" object using the package. This \"connection\" is used for all interaction with the database, as well as closing the connection.\n- This code to connect to the database is usually kept separate from the application code, in a utility file (like the path utility we have [now](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/tree/d18ab604acb9ac5509949d9e185ccaf6f3a2ba14/util)).\n\n\n## Connecting to the database\nThere are two ways to do this:\n1. Create a \"connection\" - the smallest possible *claim* of DB resources established between a user (i.e. a backend server app) and a database (technically database server).\n\t- A connection is usually ended by the client after they are done with their *queries*, i.e. it's not a one query construct - just that it's meant to be limited.\n\t- This has the limitation of being sequential (one query at a time - one has to wait for query response before another can be sent) queries against the DB.\n\t- The request for a connection may be rejected, due to high load on the server.\n\t- This is a low resource, high overhead, high risk type of DB resource claim.\n\t\t- Low resource - small amount of DB resources allocated\n\t\t- High overhead - establishing a connection, i.e. calculating and allocating resources on the DB has some overhead, and of course network (request/response wait) overhead, which may become significant if connections are opened and closed multiple times. This is especially relevant if there's high load on the DB.\n\t\t- High risk - because connections requests may be rejected by the DB.\n2. Create a so called \"connection pool\" - a size configurable, guaranteed *claim* of DB resources established between a user (i.e. a backend server app) and a database.\n\t- A pool consists of multiple guaranteed connections, all established at once. The DB is guaranteed to provide query service even under high load, since a pool marks resources for the given client/user (i.e. backend server app).\n\t- Using a pool has the advantage of being able to do parallel queries with the database (assuming they're sufficiently independent). This is because each connection is Independent from others (in a pool or otherwise).\n\t\t- Maximum number of parallel queries is equal to the set number of connections (they are guaranteed ones of course).\n\t- This is a high resource, low overhead, low risk kind of DB resource claim\n\t\t- High resource - since a pool request usually consists of many guaranteed collections.\n\t\t- Low overhead - since all connections in the resource are allocated at once, it doesn't have the overhead of network requests, calculation, estimation (FIXME) that is done here?) on the DB.\n\t\t- Low risk - since connections in a pool are *guaranteed* to be respected by the DB, even under high load.\n\nNote:\n- Connections, even if from the same client, are Independent from each other (weather in a pool or now, though pool connections have guaranteed priority). And most databases (MySQL, for example) can process many connections at once.\n- Of course, a client can request multiple connections, as well as multiple pools. Assuming no hard limits are triggered.\n- FIXME maybe - the concept of pool vs connections seemed a little fishy. I consulted ChatGPT to learn the difference, i.e. **guarantee + multiplicity** in case of a pool.\n\nCode for obtaining a pool:\n```js\nconst mysql = require(\"mysql2\");\nconst pool = mysql.createPool({\n  host: \"localhost\",\n  user: \"root\",\n  database: \"node-complete\",\n  password: 'my-password',\n});\n\nmodule.exports = pool.promise();\n```\n\n---\n### Running SQL queries\nFor that first create a table, using MySQL Workbench.\n\n### Create a table\n1. Go to 'node-complete' schema we created (in the left sidebar), and create a table named \"products\".\n2. Add fields of the table\n\t1. Add \"id\", of type \"INT\". It should also be a primary key (PK), should be Not Null (NN), Unique (UN), unsigned (UN), auto-incrementing (AI). Leave others unchecked.\n\t2. Add \"title\", type \"VARCHAR(255)\". Not null.\n\t3. Add \"price\", type \"DOUBLE\". Not null.\n\t4. Add \"description\", type \"TEXT\" (a little bigger than VARCHAR). Should be Not Null.\n\t5. Add \"imageUrl\", type \"VARCHAR(255)\". Not null.\n3. Click on apply. This shows a preview of the SQL query that will be run. Proceed.\n\n### Add some products\n1. In the left sidebar, go to the database, the table, and click the rightmost icon.\n2. Add values in the first row. ID is optional (it will be assigned automatically if not specified). Click apply.\n\n![](../../../../assets/140_Connecting_our_App_to_the_SQL_database-image-1-c7e79388.png)\n\n### Node.js code\n```js\nconst db = require(\"./database\");\n\n(async () => {\n  try {\n    const response = await db.execute(\"SELECT * FROM products\");\n\n    const resultRows = response[0];\n    console.log(resultRows); // array, with each element as object form of the row.\n  } catch (error) {\n    console.log(error);\n  }\n})();\n```\nThe first element in the output is an array of resultant rows.\n\n[Code - creating connectionPool, executing queries](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/65d8d045c5bacd9699215eaf7f1a7b5bba231b46)\n\n## 'Reverse engineer' feature of MySQL Workbench\nIt's very simple than it sounds. The feature generates an ER*like* diagram of an existing database.\n\nHow to use it\n1. Menu bar > Database > Reverse engineer. Or, press *Ctrl + R*\n2. Enter the credentials if needed\n3. Keep pressing next/ok\n4. Select the database\n5. Repeat #3 until the diagram is ready",
      "html": "<h1 id=\"140.-connecting-our-app-to-the-sql-database\">140. Connecting our App to the SQL database <a class=\"heading-anchor-permalink\" href=\"#140.-connecting-our-app-to-the-sql-database\">#</a></h1>\n<p>Created Wednesday 22 March 2023 at 01:37 am</p>\n<h4 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h4>\n<ul>\n<li>This is not specific to an “app”. This page is a general method to connect any Node.js code (script, app etc) to the SQL database (software) running (independently) on the machine.</li>\n<li>Yes, MySQL (or any other database software) keeps running independent of the Node.js code. It’s generally never stopped.</li>\n</ul>\n<h2 id=\"mysql2\">mysql2 <a class=\"heading-anchor-permalink\" href=\"#mysql2\">#</a></h2>\n<ul>\n<li>This is the “database driver” - i.e. a package with code that helps us communicate with the database.</li>\n<li>Practically, it allows us to run raw SQL queries in our Node.js code.</li>\n<li>The basic idea is to obtain a “connection” object using the package. This “connection” is used for all interaction with the database, as well as closing the connection.</li>\n<li>This code to connect to the database is usually kept separate from the application code, in a utility file (like the path utility we have <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/tree/d18ab604acb9ac5509949d9e185ccaf6f3a2ba14/util\">now</a>).</li>\n</ul>\n<h2 id=\"connecting-to-the-database\">Connecting to the database <a class=\"heading-anchor-permalink\" href=\"#connecting-to-the-database\">#</a></h2>\n<p>There are two ways to do this:</p>\n<ol>\n<li>Create a “connection” - the smallest possible <em>claim</em> of DB resources established between a user (i.e. a backend server app) and a database (technically database server).\n<ul>\n<li>A connection is usually ended by the client after they are done with their <em>queries</em>, i.e. it’s not a one query construct - just that it’s meant to be limited.</li>\n<li>This has the limitation of being sequential (one query at a time - one has to wait for query response before another can be sent) queries against the DB.</li>\n<li>The request for a connection may be rejected, due to high load on the server.</li>\n<li>This is a low resource, high overhead, high risk type of DB resource claim.\n<ul>\n<li>Low resource - small amount of DB resources allocated</li>\n<li>High overhead - establishing a connection, i.e. calculating and allocating resources on the DB has some overhead, and of course network (request/response wait) overhead, which may become significant if connections are opened and closed multiple times. This is especially relevant if there’s high load on the DB.</li>\n<li>High risk - because connections requests may be rejected by the DB.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Create a so called “connection pool” - a size configurable, guaranteed <em>claim</em> of DB resources established between a user (i.e. a backend server app) and a database.\n<ul>\n<li>A pool consists of multiple guaranteed connections, all established at once. The DB is guaranteed to provide query service even under high load, since a pool marks resources for the given client/user (i.e. backend server app).</li>\n<li>Using a pool has the advantage of being able to do parallel queries with the database (assuming they’re sufficiently independent). This is because each connection is Independent from others (in a pool or otherwise).\n<ul>\n<li>Maximum number of parallel queries is equal to the set number of connections (they are guaranteed ones of course).</li>\n</ul>\n</li>\n<li>This is a high resource, low overhead, low risk kind of DB resource claim\n<ul>\n<li>High resource - since a pool request usually consists of many guaranteed collections.</li>\n<li>Low overhead - since all connections in the resource are allocated at once, it doesn’t have the overhead of network requests, calculation, estimation (FIXME) that is done here?) on the DB.</li>\n<li>Low risk - since connections in a pool are <em>guaranteed</em> to be respected by the DB, even under high load.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Connections, even if from the same client, are Independent from each other (weather in a pool or now, though pool connections have guaranteed priority). And most databases (MySQL, for example) can process many connections at once.</li>\n<li>Of course, a client can request multiple connections, as well as multiple pools. Assuming no hard limits are triggered.</li>\n<li>FIXME maybe - the concept of pool vs connections seemed a little fishy. I consulted ChatGPT to learn the difference, i.e. <strong>guarantee + multiplicity</strong> in case of a pool.</li>\n</ul>\n<p>Code for obtaining a pool:</p>\n<pre><code class=\"language-js\">const mysql = require(&quot;mysql2&quot;);\nconst pool = mysql.createPool({\n  host: &quot;localhost&quot;,\n  user: &quot;root&quot;,\n  database: &quot;node-complete&quot;,\n  password: 'my-password',\n});\n\nmodule.exports = pool.promise();\n</code></pre>\n<hr>\n<h3 id=\"running-sql-queries\">Running SQL queries <a class=\"heading-anchor-permalink\" href=\"#running-sql-queries\">#</a></h3>\n<p>For that first create a table, using MySQL Workbench.</p>\n<h3 id=\"create-a-table\">Create a table <a class=\"heading-anchor-permalink\" href=\"#create-a-table\">#</a></h3>\n<ol>\n<li>Go to ‘node-complete’ schema we created (in the left sidebar), and create a table named “products”.</li>\n<li>Add fields of the table\n<ol>\n<li>Add “id”, of type “INT”. It should also be a primary key (PK), should be Not Null (NN), Unique (UN), unsigned (UN), auto-incrementing (AI). Leave others unchecked.</li>\n<li>Add “title”, type “VARCHAR(255)”. Not null.</li>\n<li>Add “price”, type “DOUBLE”. Not null.</li>\n<li>Add “description”, type “TEXT” (a little bigger than VARCHAR). Should be Not Null.</li>\n<li>Add “imageUrl”, type “VARCHAR(255)”. Not null.</li>\n</ol>\n</li>\n<li>Click on apply. This shows a preview of the SQL query that will be run. Proceed.</li>\n</ol>\n<h3 id=\"add-some-products\">Add some products <a class=\"heading-anchor-permalink\" href=\"#add-some-products\">#</a></h3>\n<ol>\n<li>In the left sidebar, go to the database, the table, and click the rightmost icon.</li>\n<li>Add values in the first row. ID is optional (it will be assigned automatically if not specified). Click apply.</li>\n</ol>\n<p><img src=\"../../../../assets/140_Connecting_our_App_to_the_SQL_database-image-1-c7e79388.png\" alt=\"\"></p>\n<h3 id=\"node.js-code\">Node.js code <a class=\"heading-anchor-permalink\" href=\"#node.js-code\">#</a></h3>\n<pre><code class=\"language-js\">const db = require(&quot;./database&quot;);\n\n(async () =&gt; {\n  try {\n    const response = await db.execute(&quot;SELECT * FROM products&quot;);\n\n    const resultRows = response[0];\n    console.log(resultRows); // array, with each element as object form of the row.\n  } catch (error) {\n    console.log(error);\n  }\n})();\n</code></pre>\n<p>The first element in the output is an array of resultant rows.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/65d8d045c5bacd9699215eaf7f1a7b5bba231b46\">Code - creating connectionPool, executing queries</a></p>\n<h2 id=\"%E2%80%98reverse-engineer%E2%80%99-feature-of-mysql-workbench\">‘Reverse engineer’ feature of MySQL Workbench <a class=\"heading-anchor-permalink\" href=\"#%E2%80%98reverse-engineer%E2%80%99-feature-of-mysql-workbench\">#</a></h2>\n<p>It’s very simple than it sounds. The feature generates an ER<em>like</em> diagram of an existing database.</p>\n<p>How to use it</p>\n<ol>\n<li>Menu bar &gt; Database &gt; Reverse engineer. Or, press <em>Ctrl + R</em></li>\n<li>Enter the credentials if needed</li>\n<li>Keep pressing next/ok</li>\n<li>Select the database</li>\n<li>Repeat #3 until the diagram is ready</li>\n</ol>\n",
      "id": 69
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/141_Running_queries_in_our_app.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/141_Running_queries_in_our_app.html",
      "content": "# 141. Running queries in our app\nCreated Thursday 23 March 2023 at 11:58 pm\n\n1. [Fetch all products](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/bc7c6077f8445f897134f2db595fd182ef88f49e)\n2. [Fetch products by id](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/2c3e8b21fec17de849cd361607f04ffa93f3dda3) - **sanitized substitution** in `mysql2` - to prevent SQL injection attacks. Syntax is simple (`?` is the placeholder):\n\t```js\n\t// syntax\n\tdb.execute('string containing one/many ?', [value1, value2, value3]);\n\n\t// example 1\n\tdb.execute('SELECT ? FROM ?', ['*', 'products']);\n\t// evaluates to 'SELECT * FROM products'\n\n\t// example 2\n\tdb.execute('SELECT * FROM ? WHERE ?=?', ['products', 'id', 2]);\n\t// evaluates to\n\t// 'SELECT * FROM products WHERE id=2'\n\t```\n3. [Fetch all, fetch by Id inside Product model](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/de7c2239553ea6c0526532425d653e8a37ea13b0) - the app is partially broken due to this change. This is not a bug, it's meant to break.\n4. [Add, delete products using SQL](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/94bfcba87b3fbb23548e339006db7a961beb3219) - again, the app is in broken state. Which is fine.\n5. [Data Pre-population using SQL](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c48e6224203a4f12ed4ff5a4cad95cb2b46478ab)\n\nWe'll update the remaining routes with SQL, and fix issues later. The goal was to demonstrate how to run raw SQL with in Node.js, with `mysql2`.",
      "html": "<h1 id=\"141.-running-queries-in-our-app\">141. Running queries in our app <a class=\"heading-anchor-permalink\" href=\"#141.-running-queries-in-our-app\">#</a></h1>\n<p>Created Thursday 23 March 2023 at 11:58 pm</p>\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/bc7c6077f8445f897134f2db595fd182ef88f49e\">Fetch all products</a></li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/2c3e8b21fec17de849cd361607f04ffa93f3dda3\">Fetch products by id</a> - <strong>sanitized substitution</strong> in <code>mysql2</code> - to prevent SQL injection attacks. Syntax is simple (<code>?</code> is the placeholder):<pre><code class=\"language-js\">// syntax\ndb.execute('string containing one/many ?', [value1, value2, value3]);\n\n// example 1\ndb.execute('SELECT ? FROM ?', ['*', 'products']);\n// evaluates to 'SELECT * FROM products'\n\n// example 2\ndb.execute('SELECT * FROM ? WHERE ?=?', ['products', 'id', 2]);\n// evaluates to\n// 'SELECT * FROM products WHERE id=2'\n</code></pre>\n</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/de7c2239553ea6c0526532425d653e8a37ea13b0\">Fetch all, fetch by Id inside Product model</a> - the app is partially broken due to this change. This is not a bug, it’s meant to break.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/94bfcba87b3fbb23548e339006db7a961beb3219\">Add, delete products using SQL</a> - again, the app is in broken state. Which is fine.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c48e6224203a4f12ed4ff5a4cad95cb2b46478ab\">Data Pre-population using SQL</a></li>\n</ol>\n<p>We’ll update the remaining routes with SQL, and fix issues later. The goal was to demonstrate how to run raw SQL with in Node.js, with <code>mysql2</code>.</p>\n",
      "id": 70
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/142_General_SQL_questions.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/10_SQL_Introduction/142_General_SQL_questions.html",
      "content": "# 142. General SQL questions\nCreated Saturday 29 April 2023 at 11:58 pm\n\nActually done before starting the Sequelize section. General questions mostly.\n\nAlso has the basics of \"how to implement the 3 types of relations in *SQL* database\"\n[1-table-relations-SQL-chatgpt-d42a646c-1d83-487d-8950-1597f8b99d58.pdf](/assets/1-table-relations-SQL-chatgpt-d42a646c-1d83-487d-8950-1597f8b99d58.pdf)",
      "html": "<h1 id=\"142.-general-sql-questions\">142. General SQL questions <a class=\"heading-anchor-permalink\" href=\"#142.-general-sql-questions\">#</a></h1>\n<p>Created Saturday 29 April 2023 at 11:58 pm</p>\n<p>Actually done before starting the Sequelize section. General questions mostly.</p>\n<p>Also has the basics of “how to implement the 3 types of relations in <em>SQL</em> database”\n<a href=\"/assets/1-table-relations-SQL-chatgpt-d42a646c-1d83-487d-8950-1597f8b99d58.pdf\">1-table-relations-SQL-chatgpt-d42a646c-1d83-487d-8950-1597f8b99d58.pdf</a></p>\n",
      "id": 71
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/149_What_is_an_ORM.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/149_What_is_an_ORM.html",
      "content": "# 150. What is Sequelize: an ORM\nCreated Friday 24 March 2023 at 02:07 am\n\nSequelize is an ORM (Object Relation Mapper) library for Node.js. It supports TypeScript too.\n\n## Motivations (to use an ORM - my guess)\n1. No need to write SQL\n2. SQL entities are converted into objects, and vice versa, automatically.\n3. Stay within the primary programming language - i.e. JS (Node.js).\n\n\n## What an ORM does (my guess)\n1. **Converts** database entities (record, table, databases) to objects, and vice versa. By objects, I mean objects of the primary app (backend app) language   - JS (Node.js), Python, Ruby etc.\n2. Provides **convenience functions for CRUD** operations.\n3. Provides an **abstraction over table relations**, thereby eliminating* the need for managing/thinking about PK, FK etc.\n\t- This is the concept of \"associations\".\n4. Provides a way to have **life-cycle functions** for database entities (records, tables, databases), and runs them properly.\n\t- e.g. if all books should have an author, and an author 'A' gets deleted, so will  (automatically) all books which have 'A' as author. This is a \"destroy\" lifecycle function. There could similar ones for update, create or even read.\n\t- Another important type of lifecycle function are validations. The ORM runs these during addition of rows (or other DB entities) to see if they fit the schema and other custom validation logic.\n\t- Life-cycle functions are *\"events\"*, essentially . They are run properly by the ORM at the correct time.\n1. Provides other commonly used functions - like DDL ops.\n\t- Provides functions, code to connect to popular databases, or accepts drivers as plugins.\n\t- e.g. automatically choosing the best MySQL type that'll be equivalent to JavaScript's `String`.\n\t- e.g. create a table from a schema defined in a JS file.\n2. Is a way to do **scripting** on a database with a regular programming language.\n\t- e.g. a Python script to do maintenance tasks as a DB admin.\n\t- e.g. changing the database on schema changes. This is the concept of *\"migrations\"*. Due to ease of scripting (FIXME: due to this?), some frameworks even support automatic migrations (in most cases).\n\nNote (my guess):\n- All this can be done without an ORM, i.e. using raw SQL too, but it'd be very hard and time consuming - both from a development POV and from a learning POV.\n- The schema for a table, is generally saved as a `class`. This file/class is called the model. Custom functions can be added to the model, of course.\n\n\n## What is an ORM\n*I won't try to give an exact definition (it may not even exist).*\n\nAn ORM is primarily intended to act as a *bridge* between the database and the app's programming language via objects in it (the app's language).\n\nPractically, ORMs provide a lot of other functionality too, as mentioned previously.\n\n\n## Example\n![](../../../../assets/149_What_is_an_ORM-image-1-7ec65c1f.png)\n",
      "html": "<h1 id=\"150.-what-is-sequelize%3A-an-orm\">150. What is Sequelize: an ORM <a class=\"heading-anchor-permalink\" href=\"#150.-what-is-sequelize%3A-an-orm\">#</a></h1>\n<p>Created Friday 24 March 2023 at 02:07 am</p>\n<p>Sequelize is an ORM (Object Relation Mapper) library for Node.js. It supports TypeScript too.</p>\n<h2 id=\"motivations-(to-use-an-orm---my-guess)\">Motivations (to use an ORM - my guess) <a class=\"heading-anchor-permalink\" href=\"#motivations-(to-use-an-orm---my-guess)\">#</a></h2>\n<ol>\n<li>No need to write SQL</li>\n<li>SQL entities are converted into objects, and vice versa, automatically.</li>\n<li>Stay within the primary programming language - i.e. JS (Node.js).</li>\n</ol>\n<h2 id=\"what-an-orm-does-(my-guess)\">What an ORM does (my guess) <a class=\"heading-anchor-permalink\" href=\"#what-an-orm-does-(my-guess)\">#</a></h2>\n<ol>\n<li><strong>Converts</strong> database entities (record, table, databases) to objects, and vice versa. By objects, I mean objects of the primary app (backend app) language   - JS (Node.js), Python, Ruby etc.</li>\n<li>Provides <strong>convenience functions for CRUD</strong> operations.</li>\n<li>Provides an <strong>abstraction over table relations</strong>, thereby eliminating* the need for managing/thinking about PK, FK etc.\n<ul>\n<li>This is the concept of “associations”.</li>\n</ul>\n</li>\n<li>Provides a way to have <strong>life-cycle functions</strong> for database entities (records, tables, databases), and runs them properly.\n<ul>\n<li>e.g. if all books should have an author, and an author ‘A’ gets deleted, so will  (automatically) all books which have ‘A’ as author. This is a “destroy” lifecycle function. There could similar ones for update, create or even read.</li>\n<li>Another important type of lifecycle function are validations. The ORM runs these during addition of rows (or other DB entities) to see if they fit the schema and other custom validation logic.</li>\n<li>Life-cycle functions are <em>“events”</em>, essentially . They are run properly by the ORM at the correct time.</li>\n</ul>\n</li>\n<li>Provides other commonly used functions - like DDL ops.\n<ul>\n<li>Provides functions, code to connect to popular databases, or accepts drivers as plugins.</li>\n<li>e.g. automatically choosing the best MySQL type that’ll be equivalent to JavaScript’s <code>String</code>.</li>\n<li>e.g. create a table from a schema defined in a JS file.</li>\n</ul>\n</li>\n<li>Is a way to do <strong>scripting</strong> on a database with a regular programming language.\n<ul>\n<li>e.g. a Python script to do maintenance tasks as a DB admin.</li>\n<li>e.g. changing the database on schema changes. This is the concept of <em>“migrations”</em>. Due to ease of scripting (FIXME: due to this?), some frameworks even support automatic migrations (in most cases).</li>\n</ul>\n</li>\n</ol>\n<p>Note (my guess):</p>\n<ul>\n<li>All this can be done without an ORM, i.e. using raw SQL too, but it’d be very hard and time consuming - both from a development POV and from a learning POV.</li>\n<li>The schema for a table, is generally saved as a <code>class</code>. This file/class is called the model. Custom functions can be added to the model, of course.</li>\n</ul>\n<h2 id=\"what-is-an-orm\">What is an ORM <a class=\"heading-anchor-permalink\" href=\"#what-is-an-orm\">#</a></h2>\n<p><em>I won’t try to give an exact definition (it may not even exist).</em></p>\n<p>An ORM is primarily intended to act as a <em>bridge</em> between the database and the app’s programming language via objects in it (the app’s language).</p>\n<p>Practically, ORMs provide a lot of other functionality too, as mentioned previously.</p>\n<h2 id=\"example\">Example <a class=\"heading-anchor-permalink\" href=\"#example\">#</a></h2>\n<p><img src=\"../../../../assets/149_What_is_an_ORM-image-1-7ec65c1f.png\" alt=\"\"></p>\n",
      "id": 72
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/150_Sequelize_concepts.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/150_Sequelize_concepts.html",
      "content": "# 150. Sequelize concepts\nCreated Friday 24 March 2023 at 10:00 pm\n\nThe most important (and used) concepts in Sequelize are:\n1. Models\n2. Instances\n3. Queries\n4. Associations\n\n![](../../../../assets/150_Sequelize_concepts-image-1-7ec65c1f.png)\n\n---\nHelpful maybe (Sequelize overview) [2-ORMs-sequelize-chatgpt.pdf](/assets/2-ORMs-sequelize-chatgpt.pdf)",
      "html": "<h1 id=\"150.-sequelize-concepts\">150. Sequelize concepts <a class=\"heading-anchor-permalink\" href=\"#150.-sequelize-concepts\">#</a></h1>\n<p>Created Friday 24 March 2023 at 10:00 pm</p>\n<p>The most important (and used) concepts in Sequelize are:</p>\n<ol>\n<li>Models</li>\n<li>Instances</li>\n<li>Queries</li>\n<li>Associations</li>\n</ol>\n<p><img src=\"../../../../assets/150_Sequelize_concepts-image-1-7ec65c1f.png\" alt=\"\"></p>\n<hr>\n<p>Helpful maybe (Sequelize overview) <a href=\"/assets/2-ORMs-sequelize-chatgpt.pdf\">2-ORMs-sequelize-chatgpt.pdf</a></p>\n",
      "id": 73
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/151_Connecting_to_the_Database.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/151_Connecting_to_the_Database.html",
      "content": "# 151. Connecting to the Database\nCreated Friday 24 March 2023 at 10:03 pm\n\n## Installing Sequelize\n- Package name is \"sequelize\".\n- Run `npm install sequelize` to install\n\nNote: Sequelize needs a driver package to work. `mysql2` is fine.\n\n\n## Connecting to the database\nSequelize uses `mysql2` behind the scenes. Therefore, we don't need to write `mysql2` code (i.e. creating a pool) ourselves. Of course, we still need to give the credentials. [API reference](https://sequelize.org/api/v6/class/src/sequelize.js~sequelize#instance-constructor-constructor)\n\n```js\nconst Sequelize = require(\"sequelize\");\n\n// (database, username, password, options)\nconst sequelize = new Sequelize(\"node-complete\", \"root\", \"my-password\", {\n  host: \"localhost\",\n  dialect: \"mysql\",\n});\n\nmodule.exports = sequelize;\n```\n\nThe entity we exported here is not just a connection pool:\n1. It has many utilities\n2. It's much more general than a pool\n3. It's aware of all models in the app\n\nThis 'sequelize' variable will be used for all DB operations.\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ea51668c60fcfdec84f710da9fc785a177b27c60)\n\n\n## Creating DB from node, too\nSequelize, by default, expects the DB to be present (this means we need to create it from the terminal/DB tool). This can be bypassed (because Sequelize exposes part of `mysql2`, which doesn't have a \"DB should exist\" requirement). Updated [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/422983ac6dee09fc7c46f1518912a4ec20d07679):\n```js\nconst Sequelize = require(\"sequelize\");\n\n// work even if DB does not exist\nconst sequelize = new Sequelize({\n  username: \"root\",\n  password: database_password,\n  host: \"localhost\",\n  dialect: \"mysql\",\n\n  hooks: {\n    afterConnect: async (connection, options) => {\n      // connection is a mysql2 connection, since Sequelize used mysq2 under the hood/\n      // also, Sequelize assumes a DB is present. We are bypassing this by using the mysql2 part Sequelize exposes, since\n      // mysql2 has no \"DB should exist\" requirement. All it needs are creds and the DB to be running\n      await connection\n        .promise()\n        .query(\"CREATE DATABASE IF NOT EXISTS \" + database_name);\n      options.database = database_name; // connect to the newly created DB\n    },\n  },\n});\n```\nNote: all hooks, like `afterBulkSync` can be added here itself.",
      "html": "<h1 id=\"151.-connecting-to-the-database\">151. Connecting to the Database <a class=\"heading-anchor-permalink\" href=\"#151.-connecting-to-the-database\">#</a></h1>\n<p>Created Friday 24 March 2023 at 10:03 pm</p>\n<h2 id=\"installing-sequelize\">Installing Sequelize <a class=\"heading-anchor-permalink\" href=\"#installing-sequelize\">#</a></h2>\n<ul>\n<li>Package name is “sequelize”.</li>\n<li>Run <code>npm install sequelize</code> to install</li>\n</ul>\n<p>Note: Sequelize needs a driver package to work. <code>mysql2</code> is fine.</p>\n<h2 id=\"connecting-to-the-database\">Connecting to the database <a class=\"heading-anchor-permalink\" href=\"#connecting-to-the-database\">#</a></h2>\n<p>Sequelize uses <code>mysql2</code> behind the scenes. Therefore, we don’t need to write <code>mysql2</code> code (i.e. creating a pool) ourselves. Of course, we still need to give the credentials. <a href=\"https://sequelize.org/api/v6/class/src/sequelize.js~sequelize#instance-constructor-constructor\">API reference</a></p>\n<pre><code class=\"language-js\">const Sequelize = require(&quot;sequelize&quot;);\n\n// (database, username, password, options)\nconst sequelize = new Sequelize(&quot;node-complete&quot;, &quot;root&quot;, &quot;my-password&quot;, {\n  host: &quot;localhost&quot;,\n  dialect: &quot;mysql&quot;,\n});\n\nmodule.exports = sequelize;\n</code></pre>\n<p>The entity we exported here is not just a connection pool:</p>\n<ol>\n<li>It has many utilities</li>\n<li>It’s much more general than a pool</li>\n<li>It’s aware of all models in the app</li>\n</ol>\n<p>This ‘sequelize’ variable will be used for all DB operations.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ea51668c60fcfdec84f710da9fc785a177b27c60\">Code</a></p>\n<h2 id=\"creating-db-from-node%2C-too\">Creating DB from node, too <a class=\"heading-anchor-permalink\" href=\"#creating-db-from-node%2C-too\">#</a></h2>\n<p>Sequelize, by default, expects the DB to be present (this means we need to create it from the terminal/DB tool). This can be bypassed (because Sequelize exposes part of <code>mysql2</code>, which doesn’t have a “DB should exist” requirement). Updated <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/422983ac6dee09fc7c46f1518912a4ec20d07679\">code</a>:</p>\n<pre><code class=\"language-js\">const Sequelize = require(&quot;sequelize&quot;);\n\n// work even if DB does not exist\nconst sequelize = new Sequelize({\n  username: &quot;root&quot;,\n  password: database_password,\n  host: &quot;localhost&quot;,\n  dialect: &quot;mysql&quot;,\n\n  hooks: {\n    afterConnect: async (connection, options) =&gt; {\n      // connection is a mysql2 connection, since Sequelize used mysq2 under the hood/\n      // also, Sequelize assumes a DB is present. We are bypassing this by using the mysql2 part Sequelize exposes, since\n      // mysql2 has no &quot;DB should exist&quot; requirement. All it needs are creds and the DB to be running\n      await connection\n        .promise()\n        .query(&quot;CREATE DATABASE IF NOT EXISTS &quot; + database_name);\n      options.database = database_name; // connect to the newly created DB\n    },\n  },\n});\n</code></pre>\n<p>Note: all hooks, like <code>afterBulkSync</code> can be added here itself.</p>\n",
      "id": 74
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/152_Defining_a_Model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/152_Defining_a_Model.html",
      "content": "# 152. Defining the a Model\nCreated Friday 24 March 2023 at 10:37 pm\n\n## Creating models (and therefore tables)\nLet's delete the products table from the database (using MySQL Workbench). \n\nWe'll create tables using Sequelize.\n\nSyntax for creating a model, in detail:\n```js\nconst Sequelize = require('sequelize');\nconst sequelize = require('../path-to-sequelize-instance');\n\nconst MyModel = sequelize.define('modelName', {\n\tcolumnOneName: {\n\t    type: Sequelize.INTEGER,\n\t    allowNull: false,\n\t    autoIncrement: false,\n\t}\n});\n\nmodule.exports = MyModel;\n```\n\n\n```js\nconst Sequelize = require(\"sequelize\");\n\nconst sequelize = require(path.join(rootDir, \"util\", \"database.js\"));\n\n// 1. instance of sequelize, not the class\nconst Product = sequelize.define(\"product\", {\n  // 2. model name is typically in lowercase\n\n  id: {\n    type: Sequelize.INTEGER, // 3. JavaScriptish types\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n  },\n\n  title: Sequelize.STRING, // 3. shorthand for type: { type: Sequelize.STRING }.\n  // We should have added allowNull: false, but this is a demo for the shorthand\n\n  price: {\n    type: Sequelize.DOUBLE,\n    allowNull: false,\n  },\n\n  description: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n});\n\nmodule.exports = Product; // export for use elsewhere\n```\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/89785f7d2302d9183f4747388badfc8cfa099e80)\n\n## Hooks (very basic)\nSuppose I have to run some code after syncing table. I do this via a \"hook\". Hooks can be global and model-wise.\n\nThe hooks are added after the schema, i.e. 3rd argument of `mySequelize.define()`:\n```js\nconst Character = sequelize.define(\n  \"character\",\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      allowNull: false,\n      primaryKey: true,\n    },\n    name: {\n      type: Sequelize.STRING,\n      allowNull: false,\n    },\n  },\n  {\n    hooks: {\n      async afterSync() {\n        console.log(\"After sync called\");\n      },\n    },\n  }\n);\n```\n\n[List of Sequelize hooks - v6](https://github.com/sequelize/sequelize/blob/v6/src/hooks.js#L7)",
      "html": "<h1 id=\"152.-defining-the-a-model\">152. Defining the a Model <a class=\"heading-anchor-permalink\" href=\"#152.-defining-the-a-model\">#</a></h1>\n<p>Created Friday 24 March 2023 at 10:37 pm</p>\n<h2 id=\"creating-models-(and-therefore-tables)\">Creating models (and therefore tables) <a class=\"heading-anchor-permalink\" href=\"#creating-models-(and-therefore-tables)\">#</a></h2>\n<p>Let’s delete the products table from the database (using MySQL Workbench).</p>\n<p>We’ll create tables using Sequelize.</p>\n<p>Syntax for creating a model, in detail:</p>\n<pre><code class=\"language-js\">const Sequelize = require('sequelize');\nconst sequelize = require('../path-to-sequelize-instance');\n\nconst MyModel = sequelize.define('modelName', {\n\tcolumnOneName: {\n\t    type: Sequelize.INTEGER,\n\t    allowNull: false,\n\t    autoIncrement: false,\n\t}\n});\n\nmodule.exports = MyModel;\n</code></pre>\n<pre><code class=\"language-js\">const Sequelize = require(&quot;sequelize&quot;);\n\nconst sequelize = require(path.join(rootDir, &quot;util&quot;, &quot;database.js&quot;));\n\n// 1. instance of sequelize, not the class\nconst Product = sequelize.define(&quot;product&quot;, {\n  // 2. model name is typically in lowercase\n\n  id: {\n    type: Sequelize.INTEGER, // 3. JavaScriptish types\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n  },\n\n  title: Sequelize.STRING, // 3. shorthand for type: { type: Sequelize.STRING }.\n  // We should have added allowNull: false, but this is a demo for the shorthand\n\n  price: {\n    type: Sequelize.DOUBLE,\n    allowNull: false,\n  },\n\n  description: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n});\n\nmodule.exports = Product; // export for use elsewhere\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/89785f7d2302d9183f4747388badfc8cfa099e80\">Code</a></p>\n<h2 id=\"hooks-(very-basic)\">Hooks (very basic) <a class=\"heading-anchor-permalink\" href=\"#hooks-(very-basic)\">#</a></h2>\n<p>Suppose I have to run some code after syncing table. I do this via a “hook”. Hooks can be global and model-wise.</p>\n<p>The hooks are added after the schema, i.e. 3rd argument of <code>mySequelize.define()</code>:</p>\n<pre><code class=\"language-js\">const Character = sequelize.define(\n  &quot;character&quot;,\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      allowNull: false,\n      primaryKey: true,\n    },\n    name: {\n      type: Sequelize.STRING,\n      allowNull: false,\n    },\n  },\n  {\n    hooks: {\n      async afterSync() {\n        console.log(&quot;After sync called&quot;);\n      },\n    },\n  }\n);\n</code></pre>\n<p><a href=\"https://github.com/sequelize/sequelize/blob/v6/src/hooks.js#L7\">List of Sequelize hooks - v6</a></p>\n",
      "id": 75
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/153_Syncing_Models_to_the_Database.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/153_Syncing_Models_to_the_Database.html",
      "content": "# 153. Syncing Models to the Database\nCreated Friday 24 March 2023 at 10:41 pm\n\nSequelize can create tables from scratch, of course.\n```js\nawait sequelize.sync(); // instance of Sequelize class\n```\n\n**Important note**\n- Tables are created lazily, i.e. they are created only when the model code is run first. This usually happens when the model is imported, and the `.define()` runs. If a model is never run, directly or by means of a important, the table is not created.\n- Having `.sync` is still important. But as mentioned above, having `.sync` does not guarantee table creation.\n- There's no need to mention models in `.sync`, since all models are anyway created using the Sequelize instance.\n\nThe `.sync` is run usually, when the server app starts. Example:\n```js\nconst app = Express.app();\nconst sequelize = require('./util/database.js');\n\n// ... code here\n\nsequelize.sync()\n\t.then(() => { app.listen(3000); })\n\t.catch((err) => console.log(err));\n```\n\nNote\n- Sequelize instance has knowledge of all models, so all tables can be created.\n- Tables are not created if they already exist. This is the default.\n\n---\n\nThis is it, the DB is ready for use. Code: [start](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ea51668c60fcfdec84f710da9fc785a177b27c60) to [finish](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/27bbb267d225ed0b35d867d462567bd3107cbde1)",
      "html": "<h1 id=\"153.-syncing-models-to-the-database\">153. Syncing Models to the Database <a class=\"heading-anchor-permalink\" href=\"#153.-syncing-models-to-the-database\">#</a></h1>\n<p>Created Friday 24 March 2023 at 10:41 pm</p>\n<p>Sequelize can create tables from scratch, of course.</p>\n<pre><code class=\"language-js\">await sequelize.sync(); // instance of Sequelize class\n</code></pre>\n<p><strong>Important note</strong></p>\n<ul>\n<li>Tables are created lazily, i.e. they are created only when the model code is run first. This usually happens when the model is imported, and the <code>.define()</code> runs. If a model is never run, directly or by means of a important, the table is not created.</li>\n<li>Having <code>.sync</code> is still important. But as mentioned above, having <code>.sync</code> does not guarantee table creation.</li>\n<li>There’s no need to mention models in <code>.sync</code>, since all models are anyway created using the Sequelize instance.</li>\n</ul>\n<p>The <code>.sync</code> is run usually, when the server app starts. Example:</p>\n<pre><code class=\"language-js\">const app = Express.app();\nconst sequelize = require('./util/database.js');\n\n// ... code here\n\nsequelize.sync()\n\t.then(() =&gt; { app.listen(3000); })\n\t.catch((err) =&gt; console.log(err));\n</code></pre>\n<p>Note</p>\n<ul>\n<li>Sequelize instance has knowledge of all models, so all tables can be created.</li>\n<li>Tables are not created if they already exist. This is the default.</li>\n</ul>\n<hr>\n<p>This is it, the DB is ready for use. Code: <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ea51668c60fcfdec84f710da9fc785a177b27c60\">start</a> to <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/27bbb267d225ed0b35d867d462567bd3107cbde1\">finish</a></p>\n",
      "id": 76
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/154_Queries.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/154_Queries.html",
      "content": "# 154. Queries\nCreated Tuesday 28 March 2023 at 12:05 am\nCreated \n\nModels created using Sequelize expose a lot of functionality (the core ORM) part. This functionality may be static or non-static methods, or even properties.\n\n## Raw queries with Sequelize\n```js\nconst sequelize = require('./sequelize');\n\n// 1. simplest\nconst [rows, metadata] = await sequelize.query(\"SELECT * FROM products\");\n\n\n// 2. escape parts of the query\n// placeholder is ?, values in the `replacements` array in the second argument\n// behaves the same as mysql2\nconst [rows, metadata] = await sequelize.query(\"SELECT * FROM ?\", \n\t{ replacements: [\"products\"] }\n);\n\n\n// 3. Get the tablename from Model - .getTableName()\n// Why am I not using escape-placeholders ? Because this is not allowed on MySQL's level. Have to do good old format string\nconst Product = require('./model/Product')\nconst tableName = Product.getTableName();\nconst [rows, metadata] = await sequelize.query(`SELECT * FROM ${tableName}`);\n\n\n// 4. Note - pass the query `type` option to avoid double network consumption\nconst [rows, metadata] = await sequelize.query(`SELECT * FROM characters`);\n// 'metadata' is the same as 'rows' here, waste of network\n\n// this is better\nconst Sequelize = require('sequelize');\nconst rows = await sequelize.query(`SELECT * FROM characters`, \n\t{ type: Sequelize.QueryTypes.SELECT }\n);\n```\n\nNote:\n- MySQL doesn't allow escaped values for table names, and column names. This becomes important when using raw queries using `mysql2` or \"sequelize.`query()`\". Workaround - use usual JS format string.\n- To avoid wasteful metadata (second element in the response \"sequelize.`query()`\"), provide  the query \"type\" in the second argument of `.query()`.\n\n\n## ORM queries (CRUD)\n### Read\n1. `MyModel.findAll([, options = {}])`\n\t```js\n\tconst Product = require(\"../models/Product.js\"); \n\t// created using `sequelize.define(...)`, where `sequelize = new Sequelize(...)`\n\t\n\t// 1. get all, i.e. SELECT *\n\tconst productsArray = Product.findAll();\n\n\t// 2. get all, but chosen attributes only. SELECT x, y, z\n\tconst productsArray = Product.findAll({\n\t\tattributes: ['title', 'imageUrl']\n\t});\n\n\t// 3. get all, but change column name. \n\t// Element is array ([original, alias]) instead of string\n\t// mixing is possible\n\tconst productsArray = Product.findAll({\n\t\tattributes: [\n\t\t    ['title', 'myTitle'],\n\t\t    'price',\n\t\t    ['description', 'whatIsIt']\n\t});\n\t```\n2. `MyModel.findById(id, [, optionsObject={}])`\n\t```js\n\tconst Product = require(\"../models/Product.js\");\n\n\t// get the product with matching id (assuming id is the primary key)\n\tawait Product.findById(1);\n\n\t// get product, but only chisen attributes\n\tawait Product.findById(1, {\n\t\tattributes: ['title', 'imageUrl']\n\t})\n\n\t// get product, but change some column names\n\tawait Product.findBy(1, {\n\t\tattributes: [\n\t\t    ['title', 'myTitle'],\n\t\t    'price',\n\t\t    ['description', 'whatIsIt']\n\t})\n\t```\n\nFIXME:  Sequelize does not respect the attributes array in that it forcibly returns the associated columns even if they are not in the attributes array. There's no easy way around this. e.g.\n```js\nconst products = await cart.getProducts({\n  attributes: [\"id\", \"title\", \"price\", \"imageUrl\", \"description\"],\n  raw: true,\n});\n\n// returns the following. Problem: 'cart*' should have been excluded\n/*\n[\n  {\n    id: 1,\n    title: 'A book',\n    price: 12.99,\n    imageUrl: 'https://cdn.pixabay.com/photo/2016/03/31/20/51/book-1296045_960_720.png',\n    description: 'This is an awesome book',\n    'cartItem.id': 1,\n    'cartItem.quantity': null,\n    'cartItem.createdAt': 2023-05-01T00:51:04.000Z,\n    'cartItem.updatedAt': 2023-05-01T00:51:04.000Z,\n    'cartItem.cartId': 1,\n    'cartItem.productId': 1\n  }\n]\n*/\n```",
      "html": "<h1 id=\"154.-queries\">154. Queries <a class=\"heading-anchor-permalink\" href=\"#154.-queries\">#</a></h1>\n<p>Created Tuesday 28 March 2023 at 12:05 am\nCreated</p>\n<p>Models created using Sequelize expose a lot of functionality (the core ORM) part. This functionality may be static or non-static methods, or even properties.</p>\n<h2 id=\"raw-queries-with-sequelize\">Raw queries with Sequelize <a class=\"heading-anchor-permalink\" href=\"#raw-queries-with-sequelize\">#</a></h2>\n<pre><code class=\"language-js\">const sequelize = require('./sequelize');\n\n// 1. simplest\nconst [rows, metadata] = await sequelize.query(&quot;SELECT * FROM products&quot;);\n\n\n// 2. escape parts of the query\n// placeholder is ?, values in the `replacements` array in the second argument\n// behaves the same as mysql2\nconst [rows, metadata] = await sequelize.query(&quot;SELECT * FROM ?&quot;, \n\t{ replacements: [&quot;products&quot;] }\n);\n\n\n// 3. Get the tablename from Model - .getTableName()\n// Why am I not using escape-placeholders ? Because this is not allowed on MySQL's level. Have to do good old format string\nconst Product = require('./model/Product')\nconst tableName = Product.getTableName();\nconst [rows, metadata] = await sequelize.query(`SELECT * FROM ${tableName}`);\n\n\n// 4. Note - pass the query `type` option to avoid double network consumption\nconst [rows, metadata] = await sequelize.query(`SELECT * FROM characters`);\n// 'metadata' is the same as 'rows' here, waste of network\n\n// this is better\nconst Sequelize = require('sequelize');\nconst rows = await sequelize.query(`SELECT * FROM characters`, \n\t{ type: Sequelize.QueryTypes.SELECT }\n);\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>MySQL doesn’t allow escaped values for table names, and column names. This becomes important when using raw queries using <code>mysql2</code> or “sequelize.<code>query()</code>”. Workaround - use usual JS format string.</li>\n<li>To avoid wasteful metadata (second element in the response “sequelize.<code>query()</code>”), provide  the query “type” in the second argument of <code>.query()</code>.</li>\n</ul>\n<h2 id=\"orm-queries-(crud)\">ORM queries (CRUD) <a class=\"heading-anchor-permalink\" href=\"#orm-queries-(crud)\">#</a></h2>\n<h3 id=\"read\">Read <a class=\"heading-anchor-permalink\" href=\"#read\">#</a></h3>\n<ol>\n<li><code>MyModel.findAll([, options = {}])</code><pre><code class=\"language-js\">const Product = require(&quot;../models/Product.js&quot;); \n// created using `sequelize.define(...)`, where `sequelize = new Sequelize(...)`\n\n// 1. get all, i.e. SELECT *\nconst productsArray = Product.findAll();\n\n// 2. get all, but chosen attributes only. SELECT x, y, z\nconst productsArray = Product.findAll({\n\tattributes: ['title', 'imageUrl']\n});\n\n// 3. get all, but change column name. \n// Element is array ([original, alias]) instead of string\n// mixing is possible\nconst productsArray = Product.findAll({\n\tattributes: [\n\t    ['title', 'myTitle'],\n\t    'price',\n\t    ['description', 'whatIsIt']\n});\n</code></pre>\n</li>\n<li><code>MyModel.findById(id, [, optionsObject={}])</code><pre><code class=\"language-js\">const Product = require(&quot;../models/Product.js&quot;);\n\n// get the product with matching id (assuming id is the primary key)\nawait Product.findById(1);\n\n// get product, but only chisen attributes\nawait Product.findById(1, {\n\tattributes: ['title', 'imageUrl']\n})\n\n// get product, but change some column names\nawait Product.findBy(1, {\n\tattributes: [\n\t    ['title', 'myTitle'],\n\t    'price',\n\t    ['description', 'whatIsIt']\n})\n</code></pre>\n</li>\n</ol>\n<p>FIXME:  Sequelize does not respect the attributes array in that it forcibly returns the associated columns even if they are not in the attributes array. There’s no easy way around this. e.g.</p>\n<pre><code class=\"language-js\">const products = await cart.getProducts({\n  attributes: [&quot;id&quot;, &quot;title&quot;, &quot;price&quot;, &quot;imageUrl&quot;, &quot;description&quot;],\n  raw: true,\n});\n\n// returns the following. Problem: 'cart*' should have been excluded\n/*\n[\n  {\n    id: 1,\n    title: 'A book',\n    price: 12.99,\n    imageUrl: 'https://cdn.pixabay.com/photo/2016/03/31/20/51/book-1296045_960_720.png',\n    description: 'This is an awesome book',\n    'cartItem.id': 1,\n    'cartItem.quantity': null,\n    'cartItem.createdAt': 2023-05-01T00:51:04.000Z,\n    'cartItem.updatedAt': 2023-05-01T00:51:04.000Z,\n    'cartItem.cartId': 1,\n    'cartItem.productId': 1\n  }\n]\n*/\n</code></pre>\n",
      "id": 77
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/161_Creating_a_User_model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/161_Creating_a_User_model.html",
      "content": "# 161. Creating a User model\nCreated Sunday 16 April 2023 at 02:02 pm\n\nLet's a new model, called User. A user can create products, and also buy products. Of course, a user will have their cart (i.e. \"associated\" cart). There are two parts to the User model\n1. Base data- name and email.\n2. Associations - the relations to cart, product etc.\n\nWe'll not worry about user authentication right now.\n\nLet's work on the first part. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/83b849694089ad439d4a115d5227bc21fb4f30c4)",
      "html": "<h1 id=\"161.-creating-a-user-model\">161. Creating a User model <a class=\"heading-anchor-permalink\" href=\"#161.-creating-a-user-model\">#</a></h1>\n<p>Created Sunday 16 April 2023 at 02:02 pm</p>\n<p>Let’s a new model, called User. A user can create products, and also buy products. Of course, a user will have their cart (i.e. “associated” cart). There are two parts to the User model</p>\n<ol>\n<li>Base data- name and email.</li>\n<li>Associations - the relations to cart, product etc.</li>\n</ol>\n<p>We’ll not worry about user authentication right now.</p>\n<p>Let’s work on the first part. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/83b849694089ad439d4a115d5227bc21fb4f30c4\">Code</a></p>\n",
      "id": 78
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/162_Associations.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/162_Associations.html",
      "content": "# 162. Associations\nCreated Sunday 16 April 2023 at 02:02 pm\n\nA user is related to other data in our shop - cart, products etc. Sequelize supports creation of such associations. There are 3 basic kinds of associations (between models/tables):\n1. One to one - each record in table A is related to at most one record in table B.\n2. One to many\n3. Many to many\n\n/rough START\n## Sequelize associations (basics)\n- **Source and target model** - s.someRelation(t) where s and t are source and target. This has nothing to do with foreign key placement, since it's determined by the relation too. s and t just make it easier to specify the order of arguments (since s.someRelation(t) is *similar* to someRelation.call(this, s, t))\n- **Placement of foreign key**.\n\t- A.has*(B) - FK placed in B\n\t- A.belong*(A) - FK placed in A\n- Recommended way to create associations - use relations in pair. Syntax for the basic 3\n\t1. 1-1 - `A.hasOne(B); B.belongsTo(A)`\n\t2. 1-N - `A.hasMany(B); B.belongsTo(A)`\n\t3. Many-many - `A.belongsToMany(B, { through: 'ABjunction' }); B.belongsToMany(A, { through: 'ABjunction' });` <details><summary>String/object</summary>Note, through can be a string, or even a model we defined (the foreign keys for both will be added to it automatically). This is actually better since we can add extra data here (i.e. in the junction table). If a string is passed, a junction model is still created, but has to be accessed via one of the participating models (doesn't exist in our code directly).</details>\n\tWhy pairs - pairs make sure both model *know* about the relation, and have to have auto-generated (aka mixins) methods to get associated stuff from both sides.\n- Yes, N-M notation is **weird** here. We are using `belongsToMany` 2 times, instead of `hasMany` with `belongsToMany`. eway: use the latter, then change `hasMany` to `belongsToMany`.\n- **Default lifecycle hooks** - by default, Sequelize has 'SET NULL' for deletion and 'CASCADE' for updation operation.\n\t\n## Sequelize association (medium)\n- **Multiple associations between the same 2 models** are *possible*. For this, pass an `as` (alias) config (second argument of .has* or .belongs*). **This helps in establishing semantic difference at the JS/ORM level**. Example - A task is created by a user, and assigned to a user, at an office. The relations are between user and task, but there's a semantic difference.\n\t```js\n\tconst User = sequelize.define('User', {...});\n\tconst Task = sequelize.define('Task', {...});\n\t\n\tUser.hasMany(Task, { as: 'createdTasks' });\n\tTask.belongsTo(User, { as: 'createdByUser' });\n\t\n\tUser.hasMany(Task, { as: 'assignedTasks' });\n\tTask.belongsTo(User, { as: 'assignedToUser' });\n\t```\n\tNote: even though we have \"named\" the associations at the ORM level, there's no difference at the SQL level, whether or not we have named associations, since the FKs, indexes are the same in both cases. **Also, the query methods will now require the alias to avoid ambiguity**.\n- **Foreign key name** - The foreign key names are automatically decided by Sequelize, but can be specified using the `foreignKey` option (second argument of .has* or .belongs*). This is very helpful to convey \"tangible relation/action\". Example -there are students and an equal number chairs in a classroom. It's better to use a FK named `seatedBy` than `userId`.\n- **Association based on field other than FK** - we've had associations between models that used FK. But it's possible to create associations based on a non FK field too. **However**, this requires the field to be **unique**. Why do this? - doing this makes the generated mixins more tangible (example if username was used for the association instead of userid - we'd have mixins like `.getUsername()`, which is more useful compared to `.getUserid()`). Syntax:\n\t```js\n\tPerson.hasOne(B, { sourceKey: '' }); // sourceKey here since it's the one being copied (to B)\n\tB.belongsTo(A, { targetKey: '' });\n\t\n\t// ommitting either side means use id for that side, i.e. id <--> someField\n\t```\n\nNote: the option argument (2nd argument) here is referring to the `target`. e.g. `Product.belongsTo(User, { onDelete: 'CASCADE'} )` means talking about the deletion of target (i.e. User), and what happens to the source (Product) when this happens.\n\n## Sequelize association (advanced)\n#todo read-from-docs\n- More granular eager loading\n\n## Sequelize association querying\n- Sequelize adds mixins to get associated models of the model being queried. Example:\n\t```js\n\tUser.hasMany(Account);\n\tAccount.belongsTo(User);\n\n\t// the following functions are now available (on instances)\n\tuser.getAccounts();\n\taccount.getUser();\n\t```\n- Lazy vs eager load - when a model is queried, it's associated models are not returned (by default), and another call needs to be made using the mixin. This can be overriden, and the associated model(s) can be fetched in the fetch call itself, by using the `include` keyword as query option (i.e. object passed as second argument)\n- Sequelize does not support direct manipulation of associated models, i.e. it has to be done in explicit steps. Exception - Creation of a new model (with associated models) is possible, if they too are new.\n\n/rough end\n\nWe wish to have the following relations between the model, in this project.\n![](../../../../assets/162_Associations-image-1-7ec65c1f.png)\n\n- [User and Product association code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/d7e46fbcef2b5a7e9d91702001c4fd11c1f0322b)\n- [Populating each model, individually - code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8dad6ea2abe25bdf2956949d5da6c991b5d07a8d) `afterSync` at model level.\n- [Populating models with association, after sync all](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c7d20e75ed1c82b5d977ee0d81ff3ecdf44b64ec) `afterBulkSync` at global level\n\n## Stuff learnt from the above\n1. Associated tables have cannot are associated at SQL level too, and hence, have to deleted in proper order. Example - User table cannot be deleted here, if Product table exists.\n2. `afterSync` at model level, runs after the model has been synced. The hook is also available at the global level, but here, again, it runs once for each model. Code:\n\t```js\n\t// afterSync at model level\n\tconst sequelize = require('../util/database.js')\n\tconst User = sequelize.define('user', {/*columns*/}, \n\t{\n\t  hooks: {\n\t    afterSync: async function (){},\n\t  }\n\t})\n\t```\n\t```js\n\t// afterSync at global level\n\tconst sequelize = new Sequelize('node-complete', 'root', 'password',\n\t{\n\t  host: '',...\n\t  \n\t  hooks: {\n\t    afterSync: async function (){}, // runs once for each model\n\t  }\n\t})\n\n\tmodule.exports = sequelize;\n\t/*\n\tThis can be source of pesky errors, especially if the hook uses multiple models. The reason is that not all models have been synced, when this runs and 'table does not exist' error may come up (if a has not synced yet).\n\n\tThe correct way to run code that uses multiple models, after sync, is to use `afterBulkSync`, globally of course.\n\t*/\n\t```\n3. Circular dependency issues: Here I want to pre-populate data, by creating a user with two associated product. To avoid 'table not found errors', I use the `afterBulkSync` hook. The problem now is that I cannot import `User` and `Product` model at the top, since I'm in the `sequelize` (instance) file, which is used by every model.\n   \n   One way to fix this is to import the models inside the hook, and not at the top level. This fixes the issue because when the hook runs, all models have synced, and their exports have been cached (Node.js's default behavior), so importing them is fine now. Code:\n\t```js\n\t// const User = require('./models/User'); ERROR - circular\n\t\n\tconst sequelize = new Sequelize('node-complete', 'root', 'password',\n\t{\n\t  host: '',...\n\t  \n\t  hooks: {\n\t    afterBulkSync: async function (){\n\t\t    const User = require('./models/User'); // Okay here\n\t    },\n\t  }\n\t})\n\n\tmodule.exports = sequelize;\n\t```\n\t#todo #fixme this is not ideal. Find a way to add the setup code without such nested (not top level) imports.\n4. Creating associated models - there are multiple (cosmetic and otherwise) ways to created associated models. There are 3 cases:\n\t1. All models exist, independently - Use the `add*` mixin. Example: \n\t\t```js\n\t\tawait user.addProducts([prodInstance1, prodInstance2])\n\t\t// FYI: associating PK works too, example: id\n\n\t\tawait user.addProduct([prodInstance])\n\t\t// PK works fine too\n\t\t```\n\t2. Some models don't exist (assume 1 does not exist) - Use the `create*` mixin. Example:\n\t\t```js\n\t\tawait user.createProduct(prodPlainObject1);\n\t\tawait user.createProduct(prodPlainObject2);\n\t\n\t\t// Note: apparently, user.createProducts mixin does not exist\n\t\t// there may be other ways to do this in one go, maybe setProducts?. FIXME\n\t\t```\n\t3. None of the models exist. A one liner is possible here. Example:\n\t\t```js\n\t\tawait User.create(\n\t\t{\n\t\t\t...userPlainObj,\n\t\t\t[Sequelize.Utils.pluralize(Product.name)]: [prodObj1, prodObj2],\n\t\t\t// FYI: these could be model instances too\n\t\t},\n\t\t{ include: [{ model: Product }] }\n\t\t);\n\t\t// include is the lazy-load control construct of Sequelize, it can be used in queries too\n\t\t```\n5. Automatic dissociation - just make the new association. Why this works: Associating an instance from one associated instance to another (of the same type) will automatically remove the old association. Examples:\n\t```js\n\tconst prod1 = await Product...; // assume this is associated with user1\n\t\n\tconst user2 = await User...;\n\tuser2.addProduct(prod1); // prod1 is now associated with user2, not user1.\n\t```\n6. Dissociating explicitly - use appropriate mixin. Examples:\n\t```js\n\t// dissociate for 1-1 or 'one' side of 1-N\n\tawait product.setUser(null);\n\t// product.removeUser(); // doesn't work. there's no such function. Use set (above).\n\n\t// dis + destr. Fact: There's no one liner.\n\tproduct;\n\tconst userId = product.userId;\n\tawait product.setUser(null);\n\tawait User.destroy({ where: { id: userId } });\n\n\n\t// dissociate for N-M or 'many' side of 1-N\n\t// PKs or instances both work (can be passed)\n\tawait user.removeProduct(prodInstance.id); // dissociate + destroy one\n\t\n\tawait user.removeProducts([prodInstance1.id, prodInstance2.id]); // dissociate + destroy multiple\n\t\n\tawait user.setProducts([]); // dissociates + destroys all, if they are not related to any other instances\n\n\t// FIXME: setProducts(null) seem to behave the same as setProducts([]), what's the difference?\n\t```\n\n---\n\nVerifying my understanding [3-SQL-and-ORM-Relations-chatgpt-7cfdfbab-d682-4aba-be6b-7a519c15abb0.pdf](/assets/3-SQL-and-ORM-Relations-chatgpt-7cfdfbab-d682-4aba-be6b-7a519c15abb0.pdf)",
      "html": "<h1 id=\"162.-associations\">162. Associations <a class=\"heading-anchor-permalink\" href=\"#162.-associations\">#</a></h1>\n<p>Created Sunday 16 April 2023 at 02:02 pm</p>\n<p>A user is related to other data in our shop - cart, products etc. Sequelize supports creation of such associations. There are 3 basic kinds of associations (between models/tables):</p>\n<ol>\n<li>One to one - each record in table A is related to at most one record in table B.</li>\n<li>One to many</li>\n<li>Many to many</li>\n</ol>\n<p>/rough START</p>\n<h2 id=\"sequelize-associations-(basics)\">Sequelize associations (basics) <a class=\"heading-anchor-permalink\" href=\"#sequelize-associations-(basics)\">#</a></h2>\n<ul>\n<li><strong>Source and target model</strong> - s.someRelation(t) where s and t are source and target. This has nothing to do with foreign key placement, since it’s determined by the relation too. s and t just make it easier to specify the order of arguments (since s.someRelation(t) is <em>similar</em> to someRelation.call(this, s, t))</li>\n<li><strong>Placement of foreign key</strong>.\n<ul>\n<li>A.has*(B) - FK placed in B</li>\n<li>A.belong*(A) - FK placed in A</li>\n</ul>\n</li>\n<li>Recommended way to create associations - use relations in pair. Syntax for the basic 3\n<ol>\n<li>1-1 - <code>A.hasOne(B); B.belongsTo(A)</code></li>\n<li>1-N - <code>A.hasMany(B); B.belongsTo(A)</code></li>\n<li>Many-many - <code>A.belongsToMany(B, { through: 'ABjunction' }); B.belongsToMany(A, { through: 'ABjunction' });</code> <details><summary>String/object</summary>Note, through can be a string, or even a model we defined (the foreign keys for both will be added to it automatically). This is actually better since we can add extra data here (i.e. in the junction table). If a string is passed, a junction model is still created, but has to be accessed via one of the participating models (doesn’t exist in our code directly).</details>\nWhy pairs - pairs make sure both model <em>know</em> about the relation, and have to have auto-generated (aka mixins) methods to get associated stuff from both sides.</li>\n</ol>\n</li>\n<li>Yes, N-M notation is <strong>weird</strong> here. We are using <code>belongsToMany</code> 2 times, instead of <code>hasMany</code> with <code>belongsToMany</code>. eway: use the latter, then change <code>hasMany</code> to <code>belongsToMany</code>.</li>\n<li><strong>Default lifecycle hooks</strong> - by default, Sequelize has ‘SET NULL’ for deletion and ‘CASCADE’ for updation operation.</li>\n</ul>\n<h2 id=\"sequelize-association-(medium)\">Sequelize association (medium) <a class=\"heading-anchor-permalink\" href=\"#sequelize-association-(medium)\">#</a></h2>\n<ul>\n<li><strong>Multiple associations between the same 2 models</strong> are <em>possible</em>. For this, pass an <code>as</code> (alias) config (second argument of .has* or .belongs*). <strong>This helps in establishing semantic difference at the JS/ORM level</strong>. Example - A task is created by a user, and assigned to a user, at an office. The relations are between user and task, but there’s a semantic difference.<pre><code class=\"language-js\">const User = sequelize.define('User', {...});\nconst Task = sequelize.define('Task', {...});\n\nUser.hasMany(Task, { as: 'createdTasks' });\nTask.belongsTo(User, { as: 'createdByUser' });\n\nUser.hasMany(Task, { as: 'assignedTasks' });\nTask.belongsTo(User, { as: 'assignedToUser' });\n</code></pre>\nNote: even though we have “named” the associations at the ORM level, there’s no difference at the SQL level, whether or not we have named associations, since the FKs, indexes are the same in both cases. <strong>Also, the query methods will now require the alias to avoid ambiguity</strong>.</li>\n<li><strong>Foreign key name</strong> - The foreign key names are automatically decided by Sequelize, but can be specified using the <code>foreignKey</code> option (second argument of .has* or .belongs*). This is very helpful to convey “tangible relation/action”. Example -there are students and an equal number chairs in a classroom. It’s better to use a FK named <code>seatedBy</code> than <code>userId</code>.</li>\n<li><strong>Association based on field other than FK</strong> - we’ve had associations between models that used FK. But it’s possible to create associations based on a non FK field too. <strong>However</strong>, this requires the field to be <strong>unique</strong>. Why do this? - doing this makes the generated mixins more tangible (example if username was used for the association instead of userid - we’d have mixins like <code>.getUsername()</code>, which is more useful compared to <code>.getUserid()</code>). Syntax:<pre><code class=\"language-js\">Person.hasOne(B, { sourceKey: '' }); // sourceKey here since it's the one being copied (to B)\nB.belongsTo(A, { targetKey: '' });\n\n// ommitting either side means use id for that side, i.e. id &lt;--&gt; someField\n</code></pre>\n</li>\n</ul>\n<p>Note: the option argument (2nd argument) here is referring to the <code>target</code>. e.g. <code>Product.belongsTo(User, { onDelete: 'CASCADE'} )</code> means talking about the deletion of target (i.e. User), and what happens to the source (Product) when this happens.</p>\n<h2 id=\"sequelize-association-(advanced)\">Sequelize association (advanced) <a class=\"heading-anchor-permalink\" href=\"#sequelize-association-(advanced)\">#</a></h2>\n<p>#todo read-from-docs</p>\n<ul>\n<li>More granular eager loading</li>\n</ul>\n<h2 id=\"sequelize-association-querying\">Sequelize association querying <a class=\"heading-anchor-permalink\" href=\"#sequelize-association-querying\">#</a></h2>\n<ul>\n<li>Sequelize adds mixins to get associated models of the model being queried. Example:<pre><code class=\"language-js\">User.hasMany(Account);\nAccount.belongsTo(User);\n\n// the following functions are now available (on instances)\nuser.getAccounts();\naccount.getUser();\n</code></pre>\n</li>\n<li>Lazy vs eager load - when a model is queried, it’s associated models are not returned (by default), and another call needs to be made using the mixin. This can be overriden, and the associated model(s) can be fetched in the fetch call itself, by using the <code>include</code> keyword as query option (i.e. object passed as second argument)</li>\n<li>Sequelize does not support direct manipulation of associated models, i.e. it has to be done in explicit steps. Exception - Creation of a new model (with associated models) is possible, if they too are new.</li>\n</ul>\n<p>/rough end</p>\n<p>We wish to have the following relations between the model, in this project.\n<img src=\"../../../../assets/162_Associations-image-1-7ec65c1f.png\" alt=\"\"></p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/d7e46fbcef2b5a7e9d91702001c4fd11c1f0322b\">User and Product association code</a></li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8dad6ea2abe25bdf2956949d5da6c991b5d07a8d\">Populating each model, individually - code</a> <code>afterSync</code> at model level.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c7d20e75ed1c82b5d977ee0d81ff3ecdf44b64ec\">Populating models with association, after sync all</a> <code>afterBulkSync</code> at global level</li>\n</ul>\n<h2 id=\"stuff-learnt-from-the-above\">Stuff learnt from the above <a class=\"heading-anchor-permalink\" href=\"#stuff-learnt-from-the-above\">#</a></h2>\n<ol>\n<li>\n<p>Associated tables have cannot are associated at SQL level too, and hence, have to deleted in proper order. Example - User table cannot be deleted here, if Product table exists.</p>\n</li>\n<li>\n<p><code>afterSync</code> at model level, runs after the model has been synced. The hook is also available at the global level, but here, again, it runs once for each model. Code:</p>\n<pre><code class=\"language-js\">// afterSync at model level\nconst sequelize = require('../util/database.js')\nconst User = sequelize.define('user', {/*columns*/}, \n{\n  hooks: {\n    afterSync: async function (){},\n  }\n})\n</code></pre>\n<pre><code class=\"language-js\">// afterSync at global level\nconst sequelize = new Sequelize('node-complete', 'root', 'password',\n{\n  host: '',...\n  \n  hooks: {\n    afterSync: async function (){}, // runs once for each model\n  }\n})\n\nmodule.exports = sequelize;\n/*\nThis can be source of pesky errors, especially if the hook uses multiple models. The reason is that not all models have been synced, when this runs and 'table does not exist' error may come up (if a has not synced yet).\n\nThe correct way to run code that uses multiple models, after sync, is to use `afterBulkSync`, globally of course.\n*/\n</code></pre>\n</li>\n<li>\n<p>Circular dependency issues: Here I want to pre-populate data, by creating a user with two associated product. To avoid ‘table not found errors’, I use the <code>afterBulkSync</code> hook. The problem now is that I cannot import <code>User</code> and <code>Product</code> model at the top, since I’m in the <code>sequelize</code> (instance) file, which is used by every model.</p>\n<p>One way to fix this is to import the models inside the hook, and not at the top level. This fixes the issue because when the hook runs, all models have synced, and their exports have been cached (Node.js’s default behavior), so importing them is fine now. Code:</p>\n<pre><code class=\"language-js\">// const User = require('./models/User'); ERROR - circular\n\nconst sequelize = new Sequelize('node-complete', 'root', 'password',\n{\n  host: '',...\n  \n  hooks: {\n    afterBulkSync: async function (){\n\t    const User = require('./models/User'); // Okay here\n    },\n  }\n})\n\nmodule.exports = sequelize;\n</code></pre>\n<p>#todo #fixme this is not ideal. Find a way to add the setup code without such nested (not top level) imports.</p>\n</li>\n<li>\n<p>Creating associated models - there are multiple (cosmetic and otherwise) ways to created associated models. There are 3 cases:</p>\n<ol>\n<li>All models exist, independently - Use the <code>add*</code> mixin. Example:<pre><code class=\"language-js\">await user.addProducts([prodInstance1, prodInstance2])\n// FYI: associating PK works too, example: id\n\nawait user.addProduct([prodInstance])\n// PK works fine too\n</code></pre>\n</li>\n<li>Some models don’t exist (assume 1 does not exist) - Use the <code>create*</code> mixin. Example:<pre><code class=\"language-js\">await user.createProduct(prodPlainObject1);\nawait user.createProduct(prodPlainObject2);\n\n// Note: apparently, user.createProducts mixin does not exist\n// there may be other ways to do this in one go, maybe setProducts?. FIXME\n</code></pre>\n</li>\n<li>None of the models exist. A one liner is possible here. Example:<pre><code class=\"language-js\">await User.create(\n{\n\t...userPlainObj,\n\t[Sequelize.Utils.pluralize(Product.name)]: [prodObj1, prodObj2],\n\t// FYI: these could be model instances too\n},\n{ include: [{ model: Product }] }\n);\n// include is the lazy-load control construct of Sequelize, it can be used in queries too\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<p>Automatic dissociation - just make the new association. Why this works: Associating an instance from one associated instance to another (of the same type) will automatically remove the old association. Examples:</p>\n<pre><code class=\"language-js\">const prod1 = await Product...; // assume this is associated with user1\n\nconst user2 = await User...;\nuser2.addProduct(prod1); // prod1 is now associated with user2, not user1.\n</code></pre>\n</li>\n<li>\n<p>Dissociating explicitly - use appropriate mixin. Examples:</p>\n<pre><code class=\"language-js\">// dissociate for 1-1 or 'one' side of 1-N\nawait product.setUser(null);\n// product.removeUser(); // doesn't work. there's no such function. Use set (above).\n\n// dis + destr. Fact: There's no one liner.\nproduct;\nconst userId = product.userId;\nawait product.setUser(null);\nawait User.destroy({ where: { id: userId } });\n\n\n// dissociate for N-M or 'many' side of 1-N\n// PKs or instances both work (can be passed)\nawait user.removeProduct(prodInstance.id); // dissociate + destroy one\n\nawait user.removeProducts([prodInstance1.id, prodInstance2.id]); // dissociate + destroy multiple\n\nawait user.setProducts([]); // dissociates + destroys all, if they are not related to any other instances\n\n// FIXME: setProducts(null) seem to behave the same as setProducts([]), what's the difference?\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>Verifying my understanding <a href=\"/assets/3-SQL-and-ORM-Relations-chatgpt-7cfdfbab-d682-4aba-be6b-7a519c15abb0.pdf\">3-SQL-and-ORM-Relations-chatgpt-7cfdfbab-d682-4aba-be6b-7a519c15abb0.pdf</a></p>\n",
      "id": 79
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/163_Mock_User_Authentication.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/163_Mock_User_Authentication.html",
      "content": "# 163. Mock User Authentication\nCreated Sunday 23 April 2023 at 10:19 am\n\nA very simple and useful way to defer user authentication is to assume the authentication \"PASSES\" for each request. Example - add a middleware that sets the user with Id = 1 as the authenticated user, like so - [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8d1dd904baa13090bf1acfefef045f388473a836\n):\n```js\nconst User = require('..something'); // Sequelize model\n\napp.use((req, res, next) => {\n\treq.user = await User.findByPk(1);\n\tnext();\t\n})\n```\nNote, the convention way to store user data for the duration of the request is to store it inside `req.user`. A more general construct for storing data to be used by upcoming middlewares is to add attributes to `res.locals`.\n\nAt an endpoint, the code will be something like this\n```js\nrouter.get((req, res, next) => {\n\tconst user = req.user;\n\tconst products = await user.findAllProducts({});\n\n\trender(..something);\n})\n```",
      "html": "<h1 id=\"163.-mock-user-authentication\">163. Mock User Authentication <a class=\"heading-anchor-permalink\" href=\"#163.-mock-user-authentication\">#</a></h1>\n<p>Created Sunday 23 April 2023 at 10:19 am</p>\n<p>A very simple and useful way to defer user authentication is to assume the authentication “PASSES” for each request. Example - add a middleware that sets the user with Id = 1 as the authenticated user, like so - <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8d1dd904baa13090bf1acfefef045f388473a836\">code</a>:</p>\n<pre><code class=\"language-js\">const User = require('..something'); // Sequelize model\n\napp.use((req, res, next) =&gt; {\n\treq.user = await User.findByPk(1);\n\tnext();\t\n})\n</code></pre>\n<p>Note, the convention way to store user data for the duration of the request is to store it inside <code>req.user</code>. A more general construct for storing data to be used by upcoming middlewares is to add attributes to <code>res.locals</code>.</p>\n<p>At an endpoint, the code will be something like this</p>\n<pre><code class=\"language-js\">router.get((req, res, next) =&gt; {\n\tconst user = req.user;\n\tconst products = await user.findAllProducts({});\n\n\trender(..something);\n})\n</code></pre>\n",
      "id": 80
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/164_More_Sequelize_methods.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/164_More_Sequelize_methods.html",
      "content": "## 164. More Sequelize methods\nCreated Thursday 27 April 2023 at 01:02 am\n\n## Check existence/count\n```js\n// model\n!!await Product.count(); // some products exist\n\n!!await Product.count({where: {name: 'Sanjar'}}); // given product exists\n\n\n// instance\n// N-M relation or many side of 1-N\n!!await user.countProducts(); // some associated products exist\n\nawait user.hasProduct(42); // simplest, returns bool. Alternatively, use countProducts with 'where' option\n\nawait user.hasProducts([1, 2]); // check associated products exist\n\n\n// for 1-1 or 'one' side of 1-N\n!!await product.userId; // null means absent\n```\n\n\n## Get all associated instances\n```js\n// for N-M or 'many' side of 1-N\n\nawait user.getProducts(); // get all\n\nawait user.getProducts({ where: {id: '2'}} ); // get one product\n\n// for 1-1 or 'one' side of 1-N\nawait product.getUser(); // returns null if non-existent\n```\n\n\n## Update an instance\n```js\nuser;\nuser.name = \"New name\"; /* OR equiv */ user.set({name: \"new name\"})\nawait user.save();\n\n\n// in one go\nawait user.update({name: 'New name', ... /*other fields if needed*/});\n```\n\n\n## List down properties and methods\n```js\n// model from instance\nconst User = user.constructor;\n\n// get methods\nconsole.dir(Object.getPrototypeOf(user)); // instance\nconsole.dir(Object.getPrototypeOf(User)); // model, in this case, stuff like findByPk is at the end (down), greyed out\n\n// instance properties (not methods)\nuser.rawAttributes; // doesn't have the values though\nuser.id; // value\n```\nFIXME: this was a huge headache, why isn't there an inbuilt way to list down all methods\n\n\n## Query success/failure status\n- For Model.someStaticQueryMethod, the response is a number (number of rows affected).\n- For other things like magic methods, and association methods (`.removeProducts()`) the response is not consistent, and therefore there's no guaranteed way to check status.\n\nNote: dissociating a non existent thing doesn't raise an error (e.g. `user.removeProducts(42)` will work fine, even if productId 42 is not associated)",
      "html": "<h2 id=\"164.-more-sequelize-methods\">164. More Sequelize methods <a class=\"heading-anchor-permalink\" href=\"#164.-more-sequelize-methods\">#</a></h2>\n<p>Created Thursday 27 April 2023 at 01:02 am</p>\n<h2 id=\"check-existence%2Fcount\">Check existence/count <a class=\"heading-anchor-permalink\" href=\"#check-existence%2Fcount\">#</a></h2>\n<pre><code class=\"language-js\">// model\n!!await Product.count(); // some products exist\n\n!!await Product.count({where: {name: 'Sanjar'}}); // given product exists\n\n\n// instance\n// N-M relation or many side of 1-N\n!!await user.countProducts(); // some associated products exist\n\nawait user.hasProduct(42); // simplest, returns bool. Alternatively, use countProducts with 'where' option\n\nawait user.hasProducts([1, 2]); // check associated products exist\n\n\n// for 1-1 or 'one' side of 1-N\n!!await product.userId; // null means absent\n</code></pre>\n<h2 id=\"get-all-associated-instances\">Get all associated instances <a class=\"heading-anchor-permalink\" href=\"#get-all-associated-instances\">#</a></h2>\n<pre><code class=\"language-js\">// for N-M or 'many' side of 1-N\n\nawait user.getProducts(); // get all\n\nawait user.getProducts({ where: {id: '2'}} ); // get one product\n\n// for 1-1 or 'one' side of 1-N\nawait product.getUser(); // returns null if non-existent\n</code></pre>\n<h2 id=\"update-an-instance\">Update an instance <a class=\"heading-anchor-permalink\" href=\"#update-an-instance\">#</a></h2>\n<pre><code class=\"language-js\">user;\nuser.name = &quot;New name&quot;; /* OR equiv */ user.set({name: &quot;new name&quot;})\nawait user.save();\n\n\n// in one go\nawait user.update({name: 'New name', ... /*other fields if needed*/});\n</code></pre>\n<h2 id=\"list-down-properties-and-methods\">List down properties and methods <a class=\"heading-anchor-permalink\" href=\"#list-down-properties-and-methods\">#</a></h2>\n<pre><code class=\"language-js\">// model from instance\nconst User = user.constructor;\n\n// get methods\nconsole.dir(Object.getPrototypeOf(user)); // instance\nconsole.dir(Object.getPrototypeOf(User)); // model, in this case, stuff like findByPk is at the end (down), greyed out\n\n// instance properties (not methods)\nuser.rawAttributes; // doesn't have the values though\nuser.id; // value\n</code></pre>\n<p>FIXME: this was a huge headache, why isn’t there an inbuilt way to list down all methods</p>\n<h2 id=\"query-success%2Ffailure-status\">Query success/failure status <a class=\"heading-anchor-permalink\" href=\"#query-success%2Ffailure-status\">#</a></h2>\n<ul>\n<li>For Model.someStaticQueryMethod, the response is a number (number of rows affected).</li>\n<li>For other things like magic methods, and association methods (<code>.removeProducts()</code>) the response is not consistent, and therefore there’s no guaranteed way to check status.</li>\n</ul>\n<p>Note: dissociating a non existent thing doesn’t raise an error (e.g. <code>user.removeProducts(42)</code> will work fine, even if productId 42 is not associated)</p>\n",
      "id": 81
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/165_Heuristics_for_associations_and_ORM_usage.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/165_Heuristics_for_associations_and_ORM_usage.html",
      "content": "# 165. Heuristics for associations and ORM usage\nCreated Thursday 27 April 2023 at 10:22 pm\n\nMoving on with the project. Adding the cart and cartItem models creates the table, but existing data population (product, user) isn't working. [Code - works fine, I've commented the new changes](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/e32916953625da75b65621a81792391eabae90d6)\n\t- Problem: the`cartItem` and `Product` associations are not consistent, *apparently*. Sequelize doesn't raise any errors, but what happens really is that tables are created, but they have no associations (*strange*). [Commit](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/a42d0560de62142833fed6f8eef0ee84c227ffa9)\n\t- Also, the `afterBulkSync` hook, that I use for data population doesn't run either.\n\t- Solution - the association was wrong, so I removed it. I'll rewrite it.\n\n## Associations\n```\n// table, yes\nUser =  {\n    products: [<Product>],\n    cart: <Cart>\n    ...\n}\n\n// tables, yes\nProduct = {\n    user: <User>\n}\n\n// cart, corresponds to use (1-1)\nCart = {\n    items: [{<Product>, quantity: Integer}]\n}\n\n// no other choice but\ncartItem:\ncartId (imp), productId (~imp), quantity (ok)\n```\n\nWords\n- User has a Cart\n- Cart belongs to a user\n- User has a Product\n- Product belongs to a user\n\nProduct may belong to many carts (OK)\n\n- Reaction 1: weird (N-M is fine, but can't store quantity!), go below the level of abstraction of ORM, need a table with (cartId, productId, quantity). Let's name this table 'cartItem'. Tables are like models, go back to ORM abstraction. Talk about cartItem now:\n    - Cart has many cartItems. A cartItem belongs to one cart.\n    - A cartItem is associated with one product. A product may be associated with many cart items (since quantity may differ).\n    All done w.r.t cart, product and cartItem (the incidental model).\n    Let's revise all possible associations with the junction\n    - Cart, cartItem - type of relation understood. Will need *items magic methods for rendering cart page.\n    - Product, cartItem - type of relation understood. But both Product hasOne cartItem and Product.belongsToMany.cartItem seem weird --> go down a level of abstraction.\n        - Table wise, cartItemTable.root + add productId FK seems fine.\n        - So cartItem.belongsTo(Product) and Product.hasMany(cartItems)\n        - Doing both ways since I may wish to find all cartItems a product is present, too, for analytics/recommendations.\n\n    The code works (tables with desired FKs are generated):\n    ```js\n    User.hasMany(Product);\n    Product.belongsTo(User, { onDelete: \"CASCADE\" }); // ignore the onDelete, it's contextual to the project\n\n    User.hasOne(Cart);\n    Cart.belongsTo(User);\n\n    Cart.hasMany(cartItem);\n    cartItem.belongsTo(Cart);\n\n    // using both sides (as is usual) since I wish to have analytics about Product and User who may buy them\n    Product.hasMany(cartItem);\n    cartItem.belongsTo(Product);\n    ```\n\n    This would work, but there's a problem here. The same cartItem interfaces Cart, Product. It's not as if a cartItem exists just in association with a Cart only, or a Product only - all 3 exist. In other words, we are not specifying the junction at all - it's just a table with all columns. The code is wrong. Fix: use the `through` construct.\n\n    Placing FKs by the rule, we get:\n    ```js\n    Cart.belongsTo(Product, { through: cartItem });\n    Product.hasMany(Cart, { through: cartItem });\n    ```\n\n    There's still a problem. Junction model magic methods are not provided in Sequelize. To do, we'll need to write more code. This code will not change the relation, FKs or anything, since we are already correct, but, it will add magic methods.\n\n    ```js\n    Cart.hasMany(cartItems); // for items magic methods\n    cartItem.belongsTo(Cart); // for cart magic methods\n    ```\n\n    Feels weird, yes, but it was like so on first observation too. Lesson: it's relatively easier to write ORM associations, but reading can be very hard.\n- Reaction 2, it's a many many relation, and we can store the quantity in junction table. Simple many-to-many with 'through' model.\n    - Code:\n        ```js\n        cartItem = sequelizeModel{ id, quantity: INTEGER };\n        Cart.belongsToMany(Product, through: { cartItem });\n        Product.belongsToMany(Cart, through: { cartItem });\n        ```\n    - The junction table is usually OK to be hidden, but we have useful data in it (quantity). Also, we will need the cart items individually to show items list. To access cartItem from the Cart, we'll need to get magic methods (getItems, setItems etc), we may also need magic method to get the cart of a cartItem instance, code:\n        ```js\n        Cart.hasMany(cartItems); // for items magic methods\n        cartItem.belongsTo(Cart); // for cart magic methods\n\n        // the code here does not change the relations, since it's redundant essentially. We add it just for the magic methods.\n        ```\n    - We don't add similar code with Products, since products will generally ask for cart it's present in, and not otherwise\n\n---\n### Heuristics for associations, and ORM usage\nThe following are rules I derived from the \"thinking\" above.\nNotes:\n1. First write down in words, simply use 'associated' and specify type of relation (1-1, 1-N, N-M). If there's extra data needed in addition to the association, note this down (we'll need a junction model here).\n2. For the ones where association is simple (no data needed), use the Sequelize defaults.\n3. For the ones where extra data was needed, create junction models. Then consider all possible associations of the junction model(s) with the actual (generally two) models that we were trying to associate. Repeat from #1. Until step 3 is empty.\n4. If at any point, the Sequelize relation wording seems weird/wrong (example: products belonging to or having many cart items), go down a level of abstraction and see in which model table the FKs would be added for each of the possible Sequelize relation. Place the FKs in the correct tables, and choose the Sequelize relation that will ensure this (using the source-target-FK placement rule). Now that we have tables, move back up and create models for the tables. Continue.\n\nJargon:\n1. Sequelize relation - hasOne, belongsTo, hasMany, belongsToMany\n2. source-target-FK - the \"needy\" one stores the FK\n\nNote:\n1. It is implied that table-level data for all models is added appropriately. After then only, do we start thinking about associations.\n\n### Weak check\n> I'll paste a file where I thought and wrote down some rules from the thinking. Verify if it makes sense, and suggest corrections, or things I should consider. Note: I'm starting out with backend development, and therefore deliberately leaving out too nitty gritty details.\n> \n> &mdash; *Sanjar*\n\n>Based on the information you provided, it seems like you have a good understanding of how to define associations between models using Sequelize. The rules you derived from your thinking process are also reasonable and could be useful for future development.\n>\n> One suggestion I would make is to be more explicit about the type of relation (1-1, 1-N, N-M) between the models in your comments, especially for more complex relationships. This will make it easier for you (or other developers) to understand the relationships later on.\n> \n> Another suggestion is to use the through option when defining associations with junction tables, as you mentioned in your example. This can make the code more readable and easier to understand, especially if there are multiple junction tables involved.\n> \n> Overall, it seems like you have a good grasp of the basics of defining associations between models using Sequelize. As you gain more experience, you may find that there are additional nuances or best practices to keep in mind, but these rules should serve as a good starting point.\n> \n> &mdash; *ChatGPT*\n\n\n## General heuristic\n1. Additive steps - \"just code\"\n\t1. Columns - Add model only data (does not participate in associations)\n\t2. Associations - Add the associations using Sequelize default.\n\t3. Incidental models - Create junction models if an association itself has useful data to be stored, e.g. Cart has Products, but also a corresponding quantity for each Product.\n\t4. When in doubt - Whenever the usual named relations feel weird, use the source-target-FK and multiplicity (type of relation - 1-1, 1-N or N-M) to come up with the correction relation.\n2. Subtractive steps - \"cleanup, restrictions\"\n\t1. Named associations - Observe if associations have multiple meanings, e.g. Product is created by a User (seller) and also bought by a User (buyer). Action: Use named-associations/aliases to make the code understandable.\n\t2. Add custom `foreignKey` if they would be better than default `otherModelId` name.\n\t3. Model CRUD restriction - Remove magic methods if they don't make sense on an instance. e.g. Cart and Product may be related, but it makes no sense to have \"creation\" magic methods on a Cart to create Products. Action: `as: false` on the associations removes the creation method from the \"source\" model.\n",
      "html": "<h1 id=\"165.-heuristics-for-associations-and-orm-usage\">165. Heuristics for associations and ORM usage <a class=\"heading-anchor-permalink\" href=\"#165.-heuristics-for-associations-and-orm-usage\">#</a></h1>\n<p>Created Thursday 27 April 2023 at 10:22 pm</p>\n<p>Moving on with the project. Adding the cart and cartItem models creates the table, but existing data population (product, user) isn’t working. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/e32916953625da75b65621a81792391eabae90d6\">Code - works fine, I’ve commented the new changes</a>\n- Problem: the<code>cartItem</code> and <code>Product</code> associations are not consistent, <em>apparently</em>. Sequelize doesn’t raise any errors, but what happens really is that tables are created, but they have no associations (<em>strange</em>). <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/a42d0560de62142833fed6f8eef0ee84c227ffa9\">Commit</a>\n- Also, the <code>afterBulkSync</code> hook, that I use for data population doesn’t run either.\n- Solution - the association was wrong, so I removed it. I’ll rewrite it.</p>\n<h2 id=\"associations\">Associations <a class=\"heading-anchor-permalink\" href=\"#associations\">#</a></h2>\n<pre><code>// table, yes\nUser =  {\n    products: [&lt;Product&gt;],\n    cart: &lt;Cart&gt;\n    ...\n}\n\n// tables, yes\nProduct = {\n    user: &lt;User&gt;\n}\n\n// cart, corresponds to use (1-1)\nCart = {\n    items: [{&lt;Product&gt;, quantity: Integer}]\n}\n\n// no other choice but\ncartItem:\ncartId (imp), productId (~imp), quantity (ok)\n</code></pre>\n<p>Words</p>\n<ul>\n<li>User has a Cart</li>\n<li>Cart belongs to a user</li>\n<li>User has a Product</li>\n<li>Product belongs to a user</li>\n</ul>\n<p>Product may belong to many carts (OK)</p>\n<ul>\n<li>\n<p>Reaction 1: weird (N-M is fine, but can’t store quantity!), go below the level of abstraction of ORM, need a table with (cartId, productId, quantity). Let’s name this table ‘cartItem’. Tables are like models, go back to ORM abstraction. Talk about cartItem now:</p>\n<ul>\n<li>Cart has many cartItems. A cartItem belongs to one cart.</li>\n<li>A cartItem is associated with one product. A product may be associated with many cart items (since quantity may differ).\nAll done w.r.t cart, product and cartItem (the incidental model).\nLet’s revise all possible associations with the junction</li>\n<li>Cart, cartItem - type of relation understood. Will need *items magic methods for rendering cart page.</li>\n<li>Product, cartItem - type of relation understood. But both Product hasOne cartItem and Product.belongsToMany.cartItem seem weird --&gt; go down a level of abstraction.\n<ul>\n<li>Table wise, cartItemTable.root + add productId FK seems fine.</li>\n<li>So cartItem.belongsTo(Product) and Product.hasMany(cartItems)</li>\n<li>Doing both ways since I may wish to find all cartItems a product is present, too, for analytics/recommendations.</li>\n</ul>\n</li>\n</ul>\n<p>The code works (tables with desired FKs are generated):</p>\n<pre><code class=\"language-js\">User.hasMany(Product);\nProduct.belongsTo(User, { onDelete: &quot;CASCADE&quot; }); // ignore the onDelete, it's contextual to the project\n\nUser.hasOne(Cart);\nCart.belongsTo(User);\n\nCart.hasMany(cartItem);\ncartItem.belongsTo(Cart);\n\n// using both sides (as is usual) since I wish to have analytics about Product and User who may buy them\nProduct.hasMany(cartItem);\ncartItem.belongsTo(Product);\n</code></pre>\n<p>This would work, but there’s a problem here. The same cartItem interfaces Cart, Product. It’s not as if a cartItem exists just in association with a Cart only, or a Product only - all 3 exist. In other words, we are not specifying the junction at all - it’s just a table with all columns. The code is wrong. Fix: use the <code>through</code> construct.</p>\n<p>Placing FKs by the rule, we get:</p>\n<pre><code class=\"language-js\">Cart.belongsTo(Product, { through: cartItem });\nProduct.hasMany(Cart, { through: cartItem });\n</code></pre>\n<p>There’s still a problem. Junction model magic methods are not provided in Sequelize. To do, we’ll need to write more code. This code will not change the relation, FKs or anything, since we are already correct, but, it will add magic methods.</p>\n<pre><code class=\"language-js\">Cart.hasMany(cartItems); // for items magic methods\ncartItem.belongsTo(Cart); // for cart magic methods\n</code></pre>\n<p>Feels weird, yes, but it was like so on first observation too. Lesson: it’s relatively easier to write ORM associations, but reading can be very hard.</p>\n</li>\n<li>\n<p>Reaction 2, it’s a many many relation, and we can store the quantity in junction table. Simple many-to-many with ‘through’ model.</p>\n<ul>\n<li>Code:<pre><code class=\"language-js\">cartItem = sequelizeModel{ id, quantity: INTEGER };\nCart.belongsToMany(Product, through: { cartItem });\nProduct.belongsToMany(Cart, through: { cartItem });\n</code></pre>\n</li>\n<li>The junction table is usually OK to be hidden, but we have useful data in it (quantity). Also, we will need the cart items individually to show items list. To access cartItem from the Cart, we’ll need to get magic methods (getItems, setItems etc), we may also need magic method to get the cart of a cartItem instance, code:<pre><code class=\"language-js\">Cart.hasMany(cartItems); // for items magic methods\ncartItem.belongsTo(Cart); // for cart magic methods\n\n// the code here does not change the relations, since it's redundant essentially. We add it just for the magic methods.\n</code></pre>\n</li>\n<li>We don’t add similar code with Products, since products will generally ask for cart it’s present in, and not otherwise</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heuristics-for-associations%2C-and-orm-usage\">Heuristics for associations, and ORM usage <a class=\"heading-anchor-permalink\" href=\"#heuristics-for-associations%2C-and-orm-usage\">#</a></h3>\n<p>The following are rules I derived from the “thinking” above.\nNotes:</p>\n<ol>\n<li>First write down in words, simply use ‘associated’ and specify type of relation (1-1, 1-N, N-M). If there’s extra data needed in addition to the association, note this down (we’ll need a junction model here).</li>\n<li>For the ones where association is simple (no data needed), use the Sequelize defaults.</li>\n<li>For the ones where extra data was needed, create junction models. Then consider all possible associations of the junction model(s) with the actual (generally two) models that we were trying to associate. Repeat from #1. Until step 3 is empty.</li>\n<li>If at any point, the Sequelize relation wording seems weird/wrong (example: products belonging to or having many cart items), go down a level of abstraction and see in which model table the FKs would be added for each of the possible Sequelize relation. Place the FKs in the correct tables, and choose the Sequelize relation that will ensure this (using the source-target-FK placement rule). Now that we have tables, move back up and create models for the tables. Continue.</li>\n</ol>\n<p>Jargon:</p>\n<ol>\n<li>Sequelize relation - hasOne, belongsTo, hasMany, belongsToMany</li>\n<li>source-target-FK - the “needy” one stores the FK</li>\n</ol>\n<p>Note:</p>\n<ol>\n<li>It is implied that table-level data for all models is added appropriately. After then only, do we start thinking about associations.</li>\n</ol>\n<h3 id=\"weak-check\">Weak check <a class=\"heading-anchor-permalink\" href=\"#weak-check\">#</a></h3>\n<blockquote>\n<p>I’ll paste a file where I thought and wrote down some rules from the thinking. Verify if it makes sense, and suggest corrections, or things I should consider. Note: I’m starting out with backend development, and therefore deliberately leaving out too nitty gritty details.</p>\n<p>— <em>Sanjar</em></p>\n</blockquote>\n<blockquote>\n<p>Based on the information you provided, it seems like you have a good understanding of how to define associations between models using Sequelize. The rules you derived from your thinking process are also reasonable and could be useful for future development.</p>\n<p>One suggestion I would make is to be more explicit about the type of relation (1-1, 1-N, N-M) between the models in your comments, especially for more complex relationships. This will make it easier for you (or other developers) to understand the relationships later on.</p>\n<p>Another suggestion is to use the through option when defining associations with junction tables, as you mentioned in your example. This can make the code more readable and easier to understand, especially if there are multiple junction tables involved.</p>\n<p>Overall, it seems like you have a good grasp of the basics of defining associations between models using Sequelize. As you gain more experience, you may find that there are additional nuances or best practices to keep in mind, but these rules should serve as a good starting point.</p>\n<p>— <em>ChatGPT</em></p>\n</blockquote>\n<h2 id=\"general-heuristic\">General heuristic <a class=\"heading-anchor-permalink\" href=\"#general-heuristic\">#</a></h2>\n<ol>\n<li>Additive steps - “just code”\n<ol>\n<li>Columns - Add model only data (does not participate in associations)</li>\n<li>Associations - Add the associations using Sequelize default.</li>\n<li>Incidental models - Create junction models if an association itself has useful data to be stored, e.g. Cart has Products, but also a corresponding quantity for each Product.</li>\n<li>When in doubt - Whenever the usual named relations feel weird, use the source-target-FK and multiplicity (type of relation - 1-1, 1-N or N-M) to come up with the correction relation.</li>\n</ol>\n</li>\n<li>Subtractive steps - “cleanup, restrictions”\n<ol>\n<li>Named associations - Observe if associations have multiple meanings, e.g. Product is created by a User (seller) and also bought by a User (buyer). Action: Use named-associations/aliases to make the code understandable.</li>\n<li>Add custom <code>foreignKey</code> if they would be better than default <code>otherModelId</code> name.</li>\n<li>Model CRUD restriction - Remove magic methods if they don’t make sense on an instance. e.g. Cart and Product may be related, but it makes no sense to have “creation” magic methods on a Cart to create Products. Action: <code>as: false</code> on the associations removes the creation method from the “source” model.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 82
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/166_Moving_on_with_the_project.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/166_Moving_on_with_the_project.html",
      "content": "# 166. Moving on with the project\nCreated Monday 1 May 2023 at 03:15 am\n\n- Named associations - The cart has been added, but there's an issue still. The Product <--> User relation has two meanings - one is for product sellers, and the other for product buyer. Our current code is not wrong, since items added to Cart will be done from the main products page. **This**, however, should be indicated in the code.\n\n\tLet's used named relations for indicating this. Only Product to User code will change:\n\t```js\n\tUser.hasMany(Product, { as: \"seller\" });\n\tProduct.belongsTo(User, { onDelete: \"CASCADE\", as: \"seller\" });\n\t\n\tUser.hasOne(Cart, { as: \"buyer\" });\n\tCart.belongsTo(User, { as: \"buyer\" });\n\t```\n\t[Actual code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/b0616fba264f0d2360f208d35254b64b37931c83)\n- Query restriction - Upon exploration, I can see that the Cart has a `createProduct` magic method, since it's we related the two (Cart and Product) to list down (read) products in a Cart, and also add existing Products (created by sellers). But it makes no sense to create a Product using a Cart, and we should remove magic properties of this kind from the Cart model. **This is a usual thing in Sequelize projects, since Sequelize, by default assumes that two models can do all CRUD ops once related**. This \"creation\" behavior can be turned off using the following syntax:\n\t```js\n\tUser.hasOne(Cart); // no change\n\tCart.belongsTo(User); // no change\n\n\tCart.belongsToMany(Products, { through: CartItem, as: false }); // removes magic methods from Cart (about Product creation)\n\t\n\tProducts.belongsToMany(Cart, { through: CartItem }); // no change\n\t```\n\tNote, the Cart model still has the `add*` and `set*` methods, and the `get*` methods of course.\n\tFIXME: does not work, the createProduct magic method is still there.\n- Update the sample populater. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/e2452b496f2926fa70a4a13ee580a2363363fd80)\n- Update cart get, and post endpoints. Also fix the `add=true` bug in the EJS files. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/34d6bf733832713de6e8e72c46d909e5ce3cc49f)\n\n\n## Concise way create associated model along with junction model data\nThere is a more concise way to create associated models, if `through` was used. We don't need to work directly at the junction model level. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/eca88369ea1ad5afb8c6807ac6bc9c59a4c03a0c)\n```js\n// Context: existing associations\nCart.belongsToMany(Product, { through: CartItem }); \n\nCart.hasMany(CartItem); // to get magic methods for CartItem\nCartItem.belongsTo(Cart); // to get magic methods for Cart\n\n\n// verbose\nconst newCartItem = await cart.createCartItem({ quantity: 1 });\nawait newCartItem.setProduct(prodId);\nawait newCartItem.save();\n\n// or, equivalently\nawait cart.addProduct(prodId, { through: { quantity: 1 } }); // concise\n```\n\n## Moving on - adding orders\n- An order is a \"frozen\" instance of a cart. \n- A user may have multiple users at the same time. \n- An order has CartItems.\n- An order should survive even if the Cart it was created from gets deleted.\n\nSo basically, it is a cart, but with additional data like shipping address, and other things. Also, we need to do a deep copy when the user checks out, since the cart may change. For this deep copy, we should create an instance method, so as to keep the logic in the model, instead of the controller - \"fat models/skinny controllers\" best practice.\n\n- Let's try to think of the order association. User and Order is a simple 1-N relation. For the CartItems and Products, I think \"associations\" are not the way to do this, since an \"Order\" is a table of \"frozen\" records, and associated instances could change - which does not make sense. **Copying** is the main thing, instead of **association**.\n\nSince we're copying, we'll not get any magic methods (even read only ones, since an Order is a frozen Cart), which implies that we'll need to write the code our-self. We could get over this by having a 1-1 relation between Order and Cart, with a \"hook\" that observes any changes in `Cart` (assume we have created an associated `Order` already), and whenever there is, it copies and dissociates that part (`CartItem`) of the Cart. Now, the `CartItem` is related to `Order` instead of a `Cart`, and we never do any updation from the `Order`, this means that the `CartItem` is effectively frozen. The advantage is that we can access the `Product`, and also have magic methods. **This is impossible using hooks** in Sequelize, since hooks here are only at the model level, and cannot observe/react to changes in the associated models. \n**So**, I'll duplicate the code for `Order`, as in `Cart`. We'll just create copies of `CartItem`s that belong to just `Order`. \nMaybe I'll create duplicate `CartItem` and create the `OrderItem` model, this is not required however, if we indicate that `CartItem` is used in both `Order` and `Cart`.  The `Cart` will be null for a `CartItem` belonging to an `Order`, of course.\n\n*Trade-offs*: we get the magic methods, but have to duplication, and memory consumption is twice.\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/b6d9bef7c370453f7e808ed4aec974ca4a10052d)\n\nNext:\n- Add the Order button - [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c0004337d7bed8a4f77a2d4542068b54515b68c3)\n- Orders list page - [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c82a41a99cd2077b4e593428ed7ba11b867d3bed)\n- Order detail page - [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/19b3e61959d09e8e31fb51b8d79bc131eb2f97e4)\n- Various fixes - BE and FE\n\n## Fetching model instances with associated models (eager load)\nUse the `includes` option, and provide the models to be fetched in an array, like so:\n```js\nCart.belongsToMany(Product, { through: CartItem });\nProduct.belongsToMany(Cart, { through: CartItem });\n\nconst productsOfCart = await cart.getProducts({\n\tincludes: { model: [CartItem] }, // syntax\n});\n\nproduct[0].cartItem.xyz; // works\n```\nThis is like the concise creation (including junction) data way. That one (\"write\") used `through`, this one (\"read\") uses `includes`. Note: the key is plural.\n\nI've used this for both cases in this app. Check code at this [point in time](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/tree/d90536c66d48a0a31bc778bd9b778c77fe35ec96) - global search for \"includes:\".",
      "html": "<h1 id=\"166.-moving-on-with-the-project\">166. Moving on with the project <a class=\"heading-anchor-permalink\" href=\"#166.-moving-on-with-the-project\">#</a></h1>\n<p>Created Monday 1 May 2023 at 03:15 am</p>\n<ul>\n<li>\n<p>Named associations - The cart has been added, but there’s an issue still. The Product &lt;–&gt; User relation has two meanings - one is for product sellers, and the other for product buyer. Our current code is not wrong, since items added to Cart will be done from the main products page. <strong>This</strong>, however, should be indicated in the code.</p>\n<p>Let’s used named relations for indicating this. Only Product to User code will change:</p>\n<pre><code class=\"language-js\">User.hasMany(Product, { as: &quot;seller&quot; });\nProduct.belongsTo(User, { onDelete: &quot;CASCADE&quot;, as: &quot;seller&quot; });\n\nUser.hasOne(Cart, { as: &quot;buyer&quot; });\nCart.belongsTo(User, { as: &quot;buyer&quot; });\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/b0616fba264f0d2360f208d35254b64b37931c83\">Actual code</a></p>\n</li>\n<li>\n<p>Query restriction - Upon exploration, I can see that the Cart has a <code>createProduct</code> magic method, since it’s we related the two (Cart and Product) to list down (read) products in a Cart, and also add existing Products (created by sellers). But it makes no sense to create a Product using a Cart, and we should remove magic properties of this kind from the Cart model. <strong>This is a usual thing in Sequelize projects, since Sequelize, by default assumes that two models can do all CRUD ops once related</strong>. This “creation” behavior can be turned off using the following syntax:</p>\n<pre><code class=\"language-js\">User.hasOne(Cart); // no change\nCart.belongsTo(User); // no change\n\nCart.belongsToMany(Products, { through: CartItem, as: false }); // removes magic methods from Cart (about Product creation)\n\nProducts.belongsToMany(Cart, { through: CartItem }); // no change\n</code></pre>\n<p>Note, the Cart model still has the <code>add*</code> and <code>set*</code> methods, and the <code>get*</code> methods of course.\nFIXME: does not work, the createProduct magic method is still there.</p>\n</li>\n<li>\n<p>Update the sample populater. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/e2452b496f2926fa70a4a13ee580a2363363fd80\">Code</a></p>\n</li>\n<li>\n<p>Update cart get, and post endpoints. Also fix the <code>add=true</code> bug in the EJS files. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/34d6bf733832713de6e8e72c46d909e5ce3cc49f\">Code</a></p>\n</li>\n</ul>\n<h2 id=\"concise-way-create-associated-model-along-with-junction-model-data\">Concise way create associated model along with junction model data <a class=\"heading-anchor-permalink\" href=\"#concise-way-create-associated-model-along-with-junction-model-data\">#</a></h2>\n<p>There is a more concise way to create associated models, if <code>through</code> was used. We don’t need to work directly at the junction model level. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/eca88369ea1ad5afb8c6807ac6bc9c59a4c03a0c\">Code</a></p>\n<pre><code class=\"language-js\">// Context: existing associations\nCart.belongsToMany(Product, { through: CartItem }); \n\nCart.hasMany(CartItem); // to get magic methods for CartItem\nCartItem.belongsTo(Cart); // to get magic methods for Cart\n\n\n// verbose\nconst newCartItem = await cart.createCartItem({ quantity: 1 });\nawait newCartItem.setProduct(prodId);\nawait newCartItem.save();\n\n// or, equivalently\nawait cart.addProduct(prodId, { through: { quantity: 1 } }); // concise\n</code></pre>\n<h2 id=\"moving-on---adding-orders\">Moving on - adding orders <a class=\"heading-anchor-permalink\" href=\"#moving-on---adding-orders\">#</a></h2>\n<ul>\n<li>An order is a “frozen” instance of a cart.</li>\n<li>A user may have multiple users at the same time.</li>\n<li>An order has CartItems.</li>\n<li>An order should survive even if the Cart it was created from gets deleted.</li>\n</ul>\n<p>So basically, it is a cart, but with additional data like shipping address, and other things. Also, we need to do a deep copy when the user checks out, since the cart may change. For this deep copy, we should create an instance method, so as to keep the logic in the model, instead of the controller - “fat models/skinny controllers” best practice.</p>\n<ul>\n<li>Let’s try to think of the order association. User and Order is a simple 1-N relation. For the CartItems and Products, I think “associations” are not the way to do this, since an “Order” is a table of “frozen” records, and associated instances could change - which does not make sense. <strong>Copying</strong> is the main thing, instead of <strong>association</strong>.</li>\n</ul>\n<p>Since we’re copying, we’ll not get any magic methods (even read only ones, since an Order is a frozen Cart), which implies that we’ll need to write the code our-self. We could get over this by having a 1-1 relation between Order and Cart, with a “hook” that observes any changes in <code>Cart</code> (assume we have created an associated <code>Order</code> already), and whenever there is, it copies and dissociates that part (<code>CartItem</code>) of the Cart. Now, the <code>CartItem</code> is related to <code>Order</code> instead of a <code>Cart</code>, and we never do any updation from the <code>Order</code>, this means that the <code>CartItem</code> is effectively frozen. The advantage is that we can access the <code>Product</code>, and also have magic methods. <strong>This is impossible using hooks</strong> in Sequelize, since hooks here are only at the model level, and cannot observe/react to changes in the associated models.\n<strong>So</strong>, I’ll duplicate the code for <code>Order</code>, as in <code>Cart</code>. We’ll just create copies of <code>CartItem</code>s that belong to just <code>Order</code>.\nMaybe I’ll create duplicate <code>CartItem</code> and create the <code>OrderItem</code> model, this is not required however, if we indicate that <code>CartItem</code> is used in both <code>Order</code> and <code>Cart</code>.  The <code>Cart</code> will be null for a <code>CartItem</code> belonging to an <code>Order</code>, of course.</p>\n<p><em>Trade-offs</em>: we get the magic methods, but have to duplication, and memory consumption is twice.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/b6d9bef7c370453f7e808ed4aec974ca4a10052d\">Code</a></p>\n<p>Next:</p>\n<ul>\n<li>Add the Order button - <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c0004337d7bed8a4f77a2d4542068b54515b68c3\">code</a></li>\n<li>Orders list page - <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/c82a41a99cd2077b4e593428ed7ba11b867d3bed\">code</a></li>\n<li>Order detail page - <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/19b3e61959d09e8e31fb51b8d79bc131eb2f97e4\">code</a></li>\n<li>Various fixes - BE and FE</li>\n</ul>\n<h2 id=\"fetching-model-instances-with-associated-models-(eager-load)\">Fetching model instances with associated models (eager load) <a class=\"heading-anchor-permalink\" href=\"#fetching-model-instances-with-associated-models-(eager-load)\">#</a></h2>\n<p>Use the <code>includes</code> option, and provide the models to be fetched in an array, like so:</p>\n<pre><code class=\"language-js\">Cart.belongsToMany(Product, { through: CartItem });\nProduct.belongsToMany(Cart, { through: CartItem });\n\nconst productsOfCart = await cart.getProducts({\n\tincludes: { model: [CartItem] }, // syntax\n});\n\nproduct[0].cartItem.xyz; // works\n</code></pre>\n<p>This is like the concise creation (including junction) data way. That one (“write”) used <code>through</code>, this one (“read”) uses <code>includes</code>. Note: the key is plural.</p>\n<p>I’ve used this for both cases in this app. Check code at this <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/tree/d90536c66d48a0a31bc778bd9b778c77fe35ec96\">point in time</a> - global search for “includes:”.</p>\n",
      "id": 83
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/173_Resetting_the_cart.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/173_Resetting_the_cart.html",
      "content": "# 173. Resetting the cart\nCreated Tuesday 2 May 2023 at 03:24 am\n\n- Add a clear cart button - [code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/11935a5ccccb1839aab5d73a3a5d93fb28d5899c). Learnt Sequelize dissociates and destroys associated instances by default?, if they are unrelated to any other model/instance.",
      "html": "<h1 id=\"173.-resetting-the-cart\">173. Resetting the cart <a class=\"heading-anchor-permalink\" href=\"#173.-resetting-the-cart\">#</a></h1>\n<p>Created Tuesday 2 May 2023 at 03:24 am</p>\n<ul>\n<li>Add a clear cart button - <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/11935a5ccccb1839aab5d73a3a5d93fb28d5899c\">code</a>. Learnt Sequelize dissociates and destroys associated instances by default?, if they are unrelated to any other model/instance.</li>\n</ul>\n",
      "id": 84
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/174_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/11_Understanding_Sequelize/174_Wrap_up.html",
      "content": "# 174. Wrap up\nCreated Tuesday 2 May 2023 at 03:27 am\n\n1. SQL and databases - an organized way to work with persistent data.\n2. ORMs are declarative (code in JS instead of SQL) tools that allow us to to database operations (reads/writes) without writing raw SQL.\n\t- They are a partial layer of abstraction, i.e. one does need to think in terms of FKs, tables, indexes when *creating models*, at least. To be exact, the model creation ORM code may need to be thought from the SQL level.\n\t- Query part of ORMs are a very practical abstraction though.\n3. We explored Sequelize here\n\t- It supports associations\n\t- It supports hooks, but only at the model level. It does not have constructs for observing and reacting when a associated model changes.\n\t- Model have methods/attributes\n\t\t- Fixed (will always be present) - both static and instance methods/properties. Examples: `User.create()`, `User.fetchAll()`\n\t\t- Magic ones - these are methods/properties that mostly get attached based on the model name, and associated models. They are determined by associations the model has. Example: `user.createCart()`, `user.getProducts()`\n\n![](../../../../assets/174_Wrap_up-image-1-7ec65c1f.png)\n\n## Conclusion\n- I explored Sequelize significantly, but there's much to explore. Read the docs\n- Sequelize is not comfortable to work with, and error messages, API reference is bad. Will likely use some other ORM.",
      "html": "<h1 id=\"174.-wrap-up\">174. Wrap up <a class=\"heading-anchor-permalink\" href=\"#174.-wrap-up\">#</a></h1>\n<p>Created Tuesday 2 May 2023 at 03:27 am</p>\n<ol>\n<li>SQL and databases - an organized way to work with persistent data.</li>\n<li>ORMs are declarative (code in JS instead of SQL) tools that allow us to to database operations (reads/writes) without writing raw SQL.\n<ul>\n<li>They are a partial layer of abstraction, i.e. one does need to think in terms of FKs, tables, indexes when <em>creating models</em>, at least. To be exact, the model creation ORM code may need to be thought from the SQL level.</li>\n<li>Query part of ORMs are a very practical abstraction though.</li>\n</ul>\n</li>\n<li>We explored Sequelize here\n<ul>\n<li>It supports associations</li>\n<li>It supports hooks, but only at the model level. It does not have constructs for observing and reacting when a associated model changes.</li>\n<li>Model have methods/attributes\n<ul>\n<li>Fixed (will always be present) - both static and instance methods/properties. Examples: <code>User.create()</code>, <code>User.fetchAll()</code></li>\n<li>Magic ones - these are methods/properties that mostly get attached based on the model name, and associated models. They are determined by associations the model has. Example: <code>user.createCart()</code>, <code>user.getProducts()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"../../../../assets/174_Wrap_up-image-1-7ec65c1f.png\" alt=\"\"></p>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<ul>\n<li>I explored Sequelize significantly, but there’s much to explore. Read the docs</li>\n<li>Sequelize is not comfortable to work with, and error messages, API reference is bad. Will likely use some other ORM.</li>\n</ul>\n",
      "id": 85
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/176_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/176_Module_Introduction.html",
      "content": "# 176. Module Introduction\nCreated Tuesday 2 May 2023 at 03:45 am\n\n- SQL databases are popular and time tested. We studied a little bit about SQL databases (MySQL) and spent significant time exploring Sequelize (an ORM for SQL databases).\n- NoSQL databases are also quite popular, but are more recent than SQL databases.\n- MongoDB is the most popular NoSQL database. We'll have an introduction to this.\n- We'll learn how to use the MongoDB Driver, which is a way to interact with MongoDB databases from a Node.js app.",
      "html": "<h1 id=\"176.-module-introduction\">176. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#176.-module-introduction\">#</a></h1>\n<p>Created Tuesday 2 May 2023 at 03:45 am</p>\n<ul>\n<li>SQL databases are popular and time tested. We studied a little bit about SQL databases (MySQL) and spent significant time exploring Sequelize (an ORM for SQL databases).</li>\n<li>NoSQL databases are also quite popular, but are more recent than SQL databases.</li>\n<li>MongoDB is the most popular NoSQL database. We’ll have an introduction to this.</li>\n<li>We’ll learn how to use the MongoDB Driver, which is a way to interact with MongoDB databases from a Node.js app.</li>\n</ul>\n",
      "id": 86
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/177_What_is_MongoDB.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/177_What_is_MongoDB.html",
      "content": "# 177. What is MongoDB\nCreated Tuesday 2 May 2023 at 03:50 am\n\n## Name, origins\nMongoDB is a NoSQL database created by the company of the same name.\n\nThe 'mongo' in the name implies 'Humongous'.\n![](../../../../assets/177_What_is_MongoDB-image-1-6f05df1a.png)\n\n## Why\n- To store and work with large amounts of data\n- To have very fast read and write speeds (compared to SQL databases)\n- To store somewhat unstructured/dynamic data, i.e. data whose schema cannot be defined fully and/or must be arbitrarily extensible. **This is not an exact statement**\n\n\n## How it works\n![](../../../../assets/177_What_is_MongoDB-image-2-6f05df1a.png)",
      "html": "<h1 id=\"177.-what-is-mongodb\">177. What is MongoDB <a class=\"heading-anchor-permalink\" href=\"#177.-what-is-mongodb\">#</a></h1>\n<p>Created Tuesday 2 May 2023 at 03:50 am</p>\n<h2 id=\"name%2C-origins\">Name, origins <a class=\"heading-anchor-permalink\" href=\"#name%2C-origins\">#</a></h2>\n<p>MongoDB is a NoSQL database created by the company of the same name.</p>\n<p>The ‘mongo’ in the name implies ‘Humongous’.\n<img src=\"../../../../assets/177_What_is_MongoDB-image-1-6f05df1a.png\" alt=\"\"></p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<ul>\n<li>To store and work with large amounts of data</li>\n<li>To have very fast read and write speeds (compared to SQL databases)</li>\n<li>To store somewhat unstructured/dynamic data, i.e. data whose schema cannot be defined fully and/or must be arbitrarily extensible. <strong>This is not an exact statement</strong></li>\n</ul>\n<h2 id=\"how-it-works\">How it works <a class=\"heading-anchor-permalink\" href=\"#how-it-works\">#</a></h2>\n<p><img src=\"../../../../assets/177_What_is_MongoDB-image-2-6f05df1a.png\" alt=\"\"></p>\n",
      "id": 87
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/178_Relations_in_NoSQL_MongoDB.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/178_Relations_in_NoSQL_MongoDB.html",
      "content": "# 178. Relations in NoSQL (MongoDB)\nCreated Friday 19 May 2023 at 12:50 am\n\n- Partial duplication is allowed, here. This means we store and fetch the data in almost exactly the form our app needs and don't need to do joins at request time. This makes reads/writes very fast.\n- Even though duplication is allowed, and is popular, MongoDB does provide ways to have relations:\n\t1. Nested/embedded documents - preferable if scope of duplication is low\n\t2. References - preferable if scope of duplication is high (*it may get out hand*)",
      "html": "<h1 id=\"178.-relations-in-nosql-(mongodb)\">178. Relations in NoSQL (MongoDB) <a class=\"heading-anchor-permalink\" href=\"#178.-relations-in-nosql-(mongodb)\">#</a></h1>\n<p>Created Friday 19 May 2023 at 12:50 am</p>\n<ul>\n<li>Partial duplication is allowed, here. This means we store and fetch the data in almost exactly the form our app needs and don’t need to do joins at request time. This makes reads/writes very fast.</li>\n<li>Even though duplication is allowed, and is popular, MongoDB does provide ways to have relations:\n<ol>\n<li>Nested/embedded documents - preferable if scope of duplication is low</li>\n<li>References - preferable if scope of duplication is high (<em>it may get out hand</em>)</li>\n</ol>\n</li>\n</ul>\n",
      "id": 88
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/179_Setting_up_MongoDB.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/179_Setting_up_MongoDB.html",
      "content": "# 179. Setting up MongoDB\nCreated Friday 19 May 2023 at 01:10 am\n\n## Installing MongoDB (the database)\n- We can install MongoDB locally.\n- However, we'll use a cloud environment - from the official MongoDB website. This will be helpful if we wish to deploy our app. MongoDB has a good enough free tier, which is sufficient for this course.\n\n\n## Cloud setup\n- Sign in\n- Create a user, and a cluster. Make sure the user has both read and write permissions.\n- Check IP whitelist etc, and add your PC's IP address. We'll need to do this for exploring MongoDB in our Node.js apps locally.\n\n\n## Local (project) setup - `mongodb` driver package\n- Install the mongoDB driver, by running `npm install mongodb`\n- This handles the network connections to MongoDB Atlas for us, and also provides simple API methods to do so.",
      "html": "<h1 id=\"179.-setting-up-mongodb\">179. Setting up MongoDB <a class=\"heading-anchor-permalink\" href=\"#179.-setting-up-mongodb\">#</a></h1>\n<p>Created Friday 19 May 2023 at 01:10 am</p>\n<h2 id=\"installing-mongodb-(the-database)\">Installing MongoDB (the database) <a class=\"heading-anchor-permalink\" href=\"#installing-mongodb-(the-database)\">#</a></h2>\n<ul>\n<li>We can install MongoDB locally.</li>\n<li>However, we’ll use a cloud environment - from the official MongoDB website. This will be helpful if we wish to deploy our app. MongoDB has a good enough free tier, which is sufficient for this course.</li>\n</ul>\n<h2 id=\"cloud-setup\">Cloud setup <a class=\"heading-anchor-permalink\" href=\"#cloud-setup\">#</a></h2>\n<ul>\n<li>Sign in</li>\n<li>Create a user, and a cluster. Make sure the user has both read and write permissions.</li>\n<li>Check IP whitelist etc, and add your PC’s IP address. We’ll need to do this for exploring MongoDB in our Node.js apps locally.</li>\n</ul>\n<h2 id=\"local-(project)-setup---mongodb-driver-package\">Local (project) setup - <code>mongodb</code> driver package <a class=\"heading-anchor-permalink\" href=\"#local-(project)-setup---mongodb-driver-package\">#</a></h2>\n<ul>\n<li>Install the mongoDB driver, by running <code>npm install mongodb</code></li>\n<li>This handles the network connections to MongoDB Atlas for us, and also provides simple API methods to do so.</li>\n</ul>\n",
      "id": 89
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/181_Creating_and_managing_the_connection.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/181_Creating_and_managing_the_connection.html",
      "content": "# 181. Creating and managing the connection\nCreated Friday 19 May 2023 at 01:28 am\n\n\n## Creating the database connection\n- Creating a connection. Copy the SRV address (from the website) and add the password (use an [env variable](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/226967b78f8741422a48e901144ea69cc60470cf))\n\t```js\n\t// file /util/database.js\n\tconst mongodb = require('mongodb');\n\tconst MongoClient = mongodb.MongoClient;\n\n\tconst mongoConnect = callback => {\n\t  MongoClient.connect(\n\t    'mongodb+srv://maximilian:9u4biljMQc4jjqbe@cluster0-ntrwp.mongodb.net/test?retryWrites=true'\n\t  )// Copied from the site (SRV address)\n\t    .then(client => {\n\t      console.log('Connected!');\n\t      callback(client);\n\t    })\n\t    .catch(err => {\n\t      console.log(err);\n\t    });\n\t};\n\t\n\tmodule.exports = mongoConnect; // is a function\n\t```\n- Use the connection code in main app file (`app.js`)\n\t```js\n\tconst mongoConnect = require('./util/database.js')\n\n\t// express code\n\n\t// start express from inside the mongoConnect callback\n\tmongoConnect((client) => {\n\t\tconsole.log(client);\n\t\tapp.listen(3000);\n\t});\n\t```\n\n[Code till here](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a3b84f8383ce314699f83539f86e89dde6dfa767)\n\n\n## Better connection management\nCurrently, we need to use util/database.js for every DB operation. This is not ideal, since this means creating a new connection for each op. Also, we won't be able to close the connection.\n\nLet's change the database util to prevent this.\n```js\nconst mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\n\nlet _db;\n\nconst mongoConnect = callback => {\n  MongoClient.connect(\n    'mongodb+srv://maximilian:9u4biljMQc4jjqbe@cluster0-ntrwp.mongodb.net/shop?retryWrites=true'\n  )\n    .then(client => {\n      console.log('Connected!');\n      _db = client.db();\n      callback();\n    })\n    .catch(err => {\n      console.log(err);\n      throw err;\n    });\n};\n\nconst getDb = () => {\n  if (_db) {\n    return _db;\n  }\n  throw 'No database found!';\n};\n\nexports.mongoConnect = mongoConnect;\nexports.getDb = getDb;\n```\nThis way we'll import and try to *reuse* the connection (`getDb`). If this throws an error, we'll create a fresh connection (`mongoConnect`) and then use `getDb`.\n\nThis is a good pattern. [Code/Commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65)\n\n\n## Create on first interaction - philosophy of MongoDB\nSequelize, or SQL requires the database or table to be present before a create op can be done. This is not the case with MongoDB. A create call in MongoDB will create all preceding \"layers\" automatically, if they don't exist.",
      "html": "<h1 id=\"181.-creating-and-managing-the-connection\">181. Creating and managing the connection <a class=\"heading-anchor-permalink\" href=\"#181.-creating-and-managing-the-connection\">#</a></h1>\n<p>Created Friday 19 May 2023 at 01:28 am</p>\n<h2 id=\"creating-the-database-connection\">Creating the database connection <a class=\"heading-anchor-permalink\" href=\"#creating-the-database-connection\">#</a></h2>\n<ul>\n<li>Creating a connection. Copy the SRV address (from the website) and add the password (use an <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/226967b78f8741422a48e901144ea69cc60470cf\">env variable</a>)<pre><code class=\"language-js\">// file /util/database.js\nconst mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\n\nconst mongoConnect = callback =&gt; {\n  MongoClient.connect(\n    'mongodb+srv://maximilian:9u4biljMQc4jjqbe@cluster0-ntrwp.mongodb.net/test?retryWrites=true'\n  )// Copied from the site (SRV address)\n    .then(client =&gt; {\n      console.log('Connected!');\n      callback(client);\n    })\n    .catch(err =&gt; {\n      console.log(err);\n    });\n};\n\nmodule.exports = mongoConnect; // is a function\n</code></pre>\n</li>\n<li>Use the connection code in main app file (<code>app.js</code>)<pre><code class=\"language-js\">const mongoConnect = require('./util/database.js')\n\n// express code\n\n// start express from inside the mongoConnect callback\nmongoConnect((client) =&gt; {\n\tconsole.log(client);\n\tapp.listen(3000);\n});\n</code></pre>\n</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a3b84f8383ce314699f83539f86e89dde6dfa767\">Code till here</a></p>\n<h2 id=\"better-connection-management\">Better connection management <a class=\"heading-anchor-permalink\" href=\"#better-connection-management\">#</a></h2>\n<p>Currently, we need to use util/database.js for every DB operation. This is not ideal, since this means creating a new connection for each op. Also, we won’t be able to close the connection.</p>\n<p>Let’s change the database util to prevent this.</p>\n<pre><code class=\"language-js\">const mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\n\nlet _db;\n\nconst mongoConnect = callback =&gt; {\n  MongoClient.connect(\n    'mongodb+srv://maximilian:9u4biljMQc4jjqbe@cluster0-ntrwp.mongodb.net/shop?retryWrites=true'\n  )\n    .then(client =&gt; {\n      console.log('Connected!');\n      _db = client.db();\n      callback();\n    })\n    .catch(err =&gt; {\n      console.log(err);\n      throw err;\n    });\n};\n\nconst getDb = () =&gt; {\n  if (_db) {\n    return _db;\n  }\n  throw 'No database found!';\n};\n\nexports.mongoConnect = mongoConnect;\nexports.getDb = getDb;\n</code></pre>\n<p>This way we’ll import and try to <em>reuse</em> the connection (<code>getDb</code>). If this throws an error, we’ll create a fresh connection (<code>mongoConnect</code>) and then use <code>getDb</code>.</p>\n<p>This is a good pattern. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65\">Code/Commit</a></p>\n<h2 id=\"create-on-first-interaction---philosophy-of-mongodb\">Create on first interaction - philosophy of MongoDB <a class=\"heading-anchor-permalink\" href=\"#create-on-first-interaction---philosophy-of-mongodb\">#</a></h2>\n<p>Sequelize, or SQL requires the database or table to be present before a create op can be done. This is not the case with MongoDB. A create call in MongoDB will create all preceding “layers” automatically, if they don’t exist.</p>\n",
      "id": 90
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/183_Creating_a_collection.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/183_Creating_a_collection.html",
      "content": "# 183. Creating a collection\nCreated Friday 19 May 2023 at 01:30 am\n\n## Using `insertOne` create a collection\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/f9e55013b1b4b11597552fff9e5848b17a958702)\n```js\nconst { mongoConnect, getDb } = require(\"./util/database.js\");\n\nmongoConnect((client) => {\n  const db = getDb();\n\n  // database setup code, if needed\n  await db\n\t  .collection('trial-collection')\n\t  .insertOne({ name: 'Woods', friendName: 'Mason' });\n\t  \n  app.listen(3000);\n});\n\n```\n```js\n// at any other place (the code will run after server starts anyway)\nconst { getDb } = require(\"./util/database.js\");\n\nlet db = getDb();\nif(!db) mongoConnect();\nwhile(!db) db = getDb();\n\ndb.collection('trial-collection')\n  .insertOne({name: 'Woods', friendName: 'Mason'})\n  .then (console.log)\n  .catch(console.log);\n```\nWe used `insertOne` here to create a record.\n\nBy default all collections will be added to the `test` database (as opposed to admin or local). All 3 databases are created automatically by MongoDB. Not an important thing as of now, since we'll mostly work at the collections level. FIXME: what's the use of these 3 databases.",
      "html": "<h1 id=\"183.-creating-a-collection\">183. Creating a collection <a class=\"heading-anchor-permalink\" href=\"#183.-creating-a-collection\">#</a></h1>\n<p>Created Friday 19 May 2023 at 01:30 am</p>\n<h2 id=\"using-insertone-create-a-collection\">Using <code>insertOne</code> create a collection <a class=\"heading-anchor-permalink\" href=\"#using-insertone-create-a-collection\">#</a></h2>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/f9e55013b1b4b11597552fff9e5848b17a958702\">Code</a></p>\n<pre><code class=\"language-js\">const { mongoConnect, getDb } = require(&quot;./util/database.js&quot;);\n\nmongoConnect((client) =&gt; {\n  const db = getDb();\n\n  // database setup code, if needed\n  await db\n\t  .collection('trial-collection')\n\t  .insertOne({ name: 'Woods', friendName: 'Mason' });\n\t  \n  app.listen(3000);\n});\n\n</code></pre>\n<pre><code class=\"language-js\">// at any other place (the code will run after server starts anyway)\nconst { getDb } = require(&quot;./util/database.js&quot;);\n\nlet db = getDb();\nif(!db) mongoConnect();\nwhile(!db) db = getDb();\n\ndb.collection('trial-collection')\n  .insertOne({name: 'Woods', friendName: 'Mason'})\n  .then (console.log)\n  .catch(console.log);\n</code></pre>\n<p>We used <code>insertOne</code> here to create a record.</p>\n<p>By default all collections will be added to the <code>test</code> database (as opposed to admin or local). All 3 databases are created automatically by MongoDB. Not an important thing as of now, since we’ll mostly work at the collections level. FIXME: what’s the use of these 3 databases.</p>\n",
      "id": 91
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/184_Creating_models_and_instances.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/184_Creating_models_and_instances.html",
      "content": "# 184. Creating the models\nCreated Tuesday 23 May 2023 at 12:59 am\n\n## Use a `class` for models\nSince we don't have a SQL database now, the Sequelize models won't work. Let's create the Product model again (we'll use a `class` again, just like we did earlier when using files (`fs`) for storage):\n```js\nclass Product {\n\tconstructor(price, title, description, ...)\n\t{\n\t\tthis.price = price;\n\t\tthis.title = title;\n\t\t...\n\t}\n\n\tsave() {\n\t\t// interact with MongoDB\n\t}\n}\n```\n\n\n## Create model instances\nJust add \"create\" method to model `class`. The method will use database util (`getDb`) and interact with the database.\n```js\nconst getDb = require('./util/database.js').getDb;\n\nclass Product {\n\t// some code here\n\n\tasync create() {\n\t// assume no stupid errors occur\n\n\t  const db = getDb();\n\t  const result =\n\t  await db.collection('products').insertOne(this);\n\n\t// result has an `_id` that was autoassigned by MongoDB\n\t// Not stored at the top level though, so result._id won't have it\n\t}\n}\n```\n[Code/commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/0adc534cb2c0e40538fdb51b5c3dd7b01fbcf605) - uses `findOne` (to check for existing to avoid duplicate).\n\nWe used `insertOne`, `findOne` here. \nLearn more about CRUD ops - https://www.mongodb.com/docs/manual/crud/\n\nNote: \n- `insertOne` ignores `_id` if passed to it. This is a very convenient feature.\n- We need to comment out code that won't work, of course - in controllers and routes.",
      "html": "<h1 id=\"184.-creating-the-models\">184. Creating the models <a class=\"heading-anchor-permalink\" href=\"#184.-creating-the-models\">#</a></h1>\n<p>Created Tuesday 23 May 2023 at 12:59 am</p>\n<h2 id=\"use-a-class-for-models\">Use a <code>class</code> for models <a class=\"heading-anchor-permalink\" href=\"#use-a-class-for-models\">#</a></h2>\n<p>Since we don’t have a SQL database now, the Sequelize models won’t work. Let’s create the Product model again (we’ll use a <code>class</code> again, just like we did earlier when using files (<code>fs</code>) for storage):</p>\n<pre><code class=\"language-js\">class Product {\n\tconstructor(price, title, description, ...)\n\t{\n\t\tthis.price = price;\n\t\tthis.title = title;\n\t\t...\n\t}\n\n\tsave() {\n\t\t// interact with MongoDB\n\t}\n}\n</code></pre>\n<h2 id=\"create-model-instances\">Create model instances <a class=\"heading-anchor-permalink\" href=\"#create-model-instances\">#</a></h2>\n<p>Just add “create” method to model <code>class</code>. The method will use database util (<code>getDb</code>) and interact with the database.</p>\n<pre><code class=\"language-js\">const getDb = require('./util/database.js').getDb;\n\nclass Product {\n\t// some code here\n\n\tasync create() {\n\t// assume no stupid errors occur\n\n\t  const db = getDb();\n\t  const result =\n\t  await db.collection('products').insertOne(this);\n\n\t// result has an `_id` that was autoassigned by MongoDB\n\t// Not stored at the top level though, so result._id won't have it\n\t}\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/0adc534cb2c0e40538fdb51b5c3dd7b01fbcf605\">Code/commit</a> - uses <code>findOne</code> (to check for existing to avoid duplicate).</p>\n<p>We used <code>insertOne</code>, <code>findOne</code> here.\nLearn more about CRUD ops - <a href=\"https://www.mongodb.com/docs/manual/crud/\">https://www.mongodb.com/docs/manual/crud/</a></p>\n<p>Note:</p>\n<ul>\n<li><code>insertOne</code> ignores <code>_id</code> if passed to it. This is a very convenient feature.</li>\n<li>We need to comment out code that won’t work, of course - in controllers and routes.</li>\n</ul>\n",
      "id": 92
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/185_MongoDB_Compass.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/185_MongoDB_Compass.html",
      "content": "# 185. MongoDB Compass\nCreated Friday 19 May 2023 at 02:06 am\n\n## What is it\nMongoDB Compass is desktop GUI app that helps in exploring MongoDB databases. It's available for Win, Mac, Linux\n\n*The MySQL workbench analogue for MongoDB*\n\n\n## Setup\nInstall it, and connect to the cluster we created on the cloud. Do more config if needed.\n\n\n## Going forward\nWe'll use Compass for learning MongoDB and debugging our app\n",
      "html": "<h1 id=\"185.-mongodb-compass\">185. MongoDB Compass <a class=\"heading-anchor-permalink\" href=\"#185.-mongodb-compass\">#</a></h1>\n<p>Created Friday 19 May 2023 at 02:06 am</p>\n<h2 id=\"what-is-it\">What is it <a class=\"heading-anchor-permalink\" href=\"#what-is-it\">#</a></h2>\n<p>MongoDB Compass is desktop GUI app that helps in exploring MongoDB databases. It’s available for Win, Mac, Linux</p>\n<p><em>The MySQL workbench analogue for MongoDB</em></p>\n<h2 id=\"setup\">Setup <a class=\"heading-anchor-permalink\" href=\"#setup\">#</a></h2>\n<p>Install it, and connect to the cluster we created on the cloud. Do more config if needed.</p>\n<h2 id=\"going-forward\">Going forward <a class=\"heading-anchor-permalink\" href=\"#going-forward\">#</a></h2>\n<p>We’ll use Compass for learning MongoDB and debugging our app</p>\n",
      "id": 93
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/186_Fetching_products_multiple.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/186_Fetching_products_multiple.html",
      "content": "# 186. Fetching products (multiple)\nCreated Friday 19 May 2023 at 02:08 am\n\n## Fetching all products (for index page)\nUse `.find()`\n```js\nclass Product {\n\t// some code here\n\t\n  static fetchAll() {\n    const db = getDb();\n    return db\n      .collection('products')\n      .find() // has generator behavior by default\n      .toArray() // to avoid generator behavior of `find` and get back a proper JS array\n      .then(products => {\n        console.log(products);\n        return products;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n}\n```\n\nSyntax for find all:\n```js\n// to get all - pass nothing or `{}` to .find\nconst products = \n\t  await db.collection('collection_name').find().toArray();\n```\n\nNote: \n1. `.next()` - `.find` in MongoDB has generator like behavior, and supports a chainable function `.next()` that returns the next \"page\" (as in pagination). This is relevant since databases could have millions of documents. Syntax: `.find().next()`\n2. `.toArray()` - `.find()` in MongoDB has a chainable function `toArray`  that converts the response to a proper JS array. This is needed since the default `.find()` is not a proper array.\n3. A document returned here has attributes added as simple keys - `Object.keys`, JSON and spread operator work just fine. This is also true for other queries.\n\n[Add fetch all to Product model - Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/11d58dff5301c53960d70b81fb4f5fccdb056c8b)",
      "html": "<h1 id=\"186.-fetching-products-(multiple)\">186. Fetching products (multiple) <a class=\"heading-anchor-permalink\" href=\"#186.-fetching-products-(multiple)\">#</a></h1>\n<p>Created Friday 19 May 2023 at 02:08 am</p>\n<h2 id=\"fetching-all-products-(for-index-page)\">Fetching all products (for index page) <a class=\"heading-anchor-permalink\" href=\"#fetching-all-products-(for-index-page)\">#</a></h2>\n<p>Use <code>.find()</code></p>\n<pre><code class=\"language-js\">class Product {\n\t// some code here\n\t\n  static fetchAll() {\n    const db = getDb();\n    return db\n      .collection('products')\n      .find() // has generator behavior by default\n      .toArray() // to avoid generator behavior of `find` and get back a proper JS array\n      .then(products =&gt; {\n        console.log(products);\n        return products;\n      })\n      .catch(err =&gt; {\n        console.log(err);\n      });\n  }\n}\n</code></pre>\n<p>Syntax for find all:</p>\n<pre><code class=\"language-js\">// to get all - pass nothing or `{}` to .find\nconst products = \n\t  await db.collection('collection_name').find().toArray();\n</code></pre>\n<p>Note:</p>\n<ol>\n<li><code>.next()</code> - <code>.find</code> in MongoDB has generator like behavior, and supports a chainable function <code>.next()</code> that returns the next “page” (as in pagination). This is relevant since databases could have millions of documents. Syntax: <code>.find().next()</code></li>\n<li><code>.toArray()</code> - <code>.find()</code> in MongoDB has a chainable function <code>toArray</code>  that converts the response to a proper JS array. This is needed since the default <code>.find()</code> is not a proper array.</li>\n<li>A document returned here has attributes added as simple keys - <code>Object.keys</code>, JSON and spread operator work just fine. This is also true for other queries.</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/11d58dff5301c53960d70b81fb4f5fccdb056c8b\">Add fetch all to Product model - Code</a></p>\n",
      "id": 94
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/187_Fetching_product_single.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/187_Fetching_product_single.html",
      "content": "# 187. Fetching product (single)\nCreated Tuesday 30 May 2023 at 02:07 am\n\n\n## `findOne`\nUse `.findOne(criteriaOr_id)`\n\n```js\nclass Product {\n// some code here\n  static async findById(prodId) {\n\tconst db = getDb();\n\t\n\tconst product = \n\tawait db.collection('products')\n\t\t.findOne({ _id: prodId }); // _id is inside an Object\n\n\t// .findOne(prodId); // also works, matched against `_id`\n\t\n\treturn product;\n  }\n}\n```\n\nSyntax for find one:\n```js\nconst product = await db.collection('products').findOne({ _id: prodId });\n```\n\n**This doesn't work, though. Let's explore why.**\n\n\n## `_id`argument should be an object\nThis code doesn't work because `_id` stored inside a MongoDB document is not of type string, and therefore comparison (equal) won't work. \n\n`_id` is actually a special object called `ObjectId`, specified by MongoDB. It's not a native JS feature. \n![](../../../../assets/187_Fetching_product_single-image-1-6f05df1a.png)\n\nWhy is the `_id` like this? Reasons:\n1. It is easy to work with in BSON\n2. Has the property of uniqueness\n3. `_id` generated after (in time) has higher alphabetical rank than ones created before.\n4. And more..\n\n*In short, you need to pass `_id` of type `ObjectId` for `findOne` to work.*\n\n## Fixing the code - `mongodb.ObjectId`\n- MongoDB provides a utility method to create `_id` (i.e. `ObjectId`) objects.\n```js\n...find({ _id: prodId }) // doesn't work\n// example prodId: \"646a3b5193d6e61bddc26c17\"\n\n\n// fix: new mongodb.ObjectId()\nconst mongodb = require(\"mongodb\");\n...find({ _id: new mongodb.ObjectId(prodId)}); // works now\n```\n\n- Read is easy, `product._id` will work fine, where `product` is the fetched Product.\n- The `ObjectId` constructor is polymorphic and idempotent - it accepts both `ObjectId` or string equivalent.\n\n[Product details page](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/800c8de7b75f875d77e382d80eddf7cb4696a148)\n\n\n## Pass `_id` directly\nIf the criteria is only `_id`, passing it directly (instead of in an object) is also OK. `find` and `findOne` both support this.\n\nAvoid this if possible, since explicit is better. Otherwise the code will be hard to work with for new comers like my experience with Rails.\n\nExample:\n```js\n// .find\n// _id in object\nconst allProducts = await db\n        .collection(\"products\")\n        .find({_id: new mongodb.ObjectId(\"6474f8ae83090103435e19d2\") }) // as object\n        .toArray();\n\n// is the same as - _id passed directly\nconst allProducts = await db\n        .collection(\"products\")\n        .find(new mongodb.ObjectId(\"6474f8ae83090103435e19d2\")) // direct\n        .toArray();\n\n```\n\n```js\n// .fineOne\n// _id in object\nconst product = await db\n      .collection(\"products\")\n      .findOne({ _id: new mongodb.ObjectId(prodId) }); // object\n\n// is the same as - _id passed directly\n const product = await db\n      .collection(\"products\")\n      .findOne(new mongodb.ObjectId(prodId)); // direct\n```",
      "html": "<h1 id=\"187.-fetching-product-(single)\">187. Fetching product (single) <a class=\"heading-anchor-permalink\" href=\"#187.-fetching-product-(single)\">#</a></h1>\n<p>Created Tuesday 30 May 2023 at 02:07 am</p>\n<h2 id=\"findone\"><code>findOne</code> <a class=\"heading-anchor-permalink\" href=\"#findone\">#</a></h2>\n<p>Use <code>.findOne(criteriaOr_id)</code></p>\n<pre><code class=\"language-js\">class Product {\n// some code here\n  static async findById(prodId) {\n\tconst db = getDb();\n\t\n\tconst product = \n\tawait db.collection('products')\n\t\t.findOne({ _id: prodId }); // _id is inside an Object\n\n\t// .findOne(prodId); // also works, matched against `_id`\n\t\n\treturn product;\n  }\n}\n</code></pre>\n<p>Syntax for find one:</p>\n<pre><code class=\"language-js\">const product = await db.collection('products').findOne({ _id: prodId });\n</code></pre>\n<p><strong>This doesn’t work, though. Let’s explore why.</strong></p>\n<h2 id=\"_idargument-should-be-an-object\"><code>_id</code>argument should be an object <a class=\"heading-anchor-permalink\" href=\"#_idargument-should-be-an-object\">#</a></h2>\n<p>This code doesn’t work because <code>_id</code> stored inside a MongoDB document is not of type string, and therefore comparison (equal) won’t work.</p>\n<p><code>_id</code> is actually a special object called <code>ObjectId</code>, specified by MongoDB. It’s not a native JS feature.\n<img src=\"../../../../assets/187_Fetching_product_single-image-1-6f05df1a.png\" alt=\"\"></p>\n<p>Why is the <code>_id</code> like this? Reasons:</p>\n<ol>\n<li>It is easy to work with in BSON</li>\n<li>Has the property of uniqueness</li>\n<li><code>_id</code> generated after (in time) has higher alphabetical rank than ones created before.</li>\n<li>And more…</li>\n</ol>\n<p><em>In short, you need to pass <code>_id</code> of type <code>ObjectId</code> for <code>findOne</code> to work.</em></p>\n<h2 id=\"fixing-the-code---mongodb.objectid\">Fixing the code - <code>mongodb.ObjectId</code> <a class=\"heading-anchor-permalink\" href=\"#fixing-the-code---mongodb.objectid\">#</a></h2>\n<ul>\n<li>MongoDB provides a utility method to create <code>_id</code> (i.e. <code>ObjectId</code>) objects.</li>\n</ul>\n<pre><code class=\"language-js\">...find({ _id: prodId }) // doesn't work\n// example prodId: &quot;646a3b5193d6e61bddc26c17&quot;\n\n\n// fix: new mongodb.ObjectId()\nconst mongodb = require(&quot;mongodb&quot;);\n...find({ _id: new mongodb.ObjectId(prodId)}); // works now\n</code></pre>\n<ul>\n<li>Read is easy, <code>product._id</code> will work fine, where <code>product</code> is the fetched Product.</li>\n<li>The <code>ObjectId</code> constructor is polymorphic and idempotent - it accepts both <code>ObjectId</code> or string equivalent.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/800c8de7b75f875d77e382d80eddf7cb4696a148\">Product details page</a></p>\n<h2 id=\"pass-_id-directly\">Pass <code>_id</code> directly <a class=\"heading-anchor-permalink\" href=\"#pass-_id-directly\">#</a></h2>\n<p>If the criteria is only <code>_id</code>, passing it directly (instead of in an object) is also OK. <code>find</code> and <code>findOne</code> both support this.</p>\n<p>Avoid this if possible, since explicit is better. Otherwise the code will be hard to work with for new comers like my experience with Rails.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">// .find\n// _id in object\nconst allProducts = await db\n        .collection(&quot;products&quot;)\n        .find({_id: new mongodb.ObjectId(&quot;6474f8ae83090103435e19d2&quot;) }) // as object\n        .toArray();\n\n// is the same as - _id passed directly\nconst allProducts = await db\n        .collection(&quot;products&quot;)\n        .find(new mongodb.ObjectId(&quot;6474f8ae83090103435e19d2&quot;)) // direct\n        .toArray();\n\n</code></pre>\n<pre><code class=\"language-js\">// .fineOne\n// _id in object\nconst product = await db\n      .collection(&quot;products&quot;)\n      .findOne({ _id: new mongodb.ObjectId(prodId) }); // object\n\n// is the same as - _id passed directly\n const product = await db\n      .collection(&quot;products&quot;)\n      .findOne(new mongodb.ObjectId(prodId)); // direct\n</code></pre>\n",
      "id": 95
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_2_Getting_selected_attributes_only.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_2_Getting_selected_attributes_only.html",
      "content": "# 188.2. Getting selected attributes only\nCreated Saturday 17 June 2023 at 06:28 pm\n\n## What's this, SQL equivalent\nThe SQL equivalent would be: `SELECT * FROM someTable` vs `SELECT x, y from someTable`.\n\n\n## 1. With `.find`\nTo get selected attributes with `.find` - chain the `.project` function with arguments.\n\n```js\ndb.collection('myCollection')\n  .find(/* some code here */)\n  .project({ myAttribute: `0_or_1`});\n```\n\n\n## 2. With `.findOne`\nTo get selected attributes with `.findOne` - pass the projection document as under `projection` attribute, in the config (second) argument.\n\n```js\ndb.collection('myCollection')\n  .findOne(\n    { /* some code here */ },\n    {\n\t  projection: { myAttribute1: `0_or_1` }\n    }\n  )\n```\nNote: Chaining to `.findOne` won't work.\n\n\n## More about the projection document (object)\nConsider the following model instance (mongodb document).\n```js\n{\n  title: '',\n  price: '',\n  description: '',\n  imageUrl: '',\n}\n```\n\nThere are 3 simple variations:\n1. Default - `{}`. Return all. This is the same as if projection wasn't used.\n2. Return only - all `1`\n\t```js\n\t{ price: 1, title: 1 }\n\n\t// return object will be\n\t// { _id: ..., price: ..., title: ...}\n\t```\n3. Skip - all `0`\n\t```js\n\t{ price: 0, title: 0 }\n\t// return object will be\n\t// { _id: ..., description: ..., imageUrl: ...}\n\t```\n\nNote:\n- `_id` will be present always, except if it's suppressed explicitly in the projection. `{ _id: 0 }`\n- Passing `_id` as `0` or `1` is allowed in both return (all `1`) and skip (all `0`) documents. No error.\n- A document should be all `1` or all `0` not both. `_id` is an exception, as discussed.",
      "html": "<h1 id=\"188.2.-getting-selected-attributes-only\">188.2. Getting selected attributes only <a class=\"heading-anchor-permalink\" href=\"#188.2.-getting-selected-attributes-only\">#</a></h1>\n<p>Created Saturday 17 June 2023 at 06:28 pm</p>\n<h2 id=\"what%E2%80%99s-this%2C-sql-equivalent\">What’s this, SQL equivalent <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-this%2C-sql-equivalent\">#</a></h2>\n<p>The SQL equivalent would be: <code>SELECT * FROM someTable</code> vs <code>SELECT x, y from someTable</code>.</p>\n<h2 id=\"1.-with-.find\">1. With <code>.find</code> <a class=\"heading-anchor-permalink\" href=\"#1.-with-.find\">#</a></h2>\n<p>To get selected attributes with <code>.find</code> - chain the <code>.project</code> function with arguments.</p>\n<pre><code class=\"language-js\">db.collection('myCollection')\n  .find(/* some code here */)\n  .project({ myAttribute: `0_or_1`});\n</code></pre>\n<h2 id=\"2.-with-.findone\">2. With <code>.findOne</code> <a class=\"heading-anchor-permalink\" href=\"#2.-with-.findone\">#</a></h2>\n<p>To get selected attributes with <code>.findOne</code> - pass the projection document as under <code>projection</code> attribute, in the config (second) argument.</p>\n<pre><code class=\"language-js\">db.collection('myCollection')\n  .findOne(\n    { /* some code here */ },\n    {\n\t  projection: { myAttribute1: `0_or_1` }\n    }\n  )\n</code></pre>\n<p>Note: Chaining to <code>.findOne</code> won’t work.</p>\n<h2 id=\"more-about-the-projection-document-(object)\">More about the projection document (object) <a class=\"heading-anchor-permalink\" href=\"#more-about-the-projection-document-(object)\">#</a></h2>\n<p>Consider the following model instance (mongodb document).</p>\n<pre><code class=\"language-js\">{\n  title: '',\n  price: '',\n  description: '',\n  imageUrl: '',\n}\n</code></pre>\n<p>There are 3 simple variations:</p>\n<ol>\n<li>Default - <code>{}</code>. Return all. This is the same as if projection wasn’t used.</li>\n<li>Return only - all <code>1</code><pre><code class=\"language-js\">{ price: 1, title: 1 }\n\n// return object will be\n// { _id: ..., price: ..., title: ...}\n</code></pre>\n</li>\n<li>Skip - all <code>0</code><pre><code class=\"language-js\">{ price: 0, title: 0 }\n// return object will be\n// { _id: ..., description: ..., imageUrl: ...}\n</code></pre>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li><code>_id</code> will be present always, except if it’s suppressed explicitly in the projection. <code>{ _id: 0 }</code></li>\n<li>Passing <code>_id</code> as <code>0</code> or <code>1</code> is allowed in both return (all <code>1</code>) and skip (all <code>0</code>) documents. No error.</li>\n<li>A document should be all <code>1</code> or all <code>0</code> not both. <code>_id</code> is an exception, as discussed.</li>\n</ul>\n",
      "id": 96
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_Edit_and_delete_product.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/188_Edit_and_delete_product.html",
      "content": "# 188. Edit and delete product\nCreated Sunday 7 May 2023 at 10:01 am\n\n## Adding `_id` to model (tip)\nAdd a `_id` attribute to the Product model. This is a nice thing to do since it limits the need create `ObjectId`, to just inside model, and away from the app code.\n\nAlso, since `ObjectId` has the `.toString` method, template engines will (atuomatically) work just fine with `_id` being an object.\n\nNote: make sure the `_id` is null if absent from the constructor, since `new ObjectId(null)` is still a valid `ObjectId`. A weird quirk from MongoDB, but fine.\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/60df5e3f7377c3dc883553ea93bc08f78f4001d9)\n\n\n## Delete product\n`deleteOne`\n\nAdd **delete** method to the Product model.\nExample:\n```js\nconst mongodb = require(\"mongodb\");\n\nclass Product {\n  constructror(id) {\n    this.id = id;\n    // ... some code\n  }\n\n  delete() {\n    const idObject = new mongodb.ObjectId(this.id);\n    const db = getDb();\n\n    return db\n      .collection(\"products\")\n      .deleteOne({ _id: idObject })\n\n      .then((result) => {\n        console.log(result);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // ... some code\n}\n```\n\nNote:\n- Delete one - `deleteOne()`\n- Delete many - `deleteMany()`\n- The argument is the criteria or `_id`, just like with `.find` and `.findOne`.\n\n[Delete Product - code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/b4f51b381f6abb037125121b543579a8707c5436)\n\n\n## Edit product\n`updateOne` - this one is special since it takes a payload argument.\n\nLet's add **edit** methods to the Product model.\nExample:\n```js\nconst mongodb = require(\"mongodb\");\n\nclass Product {\n  constructror(id) {\n    this.id = id;\n    // ... some code\n  }\n  // ... some code\n\n  update() {\n    const idObject = new mongodb.ObjectId(this.id);\n    const db = getDb();\n\n    const updatePayload = { ...this };\n    delete updatePayload._id; // since this is a string now\n\n    return db\n      .collection(\"products\")\n      .updateOne({ _id: idObject }, { $set: updatePayload })\n\n      .then((result) => {\n        console.log(result);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n}\n```\n\n- **Update** (`updateOne()`) takes two arguments\n  1.  A query filter. Example - `_id` or criteria.\n  2.  Second is an object, which should at-least have `$set` key with the update payload. MongoDB does \"merged updation\" by default. \n\nNote:\n- It's ok to send `_id` in payload, but it must be an object not a string and must be the same as the existing one (FIXME check that it must be same or not).\n- `_id` in payload (if sent) should be of type `ObjectId`, otherwise mongodb will throw an error. Obvious.\n\n[Edit Product - code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/bc69c7c8498808f173ba6216ebc437af247e330e)",
      "html": "<h1 id=\"188.-edit-and-delete-product\">188. Edit and delete product <a class=\"heading-anchor-permalink\" href=\"#188.-edit-and-delete-product\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 10:01 am</p>\n<h2 id=\"adding-_id-to-model-(tip)\">Adding <code>_id</code> to model (tip) <a class=\"heading-anchor-permalink\" href=\"#adding-_id-to-model-(tip)\">#</a></h2>\n<p>Add a <code>_id</code> attribute to the Product model. This is a nice thing to do since it limits the need create <code>ObjectId</code>, to just inside model, and away from the app code.</p>\n<p>Also, since <code>ObjectId</code> has the <code>.toString</code> method, template engines will (atuomatically) work just fine with <code>_id</code> being an object.</p>\n<p>Note: make sure the <code>_id</code> is null if absent from the constructor, since <code>new ObjectId(null)</code> is still a valid <code>ObjectId</code>. A weird quirk from MongoDB, but fine.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/60df5e3f7377c3dc883553ea93bc08f78f4001d9\">Code</a></p>\n<h2 id=\"delete-product\">Delete product <a class=\"heading-anchor-permalink\" href=\"#delete-product\">#</a></h2>\n<p><code>deleteOne</code></p>\n<p>Add <strong>delete</strong> method to the Product model.\nExample:</p>\n<pre><code class=\"language-js\">const mongodb = require(&quot;mongodb&quot;);\n\nclass Product {\n  constructror(id) {\n    this.id = id;\n    // ... some code\n  }\n\n  delete() {\n    const idObject = new mongodb.ObjectId(this.id);\n    const db = getDb();\n\n    return db\n      .collection(&quot;products&quot;)\n      .deleteOne({ _id: idObject })\n\n      .then((result) =&gt; {\n        console.log(result);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n  }\n  // ... some code\n}\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>Delete one - <code>deleteOne()</code></li>\n<li>Delete many - <code>deleteMany()</code></li>\n<li>The argument is the criteria or <code>_id</code>, just like with <code>.find</code> and <code>.findOne</code>.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/b4f51b381f6abb037125121b543579a8707c5436\">Delete Product - code</a></p>\n<h2 id=\"edit-product\">Edit product <a class=\"heading-anchor-permalink\" href=\"#edit-product\">#</a></h2>\n<p><code>updateOne</code> - this one is special since it takes a payload argument.</p>\n<p>Let’s add <strong>edit</strong> methods to the Product model.\nExample:</p>\n<pre><code class=\"language-js\">const mongodb = require(&quot;mongodb&quot;);\n\nclass Product {\n  constructror(id) {\n    this.id = id;\n    // ... some code\n  }\n  // ... some code\n\n  update() {\n    const idObject = new mongodb.ObjectId(this.id);\n    const db = getDb();\n\n    const updatePayload = { ...this };\n    delete updatePayload._id; // since this is a string now\n\n    return db\n      .collection(&quot;products&quot;)\n      .updateOne({ _id: idObject }, { $set: updatePayload })\n\n      .then((result) =&gt; {\n        console.log(result);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n  }\n}\n</code></pre>\n<ul>\n<li><strong>Update</strong> (<code>updateOne()</code>) takes two arguments\n<ol>\n<li>A query filter. Example - <code>_id</code> or criteria.</li>\n<li>Second is an object, which should at-least have <code>$set</code> key with the update payload. MongoDB does “merged updation” by default.</li>\n</ol>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>It’s ok to send <code>_id</code> in payload, but it must be an object not a string and must be the same as the existing one (FIXME check that it must be same or not).</li>\n<li><code>_id</code> in payload (if sent) should be of type <code>ObjectId</code>, otherwise mongodb will throw an error. Obvious.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/bc69c7c8498808f173ba6216ebc437af247e330e\">Edit Product - code</a></p>\n",
      "id": 97
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/189_Updating_attributes_nested_paths_remotely.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/189_Updating_attributes_nested_paths_remotely.html",
      "content": "# Updating attributes, nested paths remotely\nCreated Saturday 10 June 2023 at 04:45 pm\n\nBy remote, I mean we never fetch the document from the DB. We just make a call to update.\n\n## 1. Update some (or just one) attribute\nNothing new here. Just that `updateOne` does \"merged updation\", so partial attributes are OK.\n```js\nconst sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n};\n\nconst productId = ...// given\n\n// goal: update the 'description' field, without fetching Product from db\n\nawait db.collection(\"products\")\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) }, \n\t\t\t{ $set: { \"description\": 'new description', title: 'new title' } }\n\t\t);\n```\n\n\n## 2. Update nested/embedded attribute\nUse dot path as key\n```js\nconst sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n\n  seller: { name: '', phoneNumber: '' }\n};\n\nconst productId = ...// given\n\n// goal: update the seller 'phoneNumber' field, without fetching Product from db\n\nawait db.collection(\"products\")\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) }, \n\t\t\t{ $set: { \"seller.phoneNumber\": 'new number' } }\n\t\t);\n```",
      "html": "<h1 id=\"updating-attributes%2C-nested-paths-remotely\">Updating attributes, nested paths remotely <a class=\"heading-anchor-permalink\" href=\"#updating-attributes%2C-nested-paths-remotely\">#</a></h1>\n<p>Created Saturday 10 June 2023 at 04:45 pm</p>\n<p>By remote, I mean we never fetch the document from the DB. We just make a call to update.</p>\n<h2 id=\"1.-update-some-(or-just-one)-attribute\">1. Update some (or just one) attribute <a class=\"heading-anchor-permalink\" href=\"#1.-update-some-(or-just-one)-attribute\">#</a></h2>\n<p>Nothing new here. Just that <code>updateOne</code> does “merged updation”, so partial attributes are OK.</p>\n<pre><code class=\"language-js\">const sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n};\n\nconst productId = ...// given\n\n// goal: update the 'description' field, without fetching Product from db\n\nawait db.collection(&quot;products&quot;)\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) }, \n\t\t\t{ $set: { &quot;description&quot;: 'new description', title: 'new title' } }\n\t\t);\n</code></pre>\n<h2 id=\"2.-update-nested%2Fembedded-attribute\">2. Update nested/embedded attribute <a class=\"heading-anchor-permalink\" href=\"#2.-update-nested%2Fembedded-attribute\">#</a></h2>\n<p>Use dot path as key</p>\n<pre><code class=\"language-js\">const sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n\n  seller: { name: '', phoneNumber: '' }\n};\n\nconst productId = ...// given\n\n// goal: update the seller 'phoneNumber' field, without fetching Product from db\n\nawait db.collection(&quot;products&quot;)\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) }, \n\t\t\t{ $set: { &quot;seller.phoneNumber&quot;: 'new number' } }\n\t\t);\n</code></pre>\n",
      "id": 98
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/190_Mongodb_array_ops.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/190_Mongodb_array_ops.html",
      "content": "# 190. MongoDB array ops\nCreated Saturday 10 June 2023 at 05:49 pm\n\n## Arrays in MongoDB\nArrays are a first class structure in MongoDB unlike SQL databases. This means that values in documents can be arrays. This provides a lot of flexibility.\n\nHowever, try to enforce limits to array array size, otherwise it could hurt performance. If an array is too large, it may be better to create a new collection altogether with each array element storing as a reference (via an attribute) to the original document.\n\n## 1. Update element in array\nSuppose we have the following situation\n```js\nconst sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n\n  versions: [{ name: 'name1', title: '' }, { name: 'name2', title: '' }]\n};\n\nconst productId = ...// given\n\n// goal: update the title field\n```\n\n### 1.1 Update element in array - if position is known\nUse the index (number) in path (dot notation )\n```js\n// change the 2nd version, i.e. arr[1]\n\nawait db.collection(\"products\")\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) },\n\t\t\t{ $set: { \"versions.1.title\": 'new title' } }\n\t\t);\n```\n\n### 1.2 Update element in array - by criteria\nThere are two steps here:\n1. Locate the parent document - same as before, using `_id`\n2. Locate element of nested array by criteria. This has a special notation: `path_to_array.elementProperty: eqValueOrComplexCriteria`. This is added to the filter (i.e. first argument of `update*`) itself. Memory aid - skip the index in the dot notation.\n3. Update the element by using `$` as the index (which we don't know of course, since we never fetch the array or any element). The setting is done usually, using `$set`. Of course, we can still update other parts of the document in the same query.\n```js\n// change the `title` of version whose 'name' is 'name1'\n\nawait db.collection(\"products\")\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId), \"versions.name\": \"name1\" },\n\t\t\t{ $set: { \"versions.$.title\": 'new title' } }\n\t\t);\n```\n\n\n## 2. Append to array -`$push`\nThis can be done by fetching the document, mutating the array and then `.save()` ing it. But this is expensive and sometimes not practical (if the array is very large).\n\n`$set` won't help here. We need to use the `$push` operator for this.\n```js\n// situation\nconst myDocument = await db.collection('myCollection').findOne('...');\n// myDocumet looks like this\n// { _id: ..., scores: [3, 1, 4, 1] }\n\n// goal: to add '5' to this array, without fetching the whole array\n\n// code\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id }, { $push: { scores: 5 } });\n```\n\n```js\n// syntax\n.updateOne({...}, { $push: { 'path_to_array': value_to_append } })\n```\nNote:\n- A new array will be created if it doesn't exist. Nice!\n- Replace `$push` by `$addToSet` to add element only if doesn't exist.\n- Of course, we can push into independent arrays with a single `$push` in the same query. Example:\n\t```js\n\tawait\n\tdb.collection('myCollection')\n\t  .updateOne(\n\t\t  { _id: myDocument._id },\n\t\t  { $push: { scores: 5, fouls: 1 } }\n\t  );\n\t// adds `5`, to the scores array, and `1` to the fouls array\n\t```\n\n\n## 3. Delete from array - `$pull`\nFetching, mutating and `.updateOne` is a way to do this, but it may be expensive or impractical to do.\n\n`$set` won't help here. We need to use the `$pull` operator for this.\n```js\n// situation\nconst myDocument = await db.collection('myCollection').findOne('...');\n/* myDocument looks like this\n{\n  _id: ...,\n  scores: [31, 12, 43, 17],\n  fouls: [\n    { byUser: 'vader' , star: 2 },\n    { byUser: 'thanos', star: 5 }\n  ]\n}\n*/\n\n\n// goal: remove `43` from 'scores', without fetching the whole array\n// code\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id }, { $pull: { scores: 43 } });\n\n\n// goal: remove `fouls` element(s) with `byUser` 'thanos'\n// again, it's simple - here's it's just one user\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id },\n\t\t  { $pull: { fouls: { byUser: 'thanos'} } }\n\t  );\n```\n\n```js\n// syntax\n.updateOne({...}, \n    { $pull: { 'path_to_array': eqValueOrComplexCriteria } }\n)\n```\nNote:\n- Single query - Just like with `$push`, deletions can be carried out in independent arrays with a single `$pull` in the same query.\n- Piece-wise query - The `path_to_array` has to be a path till array only, doing something like `{ fouls.byUser: 'thanos' }` is an invalid criteria.\nWarning:\n - `$pull` will remove *all* elements that match the criteria. Possible pitfall - the `updateOne` (keyword 'one') used here is for finding the document, it has nothing to do with the array operation.\n - To delete all elements, the criteria is `{}`. Or just use `$set` with `[]` payload.\n\nFor more ops, checkout https://www.mongodb.com/docs/manual/reference/operator/update-array/\n",
      "html": "<h1 id=\"190.-mongodb-array-ops\">190. MongoDB array ops <a class=\"heading-anchor-permalink\" href=\"#190.-mongodb-array-ops\">#</a></h1>\n<p>Created Saturday 10 June 2023 at 05:49 pm</p>\n<h2 id=\"arrays-in-mongodb\">Arrays in MongoDB <a class=\"heading-anchor-permalink\" href=\"#arrays-in-mongodb\">#</a></h2>\n<p>Arrays are a first class structure in MongoDB unlike SQL databases. This means that values in documents can be arrays. This provides a lot of flexibility.</p>\n<p>However, try to enforce limits to array array size, otherwise it could hurt performance. If an array is too large, it may be better to create a new collection altogether with each array element storing as a reference (via an attribute) to the original document.</p>\n<h2 id=\"1.-update-element-in-array\">1. Update element in array <a class=\"heading-anchor-permalink\" href=\"#1.-update-element-in-array\">#</a></h2>\n<p>Suppose we have the following situation</p>\n<pre><code class=\"language-js\">const sampleProduct = {\n  _id: 'someId...',\n  price: '',\n  title: '',\n  description: '',\n  imageUrl: '',\n\n  versions: [{ name: 'name1', title: '' }, { name: 'name2', title: '' }]\n};\n\nconst productId = ...// given\n\n// goal: update the title field\n</code></pre>\n<h3 id=\"1.1-update-element-in-array---if-position-is-known\">1.1 Update element in array - if position is known <a class=\"heading-anchor-permalink\" href=\"#1.1-update-element-in-array---if-position-is-known\">#</a></h3>\n<p>Use the index (number) in path (dot notation )</p>\n<pre><code class=\"language-js\">// change the 2nd version, i.e. arr[1]\n\nawait db.collection(&quot;products&quot;)\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId) },\n\t\t\t{ $set: { &quot;versions.1.title&quot;: 'new title' } }\n\t\t);\n</code></pre>\n<h3 id=\"1.2-update-element-in-array---by-criteria\">1.2 Update element in array - by criteria <a class=\"heading-anchor-permalink\" href=\"#1.2-update-element-in-array---by-criteria\">#</a></h3>\n<p>There are two steps here:</p>\n<ol>\n<li>Locate the parent document - same as before, using <code>_id</code></li>\n<li>Locate element of nested array by criteria. This has a special notation: <code>path_to_array.elementProperty: eqValueOrComplexCriteria</code>. This is added to the filter (i.e. first argument of <code>update*</code>) itself. Memory aid - skip the index in the dot notation.</li>\n<li>Update the element by using <code>$</code> as the index (which we don’t know of course, since we never fetch the array or any element). The setting is done usually, using <code>$set</code>. Of course, we can still update other parts of the document in the same query.</li>\n</ol>\n<pre><code class=\"language-js\">// change the `title` of version whose 'name' is 'name1'\n\nawait db.collection(&quot;products&quot;)\n\t\t.updateOne(\n\t\t\t{ _id: new ObjectId(productId), &quot;versions.name&quot;: &quot;name1&quot; },\n\t\t\t{ $set: { &quot;versions.$.title&quot;: 'new title' } }\n\t\t);\n</code></pre>\n<h2 id=\"2.-append-to-array--%24push\">2. Append to array -<code>$push</code> <a class=\"heading-anchor-permalink\" href=\"#2.-append-to-array--%24push\">#</a></h2>\n<p>This can be done by fetching the document, mutating the array and then <code>.save()</code> ing it. But this is expensive and sometimes not practical (if the array is very large).</p>\n<p><code>$set</code> won’t help here. We need to use the <code>$push</code> operator for this.</p>\n<pre><code class=\"language-js\">// situation\nconst myDocument = await db.collection('myCollection').findOne('...');\n// myDocumet looks like this\n// { _id: ..., scores: [3, 1, 4, 1] }\n\n// goal: to add '5' to this array, without fetching the whole array\n\n// code\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id }, { $push: { scores: 5 } });\n</code></pre>\n<pre><code class=\"language-js\">// syntax\n.updateOne({...}, { $push: { 'path_to_array': value_to_append } })\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>A new array will be created if it doesn’t exist. Nice!</li>\n<li>Replace <code>$push</code> by <code>$addToSet</code> to add element only if doesn’t exist.</li>\n<li>Of course, we can push into independent arrays with a single <code>$push</code> in the same query. Example:<pre><code class=\"language-js\">await\ndb.collection('myCollection')\n  .updateOne(\n\t  { _id: myDocument._id },\n\t  { $push: { scores: 5, fouls: 1 } }\n  );\n// adds `5`, to the scores array, and `1` to the fouls array\n</code></pre>\n</li>\n</ul>\n<h2 id=\"3.-delete-from-array---%24pull\">3. Delete from array - <code>$pull</code> <a class=\"heading-anchor-permalink\" href=\"#3.-delete-from-array---%24pull\">#</a></h2>\n<p>Fetching, mutating and <code>.updateOne</code> is a way to do this, but it may be expensive or impractical to do.</p>\n<p><code>$set</code> won’t help here. We need to use the <code>$pull</code> operator for this.</p>\n<pre><code class=\"language-js\">// situation\nconst myDocument = await db.collection('myCollection').findOne('...');\n/* myDocument looks like this\n{\n  _id: ...,\n  scores: [31, 12, 43, 17],\n  fouls: [\n    { byUser: 'vader' , star: 2 },\n    { byUser: 'thanos', star: 5 }\n  ]\n}\n*/\n\n\n// goal: remove `43` from 'scores', without fetching the whole array\n// code\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id }, { $pull: { scores: 43 } });\n\n\n// goal: remove `fouls` element(s) with `byUser` 'thanos'\n// again, it's simple - here's it's just one user\nawait\n\tdb.collection('myCollection')\n\t  .updateOne({ _id: myDocument._id },\n\t\t  { $pull: { fouls: { byUser: 'thanos'} } }\n\t  );\n</code></pre>\n<pre><code class=\"language-js\">// syntax\n.updateOne({...}, \n    { $pull: { 'path_to_array': eqValueOrComplexCriteria } }\n)\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>Single query - Just like with <code>$push</code>, deletions can be carried out in independent arrays with a single <code>$pull</code> in the same query.</li>\n<li>Piece-wise query - The <code>path_to_array</code> has to be a path till array only, doing something like <code>{ fouls.byUser: 'thanos' }</code> is an invalid criteria.\nWarning:</li>\n<li><code>$pull</code> will remove <em>all</em> elements that match the criteria. Possible pitfall - the <code>updateOne</code> (keyword ‘one’) used here is for finding the document, it has nothing to do with the array operation.</li>\n<li>To delete all elements, the criteria is <code>{}</code>. Or just use <code>$set</code> with <code>[]</code> payload.</li>\n</ul>\n<p>For more ops, checkout <a href=\"https://www.mongodb.com/docs/manual/reference/operator/update-array/\">https://www.mongodb.com/docs/manual/reference/operator/update-array/</a></p>\n",
      "id": 99
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/194_Creating_the_User_model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/194_Creating_the_User_model.html",
      "content": "# 194. Creating the user model\nCreated Sunday 7 May 2023 at 10:01 am\n\nWe need to rewrite the User model, since we're not using Sequelize anymore.\n\nNothing special, same as adding the Product model. [Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/77beb7cd3f9edf18fc82f4cbdd81cdc15b24da3e). Example:\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst { ObjectId } = require(\"mongodb\");\n\nclass User() {\n  constructor(username, email) {\n    this.username = username;\n    this.email = email;\n  }\n\n  async create() {\n    const db = getDb(); // for demo, assume this always works\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.insertOne(this)\n\t\t\t.then(console.log)\n\t\t\t.catch(console.log);\n  }\n\n  static async findById(userId) {\n    const db = getDb();\n\n    return db\n\t\t    .collection('users')\n\t\t    .findOne({ _id: new ObjectId(userId) });\n\n\t\t    // OR, equivalently\n\t\t    // .find({ _id: new ObjectId(userId) }).next();\n  }\n};\n```\n",
      "html": "<h1 id=\"194.-creating-the-user-model\">194. Creating the user model <a class=\"heading-anchor-permalink\" href=\"#194.-creating-the-user-model\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 10:01 am</p>\n<p>We need to rewrite the User model, since we’re not using Sequelize anymore.</p>\n<p>Nothing special, same as adding the Product model. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/77beb7cd3f9edf18fc82f4cbdd81cdc15b24da3e\">Code</a>. Example:</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst { ObjectId } = require(&quot;mongodb&quot;);\n\nclass User() {\n  constructor(username, email) {\n    this.username = username;\n    this.email = email;\n  }\n\n  async create() {\n    const db = getDb(); // for demo, assume this always works\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.insertOne(this)\n\t\t\t.then(console.log)\n\t\t\t.catch(console.log);\n  }\n\n  static async findById(userId) {\n    const db = getDb();\n\n    return db\n\t\t    .collection('users')\n\t\t    .findOne({ _id: new ObjectId(userId) });\n\n\t\t    // OR, equivalently\n\t\t    // .find({ _id: new ObjectId(userId) }).next();\n  }\n};\n</code></pre>\n",
      "id": 100
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/195_Storing_associated_User_in_Product.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/195_Storing_associated_User_in_Product.html",
      "content": "# 195. Storing associated User in Product\nCreated Sunday 7 May 2023 at 10:01 am\n\n## Need to store associated models\nCreated Sunday 7 May 2023 at 10:01 am\n\nProducts are created by admin, who are a User too. Consequently, we expect to access products created by a user (given user document), and also access the user when given product document.\n\nThis should be thought through clearly, since storing whole objects may result in inconsistencies. Example situation - we saved the whole user object in each product, but after some time, the user changed their username, and therefore all user data in their products are now stale. This is a con, but it also has the advantage that the product as well as the associated user data can be fetched in *one call*.\n**Alternatively**, if we just store the user's id in each product, we'd need an extra call (`User.findBy(prod.userId)`) if we wish to know user data associated with a product.\n\n*In other words*, there's a trade-off between extra calls and degree of duplication.\n\nIn the current application, the product detail page does not need to show the admin info, so storing whole user object in every product is not needed, storing only the id would be fine.\n\n## Updated Product model\n- Add the field `userId`\n- Updating model pre-population code - since User can exist without a Product, but every Product is created by some User. Also change the dependency function order, run user then product. Skipping the code here.\n```js\nclass Product {\n  constructor(/* existing params, */ userId) {\n    // existing code\n    \n    this.userId = userId;\n  }\n}\n```\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/6696c8dcd369d3e009d604a3aa21bd7f38cd4574)\n\n\n## Re-enable mock auth\nWe also need to re-add the 'mock' authentication middleware, since we need the user for almost all operations. [Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/15d08347c88e6d5a83740d1dcd9a38edf8cdf11e)\n```js\n// Main app file - `app.js`\nconst app = express();\n\napp.use(async (req, res, next) => {\n  const [firstUser = null] = await User.fetchAll(); // as of now, this is the sample user\n  req.user = firstUser;\n  console.log(\"Mock authentication success\", firstUser);\n  next();\n});\n\n// ...\n```\n\n\n## Updating the create product action\nEvery product must have a user, so we only have to change the \"Add product\" action.\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/9529d8fb07ac23db3118f53259dada2fa3d7465e)\n```js\nconst postAddProduct = async (req, res, next) => {\n  const product = new Product({\n    title: req.body.title,\n    imageUrl: req.body.imageUrl,\n    description: req.body.description,\n    price: req.body.price,\n    userId: req.user._id, // CHANGE: add userId\n  });\n\n  product.create();\n\n  res.redirect(\"/\");\n};\n```\n\n",
      "html": "<h1 id=\"195.-storing-associated-user-in-product\">195. Storing associated User in Product <a class=\"heading-anchor-permalink\" href=\"#195.-storing-associated-user-in-product\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 10:01 am</p>\n<h2 id=\"need-to-store-associated-models\">Need to store associated models <a class=\"heading-anchor-permalink\" href=\"#need-to-store-associated-models\">#</a></h2>\n<p>Created Sunday 7 May 2023 at 10:01 am</p>\n<p>Products are created by admin, who are a User too. Consequently, we expect to access products created by a user (given user document), and also access the user when given product document.</p>\n<p>This should be thought through clearly, since storing whole objects may result in inconsistencies. Example situation - we saved the whole user object in each product, but after some time, the user changed their username, and therefore all user data in their products are now stale. This is a con, but it also has the advantage that the product as well as the associated user data can be fetched in <em>one call</em>.\n<strong>Alternatively</strong>, if we just store the user’s id in each product, we’d need an extra call (<code>User.findBy(prod.userId)</code>) if we wish to know user data associated with a product.</p>\n<p><em>In other words</em>, there’s a trade-off between extra calls and degree of duplication.</p>\n<p>In the current application, the product detail page does not need to show the admin info, so storing whole user object in every product is not needed, storing only the id would be fine.</p>\n<h2 id=\"updated-product-model\">Updated Product model <a class=\"heading-anchor-permalink\" href=\"#updated-product-model\">#</a></h2>\n<ul>\n<li>Add the field <code>userId</code></li>\n<li>Updating model pre-population code - since User can exist without a Product, but every Product is created by some User. Also change the dependency function order, run user then product. Skipping the code here.</li>\n</ul>\n<pre><code class=\"language-js\">class Product {\n  constructor(/* existing params, */ userId) {\n    // existing code\n    \n    this.userId = userId;\n  }\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/6696c8dcd369d3e009d604a3aa21bd7f38cd4574\">Code</a></p>\n<h2 id=\"re-enable-mock-auth\">Re-enable mock auth <a class=\"heading-anchor-permalink\" href=\"#re-enable-mock-auth\">#</a></h2>\n<p>We also need to re-add the ‘mock’ authentication middleware, since we need the user for almost all operations. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/15d08347c88e6d5a83740d1dcd9a38edf8cdf11e\">Code</a></p>\n<pre><code class=\"language-js\">// Main app file - `app.js`\nconst app = express();\n\napp.use(async (req, res, next) =&gt; {\n  const [firstUser = null] = await User.fetchAll(); // as of now, this is the sample user\n  req.user = firstUser;\n  console.log(&quot;Mock authentication success&quot;, firstUser);\n  next();\n});\n\n// ...\n</code></pre>\n<h2 id=\"updating-the-create-product-action\">Updating the create product action <a class=\"heading-anchor-permalink\" href=\"#updating-the-create-product-action\">#</a></h2>\n<p>Every product must have a user, so we only have to change the “Add product” action.\n<a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/9529d8fb07ac23db3118f53259dada2fa3d7465e\">Code</a></p>\n<pre><code class=\"language-js\">const postAddProduct = async (req, res, next) =&gt; {\n  const product = new Product({\n    title: req.body.title,\n    imageUrl: req.body.imageUrl,\n    description: req.body.description,\n    price: req.body.price,\n    userId: req.user._id, // CHANGE: add userId\n  });\n\n  product.create();\n\n  res.redirect(&quot;/&quot;);\n};\n</code></pre>\n",
      "id": 101
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/196_The_Cart_model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/196_The_Cart_model.html",
      "content": "# 196. The Cart model\nCreated Sunday 7 May 2023 at 10:16 am\n\nSince MongoDB allows nested docs by default, we don't need something like `CartItem` here - we can store an array (CartItems) in the same (User) document.\n\nAlso, since the User and Cart are 1-1 related and never transferred to other entities, we don't need a `Cart` model, we could just add a `cart` attribute to the User model itself.\n\nDeleting Cart, CartItem, and updating User:\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n  constructor(/* existing params, */, cart) {\n    // existing code\n\n    this.cart = cart ?? { items: [] };\n    // typeof cart = { items: [{ ...product, quantity }] }\n  }\n\n  async addToCart(product, quantity = 1) {\n\tconst existingIndex = cart.items.findIndex(item => item.product._id === product._id);\n\n\tif(existingIndex === -1 )\n      this.cart.items.push({...product, quantity });\n    else\n\t  this.card.items[existingIndex].quantity += quantity;\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t\t{ _id: new mongodb.ObjectId(this.id) },\n\t\t\t\t{ $set: { cart: this.cart } }\n\t\t\t)\n\t\t\t.then(result => { console.log(result); return result; });\n\t\t\t.catch(console.log);\n  }\n}\n```\n\n\n## Duplication in User.cart (197)\nRight now, we actually save whole `Product`s in `User.cart`. This is not very good, since Product details may change frequently (e.g. the price), and our cart will then have stale product objects.\n\nTo fix this, let's just store the `productId` instead of the whole object. We will need an extra call for each item in the cart page to get product details, of course, but it's fine.\n\nUpdate User (since cart is just a part of User now)\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n  constructor(/* existing params, */, cart) {\n    // existing code\n\n    this.cart = cart ?? { items: [] };\n    // typeof cart = { items: [{ ...product, quantity }] }\n  }\n\n  async addToCart(productId, quantity = 1) {\n\tconst existingIndex = cart.items.findIndex(item => item.product._id.toString() === productId);\n\n\tif(existingIndex === -1 )\n      this.cart.items.push(\n\t      { productId: new mongodb.ObjectId(productId), quantity }\n\t  );\n    else\n\t  this.card.items[existingIndex].quantity += quantity;\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t\t{ _id: new mongodb.ObjectId(this.id) },\n\t\t\t\t{ $set: { cart: this.cart } }\n\t\t\t)\n\t\t\t.then(result => { console.log(result); return result; });\n\t\t\t.catch(console.log);\n  }\n}\n```\n\n\nStuff done here:\n1. Add cart model, as a nested field in User model. Reason: cart is guaranteed to be present and also be relevant only to one (something even tighter than 1-1, where swaps and null are possible) User at all times.\n2. Add cart features.\n3. Solved the cart action button bugs. This was happening because we used `productId` as the id of the cartItem. Should probably avoid this in the future - let every entity have it's own `id` (and also that `id` attribute name is the same for all). This way `_id` is the expected key instead of `productId` or whatever context dependent key.\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3fb41c3240039365854d4cf00b1e406ef1a3948d)\n\n[Code - fix for a bug - price, description and other keys were missing](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484)",
      "html": "<h1 id=\"196.-the-cart-model\">196. The Cart model <a class=\"heading-anchor-permalink\" href=\"#196.-the-cart-model\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 10:16 am</p>\n<p>Since MongoDB allows nested docs by default, we don’t need something like <code>CartItem</code> here - we can store an array (CartItems) in the same (User) document.</p>\n<p>Also, since the User and Cart are 1-1 related and never transferred to other entities, we don’t need a <code>Cart</code> model, we could just add a <code>cart</code> attribute to the User model itself.</p>\n<p>Deleting Cart, CartItem, and updating User:</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n  constructor(/* existing params, */, cart) {\n    // existing code\n\n    this.cart = cart ?? { items: [] };\n    // typeof cart = { items: [{ ...product, quantity }] }\n  }\n\n  async addToCart(product, quantity = 1) {\n\tconst existingIndex = cart.items.findIndex(item =&gt; item.product._id === product._id);\n\n\tif(existingIndex === -1 )\n      this.cart.items.push({...product, quantity });\n    else\n\t  this.card.items[existingIndex].quantity += quantity;\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t\t{ _id: new mongodb.ObjectId(this.id) },\n\t\t\t\t{ $set: { cart: this.cart } }\n\t\t\t)\n\t\t\t.then(result =&gt; { console.log(result); return result; });\n\t\t\t.catch(console.log);\n  }\n}\n</code></pre>\n<h2 id=\"duplication-in-user.cart-(197)\">Duplication in User.cart (197) <a class=\"heading-anchor-permalink\" href=\"#duplication-in-user.cart-(197)\">#</a></h2>\n<p>Right now, we actually save whole <code>Product</code>s in <code>User.cart</code>. This is not very good, since Product details may change frequently (e.g. the price), and our cart will then have stale product objects.</p>\n<p>To fix this, let’s just store the <code>productId</code> instead of the whole object. We will need an extra call for each item in the cart page to get product details, of course, but it’s fine.</p>\n<p>Update User (since cart is just a part of User now)</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n  constructor(/* existing params, */, cart) {\n    // existing code\n\n    this.cart = cart ?? { items: [] };\n    // typeof cart = { items: [{ ...product, quantity }] }\n  }\n\n  async addToCart(productId, quantity = 1) {\n\tconst existingIndex = cart.items.findIndex(item =&gt; item.product._id.toString() === productId);\n\n\tif(existingIndex === -1 )\n      this.cart.items.push(\n\t      { productId: new mongodb.ObjectId(productId), quantity }\n\t  );\n    else\n\t  this.card.items[existingIndex].quantity += quantity;\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t\t{ _id: new mongodb.ObjectId(this.id) },\n\t\t\t\t{ $set: { cart: this.cart } }\n\t\t\t)\n\t\t\t.then(result =&gt; { console.log(result); return result; });\n\t\t\t.catch(console.log);\n  }\n}\n</code></pre>\n<p>Stuff done here:</p>\n<ol>\n<li>Add cart model, as a nested field in User model. Reason: cart is guaranteed to be present and also be relevant only to one (something even tighter than 1-1, where swaps and null are possible) User at all times.</li>\n<li>Add cart features.</li>\n<li>Solved the cart action button bugs. This was happening because we used <code>productId</code> as the id of the cartItem. Should probably avoid this in the future - let every entity have it’s own <code>id</code> (and also that <code>id</code> attribute name is the same for all). This way <code>_id</code> is the expected key instead of <code>productId</code> or whatever context dependent key.</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3fb41c3240039365854d4cf00b1e406ef1a3948d\">Code</a></p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484\">Code - fix for a bug - price, description and other keys were missing</a></p>\n",
      "id": 102
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/199_Get_cart_page.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/199_Get_cart_page.html",
      "content": "# 199. Adding User.getCart method\nCreated Sunday 7 May 2023 at 12:08 pm\n\nLet's add a new method, that will be used by the cart page controller action. [Code - commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484)\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n\t// existing code\n\n\tgetCart() {\n\t  const user = req.user;\n\t  const cart = user.cart;\n\n\t  const db = getDb();\n\n\t  const productIds = cart.items.map(item => item.productId);\n\n\t// have to use Promise.all, \n\t// since using map directly doesn't work with async functions\n\t// which evaluate to promises, not the resolved value\n\tconst cartWithProducts = await Promise.all(\n\t\tproductIds.map(async (productId) => {\n\t\t\tconst product = await Product.findById(productId);\n\t\t\treturn { ...item, product }; // spread item for 'quantity'\n\t\t});\n\n\treturn cartWithProducts;\n\t}\n}\n```\n\n'n' network calls are made here. this could be rewritten using `.find()` with `$in`, so that only one call is needed, like so:\n```js\nlet cartWithProducts2 =\n\tawait db.collection('products')\n\t\t\t// get all products whose `_id` is \"oneOf\" (in) the given array\n\t\t\t.find({ _id: { $in: productIds }})\n\t\t\t.toArray();\n\ncartWithProducts2 = cartWithProducts2.map((product) =>\n\t({\n\t    ...product,\n\t    quantity:\n\t\t  cart.find(item => item.productId === product._id.toString())\n\t\t\t  .quantity\n\t})\n);\n\nreturn cartWithProducts2;\n```\n\n[Code - $in operator instead of n calls](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/e8f4f4a26633a2671f2ffb0843c04e812a6a0318)\n\nNote:\n1. Use `toString()` on the `fetchedInstance._id` because even though `._id` feels like a string, it's not strictly of type `string`. This will cause `Array.find` to fail, here.\n2. MongoDB has the `$in` query operator that is quite helpful, especially in `find` (i.e. find many), syntax:\n\t```js\n\tconst mongodb = require(\"mongodb\");\n\tconst idArr = [42, 6023].map(id => new ObjectId(id));\n\n\tconst items = await db.collection('something')\n\t  .find({ _id: { $in: idArr } })\n\t  .toArray();\n\t```\n3. The order of elements in array passed to `.find` with `$in` is does not affect the response order. FIXME: is there another operator to specify to follow order from passed array.",
      "html": "<h1 id=\"199.-adding-user.getcart-method\">199. Adding User.getCart method <a class=\"heading-anchor-permalink\" href=\"#199.-adding-user.getcart-method\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 12:08 pm</p>\n<p>Let’s add a new method, that will be used by the cart page controller action. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484\">Code - commit</a></p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n\t// existing code\n\n\tgetCart() {\n\t  const user = req.user;\n\t  const cart = user.cart;\n\n\t  const db = getDb();\n\n\t  const productIds = cart.items.map(item =&gt; item.productId);\n\n\t// have to use Promise.all, \n\t// since using map directly doesn't work with async functions\n\t// which evaluate to promises, not the resolved value\n\tconst cartWithProducts = await Promise.all(\n\t\tproductIds.map(async (productId) =&gt; {\n\t\t\tconst product = await Product.findById(productId);\n\t\t\treturn { ...item, product }; // spread item for 'quantity'\n\t\t});\n\n\treturn cartWithProducts;\n\t}\n}\n</code></pre>\n<p>‘n’ network calls are made here. this could be rewritten using <code>.find()</code> with <code>$in</code>, so that only one call is needed, like so:</p>\n<pre><code class=\"language-js\">let cartWithProducts2 =\n\tawait db.collection('products')\n\t\t\t// get all products whose `_id` is &quot;oneOf&quot; (in) the given array\n\t\t\t.find({ _id: { $in: productIds }})\n\t\t\t.toArray();\n\ncartWithProducts2 = cartWithProducts2.map((product) =&gt;\n\t({\n\t    ...product,\n\t    quantity:\n\t\t  cart.find(item =&gt; item.productId === product._id.toString())\n\t\t\t  .quantity\n\t})\n);\n\nreturn cartWithProducts2;\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/e8f4f4a26633a2671f2ffb0843c04e812a6a0318\">Code - $in operator instead of n calls</a></p>\n<p>Note:</p>\n<ol>\n<li>Use <code>toString()</code> on the <code>fetchedInstance._id</code> because even though <code>._id</code> feels like a string, it’s not strictly of type <code>string</code>. This will cause <code>Array.find</code> to fail, here.</li>\n<li>MongoDB has the <code>$in</code> query operator that is quite helpful, especially in <code>find</code> (i.e. find many), syntax:<pre><code class=\"language-js\">const mongodb = require(&quot;mongodb&quot;);\nconst idArr = [42, 6023].map(id =&gt; new ObjectId(id));\n\nconst items = await db.collection('something')\n  .find({ _id: { $in: idArr } })\n  .toArray();\n</code></pre>\n</li>\n<li>The order of elements in array passed to <code>.find</code> with <code>$in</code> is does not affect the response order. FIXME: is there another operator to specify to follow order from passed array.</li>\n</ol>\n",
      "id": 103
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/201_Cart_actions.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/201_Cart_actions.html",
      "content": "# 201. Deleting Cart items\nCreated Sunday 7 May 2023 at 12:26 pm\n\nBasically, just update the cart. Updating the code (User model, since cart is a part of it):\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n  // existing code\n\n  async deleteItemFromCart(productId) {\n\t// make sure we don't mutate the existin cart, since the operation may fail\n\n\t// .filter is safe\n\tconst updatedCart = this.cart.filter(item => item.productId.toString() !== productId.toString());\n\n\tconst db = getDb();\n\treturn db\n\t\t\t.collections('users')\n\t\t\t.updateOne(\n\t\t\t  { _id, new mongodb.ObjectId(this.id)},\n\t\t      { $set: { cart: updatedCart }}\n\t\t\t);\n  }\n}\n```\n\nCode changes completed in a previous page, see - [main code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3fb41c3240039365854d4cf00b1e406ef1a3948d),  [minor fix commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484)\n\nI refactored the logic into the model. [Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/8dcfbe1718662994dde321e7b5afa92a8d3c6dcd)",
      "html": "<h1 id=\"201.-deleting-cart-items\">201. Deleting Cart items <a class=\"heading-anchor-permalink\" href=\"#201.-deleting-cart-items\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 12:26 pm</p>\n<p>Basically, just update the cart. Updating the code (User model, since cart is a part of it):</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n  // existing code\n\n  async deleteItemFromCart(productId) {\n\t// make sure we don't mutate the existin cart, since the operation may fail\n\n\t// .filter is safe\n\tconst updatedCart = this.cart.filter(item =&gt; item.productId.toString() !== productId.toString());\n\n\tconst db = getDb();\n\treturn db\n\t\t\t.collections('users')\n\t\t\t.updateOne(\n\t\t\t  { _id, new mongodb.ObjectId(this.id)},\n\t\t      { $set: { cart: updatedCart }}\n\t\t\t);\n  }\n}\n</code></pre>\n<p>Code changes completed in a previous page, see - <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3fb41c3240039365854d4cf00b1e406ef1a3948d\">main code</a>,  <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/2656c19b369d9d55c4038f4601af90744e3ee484\">minor fix commit</a></p>\n<p>I refactored the logic into the model. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/8dcfbe1718662994dde321e7b5afa92a8d3c6dcd\">Code</a></p>\n",
      "id": 104
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/202_Adding_the_Order_features.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/202_Adding_the_Order_features.html",
      "content": "# 202. Adding the Order features\nCreated Sunday 7 May 2023 at 12:41 pm\n\nLet's add the order features. Since an order is a \"frozen\" copy of a cart, this will be a little different - it doesn't make much sense to have an `orders` attribute in the User model, since there may be a lot of orders, which will make User objects very big.\n\nInstead, we can create a new collection called 'orders', that stores all orders, irrespective of users. [Code - commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3c5e62b988aee31e1fc8c51241aa744922ca6326)\n```js\nOrders = [{ userId, items: [{ product, quantity }] }]\n```\nNote: we need to store the whole product, instead of just the id, since Order is a history/frozen entity, and so, it should remain safe from product updates.\n\n[Code - commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/b1c4b0ca1d5af634c21a7f6cf975aec6c3ee547e):\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n  // existing code\n\n  async addOrder() {\n    const db = getDb();\n\n\t// store the cart, but with all things frozen\n\t// cart stores productId not whole products, this is not good\n\t// we need whole products\n\tconst cartWithProducts = await this.getCart(); // use existing method\n\n\t// store the cart, and user (since cart doesn't have `user`)\n\tawait db\n\t\t\t.collection('orders')\n\t\t\t.insertOne(\n\t\t\t  {\n\t\t\t    ...this.cart,\n\t\t\t    user: {\n\t\t\t\t  _id: mongodb.ObjectId(this.id)\n\t\t\t\t  username: this.username,\n\t\t\t\t  email: this.email,\n\t\t\t\t}\n\t\t\t\t// user duplication is OK here\n\t\t\t\t// even if it may become inconsistent\n\t\t\t  }\n\t\t\t)\n\n\t// empty cart - effective completing the \"freezing\" requirement\n\tawait db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t  { _id: mongodb.ObjectId(this.id) },\n\t\t\t  { $set: { cart: { items: [] } } }\n\t\t\t);\n\n\treturn this;\n  }\n}\n```\nNote: \n1. `_id` in create call: since the *create* payload was `this.cart`, it included cart's `_id`. But this will not be saved in the new order, because this is a create call. In other words, **we don't need to remove `_id` from the payload, since it's irrelevant in a create call in MongoDB.**\n2. Traceability - \"orders\" is a different collection from \"users\", which is fine. What is not good is that the User model has no indication of order in it's constructor. [See detail](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a50463c4debcedc88698783e0852712469d8b7cb)\n\n---\n\nAdding shipping address and other stuff - [code - commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/42bbac277747938a1599f17b07b929047191d5bf)",
      "html": "<h1 id=\"202.-adding-the-order-features\">202. Adding the Order features <a class=\"heading-anchor-permalink\" href=\"#202.-adding-the-order-features\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 12:41 pm</p>\n<p>Let’s add the order features. Since an order is a “frozen” copy of a cart, this will be a little different - it doesn’t make much sense to have an <code>orders</code> attribute in the User model, since there may be a lot of orders, which will make User objects very big.</p>\n<p>Instead, we can create a new collection called ‘orders’, that stores all orders, irrespective of users. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/3c5e62b988aee31e1fc8c51241aa744922ca6326\">Code - commit</a></p>\n<pre><code class=\"language-js\">Orders = [{ userId, items: [{ product, quantity }] }]\n</code></pre>\n<p>Note: we need to store the whole product, instead of just the id, since Order is a history/frozen entity, and so, it should remain safe from product updates.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/b1c4b0ca1d5af634c21a7f6cf975aec6c3ee547e\">Code - commit</a>:</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n  // existing code\n\n  async addOrder() {\n    const db = getDb();\n\n\t// store the cart, but with all things frozen\n\t// cart stores productId not whole products, this is not good\n\t// we need whole products\n\tconst cartWithProducts = await this.getCart(); // use existing method\n\n\t// store the cart, and user (since cart doesn't have `user`)\n\tawait db\n\t\t\t.collection('orders')\n\t\t\t.insertOne(\n\t\t\t  {\n\t\t\t    ...this.cart,\n\t\t\t    user: {\n\t\t\t\t  _id: mongodb.ObjectId(this.id)\n\t\t\t\t  username: this.username,\n\t\t\t\t  email: this.email,\n\t\t\t\t}\n\t\t\t\t// user duplication is OK here\n\t\t\t\t// even if it may become inconsistent\n\t\t\t  }\n\t\t\t)\n\n\t// empty cart - effective completing the &quot;freezing&quot; requirement\n\tawait db\n\t\t\t.collection('users')\n\t\t\t.updateOne(\n\t\t\t  { _id: mongodb.ObjectId(this.id) },\n\t\t\t  { $set: { cart: { items: [] } } }\n\t\t\t);\n\n\treturn this;\n  }\n}\n</code></pre>\n<p>Note:</p>\n<ol>\n<li><code>_id</code> in create call: since the <em>create</em> payload was <code>this.cart</code>, it included cart’s <code>_id</code>. But this will not be saved in the new order, because this is a create call. In other words, <strong>we don’t need to remove <code>_id</code> from the payload, since it’s irrelevant in a create call in MongoDB.</strong></li>\n<li>Traceability - “orders” is a different collection from “users”, which is fine. What is not good is that the User model has no indication of order in it’s constructor. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a50463c4debcedc88698783e0852712469d8b7cb\">See detail</a></li>\n</ol>\n<hr>\n<p>Adding shipping address and other stuff - <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/42bbac277747938a1599f17b07b929047191d5bf\">code - commit</a></p>\n",
      "id": 105
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/204_Getting_orders.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/204_Getting_orders.html",
      "content": "# 204. Getting orders\nCreated Sunday 26 May 2023 at 04:17 am\n\nThis is very simple, from a *joins* perspective, since an order has a high degree of duplicates, i.e. no joins/extra calls are needed.\n\nThere's a different problem here, though. We don't store anything related to order in the User model, and therefore we don't know the orderIds. Consequently, we need to query the \"orders\" collection with a condition of `user._id` since we every order does have the `user` object. MongoDB syntax for nested matching:\n```js\nconst { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(\"mongodb\");\n\nclass User {\n  // existing code\n\n  async getOrders () {\n    // .find({_id: { $in: [??]}}) // can't use, since we don't know orderIds\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('orders')\n\t\t\t.find({ \"user._id\": new mongodb.ObjectId(this.id) });\n  }\n}\n```\n\nThis syntax is not something new/different, as compared to using `_id` - we just changed the key to be `user._id`. The **important thing** is to know that MongoDB supports queries with nested keys.\n\nNote: I wrote the code later, and the id key was changed to `userId`.\n[Code - Order listing and detail page](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a07f8f5d9c93a08b90d07c958515f074f4515f82)\n\n\n## Cleaning up isolated products\nSituation: A user (seller) creates a product, which is then \"added to cart\" by multiple other users (buyers). The seller than deletes the product. Now, we have the product references in carts that doesn't actually exist, in other words, the carts are now inconsistent.\n\nThis is bad because the user expects that the \"ordering\" will succeed, which is not possible now and will fail technically. We should actually show a warning here, or atleast make the cart consistent - in other words, this case should be handled specially, as opposed to a just a 500.\n\nThere are many ways to solve this problem:\n1. During the `getCart` operation, we query the 'products' collections too, to get product details. We can simply add a check here, to see if the query returns the same number of products as items in the cart. If not, there is a product that has been deleted. Since we know which one has been deleted - we can either show a \"unavailable\" message or simply delete the item from the cart.\n2. The above method works at request time (when \"Order now\" is pressed), and may be slow. We can solve this problem, by actually running a planned *job* every 24 hours (or some other period), where we go through all carts and remove the items whose product has been deleted.\n   \nOf course, the \"periodic sweep\" approach could mean that our server spends time on Carts (users) who have not used our app in a long time - which can be significantly expensive. A hybrid approach would be better - we could use some criteria (or ML) based filter so only users who shop regularly are part of this periodic sweep and their carts are marked 'sweeped'. This way, we can have both \"periodic sweep\" as well as request time cleanup, but the request time one is skipped for regular users, since their carts have the \"sweeped\" label. Also, if a user tries to order but he is not a regular one, the request time cleanup should run of course.\n\nThis is briefly discussed in the course, but not demonstrated or anything. I think this will be easy enough to do (from an backend perspective, not the criteria or ML part). So skipping the code part.",
      "html": "<h1 id=\"204.-getting-orders\">204. Getting orders <a class=\"heading-anchor-permalink\" href=\"#204.-getting-orders\">#</a></h1>\n<p>Created Sunday 26 May 2023 at 04:17 am</p>\n<p>This is very simple, from a <em>joins</em> perspective, since an order has a high degree of duplicates, i.e. no joins/extra calls are needed.</p>\n<p>There’s a different problem here, though. We don’t store anything related to order in the User model, and therefore we don’t know the orderIds. Consequently, we need to query the “orders” collection with a condition of <code>user._id</code> since we every order does have the <code>user</code> object. MongoDB syntax for nested matching:</p>\n<pre><code class=\"language-js\">const { getDb, mongoConnect } = require('./util/database.js');\nconst mongodb = require(&quot;mongodb&quot;);\n\nclass User {\n  // existing code\n\n  async getOrders () {\n    // .find({_id: { $in: [??]}}) // can't use, since we don't know orderIds\n\n\tconst db = getDb();\n\n\treturn db\n\t\t\t.collection('orders')\n\t\t\t.find({ &quot;user._id&quot;: new mongodb.ObjectId(this.id) });\n  }\n}\n</code></pre>\n<p>This syntax is not something new/different, as compared to using <code>_id</code> - we just changed the key to be <code>user._id</code>. The <strong>important thing</strong> is to know that MongoDB supports queries with nested keys.</p>\n<p>Note: I wrote the code later, and the id key was changed to <code>userId</code>.\n<a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a07f8f5d9c93a08b90d07c958515f074f4515f82\">Code - Order listing and detail page</a></p>\n<h2 id=\"cleaning-up-isolated-products\">Cleaning up isolated products <a class=\"heading-anchor-permalink\" href=\"#cleaning-up-isolated-products\">#</a></h2>\n<p>Situation: A user (seller) creates a product, which is then “added to cart” by multiple other users (buyers). The seller than deletes the product. Now, we have the product references in carts that doesn’t actually exist, in other words, the carts are now inconsistent.</p>\n<p>This is bad because the user expects that the “ordering” will succeed, which is not possible now and will fail technically. We should actually show a warning here, or atleast make the cart consistent - in other words, this case should be handled specially, as opposed to a just a 500.</p>\n<p>There are many ways to solve this problem:</p>\n<ol>\n<li>During the <code>getCart</code> operation, we query the ‘products’ collections too, to get product details. We can simply add a check here, to see if the query returns the same number of products as items in the cart. If not, there is a product that has been deleted. Since we know which one has been deleted - we can either show a “unavailable” message or simply delete the item from the cart.</li>\n<li>The above method works at request time (when “Order now” is pressed), and may be slow. We can solve this problem, by actually running a planned <em>job</em> every 24 hours (or some other period), where we go through all carts and remove the items whose product has been deleted.</li>\n</ol>\n<p>Of course, the “periodic sweep” approach could mean that our server spends time on Carts (users) who have not used our app in a long time - which can be significantly expensive. A hybrid approach would be better - we could use some criteria (or ML) based filter so only users who shop regularly are part of this periodic sweep and their carts are marked ‘sweeped’. This way, we can have both “periodic sweep” as well as request time cleanup, but the request time one is skipped for regular users, since their carts have the “sweeped” label. Also, if a user tries to order but he is not a regular one, the request time cleanup should run of course.</p>\n<p>This is briefly discussed in the course, but not demonstrated or anything. I think this will be easy enough to do (from an backend perspective, not the criteria or ML part). So skipping the code part.</p>\n",
      "id": 106
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/1_limit_sort_and_count.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/1_limit_sort_and_count.html",
      "content": "# limit, sort and count\n\nNote - these function can be changed to `.find` or any other query method after it.\n\n## 1. limit\nCreated Monday 19 June 2023 at 12:50 am\n\nNumber of items returned can be limited by chaining the `.limit` method to `.find`.\n```js\nconst orders = await db\n  .collection(\"orders\")\n  .find(/* some code */)\n  .limit(2)\n  .toArray();\n```\n\nNote: 0 has no effect. Negative values behave the same as positive values.\n\n\n## 2. sort\nItems returned can be sorted by chaining `.sort` to `.find` (or similar)\n\nArgument is an object.\n- Default value is `{}` (no-effect). Empty value is OK too.\n- Argument can have multiple parameters. Their job is \"tie-breaking\" - the successive criteria are apply only if documents match with all seen (on the left criteria).\n\nDirections:\n- `1` means normal sort (i.e. alphabetical, low to high)\n- `-1` means non-normal sort.\n- `0` is an invalid direction, will raise an error.\n\nDefault MongoDB sort is with respect to `_id`, and in normal (`1`) direction.\n\nExample:\n```js\nconst orders = await db\n  .collection(\"orders\")\n  .find(/* some code */)\n  .sort({ shippingAddress: 1 })\n  .toArray();\n\n\n// multi \nconst orders = await db\n  .collection(\"orders\")\n  .find(/* some code */)\n  .sort({ shippingAddress: 1, phoneCode: -1 })\n  // phone code will apply among documents with matching addresses\n  .toArray();\n```\n\n\n## 3. count\nChain `.count` to `.find`. Argument is a \"filter\". Returns a number\n```js\nconst numberOfOrders = await db\n  .collection(\"orders\")\n  .find(/* some code */)\n  .count();\n```\n",
      "html": "<h1 id=\"limit%2C-sort-and-count\">limit, sort and count <a class=\"heading-anchor-permalink\" href=\"#limit%2C-sort-and-count\">#</a></h1>\n<p>Note - these function can be changed to <code>.find</code> or any other query method after it.</p>\n<h2 id=\"1.-limit\">1. limit <a class=\"heading-anchor-permalink\" href=\"#1.-limit\">#</a></h2>\n<p>Created Monday 19 June 2023 at 12:50 am</p>\n<p>Number of items returned can be limited by chaining the <code>.limit</code> method to <code>.find</code>.</p>\n<pre><code class=\"language-js\">const orders = await db\n  .collection(&quot;orders&quot;)\n  .find(/* some code */)\n  .limit(2)\n  .toArray();\n</code></pre>\n<p>Note: 0 has no effect. Negative values behave the same as positive values.</p>\n<h2 id=\"2.-sort\">2. sort <a class=\"heading-anchor-permalink\" href=\"#2.-sort\">#</a></h2>\n<p>Items returned can be sorted by chaining <code>.sort</code> to <code>.find</code> (or similar)</p>\n<p>Argument is an object.</p>\n<ul>\n<li>Default value is <code>{}</code> (no-effect). Empty value is OK too.</li>\n<li>Argument can have multiple parameters. Their job is “tie-breaking” - the successive criteria are apply only if documents match with all seen (on the left criteria).</li>\n</ul>\n<p>Directions:</p>\n<ul>\n<li><code>1</code> means normal sort (i.e. alphabetical, low to high)</li>\n<li><code>-1</code> means non-normal sort.</li>\n<li><code>0</code> is an invalid direction, will raise an error.</li>\n</ul>\n<p>Default MongoDB sort is with respect to <code>_id</code>, and in normal (<code>1</code>) direction.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const orders = await db\n  .collection(&quot;orders&quot;)\n  .find(/* some code */)\n  .sort({ shippingAddress: 1 })\n  .toArray();\n\n\n// multi \nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find(/* some code */)\n  .sort({ shippingAddress: 1, phoneCode: -1 })\n  // phone code will apply among documents with matching addresses\n  .toArray();\n</code></pre>\n<h2 id=\"3.-count\">3. count <a class=\"heading-anchor-permalink\" href=\"#3.-count\">#</a></h2>\n<p>Chain <code>.count</code> to <code>.find</code>. Argument is a “filter”. Returns a number</p>\n<pre><code class=\"language-js\">const numberOfOrders = await db\n  .collection(&quot;orders&quot;)\n  .find(/* some code */)\n  .count();\n</code></pre>\n",
      "id": 107
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/2_query_operators.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/2_query_operators.html",
      "content": "# query operators\nCreated Monday 19 June 2023 at 01:34 am\n\nFor the whole list - see [official MongoDB docs](https://www.mongodb.com/docs/v6.0/reference/operator/query-element/).\n\nCurrently, all our queries (filters) are \"exact matches\". How do we make filters with more complex conditions.\n\nThe primary where way to this is through \"query operators\".\n\n## 1. Comparison\nHere is the list:\n1. `$eq` - \"is equal to\". This is the default. Example: `{ price: { $eq: 23 }}`. This is the same as `{ price: 23 }`.\n2. `$ne` - \"not equal to\".\n3. `$gt` - \"greater than\"\n4. `$gte` - \"greater than or equal to\"\n5. `$lt` - \"less than\"\n6. `$lte` - \"less than or equal\"\n\nExample:\n```js\n// get orders with total >= 1000\n const orders = await db\n      .collection(\"orders\")\n      .find({ totalAmount: { $lte: 1000 } })\n```\n\n\n## 2. Logical operator (AND and OR).\nThe value of the operator here is an array. Obviously.\n\nThe operator list:\n1. `$not` - logical NOT\n2. `$and` - logical AND\n3. `$or` - logical OR\n4. `$nor` - true if all conditions are false.\n\nNote: these operators apply as 'root'. They can't apply with other abstract operators. mAid - The other way doesn't make sense anyway, it conflicts with `$eq`.\n\n- Syntax (AND and OR, combo) - both operators enclose the attribute. See mAid above. Makes sense from a math notation perspective too.\n\t```js\n\t// basic - single operator\n\t// get orders with total between 1000 (inclusive) and 5000\n\tconst orders = await db\n\t  .collection(\"orders\")\n\t  .find({\n\t\n\t\t$and: \n\t\t  [\n\t\t    { totalAmount: { $gte: 1e3 } }, \n\t\t    { totalAmount: { $lt: 5e3 } }\n\t\t  ],\n\t\t\n\t    })\n\t\n\t\n\t// #2. combine\n\t// each array element must be a valid filter\n\t\n\t// get all normal priced orders, but include all high price Cayman Islands orders too.\n\tconst orders = await db\n\t  .collection(\"orders\")\n\t  .find({\n\t  \n\t    $and: [\n\t    \n\t      { totalAmount: { $gte: 1e3 } },\n\t      {\n\t        $or: [\n\t          { totalAmount: { $lte: 5e3 } },\n\t          { shippingAddress: \"Cayman Islands\" },\n\t        ],\n\t      },\n\t      \n\t    ],\n\t  })\n\t\n\t```\n- Syntax (`$not`) - it's a little different, `$not` is nested as a value of attribute.\n\t```js\n\t// get all orders bound to planets other than Earth\n\tconst orders = await db\n\t  .collection(\"orders\")\n\t  .find({\n\t    shippingPlanet: { $not: { $eq: \"Earth\" } }\n\t  })\t\n\t```\n\nExample (combine all 3)\n```js\n// get all medium-expensive orders (not expensive) not bound for mars\n// include all high-expensive orders bound for Cayman Islands in this\norders = await db\n  .collection(\"orders\")\n  .find({\n\t$and: [\n\t  { totalAmount: { $gte: 1e3 } },\n\t  {\n\t\t$or: [\n\t\t  { totalAmount: { $lte: 5e3 } },\n\t\t  { shippingAddress: \"Cayman Islands\" },\n\t\t],\n\t  },\n\t  {\n\t\tshippingPlanet: { $not: { $eq: \"Mars\" } },\n\t  },\n\t],\n  })\n```",
      "html": "<h1 id=\"query-operators\">query operators <a class=\"heading-anchor-permalink\" href=\"#query-operators\">#</a></h1>\n<p>Created Monday 19 June 2023 at 01:34 am</p>\n<p>For the whole list - see <a href=\"https://www.mongodb.com/docs/v6.0/reference/operator/query-element/\">official MongoDB docs</a>.</p>\n<p>Currently, all our queries (filters) are “exact matches”. How do we make filters with more complex conditions.</p>\n<p>The primary where way to this is through “query operators”.</p>\n<h2 id=\"1.-comparison\">1. Comparison <a class=\"heading-anchor-permalink\" href=\"#1.-comparison\">#</a></h2>\n<p>Here is the list:</p>\n<ol>\n<li><code>$eq</code> - “is equal to”. This is the default. Example: <code>{ price: { $eq: 23 }}</code>. This is the same as <code>{ price: 23 }</code>.</li>\n<li><code>$ne</code> - “not equal to”.</li>\n<li><code>$gt</code> - “greater than”</li>\n<li><code>$gte</code> - “greater than or equal to”</li>\n<li><code>$lt</code> - “less than”</li>\n<li><code>$lte</code> - “less than or equal”</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-js\">// get orders with total &gt;= 1000\n const orders = await db\n      .collection(&quot;orders&quot;)\n      .find({ totalAmount: { $lte: 1000 } })\n</code></pre>\n<h2 id=\"2.-logical-operator-(and-and-or).\">2. Logical operator (AND and OR). <a class=\"heading-anchor-permalink\" href=\"#2.-logical-operator-(and-and-or).\">#</a></h2>\n<p>The value of the operator here is an array. Obviously.</p>\n<p>The operator list:</p>\n<ol>\n<li><code>$not</code> - logical NOT</li>\n<li><code>$and</code> - logical AND</li>\n<li><code>$or</code> - logical OR</li>\n<li><code>$nor</code> - true if all conditions are false.</li>\n</ol>\n<p>Note: these operators apply as ‘root’. They can’t apply with other abstract operators. mAid - The other way doesn’t make sense anyway, it conflicts with <code>$eq</code>.</p>\n<ul>\n<li>Syntax (AND and OR, combo) - both operators enclose the attribute. See mAid above. Makes sense from a math notation perspective too.<pre><code class=\"language-js\">// basic - single operator\n// get orders with total between 1000 (inclusive) and 5000\nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n\n\t$and: \n\t  [\n\t    { totalAmount: { $gte: 1e3 } }, \n\t    { totalAmount: { $lt: 5e3 } }\n\t  ],\n\t\n    })\n\n\n// #2. combine\n// each array element must be a valid filter\n\n// get all normal priced orders, but include all high price Cayman Islands orders too.\nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n  \n    $and: [\n    \n      { totalAmount: { $gte: 1e3 } },\n      {\n        $or: [\n          { totalAmount: { $lte: 5e3 } },\n          { shippingAddress: &quot;Cayman Islands&quot; },\n        ],\n      },\n      \n    ],\n  })\n\n</code></pre>\n</li>\n<li>Syntax (<code>$not</code>) - it’s a little different, <code>$not</code> is nested as a value of attribute.<pre><code class=\"language-js\">// get all orders bound to planets other than Earth\nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n    shippingPlanet: { $not: { $eq: &quot;Earth&quot; } }\n  })\t\n</code></pre>\n</li>\n</ul>\n<p>Example (combine all 3)</p>\n<pre><code class=\"language-js\">// get all medium-expensive orders (not expensive) not bound for mars\n// include all high-expensive orders bound for Cayman Islands in this\norders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n\t$and: [\n\t  { totalAmount: { $gte: 1e3 } },\n\t  {\n\t\t$or: [\n\t\t  { totalAmount: { $lte: 5e3 } },\n\t\t  { shippingAddress: &quot;Cayman Islands&quot; },\n\t\t],\n\t  },\n\t  {\n\t\tshippingPlanet: { $not: { $eq: &quot;Mars&quot; } },\n\t  },\n\t],\n  })\n</code></pre>\n",
      "id": 108
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/3_in_oneOf.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/3_in_oneOf.html",
      "content": "# `in` (oneOf) operator\nCreated Monday 19 June 2023 at 02:38 am\n\n## 1. `$in`\n`$in` is a query operator. A better name for it would have been \"oneOf\".\nIt takes an array as value, and the filter matches when the DB attribute (document's) has a value that's one of the payload.\n\nBetter to show (example):\n```js\n// get all orders bound for India India and the US\n// i.e. shippingAdress is one of [\"India\", \"USA\"]\nconst orders = await db\n  .collection(\"orders\")\n  .find({\n\tshippingAddress: { $in: [\"India\", \"USA\"] },\n\t\n\t// `oneOf` would have been a better name (instead of `in`)\n  })\n```\n\n\n#ignorable Technically, `$in` is equivalent to an OR with equals.\n```js\nconst orders = await db\n  .collection(\"orders\")\n  .find({\n\t$or: [\n\t  {  shippingAddress: \"India\" },\n\t  {  shippingAddress:   \"USA\" }\n\t]\n\t\n\t// `oneOf` would have been a better name (instead of `in`)\n  })\n```\n\n\n## 2. `$nin`\n`$in` has an opposite, named `$nin`. A better name for this would have been \"notOneOf\".\n```js\n// get all orders that are not bound for India or USA\n\nconst orders = await db\n  .collection(\"orders\")\n  .find({\n\tshippingAddress: { $nin: [\"India\", \"USA\"] },\n\n\t// `notOneOf` would have been a better name (instead of `nin`)\n  })\n```\n\n#ignorable Technically, `$nin` is equivalent to an NOR with equals.",
      "html": "<h1 id=\"in-(oneof)-operator\"><code>in</code> (oneOf) operator <a class=\"heading-anchor-permalink\" href=\"#in-(oneof)-operator\">#</a></h1>\n<p>Created Monday 19 June 2023 at 02:38 am</p>\n<h2 id=\"1.-%24in\">1. <code>$in</code> <a class=\"heading-anchor-permalink\" href=\"#1.-%24in\">#</a></h2>\n<p><code>$in</code> is a query operator. A better name for it would have been “oneOf”.\nIt takes an array as value, and the filter matches when the DB attribute (document’s) has a value that’s one of the payload.</p>\n<p>Better to show (example):</p>\n<pre><code class=\"language-js\">// get all orders bound for India India and the US\n// i.e. shippingAdress is one of [&quot;India&quot;, &quot;USA&quot;]\nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n\tshippingAddress: { $in: [&quot;India&quot;, &quot;USA&quot;] },\n\t\n\t// `oneOf` would have been a better name (instead of `in`)\n  })\n</code></pre>\n<p>#ignorable Technically, <code>$in</code> is equivalent to an OR with equals.</p>\n<pre><code class=\"language-js\">const orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n\t$or: [\n\t  {  shippingAddress: &quot;India&quot; },\n\t  {  shippingAddress:   &quot;USA&quot; }\n\t]\n\t\n\t// `oneOf` would have been a better name (instead of `in`)\n  })\n</code></pre>\n<h2 id=\"2.-%24nin\">2. <code>$nin</code> <a class=\"heading-anchor-permalink\" href=\"#2.-%24nin\">#</a></h2>\n<p><code>$in</code> has an opposite, named <code>$nin</code>. A better name for this would have been “notOneOf”.</p>\n<pre><code class=\"language-js\">// get all orders that are not bound for India or USA\n\nconst orders = await db\n  .collection(&quot;orders&quot;)\n  .find({\n\tshippingAddress: { $nin: [&quot;India&quot;, &quot;USA&quot;] },\n\n\t// `notOneOf` would have been a better name (instead of `nin`)\n  })\n</code></pre>\n<p>#ignorable Technically, <code>$nin</code> is equivalent to an NOR with equals.</p>\n",
      "id": 109
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/4_Get_all_collections.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/4_Get_all_collections.html",
      "content": "# 4. Get all collections\nCreated Sunday 25 June 2023 at 09:14 pm\n\n## Get collections (mongosh)\n```mongosh\n> use 'some-xyz-database'\n> db.getCollectionNames()\n\n# Output: ['orders', 'carts', 'products', 'users' ]\n```\n\n\n## Get collections (Node.js)\nCode - `db.listCollections().toArray()`\n```js\nconst db = getDb();\n\nconst collectionObjects = await db.listCollections().toArray();\nconst collectionNames = collectionObjects.map((item) => item.name);\n```\nNote:\n- [getDb code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65)\n\n",
      "html": "<h1 id=\"4.-get-all-collections\">4. Get all collections <a class=\"heading-anchor-permalink\" href=\"#4.-get-all-collections\">#</a></h1>\n<p>Created Sunday 25 June 2023 at 09:14 pm</p>\n<h2 id=\"get-collections-(mongosh)\">Get collections (mongosh) <a class=\"heading-anchor-permalink\" href=\"#get-collections-(mongosh)\">#</a></h2>\n<pre><code class=\"language-mongosh\">&gt; use 'some-xyz-database'\n&gt; db.getCollectionNames()\n\n# Output: ['orders', 'carts', 'products', 'users' ]\n</code></pre>\n<h2 id=\"get-collections-(node.js)\">Get collections (Node.js) <a class=\"heading-anchor-permalink\" href=\"#get-collections-(node.js)\">#</a></h2>\n<p>Code - <code>db.listCollections().toArray()</code></p>\n<pre><code class=\"language-js\">const db = getDb();\n\nconst collectionObjects = await db.listCollections().toArray();\nconst collectionNames = collectionObjects.map((item) =&gt; item.name);\n</code></pre>\n<p>Note:</p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65\">getDb code</a></li>\n</ul>\n",
      "id": 110
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/5_Dropping_collections.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/extras/5_Dropping_collections.html",
      "content": "# 5. Dropping collections\nCreated Sunday 25 June 2023 at 09:25 pm\n\n## Mongosh\n```sh\n> use 'some-xyz-database'\n> db.myCollectionName.drop()\n```\n\n\n## Node.js\n```js\nconst { getDb } = require(\"path_to_util\");\nawait db.collection('myCollection').drop();\n```\nNote:\n- [getDb code](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65)\n\n\n## Delete all collections (Node.js)\nGet list of collection and drop each one individually.\n\nExample code:\n```js\nconst db = getDb();\n\nconst collectionObjects = await db.listCollections().toArray();\nconst collectionNames = collectionObjects.map((obj) => obj.name);\n\nPromise.all(\n  collectionNames.map(async (collectionName) => {\n\tconsole.log(\"Dropping collection\", collectionName);\n\tawait db.collection(collectionName).drop();\n  })\n);\n```\n[Code](https://github.com/exemplar-codes/online-shop-sessions-and-cookies/commit/12ca720d866888ab02d996ea78a4d4a08e1c7e04)",
      "html": "<h1 id=\"5.-dropping-collections\">5. Dropping collections <a class=\"heading-anchor-permalink\" href=\"#5.-dropping-collections\">#</a></h1>\n<p>Created Sunday 25 June 2023 at 09:25 pm</p>\n<h2 id=\"mongosh\">Mongosh <a class=\"heading-anchor-permalink\" href=\"#mongosh\">#</a></h2>\n<pre><code class=\"language-sh\">&gt; use 'some-xyz-database'\n&gt; db.myCollectionName.drop()\n</code></pre>\n<h2 id=\"node.js\">Node.js <a class=\"heading-anchor-permalink\" href=\"#node.js\">#</a></h2>\n<pre><code class=\"language-js\">const { getDb } = require(&quot;path_to_util&quot;);\nawait db.collection('myCollection').drop();\n</code></pre>\n<p>Note:</p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb/commit/a0e061c4294ee11922e7d8336372214e16c42c65\">getDb code</a></li>\n</ul>\n<h2 id=\"delete-all-collections-(node.js)\">Delete all collections (Node.js) <a class=\"heading-anchor-permalink\" href=\"#delete-all-collections-(node.js)\">#</a></h2>\n<p>Get list of collection and drop each one individually.</p>\n<p>Example code:</p>\n<pre><code class=\"language-js\">const db = getDb();\n\nconst collectionObjects = await db.listCollections().toArray();\nconst collectionNames = collectionObjects.map((obj) =&gt; obj.name);\n\nPromise.all(\n  collectionNames.map(async (collectionName) =&gt; {\n\tconsole.log(&quot;Dropping collection&quot;, collectionName);\n\tawait db.collection(collectionName).drop();\n  })\n);\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-sessions-and-cookies/commit/12ca720d866888ab02d996ea78a4d4a08e1c7e04\">Code</a></p>\n",
      "id": 111
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/tempREADME_archived.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/tempREADME_archived.html",
      "content": "The pages without title (just have lecture number) indicate they were consumed in preview/bing mode.",
      "html": "<p>The pages without title (just have lecture number) indicate they were consumed in preview/bing mode.</p>\n",
      "id": 112
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/todo_archived.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/12_Working_with_NoSQL_and_MongoDB/todo_archived.html",
      "content": "I did a binge sweep of this section. Todo:\n1. Notes are mostly OK, and not rough. Very minor changes needed.\n2. Did not implement, play with the code, do it.",
      "html": "<p>I did a binge sweep of this section. Todo:</p>\n<ol>\n<li>Notes are mostly OK, and not rough. Very minor changes needed.</li>\n<li>Did not implement, play with the code, do it.</li>\n</ol>\n",
      "id": 113
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/209_Module_Introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/209_Module_Introduction.html",
      "content": "# 209. Module Introduction\nCreated Sunday 7 May 2023 at 03:37 pm\n\nMongoose is an ORM for MongoDB. Technically, Mongoose is a an Object-Document Mapping (ODM) library, since MongoDB is not a \"relational\" database (the R in ORM).\n\nThe idea is the same - focus on the app code, and not the query language and database constructs.\n\nhttps://www.mongodb.com/developer/languages/javascript/mongoose-versus-nodejs-driver/\n\n![](../../../../assets/209_Module_Introduction-image-1-a636de25.png)",
      "html": "<h1 id=\"209.-module-introduction\">209. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#209.-module-introduction\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 03:37 pm</p>\n<p>Mongoose is an ORM for MongoDB. Technically, Mongoose is a an Object-Document Mapping (ODM) library, since MongoDB is not a “relational” database (the R in ORM).</p>\n<p>The idea is the same - focus on the app code, and not the query language and database constructs.</p>\n<p><a href=\"https://www.mongodb.com/developer/languages/javascript/mongoose-versus-nodejs-driver/\">https://www.mongodb.com/developer/languages/javascript/mongoose-versus-nodejs-driver/</a></p>\n<p><img src=\"../../../../assets/209_Module_Introduction-image-1-a636de25.png\" alt=\"\"></p>\n",
      "id": 114
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/210_Core_concepts_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/210_Core_concepts_in_Mongoose.html",
      "content": "# 210. Core concepts in Mongoose\n\nCreated Sunday 28 May 2023 at 06:10 am\n\nThe core concepts are\n\n1. Schemas and Models - e.g. User, Product\n2. Instances - `const user = new User()`\n3. Queries - `User.find()`\n\n![](../../../../assets/210_Core_concepts_in_Mongoose-image-1-a636de25.png)\n\nSo it's very similar to how Sequelize helps with SQL databases.\n",
      "html": "<h1 id=\"210.-core-concepts-in-mongoose\">210. Core concepts in Mongoose <a class=\"heading-anchor-permalink\" href=\"#210.-core-concepts-in-mongoose\">#</a></h1>\n<p>Created Sunday 28 May 2023 at 06:10 am</p>\n<p>The core concepts are</p>\n<ol>\n<li>Schemas and Models - e.g. User, Product</li>\n<li>Instances - <code>const user = new User()</code></li>\n<li>Queries - <code>User.find()</code></li>\n</ol>\n<p><img src=\"../../../../assets/210_Core_concepts_in_Mongoose-image-1-a636de25.png\" alt=\"\"></p>\n<p>So it’s very similar to how Sequelize helps with SQL databases.</p>\n",
      "id": 115
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Connection_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Connection_in_Mongoose.html",
      "content": "# 211. Connecting to the MongoDB Server with Mongoose\nCreated Sunday 7 May 2023 at 08:25 pm\n\nMongoose docs  - https://mongoosejs.com/docs/\n\nInstall Mongoose by running `npm install mongoose`. It's a core dependency of course.\n\nMongoose manages one connection for us. Our code will change like this:\n```js\nconst mongoose = require('mongoose');\nconst database_password = 'get it from env file';\n\n// express code\n\nmongoose\n\t.connect('SRV_link_with_username_and_password')\n\t.then(() => app.listen(3000))\n\t.catch(console.log);\n```\nAt all places of use, we can use `mongoose` directly (by importing the package), there's no need for a util/database.js file. We can delete that file.\n\n\n## We *may* still want a database.js util\nCreated Monday 29 May 2023 at 01:50 am\n\nMongoose has very little connection code, but we can still have a util for database connection. The goal here is to keep the structure same for mongoose and mongodb, and not clutter the main app file.\n\n```js\n// database.js\nconst mongoose = require(\"mongoose\");\n\n// Note: 'mongooseConnect' is a name I made up\nconst mongooseConnect = async (cb) =>\n  mongoose\n    .connect(\n      `mongodb+srv://sanjarcode-nodejscompleteguide:${database_password}@cluster-nodejscompleteg.nuohpop.mongodb.net/?retryWrites=true&w=majority`\n    )\n    .then(cb)\n    .catch(console.log);\n\nmodule.exports = {\n  mongooseConnect,\n  \n  // remove these\n  // mongoConnect,\n  // getDb,\n};\n```\n\n```js\n// app.js\nconst {\n  // mongoConnect, // not needed\n  mongooseConnect\n} = require(\"./util/database.js\");\n// express code\n\n// mongoConnect(async (client) => {\n//  app.listen(3000);\n// });\n// changes to somehing similar\n\nmongooseConnect(async (mongooseObject) => {\n  app.listen(3000);\n});\n```\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/f72178d5a9f220649ba31cf24f05a8a6bf33993a)",
      "html": "<h1 id=\"211.-connecting-to-the-mongodb-server-with-mongoose\">211. Connecting to the MongoDB Server with Mongoose <a class=\"heading-anchor-permalink\" href=\"#211.-connecting-to-the-mongodb-server-with-mongoose\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 08:25 pm</p>\n<p>Mongoose docs  - <a href=\"https://mongoosejs.com/docs/\">https://mongoosejs.com/docs/</a></p>\n<p>Install Mongoose by running <code>npm install mongoose</code>. It’s a core dependency of course.</p>\n<p>Mongoose manages one connection for us. Our code will change like this:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst database_password = 'get it from env file';\n\n// express code\n\nmongoose\n\t.connect('SRV_link_with_username_and_password')\n\t.then(() =&gt; app.listen(3000))\n\t.catch(console.log);\n</code></pre>\n<p>At all places of use, we can use <code>mongoose</code> directly (by importing the package), there’s no need for a util/database.js file. We can delete that file.</p>\n<h2 id=\"we-may-still-want-a-database.js-util\">We <em>may</em> still want a database.js util <a class=\"heading-anchor-permalink\" href=\"#we-may-still-want-a-database.js-util\">#</a></h2>\n<p>Created Monday 29 May 2023 at 01:50 am</p>\n<p>Mongoose has very little connection code, but we can still have a util for database connection. The goal here is to keep the structure same for mongoose and mongodb, and not clutter the main app file.</p>\n<pre><code class=\"language-js\">// database.js\nconst mongoose = require(&quot;mongoose&quot;);\n\n// Note: 'mongooseConnect' is a name I made up\nconst mongooseConnect = async (cb) =&gt;\n  mongoose\n    .connect(\n      `mongodb+srv://sanjarcode-nodejscompleteguide:${database_password}@cluster-nodejscompleteg.nuohpop.mongodb.net/?retryWrites=true&amp;w=majority`\n    )\n    .then(cb)\n    .catch(console.log);\n\nmodule.exports = {\n  mongooseConnect,\n  \n  // remove these\n  // mongoConnect,\n  // getDb,\n};\n</code></pre>\n<pre><code class=\"language-js\">// app.js\nconst {\n  // mongoConnect, // not needed\n  mongooseConnect\n} = require(&quot;./util/database.js&quot;);\n// express code\n\n// mongoConnect(async (client) =&gt; {\n//  app.listen(3000);\n// });\n// changes to somehing similar\n\nmongooseConnect(async (mongooseObject) =&gt; {\n  app.listen(3000);\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/f72178d5a9f220649ba31cf24f05a8a6bf33993a\">Code</a></p>\n",
      "id": 116
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Using_MongoDB_and_Mongoose_together.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/211_Using_MongoDB_and_Mongoose_together.html",
      "content": "# 211. Using MongoDB and Mongoose together\nCreated Monday 29 May 2023 at 02:34 am\n\naka \"Using raw MongoDB in Mongoose\"\n\nMongoose and MongoDB can be used together. A DX disadvantage of doing this is that it makes using the database usage in the app a little confusing. \n\nBut this (mixing) may be done deliberately, in some cases - if we need to use raw MongoDB (say a feature is absent from Mongoose and we wish to write a utility for it).\n\nThis is easily possible since, Mongoose is an abstraction over MongoDB.\n\nTo do this, simply connect using Mongoose, and store the corresponding \"MongoDB\" connection and database in a variable we can export anywhere in the app (the `_db` and `getDb` we have now). Under the hood, Mongoose does create a MongoDB connection. \n\n**Also, there's no need to install or import the 'mongodb' package.**\n\nUpdating the code:\n```js\n// database.js\nconst mongoose = require(\"mongoose\");\nconst database_password = 'get it from env file';\n\nlet _db;\n\nconst mongooseConnect = async (cb) =>\n  mongoose\n    .connect(\n      `mongodb+srv://sanjarcode-nodejscompleteguide:${database_password}@cluster-nodejscompleteg.nuohpop.mongodb.net/?retryWrites=true&w=majority`\n    )\n    .then(mongooseObject => {\n      const mongoDbClient = mongooseObject.connection.getClient();\n\n\t// get underlying MongoDB connection\n      _db = mongoDbClient.db();\n    })\n    .then(cb)\n    .catch(console.log);\n\n\nconst getDb = () => {\n  if (_db) {\n    return _db;\n  }\n  throw \"No database found!\";\n};\n\n\nmodule.exports = {\n  mongooseConnect,\n  getDb\n};\n```\n\nWe have effectively made it possible to write simple MongoDB without any Mongoose constraints. \n\nFunnily enough, the app will work now without changes - it has no Mongoose models, but MongoDB code is there.\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/4c4dfd7938d15a3c448b8effe550c333017c3f9f)",
      "html": "<h1 id=\"211.-using-mongodb-and-mongoose-together\">211. Using MongoDB and Mongoose together <a class=\"heading-anchor-permalink\" href=\"#211.-using-mongodb-and-mongoose-together\">#</a></h1>\n<p>Created Monday 29 May 2023 at 02:34 am</p>\n<p>aka “Using raw MongoDB in Mongoose”</p>\n<p>Mongoose and MongoDB can be used together. A DX disadvantage of doing this is that it makes using the database usage in the app a little confusing.</p>\n<p>But this (mixing) may be done deliberately, in some cases - if we need to use raw MongoDB (say a feature is absent from Mongoose and we wish to write a utility for it).</p>\n<p>This is easily possible since, Mongoose is an abstraction over MongoDB.</p>\n<p>To do this, simply connect using Mongoose, and store the corresponding “MongoDB” connection and database in a variable we can export anywhere in the app (the <code>_db</code> and <code>getDb</code> we have now). Under the hood, Mongoose does create a MongoDB connection.</p>\n<p><strong>Also, there’s no need to install or import the ‘mongodb’ package.</strong></p>\n<p>Updating the code:</p>\n<pre><code class=\"language-js\">// database.js\nconst mongoose = require(&quot;mongoose&quot;);\nconst database_password = 'get it from env file';\n\nlet _db;\n\nconst mongooseConnect = async (cb) =&gt;\n  mongoose\n    .connect(\n      `mongodb+srv://sanjarcode-nodejscompleteguide:${database_password}@cluster-nodejscompleteg.nuohpop.mongodb.net/?retryWrites=true&amp;w=majority`\n    )\n    .then(mongooseObject =&gt; {\n      const mongoDbClient = mongooseObject.connection.getClient();\n\n\t// get underlying MongoDB connection\n      _db = mongoDbClient.db();\n    })\n    .then(cb)\n    .catch(console.log);\n\n\nconst getDb = () =&gt; {\n  if (_db) {\n    return _db;\n  }\n  throw &quot;No database found!&quot;;\n};\n\n\nmodule.exports = {\n  mongooseConnect,\n  getDb\n};\n</code></pre>\n<p>We have effectively made it possible to write simple MongoDB without any Mongoose constraints.</p>\n<p>Funnily enough, the app will work now without changes - it has no Mongoose models, but MongoDB code is there.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/4c4dfd7938d15a3c448b8effe550c333017c3f9f\">Code</a></p>\n",
      "id": 117
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/212_Creating_Schemas_and_Models.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/212_Creating_Schemas_and_Models.html",
      "content": "# 212. Creating Schemas and Models\nCreated Sunday 7 May 2023 at 08:32 pm (binge)\nCreated Monday 29 May 2023 at 03:51 am (code)\n\nIn the product model file, comment out all the code, and rewrite.\nThere are two steps in model creation:\n1. Schema - this is a abstract blueprint of a \"model\", it may or may not have a corresponding collection.\n\t```js\n\tconst mongoose = require('mongoose');\n\tconst Schema = mongoose.Schema;\n\t\n\tconst productSchema = new Schema({\n\t  // id // 1. can be omitted, is auto assigned for all entities\n\t  \n\t  title: { type: String, required: true },\n\t  price: { type: Number, required: true },\n\t  description: String, // 2. shorthand, required is false by default\n\t  imageUrl: String, // `required` is false by default\n\t});\n\t```\n2. Model - created from Schemas, represents a collection. Adding in the same file.\n\t```js\n\tconst Product = mongoose.model('Product', productSchema);\n\n\tmodule.exports = Product;\n\t```\n\nNote: Mongoose adds `_id` field to every model by default. So it can be omitted from the Schema.\n\n[Product model - code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/ddbb7ec4b7c22f77af457b38e52218174853a547)",
      "html": "<h1 id=\"212.-creating-schemas-and-models\">212. Creating Schemas and Models <a class=\"heading-anchor-permalink\" href=\"#212.-creating-schemas-and-models\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 08:32 pm (binge)\nCreated Monday 29 May 2023 at 03:51 am (code)</p>\n<p>In the product model file, comment out all the code, and rewrite.\nThere are two steps in model creation:</p>\n<ol>\n<li>Schema - this is a abstract blueprint of a “model”, it may or may not have a corresponding collection.<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst productSchema = new Schema({\n  // id // 1. can be omitted, is auto assigned for all entities\n  \n  title: { type: String, required: true },\n  price: { type: Number, required: true },\n  description: String, // 2. shorthand, required is false by default\n  imageUrl: String, // `required` is false by default\n});\n</code></pre>\n</li>\n<li>Model - created from Schemas, represents a collection. Adding in the same file.<pre><code class=\"language-js\">const Product = mongoose.model('Product', productSchema);\n\nmodule.exports = Product;\n</code></pre>\n</li>\n</ol>\n<p>Note: Mongoose adds <code>_id</code> field to every model by default. So it can be omitted from the Schema.</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/ddbb7ec4b7c22f77af457b38e52218174853a547\">Product model - code</a></p>\n",
      "id": 118
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/213_Saving_data_through_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/213_Saving_data_through_Mongoose.html",
      "content": "# 213. Saving data through Mongoose\nCreated Sunday 7 May 2023 at 08:47 pm (binge)\nCreated Monday 29 May 2023 at 04:08 am (code)\n\nThe model code in our controllers will most remain the same. Few changes are needed though:\n```js\nconst Product = require('../models/Product');\n\n\nconst newProduct = new Product(title, price, description, imageUrl);\n// will change to\nconst newProduct = new Product({ title, price, description, imageUrl });\n\n\n// save remains unchanged, since Mongoose adds a .save for instances\nnewProduct\n\t.save()\n\t.then()\n\t.catch();\n\n// OR, if you prefer async-await\ntry { await newProduct.save(); }\ncatch(e) { }\n```\nThe `.save()` instance method will create a new collection (if it doesn't exist) and add a product in it.\n\n**Collection name** - The collection is named 'products', even though we never specified it. This is because Mongoose, by default, names the collection as a pluralized lowercase of the model name (which we did specify). `Product` --> `products`\n\n**Returns created instance** - Mongoose's `.save()` will return the complete created object, unlike MongoDB (which only returns the `_id`). Convenient!\n\nhttps://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/ddbb7ec4b7c22f77af457b38e52218174853a547 - ignore the `userId` attribute for now, assume it's absent. We'll look at associations later.\n\n## Shorthand - `.create`\n```js\n// construct + .save()\nconst newProduct = new Product({/* stuff */});\nconst newSavedProduct = await newProduct.save();\n\n\n// can be shortened to .create\nconst newSavedProduct = Product.create({/* stuff */});\n```\nReturns created document. The return value is the same as `new MyModel()` with `.save`",
      "html": "<h1 id=\"213.-saving-data-through-mongoose\">213. Saving data through Mongoose <a class=\"heading-anchor-permalink\" href=\"#213.-saving-data-through-mongoose\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 08:47 pm (binge)\nCreated Monday 29 May 2023 at 04:08 am (code)</p>\n<p>The model code in our controllers will most remain the same. Few changes are needed though:</p>\n<pre><code class=\"language-js\">const Product = require('../models/Product');\n\n\nconst newProduct = new Product(title, price, description, imageUrl);\n// will change to\nconst newProduct = new Product({ title, price, description, imageUrl });\n\n\n// save remains unchanged, since Mongoose adds a .save for instances\nnewProduct\n\t.save()\n\t.then()\n\t.catch();\n\n// OR, if you prefer async-await\ntry { await newProduct.save(); }\ncatch(e) { }\n</code></pre>\n<p>The <code>.save()</code> instance method will create a new collection (if it doesn’t exist) and add a product in it.</p>\n<p><strong>Collection name</strong> - The collection is named ‘products’, even though we never specified it. This is because Mongoose, by default, names the collection as a pluralized lowercase of the model name (which we did specify). <code>Product</code> --&gt; <code>products</code></p>\n<p><strong>Returns created instance</strong> - Mongoose’s <code>.save()</code> will return the complete created object, unlike MongoDB (which only returns the <code>_id</code>). Convenient!</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/ddbb7ec4b7c22f77af457b38e52218174853a547\">https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/ddbb7ec4b7c22f77af457b38e52218174853a547</a> - ignore the <code>userId</code> attribute for now, assume it’s absent. We’ll look at associations later.</p>\n<h2 id=\"shorthand---.create\">Shorthand - <code>.create</code> <a class=\"heading-anchor-permalink\" href=\"#shorthand---.create\">#</a></h2>\n<pre><code class=\"language-js\">// construct + .save()\nconst newProduct = new Product({/* stuff */});\nconst newSavedProduct = await newProduct.save();\n\n\n// can be shortened to .create\nconst newSavedProduct = Product.create({/* stuff */});\n</code></pre>\n<p>Returns created document. The return value is the same as <code>new MyModel()</code> with <code>.save</code></p>\n",
      "id": 119
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/214_Fetching_products.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/214_Fetching_products.html",
      "content": "# 214. Fetching products\nCreated Monday 29 May 2023 at 04:32 am\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/8be419a93fb9639e5999dc9b5573253092930e64)\n\n## Fetching all products (i.e. fetch multiple)\nCreated Sunday 7 May 2023 at 09:08 pm (binge)\n\nUse the Mongoose provided `find` method. Syntax:\n```js\nProduct.find() // has array behavior by default, unlike pure MongoDB\n\nProduct.find().cursor().then(); // also supported: for generator/pagination behavior\n```\n\nLet's update the controller:\n```js\nShopController.getProducts = (req, res, next) => {\n  const allProducts = await Product.find();\n\n  render('./products-list-view', { products: allProducts });\n};\n```\n\nNote: Just like MongoDB - no arguments for `.find` means 'get everything'.\n\n\n## 215. Fetching a single product\nCreated Sunday 7 May 2023 at 09:08 pm\nUse the Mongoose provided `findById` method. Syntax:\n```js\nconst product = await Product.findById(prodId);\n\n// a major advantage here is that prodId can be a string, so we don't need to send a mongodb.ObjectId instance\n```\n\nUpdating the controller:\n```js\nShopController.getProducts = async (req, res, next) => {\n  const prodId = req.params.productId;\n  const product = await Product.findById(prodId);\n\n  render('./product-detail-view', { product });\n};\n```\n\nNote: Just like MongoDB - no arguments for `.findOne` means 'get any'.\n\n\n## Mongoose allows for string `_id`, mostly\nMongoDB is strict about values given to it for `_id` - they should be of type ObjectId.\n\nMongoose is more flexible with this, as it works fine even if the string equivalent is used. This behavior is consistent across all query methods.\n\nThere is a caveat though - in query methods inherited from 'mongodb', like `.find`, the `_id` as direct string argument doesn't work. mAid - `mongodb` shorthand is left as is.\n\nDetails:\n- Passing direct `_id` works only if it's passed as an ObjectId - string won't work.\n- When `_id` is passed in an object, both string or ObjectId work.\n```js\nconst Product = require('./path-to-models/Product');\nconst mongoose = require(\"mongoose\");\nconst ObjectId = mongoose.mongo.ObjectId;\n\n\nProduct.find({ _id: \"6474f8ae83090103435e19d1\"});               // ok\nProduct.find({ _id: new ObjectId(\"6474f8ae83090103435e19d1\")}); // ok\nProduct.find(new ObjectId(\"6474f8ae83090103435e19d1\"));         // ok\n\nProduct.find(\"6474f8ae83090103435e19d1\"); // fails - direct string\n```\n\n\n```js\nProduct.findOne({ _id: \"6474f8ae83090103435e19d1\"});               // ok\nProduct.findOne({ _id: new ObjectId(\"6474f8ae83090103435e19d1\")}); // ok\nProduct.findOne(new ObjectId(\"6474f8ae83090103435e19d1\"));         // ok\n\nProduct.findOne(\"6474f8ae83090103435e19d1\"); // fails - direct string\n```\n\n\n## __findByIdAnd*()__ methods\nDue to the \"direct \\_id string argument\" not allowed caveat, Mongoose provides it's own convenience functions.\n\nExample - for the `.findOne` case (above), Mongoose provides a function that allows `_id` as direct string argument. It's called `.findById`. Example:\n```js\nProduct.findById(\"6474f8ae83090103435e19d1\"); // works !\n\n// findById accepts ObjectId too\nProduct.findById(new ObjectId(\"6474f8ae83090103435e19d1\")); // works\n```\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/8791ad4e6be63cff915ed2f8e8163ad8f98c6e66)\n\nNote: this behavior of `*ById` accepting both (string or ObjectId) directly and other ones needing it in an object (string and ObjectId both accepted), is consistent for all such query methods - `.findByIdAndRemove`, `.findByIdAndUpdate`",
      "html": "<h1 id=\"214.-fetching-products\">214. Fetching products <a class=\"heading-anchor-permalink\" href=\"#214.-fetching-products\">#</a></h1>\n<p>Created Monday 29 May 2023 at 04:32 am</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/8be419a93fb9639e5999dc9b5573253092930e64\">Code</a></p>\n<h2 id=\"fetching-all-products-(i.e.-fetch-multiple)\">Fetching all products (i.e. fetch multiple) <a class=\"heading-anchor-permalink\" href=\"#fetching-all-products-(i.e.-fetch-multiple)\">#</a></h2>\n<p>Created Sunday 7 May 2023 at 09:08 pm (binge)</p>\n<p>Use the Mongoose provided <code>find</code> method. Syntax:</p>\n<pre><code class=\"language-js\">Product.find() // has array behavior by default, unlike pure MongoDB\n\nProduct.find().cursor().then(); // also supported: for generator/pagination behavior\n</code></pre>\n<p>Let’s update the controller:</p>\n<pre><code class=\"language-js\">ShopController.getProducts = (req, res, next) =&gt; {\n  const allProducts = await Product.find();\n\n  render('./products-list-view', { products: allProducts });\n};\n</code></pre>\n<p>Note: Just like MongoDB - no arguments for <code>.find</code> means ‘get everything’.</p>\n<h2 id=\"215.-fetching-a-single-product\">215. Fetching a single product <a class=\"heading-anchor-permalink\" href=\"#215.-fetching-a-single-product\">#</a></h2>\n<p>Created Sunday 7 May 2023 at 09:08 pm\nUse the Mongoose provided <code>findById</code> method. Syntax:</p>\n<pre><code class=\"language-js\">const product = await Product.findById(prodId);\n\n// a major advantage here is that prodId can be a string, so we don't need to send a mongodb.ObjectId instance\n</code></pre>\n<p>Updating the controller:</p>\n<pre><code class=\"language-js\">ShopController.getProducts = async (req, res, next) =&gt; {\n  const prodId = req.params.productId;\n  const product = await Product.findById(prodId);\n\n  render('./product-detail-view', { product });\n};\n</code></pre>\n<p>Note: Just like MongoDB - no arguments for <code>.findOne</code> means ‘get any’.</p>\n<h2 id=\"mongoose-allows-for-string-_id%2C-mostly\">Mongoose allows for string <code>_id</code>, mostly <a class=\"heading-anchor-permalink\" href=\"#mongoose-allows-for-string-_id%2C-mostly\">#</a></h2>\n<p>MongoDB is strict about values given to it for <code>_id</code> - they should be of type ObjectId.</p>\n<p>Mongoose is more flexible with this, as it works fine even if the string equivalent is used. This behavior is consistent across all query methods.</p>\n<p>There is a caveat though - in query methods inherited from ‘mongodb’, like <code>.find</code>, the <code>_id</code> as direct string argument doesn’t work. mAid - <code>mongodb</code> shorthand is left as is.</p>\n<p>Details:</p>\n<ul>\n<li>Passing direct <code>_id</code> works only if it’s passed as an ObjectId - string won’t work.</li>\n<li>When <code>_id</code> is passed in an object, both string or ObjectId work.</li>\n</ul>\n<pre><code class=\"language-js\">const Product = require('./path-to-models/Product');\nconst mongoose = require(&quot;mongoose&quot;);\nconst ObjectId = mongoose.mongo.ObjectId;\n\n\nProduct.find({ _id: &quot;6474f8ae83090103435e19d1&quot;});               // ok\nProduct.find({ _id: new ObjectId(&quot;6474f8ae83090103435e19d1&quot;)}); // ok\nProduct.find(new ObjectId(&quot;6474f8ae83090103435e19d1&quot;));         // ok\n\nProduct.find(&quot;6474f8ae83090103435e19d1&quot;); // fails - direct string\n</code></pre>\n<pre><code class=\"language-js\">Product.findOne({ _id: &quot;6474f8ae83090103435e19d1&quot;});               // ok\nProduct.findOne({ _id: new ObjectId(&quot;6474f8ae83090103435e19d1&quot;)}); // ok\nProduct.findOne(new ObjectId(&quot;6474f8ae83090103435e19d1&quot;));         // ok\n\nProduct.findOne(&quot;6474f8ae83090103435e19d1&quot;); // fails - direct string\n</code></pre>\n<h2 id=\"findbyidand*()-methods\"><strong>findByIdAnd*()</strong> methods <a class=\"heading-anchor-permalink\" href=\"#findbyidand*()-methods\">#</a></h2>\n<p>Due to the “direct _id string argument” not allowed caveat, Mongoose provides it’s own convenience functions.</p>\n<p>Example - for the <code>.findOne</code> case (above), Mongoose provides a function that allows <code>_id</code> as direct string argument. It’s called <code>.findById</code>. Example:</p>\n<pre><code class=\"language-js\">Product.findById(&quot;6474f8ae83090103435e19d1&quot;); // works !\n\n// findById accepts ObjectId too\nProduct.findById(new ObjectId(&quot;6474f8ae83090103435e19d1&quot;)); // works\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/8791ad4e6be63cff915ed2f8e8163ad8f98c6e66\">Code</a></p>\n<p>Note: this behavior of <code>*ById</code> accepting both (string or ObjectId) directly and other ones needing it in an object (string and ObjectId both accepted), is consistent for all such query methods - <code>.findByIdAndRemove</code>, <code>.findByIdAndUpdate</code></p>\n",
      "id": 120
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/215_lean_and__doc_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/215_lean_and__doc_in_Mongoose.html",
      "content": "# 215. `.lean()` and `._doc` in Mongoose\nCreated Thursday 8 June 2023 at 09:20 am\n\n## An annoying default\nMongoose has an annoying default - each documents returned in a query response don't have their attributes attached as keys. See this for clarity:\n```js\nconst product = await Product.findById(\"64814fc6b09a7e369573ad6d\");\n\n// printing the response (\"looks\" fine)\nproduct = {\n  _id: new ObjectId(\"64814fc6b09a7e369573ad6d\"),\n  price: 1000,\n  title: 'A laptop',\n  description: 'A performant, quiet laptop',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/b/bb/Alienware_M14x_%282%29.jpg',\n  userId: new ObjectId(\"64814fc6b09a7e369573ad69\"),\n  __v: 0\n}\n\n// but, observe the keys (Object.keys(product))\n[ '$__', '$isNew', '_doc' ] // wtf? attributes are absent\n\n// However, direct (dot) access on the object will work, despite key being absent\nproduct.title\n```\n\nTitle is simple and direct attribute of Product, still it's absent in keys array. Weird.\n\nThe reason for this is that a Mongoose document object is more complex than a plain JavaScript object (aka POJO), and the people behind Mongoose were OK with keys not being directly available - for efficiency's sake.\n\n\n## Accessing POJO equivalent (`.doc` property)\nOne can still access the product as a POJO, easily, by using `._doc` property - this has all the keys as expected.\n```js\nproduct._doc == \n{\n  _id: new ObjectId(\"64814fc6b09a7e369573ad6d\"),\n  price: 1000,\n  title: 'A laptop',\n  description: 'A performant, quiet laptop',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/b/bb/Alienware_M14x_%282%29.jpg',\n  userId: new ObjectId(\"64814fc6b09a7e369573ad69\"),\n  __v: 0\n} \n\nObject.keys(product._doc) ==\n[ '_id', 'price', 'title', 'description', 'imageUrl', 'userId', '__v' ]\n```\n\n\n## Keeping it simple (the `.lean()` escape hatch)\nDoing `._doc` in business logic feels like a bad idea.\nMongoose provides a way to directly get documents as POJOs.\n\nTo do this, just do a `.lean()` at the end of a query.\n\n```js\nconst myProduct = await Product.findOne(); // weird, have to use .doc\nconst myProducts = await Product.find(); // weird, have to use .doc on each element\n\n// simpler\nconst myProduct = await Product.findOne().lean(); // simple\nObject.keys(myProduct); // contains attributes as expected\n\nconst myProducts = await Product.find().lean();\nObject.keys(myProduct[0]); // contains attributes as expected\n```\n\nNote: \n- `.lean()` is very useful, especially when for client side APIs and serializers.\n- Using `.lean()` does have a **disadvantage** - the returned entities are POJOs, and therefore lack the methods and properties a Mongoose object would have had.",
      "html": "<h1 id=\"215.-.lean()-and-._doc-in-mongoose\">215. <code>.lean()</code> and <code>._doc</code> in Mongoose <a class=\"heading-anchor-permalink\" href=\"#215.-.lean()-and-._doc-in-mongoose\">#</a></h1>\n<p>Created Thursday 8 June 2023 at 09:20 am</p>\n<h2 id=\"an-annoying-default\">An annoying default <a class=\"heading-anchor-permalink\" href=\"#an-annoying-default\">#</a></h2>\n<p>Mongoose has an annoying default - each documents returned in a query response don’t have their attributes attached as keys. See this for clarity:</p>\n<pre><code class=\"language-js\">const product = await Product.findById(&quot;64814fc6b09a7e369573ad6d&quot;);\n\n// printing the response (&quot;looks&quot; fine)\nproduct = {\n  _id: new ObjectId(&quot;64814fc6b09a7e369573ad6d&quot;),\n  price: 1000,\n  title: 'A laptop',\n  description: 'A performant, quiet laptop',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/b/bb/Alienware_M14x_%282%29.jpg',\n  userId: new ObjectId(&quot;64814fc6b09a7e369573ad69&quot;),\n  __v: 0\n}\n\n// but, observe the keys (Object.keys(product))\n[ '$__', '$isNew', '_doc' ] // wtf? attributes are absent\n\n// However, direct (dot) access on the object will work, despite key being absent\nproduct.title\n</code></pre>\n<p>Title is simple and direct attribute of Product, still it’s absent in keys array. Weird.</p>\n<p>The reason for this is that a Mongoose document object is more complex than a plain JavaScript object (aka POJO), and the people behind Mongoose were OK with keys not being directly available - for efficiency’s sake.</p>\n<h2 id=\"accessing-pojo-equivalent-(.doc-property)\">Accessing POJO equivalent (<code>.doc</code> property) <a class=\"heading-anchor-permalink\" href=\"#accessing-pojo-equivalent-(.doc-property)\">#</a></h2>\n<p>One can still access the product as a POJO, easily, by using <code>._doc</code> property - this has all the keys as expected.</p>\n<pre><code class=\"language-js\">product._doc == \n{\n  _id: new ObjectId(&quot;64814fc6b09a7e369573ad6d&quot;),\n  price: 1000,\n  title: 'A laptop',\n  description: 'A performant, quiet laptop',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/b/bb/Alienware_M14x_%282%29.jpg',\n  userId: new ObjectId(&quot;64814fc6b09a7e369573ad69&quot;),\n  __v: 0\n} \n\nObject.keys(product._doc) ==\n[ '_id', 'price', 'title', 'description', 'imageUrl', 'userId', '__v' ]\n</code></pre>\n<h2 id=\"keeping-it-simple-(the-.lean()-escape-hatch)\">Keeping it simple (the <code>.lean()</code> escape hatch) <a class=\"heading-anchor-permalink\" href=\"#keeping-it-simple-(the-.lean()-escape-hatch)\">#</a></h2>\n<p>Doing <code>._doc</code> in business logic feels like a bad idea.\nMongoose provides a way to directly get documents as POJOs.</p>\n<p>To do this, just do a <code>.lean()</code> at the end of a query.</p>\n<pre><code class=\"language-js\">const myProduct = await Product.findOne(); // weird, have to use .doc\nconst myProducts = await Product.find(); // weird, have to use .doc on each element\n\n// simpler\nconst myProduct = await Product.findOne().lean(); // simple\nObject.keys(myProduct); // contains attributes as expected\n\nconst myProducts = await Product.find().lean();\nObject.keys(myProduct[0]); // contains attributes as expected\n</code></pre>\n<p>Note:</p>\n<ul>\n<li><code>.lean()</code> is very useful, especially when for client side APIs and serializers.</li>\n<li>Using <code>.lean()</code> does have a <strong>disadvantage</strong> - the returned entities are POJOs, and therefore lack the methods and properties a Mongoose object would have had.</li>\n</ul>\n",
      "id": 121
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/216_Editing_and_deleting_Products.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/216_Editing_and_deleting_Products.html",
      "content": "# 216. Editing and deleting Products\nCreated Sunday 7 May 2023 at 09:09 pm (binge)\nCreated Tuesday 30 May 2023 at 02:47 am (code)\n\nNote: Since Product and associated user (seller) is being ignored by us, for now, assume every user can change add/products. Change to be made: update product actions in Admin controller to work on all products, instead of associated with user. [Code]()\n\nFetch a product, change the attributes, and save.\n```js\nShopController.postEditProduct = (req, res, next) => {\n  const prodId = req.body.productId;\n  const { updatedTitle, updatedPrice, updatedDescription, updatedImageUrl } = req.body;\n\n\n  // fetch the product instance\n  const product = await Product.findById(prodId);\n\n  // update the values\n  product.title = updateTitle;\n  product.price = updatedPrice;\n  product.description = updatedDescription;\n  product.imageUrl = updatedImageUrl;\n\n  // call save\n  await product.save();\n};\n```\n\nAlternatively, one can use `findByIdAndUpdate` or `findOneAndUpdate`. Example:\n```js\nconst prodId = req.params.productId;\n\nconst product = await Product.findByIdAndUpdate(\n  prodId,\n    {\n\t  title: req.body.title,\n\t  imageUrl: req.body.imageUrl,\n\t  description: req.body.description,\n\t  price: req.body.price,\n\t}\n);\n\n// or equivalenty\nconst product = await Product.findOneAndUpdate(\n\t{ id: prodId },\n    {\n\t  title: req.body.title,\n\t  imageUrl: req.body.imageUrl,\n\t  description: req.body.description,\n\t  price: req.body.price,\n\t}\n);\n```\nThe previous one accepts `_id` string as argument, the latter one needs it in an object or a as direct ObjectId.\n\n\n## 217. Deleting a product\nMongoose does have a static delete function on the model, but it's named rather un-intuitively. \n\nThe name is `.findByIdAndDelete`. Example:\n```js\nShopController.postDeleteProduct = (req, res, next) => {\n  const prodId = req.body.productId;\n  \n  await Product.findByIdAndDelete(prodId);\n\n  redirect('/products');\n}\n```\nFIXME: it seems there's no instance method for deletion, in Mongoose. Not a problem though.\n\nNote:\n- `findOneAndDelete` is also available, but has the same `*ById` direct string caveat.\n- There are very similar deletion methods, but they end in `Remove` - `findByIdAndRemove`, `findOneAndRemove`. The difference is superficial, so stick with `*Delete` ones.\n- There is yet another method called `.deleteOne()` that takes in a condition object, like `findAndDeleteOne`, but it *does not* return the deleted object. Avoid this generally.\n\n## Delete all instances of the model\n`Product.deleteMany()` when called without an argument deletes all instances of the model.",
      "html": "<h1 id=\"216.-editing-and-deleting-products\">216. Editing and deleting Products <a class=\"heading-anchor-permalink\" href=\"#216.-editing-and-deleting-products\">#</a></h1>\n<p>Created Sunday 7 May 2023 at 09:09 pm (binge)\nCreated Tuesday 30 May 2023 at 02:47 am (code)</p>\n<p>Note: Since Product and associated user (seller) is being ignored by us, for now, assume every user can change add/products. Change to be made: update product actions in Admin controller to work on all products, instead of associated with user. <a href=\"\">Code</a></p>\n<p>Fetch a product, change the attributes, and save.</p>\n<pre><code class=\"language-js\">ShopController.postEditProduct = (req, res, next) =&gt; {\n  const prodId = req.body.productId;\n  const { updatedTitle, updatedPrice, updatedDescription, updatedImageUrl } = req.body;\n\n\n  // fetch the product instance\n  const product = await Product.findById(prodId);\n\n  // update the values\n  product.title = updateTitle;\n  product.price = updatedPrice;\n  product.description = updatedDescription;\n  product.imageUrl = updatedImageUrl;\n\n  // call save\n  await product.save();\n};\n</code></pre>\n<p>Alternatively, one can use <code>findByIdAndUpdate</code> or <code>findOneAndUpdate</code>. Example:</p>\n<pre><code class=\"language-js\">const prodId = req.params.productId;\n\nconst product = await Product.findByIdAndUpdate(\n  prodId,\n    {\n\t  title: req.body.title,\n\t  imageUrl: req.body.imageUrl,\n\t  description: req.body.description,\n\t  price: req.body.price,\n\t}\n);\n\n// or equivalenty\nconst product = await Product.findOneAndUpdate(\n\t{ id: prodId },\n    {\n\t  title: req.body.title,\n\t  imageUrl: req.body.imageUrl,\n\t  description: req.body.description,\n\t  price: req.body.price,\n\t}\n);\n</code></pre>\n<p>The previous one accepts <code>_id</code> string as argument, the latter one needs it in an object or a as direct ObjectId.</p>\n<h2 id=\"217.-deleting-a-product\">217. Deleting a product <a class=\"heading-anchor-permalink\" href=\"#217.-deleting-a-product\">#</a></h2>\n<p>Mongoose does have a static delete function on the model, but it’s named rather un-intuitively.</p>\n<p>The name is <code>.findByIdAndDelete</code>. Example:</p>\n<pre><code class=\"language-js\">ShopController.postDeleteProduct = (req, res, next) =&gt; {\n  const prodId = req.body.productId;\n  \n  await Product.findByIdAndDelete(prodId);\n\n  redirect('/products');\n}\n</code></pre>\n<p>FIXME: it seems there’s no instance method for deletion, in Mongoose. Not a problem though.</p>\n<p>Note:</p>\n<ul>\n<li><code>findOneAndDelete</code> is also available, but has the same <code>*ById</code> direct string caveat.</li>\n<li>There are very similar deletion methods, but they end in <code>Remove</code> - <code>findByIdAndRemove</code>, <code>findOneAndRemove</code>. The difference is superficial, so stick with <code>*Delete</code> ones.</li>\n<li>There is yet another method called <code>.deleteOne()</code> that takes in a condition object, like <code>findAndDeleteOne</code>, but it <em>does not</em> return the deleted object. Avoid this generally.</li>\n</ul>\n<h2 id=\"delete-all-instances-of-the-model\">Delete all instances of the model <a class=\"heading-anchor-permalink\" href=\"#delete-all-instances-of-the-model\">#</a></h2>\n<p><code>Product.deleteMany()</code> when called without an argument deletes all instances of the model.</p>\n",
      "id": 122
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/217_Updating_attributes_nested_paths_remotely_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/217_Updating_attributes_nested_paths_remotely_in_Mongoose.html",
      "content": "# 217. Updating attributes, nested paths remotely in Mongoose\nCreated Saturday 10 June 2023 at 04:45 pm\n\nThis is almost the same as with MongoDB (vanilla).\n\nOf course, one can use the `findByIdAnd*` to avoid creating ObjectId, but the second argument remains the same.\n\nNote: Avoid using `MyModel.update()` since it skips schema validations. MongoDB\n\n## 1. Update some (or just one) attribute\nWe've already seen this, using instance with `.save`.\n\nThe following is a way to update without the need for an instance.\n```js\n// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  imageUrl: { type: String, required: true },\n});\n\nconst productId = ...// given\n\n// goal: update the 'description' field, without fetching Product from db\n\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { \"description\": 'new description' }\n\t}\n);\n```\n\n\n## 2. Update nested/embedded attribute\n```js\n// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  imageUrl: { type: String, required: true },\n\n  user: { name: String, email: String, required: true },\n});\n\n// goal: update the email field\n\nconst productId = ...// given\n\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { \"user.email\": 'new email' }\n\t}\n);\n```\n\n\n## 3. Update array item\n```js\n// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n\n  versions: [{ name: String, description: String }],\n});\nconst productId = ...// given\n```\n\n### 3.1 If element position is known\n```js\n// goal: update the second version's description\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { \"versions.1.description\": 'new descr' }\n\t}\n);\n```\n### 3.2 Update element by criteria\n```js\n// Case 2: by criteria\nconst versionId = ;// given\n// goal: update the description of a version with given id\nawait Product.updateOne(\n\t{ \n\t  _id: new ObjectId(productId), \n\t  \"versions._id\": new ObjectId(versionId)\n\t},\n\t{\n\t  $set: { \"versions.$.description\": 'new descr' }\n\t}\n);\n```\n\n\n## 4. Array ops (should be on a different page, FIXME)\nMongoDB operators (`$push`, `$pull`, `$addToSet`) work fine. Already noted [in the MongoDB section](obsidian://open?vault=nodejs-notes&file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2F190_Mongodb_array_ops).\n\nMongoose does provide methods, provided you have the array instance (fetched, that is). See https://mongoosejs.com/docs/api/array.html",
      "html": "<h1 id=\"217.-updating-attributes%2C-nested-paths-remotely-in-mongoose\">217. Updating attributes, nested paths remotely in Mongoose <a class=\"heading-anchor-permalink\" href=\"#217.-updating-attributes%2C-nested-paths-remotely-in-mongoose\">#</a></h1>\n<p>Created Saturday 10 June 2023 at 04:45 pm</p>\n<p>This is almost the same as with MongoDB (vanilla).</p>\n<p>Of course, one can use the <code>findByIdAnd*</code> to avoid creating ObjectId, but the second argument remains the same.</p>\n<p>Note: Avoid using <code>MyModel.update()</code> since it skips schema validations. MongoDB</p>\n<h2 id=\"1.-update-some-(or-just-one)-attribute\">1. Update some (or just one) attribute <a class=\"heading-anchor-permalink\" href=\"#1.-update-some-(or-just-one)-attribute\">#</a></h2>\n<p>We’ve already seen this, using instance with <code>.save</code>.</p>\n<p>The following is a way to update without the need for an instance.</p>\n<pre><code class=\"language-js\">// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  imageUrl: { type: String, required: true },\n});\n\nconst productId = ...// given\n\n// goal: update the 'description' field, without fetching Product from db\n\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { &quot;description&quot;: 'new description' }\n\t}\n);\n</code></pre>\n<h2 id=\"2.-update-nested%2Fembedded-attribute\">2. Update nested/embedded attribute <a class=\"heading-anchor-permalink\" href=\"#2.-update-nested%2Fembedded-attribute\">#</a></h2>\n<pre><code class=\"language-js\">// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  imageUrl: { type: String, required: true },\n\n  user: { name: String, email: String, required: true },\n});\n\n// goal: update the email field\n\nconst productId = ...// given\n\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { &quot;user.email&quot;: 'new email' }\n\t}\n);\n</code></pre>\n<h2 id=\"3.-update-array-item\">3. Update array item <a class=\"heading-anchor-permalink\" href=\"#3.-update-array-item\">#</a></h2>\n<pre><code class=\"language-js\">// consider the model schema\nconst productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n\n  versions: [{ name: String, description: String }],\n});\nconst productId = ...// given\n</code></pre>\n<h3 id=\"3.1-if-element-position-is-known\">3.1 If element position is known <a class=\"heading-anchor-permalink\" href=\"#3.1-if-element-position-is-known\">#</a></h3>\n<pre><code class=\"language-js\">// goal: update the second version's description\nawait Product.findByIdAndUpdate(productId, \n\t{\n\t  $set: { &quot;versions.1.description&quot;: 'new descr' }\n\t}\n);\n</code></pre>\n<h3 id=\"3.2-update-element-by-criteria\">3.2 Update element by criteria <a class=\"heading-anchor-permalink\" href=\"#3.2-update-element-by-criteria\">#</a></h3>\n<pre><code class=\"language-js\">// Case 2: by criteria\nconst versionId = ;// given\n// goal: update the description of a version with given id\nawait Product.updateOne(\n\t{ \n\t  _id: new ObjectId(productId), \n\t  &quot;versions._id&quot;: new ObjectId(versionId)\n\t},\n\t{\n\t  $set: { &quot;versions.$.description&quot;: 'new descr' }\n\t}\n);\n</code></pre>\n<h2 id=\"4.-array-ops-(should-be-on-a-different-page%2C-fixme)\">4. Array ops (should be on a different page, FIXME) <a class=\"heading-anchor-permalink\" href=\"#4.-array-ops-(should-be-on-a-different-page%2C-fixme)\">#</a></h2>\n<p>MongoDB operators (<code>$push</code>, <code>$pull</code>, <code>$addToSet</code>) work fine. Already noted <a href=\"obsidian://open?vault=nodejs-notes&amp;file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2F190_Mongodb_array_ops\">in the MongoDB section</a>.</p>\n<p>Mongoose does provide methods, provided you have the array instance (fetched, that is). See <a href=\"https://mongoosejs.com/docs/api/array.html\">https://mongoosejs.com/docs/api/array.html</a></p>\n",
      "id": 123
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/218_Adding_the_Cart_model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/218_Adding_the_Cart_model.html",
      "content": "---\ntags:\n  - nested-schemas\n  - mongoose\n---\n# 218. Adding the Cart model\nCreated Thursday 11 May 2023 at 06:45 am\n\nWe'll the cart here itself, as we did earlier with [vanilla](obsidian://open?vault=nodejs-notes&file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2F196) MongoDB.\n\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    // doesn't need a `type` since it's an object we are going to define\n    \n    // `required` can be specified since it's about the existence of the key `cart` itself. BUT THIS GIVES AN ERROR, FIXME: why?\n\n    items: [\n\t\t    // array is also self-descriptive, no `type` needed\n\t  {\n        productId: {\n          // types needed here because we are at the last level\n          type: Schema.Types.ObjectId,\n          required: true,\n        },\n        quantity: { type: Number, required: true },\n      },\n    ]\n  }\n});\n\nmodule.export = mongoose.model('User', userSchema);\n```\nBasically, we learnt about model syntax for nested fields and arrays, in Mongoose.\n\nNote:\n- **Arrays are a first class construct** in MongoDB, and they don't have a id, therefore, they don't need a type schema etc. Also, empty arrays will be initialized automatically if a schema has an array. Nice. *In other words, from a Schema POV, arrays are treated as simple containers.*\n\t- Array _elements_ will be assigned an `_id`, even if they are not a Schema/model/ref.\n\t```js\n\tconst productSchema = new mongoose.Schema({\n\t  price: { type: Number, required: true },\n\t  title: { type: String, required: true },\n\t\n\t  versionArray: [{\n\t    // each element, like this, will be given an _id\n\t    \n\t    name: { type: String, default: \"def version\" },\n\t    description: { type: String, default: \"def desc\" },\n\t  }],\n\t});\n\t```\n- **Plain objects are also a first class construct** in MongoDB, so there's no need for a type. *In other words, from a Schema POV, plain objects are treated as simple containers.*  Consequently, they won't get an `_id`. This holds recursively too. Example:\n\t```js\n\tconst productSchema = new mongoose.Schema({\n\t  price: { type: Number, required: true },\n\t  title: { type: String, required: true },\n\t\n\t  version: {\n\t    // the db instance of this won't have an `_id`, it will just have name and description fields\n\t    \n\t    name: { type: String, default: \"def version\" },\n\t    description: { type: String, default: \"def desc\" },\n\t  },\n\t});\n\t```\n- By default, `_id` is assigned automatically to\n\t1. Model instances. Expected behavior.\n\t2. Elements of an array, unless they are scalar values. Not expected but a good default. <details><summary>See thought</summary>This is interesting - plain elements are not part of any model, and don't reside in their dedicated collection, just saying. This is very helpful anyway, since using index as primary key is bad, and an extra argument just for doing it would have been extra work.</details>\n\n\n## Reusing existing Schemas\nJust showing that this is possible. The existing userSchema:\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    // items: [String] // syntax example\n    // items: [{ type: String, required: false }] // syntax example\n    items: [\n      { \n        productId: { type: Schema.Types.ObjectId, required: true }, \n        quantity: { type: Number, required: true } \n      }\n    ]\n  }\n});\n```\ncould be rewritten as:\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst CartItem = new Schema({\n\tproductId: { type: Schema.Types.ObjectId, required: true }, \n\tquantity: { type: Number, required: true } \n});\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    items: [CartItem] // this is fine\n    \n    // or equivalently (FIXME: got no errors, but check again)\n    items: [{ type: CartItem }]\n  }\n});\n```\nNo explicit types needed, just reuse the Schema directly.\n\nNote: `CartItem` is a Schema, but has no 'model' (i.e. no dedicated collection). This is fine, and is the reason why `Schema` and `Model` exist as two different concepts in Mongoose. We could attach utility methods on such interstitial `Schema`s, making out business logic code leaner.\n\n- [Model code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/3e58f32012c98a14a4bb2a542b32245108cc7674)\n- [Cart features code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/5094391a7e41ec0dcb5b6c30736f1da8ee59829b)",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>nested-schemas</li>\n<li>mongoose</li>\n</ul>\n<hr>\n<h1 id=\"218.-adding-the-cart-model\">218. Adding the Cart model <a class=\"heading-anchor-permalink\" href=\"#218.-adding-the-cart-model\">#</a></h1>\n<p>Created Thursday 11 May 2023 at 06:45 am</p>\n<p>We’ll the cart here itself, as we did earlier with <a href=\"obsidian://open?vault=nodejs-notes&amp;file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2F196\">vanilla</a> MongoDB.</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    // doesn't need a `type` since it's an object we are going to define\n    \n    // `required` can be specified since it's about the existence of the key `cart` itself. BUT THIS GIVES AN ERROR, FIXME: why?\n\n    items: [\n\t\t    // array is also self-descriptive, no `type` needed\n\t  {\n        productId: {\n          // types needed here because we are at the last level\n          type: Schema.Types.ObjectId,\n          required: true,\n        },\n        quantity: { type: Number, required: true },\n      },\n    ]\n  }\n});\n\nmodule.export = mongoose.model('User', userSchema);\n</code></pre>\n<p>Basically, we learnt about model syntax for nested fields and arrays, in Mongoose.</p>\n<p>Note:</p>\n<ul>\n<li><strong>Arrays are a first class construct</strong> in MongoDB, and they don’t have a id, therefore, they don’t need a type schema etc. Also, empty arrays will be initialized automatically if a schema has an array. Nice. <em>In other words, from a Schema POV, arrays are treated as simple containers.</em>\n<ul>\n<li>Array <em>elements</em> will be assigned an <code>_id</code>, even if they are not a Schema/model/ref.</li>\n</ul>\n<pre><code class=\"language-js\">const productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n\n  versionArray: [{\n    // each element, like this, will be given an _id\n    \n    name: { type: String, default: &quot;def version&quot; },\n    description: { type: String, default: &quot;def desc&quot; },\n  }],\n});\n</code></pre>\n</li>\n<li><strong>Plain objects are also a first class construct</strong> in MongoDB, so there’s no need for a type. <em>In other words, from a Schema POV, plain objects are treated as simple containers.</em>  Consequently, they won’t get an <code>_id</code>. This holds recursively too. Example:<pre><code class=\"language-js\">const productSchema = new mongoose.Schema({\n  price: { type: Number, required: true },\n  title: { type: String, required: true },\n\n  version: {\n    // the db instance of this won't have an `_id`, it will just have name and description fields\n    \n    name: { type: String, default: &quot;def version&quot; },\n    description: { type: String, default: &quot;def desc&quot; },\n  },\n});\n</code></pre>\n</li>\n<li>By default, <code>_id</code> is assigned automatically to\n<ol>\n<li>Model instances. Expected behavior.</li>\n<li>Elements of an array, unless they are scalar values. Not expected but a good default. <details><summary>See thought</summary>This is interesting - plain elements are not part of any model, and don’t reside in their dedicated collection, just saying. This is very helpful anyway, since using index as primary key is bad, and an extra argument just for doing it would have been extra work.</details></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"reusing-existing-schemas\">Reusing existing Schemas <a class=\"heading-anchor-permalink\" href=\"#reusing-existing-schemas\">#</a></h2>\n<p>Just showing that this is possible. The existing userSchema:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    // items: [String] // syntax example\n    // items: [{ type: String, required: false }] // syntax example\n    items: [\n      { \n        productId: { type: Schema.Types.ObjectId, required: true }, \n        quantity: { type: Number, required: true } \n      }\n    ]\n  }\n});\n</code></pre>\n<p>could be rewritten as:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst CartItem = new Schema({\n\tproductId: { type: Schema.Types.ObjectId, required: true }, \n\tquantity: { type: Number, required: true } \n});\n\nconst userSchema = new Schema({\n  name : { type: String, required: true },\n  email: { type: String, required: true },\n\n  cart: {\n    items: [CartItem] // this is fine\n    \n    // or equivalently (FIXME: got no errors, but check again)\n    items: [{ type: CartItem }]\n  }\n});\n</code></pre>\n<p>No explicit types needed, just reuse the Schema directly.</p>\n<p>Note: <code>CartItem</code> is a Schema, but has no ‘model’ (i.e. no dedicated collection). This is fine, and is the reason why <code>Schema</code> and <code>Model</code> exist as two different concepts in Mongoose. We could attach utility methods on such interstitial <code>Schema</code>s, making out business logic code leaner.</p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/3e58f32012c98a14a4bb2a542b32245108cc7674\">Model code</a></li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/5094391a7e41ec0dcb5b6c30736f1da8ee59829b\">Cart features code</a></li>\n</ul>\n",
      "id": 124
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/219_Using_relations_ref_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/219_Using_relations_ref_in_Mongoose.html",
      "content": "# 219. Using Relations (`ref`) in Mongoose\nCreated Sunday 14 May 2023 at 05:03 pm\n\nWe added the Product model, but one thing is missing from it. Every product is created by a User (seller). This is a 1-N relation.\n\n\n## `ref` in Mongoose\nMongoose has a concept of 'references', which are implemented using the `ref` attribute. `ref` is the \"lazy loading\" construct of Mongoose.\n\nCode:\n```js\nconst ObjectId = Schema.Types.ObjectId;\n\n// Example: the Wearer model. Assume Cloth model exists.\ncloth: { ref: 'Cloth' } // myWearer.cloth will of type object\n\ncloth: { ref: 'Cloth', type: String } // myWearer.cloth's type is String\ncloth: { ref: 'Cloth', type: ObjectId } // myWearer.cloth's type is ObjectId\n\n// Note: prefer type as ObjectId, it has the most intuitive behavior and is good performance wise too.\n```\n- The syntax is simple, add the attribute and use the keyword with the name of the model (to be associated).\n- By default, a `ref` attribute is \"lazy loaded\", i.e. accessing the attribute will simply return the `_id` of the associated model, and not the whole document.\n- By default, `_id` will be of type `ObjectId`.  This can be changed by specifying the `type:String` along with the ref. Now the `_id` will be a string when accessed.\n- The value for the `ref` attribute is a string (the model's name), which may feel naive, but it has a very important reason - it helps avoid cyclic dependencies.\n\n\n## Experiments - `type` with `ref`.\nFIXME_done: check these 3 (no type, type String and type ObjectId) - which is which. The docs are outrageously useless\n```js\nconst anyProductSimple = await Product.findOne();\nconst anyProductLean = await Product.findOne().lean();\nconst anyProductPopulate = await Product.findOne().populate(\"userId\");\nconst anyProductLeanAndPopulate = await Product.findOne()\n  .populate(\"userId\")\n  .lean();\n\n[\n  { prod: anyProductSimple, label: \"ProductSimple\" },\n  { prod: anyProductLean, label: \"ProductLean\" },\n  { prod: anyProductPopulate, label: \"ProductPopulate\" },\n  { prod: anyProductLeanAndPopulate, label: \"ProductLeanAndPopulate\" },\n].forEach(({prod, label}) => {\n  console.log(`\\n\\n${label}`)\n  console.log({\n    prod,\n    keys: Object.keys(prod),\n    userStringAsso: prod[\"userId\"],\n    userDotAsso: prod.userId,\n  });\n});\n```\nPossibilities:\n1. Skipping type - error.\n2. With String, setting user to the whole object.\n\t1. Simple - direct key absent, value absent\n\t2. Lean - direct key present, value is ObjectId\n\t3. Populate - direct key absent, value is absent\n\t4. LeanAndPopulate - direct key present, value is whole object\n3. With ObjectId - Setting attribute to whole object or just Id has the same behavior.\n\t1. Simple - direct key absent, value is ObjectId\n\t2. Lean - direct key present, value is ObjectId\n\t3. Populate -  direct key absent, value is whole object\n\t4. LeanAndPopulate - direct key present, value is whole object\n4. With type as a schema (i.e. importing userSchema and using here) - doesn't differ much from ObjectId, except stuff is all there.\n\n**Conclusion** - Prefer ref type as ObjectId. The simplest, intuitive and has good performance.\n\nNote: I added a simple way to reset database without having to use Compass - [code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/4a1edcd3992cea1fef12cd4f00990940a41a2e06). Toggle this line to reset. It's OFF by default.\n\n## Continuing with the Product model\nLet's update the Product model:\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst productSchema = new Schema({\n  title: String,\n  price: { type: Number, required: true },\n  description: String,\n  imageUrl: String,\n\n  userId: { ref: 'User', type: Schema.Types.ObjectId, required: true };\n});\n```\n\n[Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/aa7c2d8181660e25762c651832023511b4bac245)",
      "html": "<h1 id=\"219.-using-relations-(ref)-in-mongoose\">219. Using Relations (<code>ref</code>) in Mongoose <a class=\"heading-anchor-permalink\" href=\"#219.-using-relations-(ref)-in-mongoose\">#</a></h1>\n<p>Created Sunday 14 May 2023 at 05:03 pm</p>\n<p>We added the Product model, but one thing is missing from it. Every product is created by a User (seller). This is a 1-N relation.</p>\n<h2 id=\"ref-in-mongoose\"><code>ref</code> in Mongoose <a class=\"heading-anchor-permalink\" href=\"#ref-in-mongoose\">#</a></h2>\n<p>Mongoose has a concept of ‘references’, which are implemented using the <code>ref</code> attribute. <code>ref</code> is the “lazy loading” construct of Mongoose.</p>\n<p>Code:</p>\n<pre><code class=\"language-js\">const ObjectId = Schema.Types.ObjectId;\n\n// Example: the Wearer model. Assume Cloth model exists.\ncloth: { ref: 'Cloth' } // myWearer.cloth will of type object\n\ncloth: { ref: 'Cloth', type: String } // myWearer.cloth's type is String\ncloth: { ref: 'Cloth', type: ObjectId } // myWearer.cloth's type is ObjectId\n\n// Note: prefer type as ObjectId, it has the most intuitive behavior and is good performance wise too.\n</code></pre>\n<ul>\n<li>The syntax is simple, add the attribute and use the keyword with the name of the model (to be associated).</li>\n<li>By default, a <code>ref</code> attribute is “lazy loaded”, i.e. accessing the attribute will simply return the <code>_id</code> of the associated model, and not the whole document.</li>\n<li>By default, <code>_id</code> will be of type <code>ObjectId</code>.  This can be changed by specifying the <code>type:String</code> along with the ref. Now the <code>_id</code> will be a string when accessed.</li>\n<li>The value for the <code>ref</code> attribute is a string (the model’s name), which may feel naive, but it has a very important reason - it helps avoid cyclic dependencies.</li>\n</ul>\n<h2 id=\"experiments---type-with-ref.\">Experiments - <code>type</code> with <code>ref</code>. <a class=\"heading-anchor-permalink\" href=\"#experiments---type-with-ref.\">#</a></h2>\n<p>FIXME_done: check these 3 (no type, type String and type ObjectId) - which is which. The docs are outrageously useless</p>\n<pre><code class=\"language-js\">const anyProductSimple = await Product.findOne();\nconst anyProductLean = await Product.findOne().lean();\nconst anyProductPopulate = await Product.findOne().populate(&quot;userId&quot;);\nconst anyProductLeanAndPopulate = await Product.findOne()\n  .populate(&quot;userId&quot;)\n  .lean();\n\n[\n  { prod: anyProductSimple, label: &quot;ProductSimple&quot; },\n  { prod: anyProductLean, label: &quot;ProductLean&quot; },\n  { prod: anyProductPopulate, label: &quot;ProductPopulate&quot; },\n  { prod: anyProductLeanAndPopulate, label: &quot;ProductLeanAndPopulate&quot; },\n].forEach(({prod, label}) =&gt; {\n  console.log(`\\n\\n${label}`)\n  console.log({\n    prod,\n    keys: Object.keys(prod),\n    userStringAsso: prod[&quot;userId&quot;],\n    userDotAsso: prod.userId,\n  });\n});\n</code></pre>\n<p>Possibilities:</p>\n<ol>\n<li>Skipping type - error.</li>\n<li>With String, setting user to the whole object.\n<ol>\n<li>Simple - direct key absent, value absent</li>\n<li>Lean - direct key present, value is ObjectId</li>\n<li>Populate - direct key absent, value is absent</li>\n<li>LeanAndPopulate - direct key present, value is whole object</li>\n</ol>\n</li>\n<li>With ObjectId - Setting attribute to whole object or just Id has the same behavior.\n<ol>\n<li>Simple - direct key absent, value is ObjectId</li>\n<li>Lean - direct key present, value is ObjectId</li>\n<li>Populate -  direct key absent, value is whole object</li>\n<li>LeanAndPopulate - direct key present, value is whole object</li>\n</ol>\n</li>\n<li>With type as a schema (i.e. importing userSchema and using here) - doesn’t differ much from ObjectId, except stuff is all there.</li>\n</ol>\n<p><strong>Conclusion</strong> - Prefer ref type as ObjectId. The simplest, intuitive and has good performance.</p>\n<p>Note: I added a simple way to reset database without having to use Compass - <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/4a1edcd3992cea1fef12cd4f00990940a41a2e06\">code</a>. Toggle this line to reset. It’s OFF by default.</p>\n<h2 id=\"continuing-with-the-product-model\">Continuing with the Product model <a class=\"heading-anchor-permalink\" href=\"#continuing-with-the-product-model\">#</a></h2>\n<p>Let’s update the Product model:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst productSchema = new Schema({\n  title: String,\n  price: { type: Number, required: true },\n  description: String,\n  imageUrl: String,\n\n  userId: { ref: 'User', type: Schema.Types.ObjectId, required: true };\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/aa7c2d8181660e25762c651832023511b4bac245\">Code</a></p>\n",
      "id": 125
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/220_How_the_3_relations_work_in_NoSQL.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/220_How_the_3_relations_work_in_NoSQL.html",
      "content": "## How the 3 relations work in NoSQL\nWe'll be focusing on MongoDB with Mongoose here.\n\nThe 3 relations:\n1. One-one: directly embed the whole document.\n\t- Syntax: `User: { Cart: {...} }`\n\t- Another way: keep the related doc in a different collection, with `ref` \n\t- <details><summary>Why this works</summary>Embedding is the simplest way to ensure isolation to a given entity. *Ignorable*: Another way, perhaps more memory efficient, is to store the id, but have the instance be stored in a different collection altogether</details>\n1. One-many: use a `ref` inside the many side model. \n\t- Syntax: `Proudct: { seller: { ref: 'User' }` \n\t- <details><summary>Why this works</summary>Because an attribute can only have a one `ref`, and it doesn't have to be the same for different instances.</details>\n3. Many-many: use an array of `ref`s. \n\t- An alternative way is to have an explicit junction collection. This is the best practice.\n\t- <details><summary>Why this works</summary>Since both sides can have multiple connections, embedding (isolation) doesn't make sense - since they've got to be independent. Array because we need to have multiple connections</details>\n\nFIXME: implement and check problems\nProblems:\n1. 1-1, and 1-N enforcement. There is no built in way to achieve enforcement in MongoDB, since it has no built uniqueness construct (whereas SQL has the `UNIQUE` constraint). This is solved either by custom code, or is done in the business logic.\n\n\n## Problems with `ref` in Mongoose\n1. **Ref** default value - there's no simple way initialize the `ref`s in a model, as their value is meant to be `ObjectId` instead of object. One has to write the code to create the ref instance and attach during creation. [There is a way to achieve this - see StackOverflow](https://stackoverflow.com/a/66630813/11392807). Example:\n\t```js\n\tconst UserSchema = new Schema({\n\t  name: { type: String, required: true },\n\t  email: { type: String, required: true },\n\t  cart: {\n\t    ref: \"Cart\",\n\t    type: Schema.Types.ObjectId,\n\t    required: true,\n\t    default: null,\n\t  },\n\t});\n\t\n\tconst User = mongoose.model(\"User\", UserSchema);\n\n\tconst SAMPLE_USERS = [\n\t  {\n\t    name: \"SanjarOne\",\n\t    email: \"SanjarOne@gmail.com\",\n\t    cart: { items: [] }, // doesn't work directly now, since ref needs to be an id - simple looping and User.create won't work.\n\t  },\n\t];\n\t```\n2. `ref` parts have to be updated specifically - Updating part of a `ref` and saving the parent instance doesn't actually update the ref.\n\t```js\n\tconst user = ...populate(\"cart\");\n\n\tconst matchingItem = user.cart.items.find(...);\n\tmatchingItem.quatity +=1; // won't happen\n\n\tawait user.save();\n\n\tawait user.cart.save(); // have to save the ref individually\n\t```",
      "html": "<h2 id=\"how-the-3-relations-work-in-nosql\">How the 3 relations work in NoSQL <a class=\"heading-anchor-permalink\" href=\"#how-the-3-relations-work-in-nosql\">#</a></h2>\n<p>We’ll be focusing on MongoDB with Mongoose here.</p>\n<p>The 3 relations:</p>\n<ol>\n<li>One-one: directly embed the whole document.\n<ul>\n<li>Syntax: <code>User: { Cart: {...} }</code></li>\n<li>Another way: keep the related doc in a different collection, with <code>ref</code></li>\n<li>\n<details><summary>Why this works</summary>Embedding is the simplest way to ensure isolation to a given entity. *Ignorable*: Another way, perhaps more memory efficient, is to store the id, but have the instance be stored in a different collection altogether</details>\n</li>\n</ul>\n</li>\n<li>One-many: use a <code>ref</code> inside the many side model.\n<ul>\n<li>Syntax: <code>Proudct: { seller: { ref: 'User' }</code></li>\n<li>\n<details><summary>Why this works</summary>Because an attribute can only have a one `ref`, and it doesn't have to be the same for different instances.</details>\n</li>\n</ul>\n</li>\n<li>Many-many: use an array of <code>ref</code>s.\n<ul>\n<li>An alternative way is to have an explicit junction collection. This is the best practice.</li>\n<li>\n<details><summary>Why this works</summary>Since both sides can have multiple connections, embedding (isolation) doesn't make sense - since they've got to be independent. Array because we need to have multiple connections</details>\n</li>\n</ul>\n</li>\n</ol>\n<p>FIXME: implement and check problems\nProblems:</p>\n<ol>\n<li>1-1, and 1-N enforcement. There is no built in way to achieve enforcement in MongoDB, since it has no built uniqueness construct (whereas SQL has the <code>UNIQUE</code> constraint). This is solved either by custom code, or is done in the business logic.</li>\n</ol>\n<h2 id=\"problems-with-ref-in-mongoose\">Problems with <code>ref</code> in Mongoose <a class=\"heading-anchor-permalink\" href=\"#problems-with-ref-in-mongoose\">#</a></h2>\n<ol>\n<li><strong>Ref</strong> default value - there’s no simple way initialize the <code>ref</code>s in a model, as their value is meant to be <code>ObjectId</code> instead of object. One has to write the code to create the ref instance and attach during creation. <a href=\"https://stackoverflow.com/a/66630813/11392807\">There is a way to achieve this - see StackOverflow</a>. Example:<pre><code class=\"language-js\">const UserSchema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  cart: {\n    ref: &quot;Cart&quot;,\n    type: Schema.Types.ObjectId,\n    required: true,\n    default: null,\n  },\n});\n\nconst User = mongoose.model(&quot;User&quot;, UserSchema);\n\nconst SAMPLE_USERS = [\n  {\n    name: &quot;SanjarOne&quot;,\n    email: &quot;SanjarOne@gmail.com&quot;,\n    cart: { items: [] }, // doesn't work directly now, since ref needs to be an id - simple looping and User.create won't work.\n  },\n];\n</code></pre>\n</li>\n<li><code>ref</code> parts have to be updated specifically - Updating part of a <code>ref</code> and saving the parent instance doesn’t actually update the ref.<pre><code class=\"language-js\">const user = ...populate(&quot;cart&quot;);\n\nconst matchingItem = user.cart.items.find(...);\nmatchingItem.quatity +=1; // won't happen\n\nawait user.save();\n\nawait user.cart.save(); // have to save the ref individually\n</code></pre>\n</li>\n</ol>\n",
      "id": 126
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/221_select_and_populate.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/221_select_and_populate.html",
      "content": "## 221. `.select` and `.populate`\n\n## `.select` - get only some attributes\nSyntax:\n```js\n.find(/* someId */) // until now. This is like SELECT *, i.e. get all attributes\n\n\n.find(/* someId */)\n.select('key1 key2 ke3.nestedKey3 -_id')\n\n// can be used with .findOne or .findById too\n.findOne(/* some criteria */)\n.select('key1 key2 ke3.nestedKey3 -_id')\n```\n\nExample:\n```js\nawait Product.find()\n\t.select('name price -_id')\n\nawait Product.find()\n\t.select('-name -price')\n```\n\nNote:\n- Excluded attributes (keys) don't appear, even if `.lean` is used.\n- Just like with MongoDB projections - the `_id` is always fetched, except if excluded explicitly.\n- Just like with MongoDB projections - only inclusions or exclusions (but not both) can be present as argument. `-_id` is an exception to this rule (i.e. both `\"title price -_id\"` works fine).\n\n\n## `.populate` - eager load\nIn Mongoose in a give document, the documents associated with `ref` attributes are lazy loaded, i.e. accessing them will just return the `_id`, instead of the whole document.\n\nThe \"population\" construct in Mongoose help with eager loading. The simplest way is to use the `.populate()` method, which returns the whole doc for a ref attributes, instead of just `_id`.\n\nExample:\n```js\n// Product has a 'User' ref called 'userId'\n\nconst myProduct = await Product.findById(productId);\nconst seller = myProduct.userId; // ObjectId\n\n\n// eager loading\nconst myProduct = \n\t  await Product.findById(productId).populate('userId');\nconst seller = myProduct.userId; // an object\n```\n\nSyntax:\n```js\nMyModel.find().populate('key1 key2 key3 key4.nestedKey')\n// Note: nested keys can also be targeted for eager loading\n// Note2: works with all query methods, not just `.find`\n```\n\n\n## Eager load but only some attributes - populate with select\n`.populate()` supports attribute selection within it ('select' as second argument)\n```js\nProduct.find()\n\t.populate('userId', 'name'); \n// eager load the userId object, but exclude its 'name' attribute\n\n\n// chaining (a potential equivalent), DOES NOT WORK\n// not an error, this is valid\n// but populated fields cannot be 'select'ed using .select, they are immune\nProduct.find(/* ... */)\n\t.populate('userId')\n\t.select('-userId.name')\n```\n\nOf course, `.populate` works with any `find*` function.\n\nNote:\n- Chaining `.select` and `.populate` is not an error, but populated fields won't be affected by the `.select`. Code already shown above.\n- Populating an attribute after `.select` will still cause the population to be performed. `.populate` works even if `.select` has excluded the attribute being populated.",
      "html": "<h2 id=\"221.-.select-and-.populate\">221. <code>.select</code> and <code>.populate</code> <a class=\"heading-anchor-permalink\" href=\"#221.-.select-and-.populate\">#</a></h2>\n<h2 id=\".select---get-only-some-attributes\"><code>.select</code> - get only some attributes <a class=\"heading-anchor-permalink\" href=\"#.select---get-only-some-attributes\">#</a></h2>\n<p>Syntax:</p>\n<pre><code class=\"language-js\">.find(/* someId */) // until now. This is like SELECT *, i.e. get all attributes\n\n\n.find(/* someId */)\n.select('key1 key2 ke3.nestedKey3 -_id')\n\n// can be used with .findOne or .findById too\n.findOne(/* some criteria */)\n.select('key1 key2 ke3.nestedKey3 -_id')\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-js\">await Product.find()\n\t.select('name price -_id')\n\nawait Product.find()\n\t.select('-name -price')\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>Excluded attributes (keys) don’t appear, even if <code>.lean</code> is used.</li>\n<li>Just like with MongoDB projections - the <code>_id</code> is always fetched, except if excluded explicitly.</li>\n<li>Just like with MongoDB projections - only inclusions or exclusions (but not both) can be present as argument. <code>-_id</code> is an exception to this rule (i.e. both <code>&quot;title price -_id&quot;</code> works fine).</li>\n</ul>\n<h2 id=\".populate---eager-load\"><code>.populate</code> - eager load <a class=\"heading-anchor-permalink\" href=\"#.populate---eager-load\">#</a></h2>\n<p>In Mongoose in a give document, the documents associated with <code>ref</code> attributes are lazy loaded, i.e. accessing them will just return the <code>_id</code>, instead of the whole document.</p>\n<p>The “population” construct in Mongoose help with eager loading. The simplest way is to use the <code>.populate()</code> method, which returns the whole doc for a ref attributes, instead of just <code>_id</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">// Product has a 'User' ref called 'userId'\n\nconst myProduct = await Product.findById(productId);\nconst seller = myProduct.userId; // ObjectId\n\n\n// eager loading\nconst myProduct = \n\t  await Product.findById(productId).populate('userId');\nconst seller = myProduct.userId; // an object\n</code></pre>\n<p>Syntax:</p>\n<pre><code class=\"language-js\">MyModel.find().populate('key1 key2 key3 key4.nestedKey')\n// Note: nested keys can also be targeted for eager loading\n// Note2: works with all query methods, not just `.find`\n</code></pre>\n<h2 id=\"eager-load-but-only-some-attributes---populate-with-select\">Eager load but only some attributes - populate with select <a class=\"heading-anchor-permalink\" href=\"#eager-load-but-only-some-attributes---populate-with-select\">#</a></h2>\n<p><code>.populate()</code> supports attribute selection within it (‘select’ as second argument)</p>\n<pre><code class=\"language-js\">Product.find()\n\t.populate('userId', 'name'); \n// eager load the userId object, but exclude its 'name' attribute\n\n\n// chaining (a potential equivalent), DOES NOT WORK\n// not an error, this is valid\n// but populated fields cannot be 'select'ed using .select, they are immune\nProduct.find(/* ... */)\n\t.populate('userId')\n\t.select('-userId.name')\n</code></pre>\n<p>Of course, <code>.populate</code> works with any <code>find*</code> function.</p>\n<p>Note:</p>\n<ul>\n<li>Chaining <code>.select</code> and <code>.populate</code> is not an error, but populated fields won’t be affected by the <code>.select</code>. Code already shown above.</li>\n<li>Populating an attribute after <code>.select</code> will still cause the population to be performed. <code>.populate</code> works even if <code>.select</code> has excluded the attribute being populated.</li>\n</ul>\n",
      "id": 127
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_1_Add_custom_model_methods.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_1_Add_custom_model_methods.html",
      "content": "# 222.1 Adding custom model methods\nCreated Sunday 14 May 2023 at 06:34 pm\n\n### Adding custom methods to a model\nTo add custom methods to a model, use the options (second argument) of the `Schema` constructor.\n\n<details>\n<summary>Why add methods to the `Schema` and not the `Model`</summary>Since we already saw that a `Schema` may exist without a model (i.e. interstitial Schemas) - it only makes sense to attach models at the Schema level. Of course, they are available and will be used at the model level (since even a interstitial Schema will be accessed only as part of an actual model).\n</details>\n\nStatic methods (and attributes) can also be added.\n\nSyntax:\n```js\nconst mongoose = require('mongoose'); \nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({/* */},\n  {\n\t  methods: {\n\t\taddToCart (product) {\n\t\t  this.cart.items = /**/; // `this` is the model instance\n\t\t}\n\t  },\n\t\n\t  statics: {\n\t\tcountItems () {\n\t\t  return this.cart.items.length;\n\t\t},\n\t\treadME: 'Hello, world' // data (not function) may be added under statics\n\t  },\n\n\n\t}\n );\n\nmodule.export = mongoose.model('User', userSchema);\n```\n\n\nNotes:\n- Remember to use normal functions instead of arrow in case of instance methods, to ensure `this` is available.\n- We are adding these functions to the `Schema`, not the model. They will be used through the model, though, obviously.\n- Static attributes can be added under `statics`, in addition to functions. This is not possible with `methods`, since instance data is meant to be part of the schema's first argument (data).\n\n\n### Alternate way to add methods - just add keys\n```js\nconst userSchema = new Schema({/* */});\n\nuserSchema.methods.addToCart = function (product) {\n  // use a normal function instead of arrow, so that `this` is available\n  this.cart.items = /**/; // do something\n}\n\nuserSchema.statics.addToCart = function (product) {\n// arrow or normal function, irrelevant, since this is a static method\n  return this.cart.items.length;\n}\n```\nOf course, one can mix and match both ways - options and/or direct key addition.\n\n",
      "html": "<h1 id=\"222.1-adding-custom-model-methods\">222.1 Adding custom model methods <a class=\"heading-anchor-permalink\" href=\"#222.1-adding-custom-model-methods\">#</a></h1>\n<p>Created Sunday 14 May 2023 at 06:34 pm</p>\n<h3 id=\"adding-custom-methods-to-a-model\">Adding custom methods to a model <a class=\"heading-anchor-permalink\" href=\"#adding-custom-methods-to-a-model\">#</a></h3>\n<p>To add custom methods to a model, use the options (second argument) of the <code>Schema</code> constructor.</p>\n<details>\n<summary>Why add methods to the `Schema` and not the `Model`</summary>Since we already saw that a `Schema` may exist without a model (i.e. interstitial Schemas) - it only makes sense to attach models at the Schema level. Of course, they are available and will be used at the model level (since even a interstitial Schema will be accessed only as part of an actual model).\n</details>\n<p>Static methods (and attributes) can also be added.</p>\n<p>Syntax:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose'); \nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({/* */},\n  {\n\t  methods: {\n\t\taddToCart (product) {\n\t\t  this.cart.items = /**/; // `this` is the model instance\n\t\t}\n\t  },\n\t\n\t  statics: {\n\t\tcountItems () {\n\t\t  return this.cart.items.length;\n\t\t},\n\t\treadME: 'Hello, world' // data (not function) may be added under statics\n\t  },\n\n\n\t}\n );\n\nmodule.export = mongoose.model('User', userSchema);\n</code></pre>\n<p>Notes:</p>\n<ul>\n<li>Remember to use normal functions instead of arrow in case of instance methods, to ensure <code>this</code> is available.</li>\n<li>We are adding these functions to the <code>Schema</code>, not the model. They will be used through the model, though, obviously.</li>\n<li>Static attributes can be added under <code>statics</code>, in addition to functions. This is not possible with <code>methods</code>, since instance data is meant to be part of the schema’s first argument (data).</li>\n</ul>\n<h3 id=\"alternate-way-to-add-methods---just-add-keys\">Alternate way to add methods - just add keys <a class=\"heading-anchor-permalink\" href=\"#alternate-way-to-add-methods---just-add-keys\">#</a></h3>\n<pre><code class=\"language-js\">const userSchema = new Schema({/* */});\n\nuserSchema.methods.addToCart = function (product) {\n  // use a normal function instead of arrow, so that `this` is available\n  this.cart.items = /**/; // do something\n}\n\nuserSchema.statics.addToCart = function (product) {\n// arrow or normal function, irrelevant, since this is a static method\n  return this.cart.items.length;\n}\n</code></pre>\n<p>Of course, one can mix and match both ways - options and/or direct key addition.</p>\n",
      "id": 128
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_2_Query_helpers.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/222_2_Query_helpers.html",
      "content": "# 222.2. Query helpers\nCreated Sunday 18 June 2023 at 07:55 pm\n\nOne can add custom functions to be chained to query methods (`find*()`) that return a mutated document. [Mongoose documentation link](https://mongoosejs.com/docs/guide.html#query-helpers)\n\nTo do this, add functions to the `Schema` config (second argument) under the `query` attribute. It is done in the same way as `methods`/`statics`. \n\nTechnically, this is a way to extend Mongoose's chainable query builder API.\n \nExample:\n```js\nUser.find().populate(\"cartId\"); // too much ODM in business logic\n\n// a better equivalent\nUserSchema.query.getFullUser = function () { \n    return this.populate(\"cartId\");\n  }\n\t\nUser.find().getFullUser(); // better - more abstract\nUser.findOne(/* code */).getFullUser();\n```\n\n<br />\n\nFor more info, see docs - https://mongoosejs.com/docs/guide.html#methods",
      "html": "<h1 id=\"222.2.-query-helpers\">222.2. Query helpers <a class=\"heading-anchor-permalink\" href=\"#222.2.-query-helpers\">#</a></h1>\n<p>Created Sunday 18 June 2023 at 07:55 pm</p>\n<p>One can add custom functions to be chained to query methods (<code>find*()</code>) that return a mutated document. <a href=\"https://mongoosejs.com/docs/guide.html#query-helpers\">Mongoose documentation link</a></p>\n<p>To do this, add functions to the <code>Schema</code> config (second argument) under the <code>query</code> attribute. It is done in the same way as <code>methods</code>/<code>statics</code>.</p>\n<p>Technically, this is a way to extend Mongoose’s chainable query builder API.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">User.find().populate(&quot;cartId&quot;); // too much ODM in business logic\n\n// a better equivalent\nUserSchema.query.getFullUser = function () { \n    return this.populate(&quot;cartId&quot;);\n  }\n\t\nUser.find().getFullUser(); // better - more abstract\nUser.findOne(/* code */).getFullUser();\n</code></pre>\n<br />\n<p>For more info, see docs - <a href=\"https://mongoosejs.com/docs/guide.html#methods\">https://mongoosejs.com/docs/guide.html#methods</a></p>\n",
      "id": 129
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/223_exec_and_execPopulate_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/223_exec_and_execPopulate_in_Mongoose.html",
      "content": "# 223. `exec` and `execPopulate` in Mongoose\nCreated Friday 19 May 2023 at 11:50 pm\n\nNote - `exec` is not needed generally. It's used only when query building is complex or calls have to be optimized (number of calls, or amount of data wise). Using `exec` from the get-go may be a sign of bad code.\n\n\n### What is `exec`\nBy default, the query methods (`find*`), or query helper methods (`.populate`, `.select`) all return a \"Mongoose query object\" - which is just the query built to be executed, i.e. the DB trip is still not made. Example:\n```js\nBook.findById(23); // no trip made\nBook.findById(23).populate('author'); // no trip made\n```\n\n**This is helpful since it allows creation of chains and makes sure only 1 final DB call is made**\n\nTo actually end the query and trigger the DB call, a function called `exec` needs to be called. There are 3 ways to use it\n```js\nBook.findById(23).exec().then(book => {}); // #1 explicit\n\nBook.findById(23).then(book => {}); // #1 implicit, using .then()\n\nconst book = await Book.findById(23); // #3 implicit, using await\n\n\n// # in the implicit cases, exec is called internally due to .then and await - the promise handling constructs\n```\n\nThis is the main use of `exec` - marking end of query being built and triggering the DB call.\n\n\n### More about `exec` (help from the Web)\nFIXME - need to recheck this (when I code it), especially the breaking down chained query part\n\n1. Main use - end queries being build and trigger DB call. Already seen.\n2. Usage - Breaking down query chain into multiple statements.\n\t```js\n\t// case 1 - single statement\n\tconst bookDetail = await Book.findById(23).populate('author');\n\t// await is enough, exec not needed\n\n\n\t// case 2 - break down query into multiple statements\n\tconst bookMiniQuery = Book.findById(23); // a query object\n\tconst bookDetail = await bookMiniQuery.populate('author').exec();\n\t// continuing the query\n\n\n\t// equivalents\n\tconst bookDetail = await bookMiniQuery.populate('author'); // implicit exec\n\tbookMini.populate('author').then(bookDetail => {});\n\t```\n3. Usage - Building queries on top of already fetched documents, as opposed to the usual \"query object\". This works only if `.lean` is not used.\n\t```js\n\tconst bookDetail = await Book.findById(23).populate('author');\n\t// await is enough, exec not needed\n\n\t\n\tconst bookMini = await Book.findById(23); // document\n\tconst bookDetail = await bookMini.populate('author').exec();\n\t// needed here because bookMini is a document, not a query object\n\t\n\t// equivalents\n\tconst bookDetail = await bookMini.populate('author'); // implicit exec\n\tbookMini.populate('author').then(bookDetail => {});\n\t```\n4. `exec` is idempotent - doing `exec` with `await`, `.then` will not result in an error. Also calling `.exec()` repeatedly is fine too. Mongoose is smart enough to ignore the extraneous `.exec` (whether implicit or explicit) and does not create extra DB calls.\n5. `execPopulate` - `.execPopulate(arg)` is short for `.populate(arg).exec()`\n6. Implicit nature - if one is using `then` or `await` and using a single query chain, there's no need to use `exec`.",
      "html": "<h1 id=\"223.-exec-and-execpopulate-in-mongoose\">223. <code>exec</code> and <code>execPopulate</code> in Mongoose <a class=\"heading-anchor-permalink\" href=\"#223.-exec-and-execpopulate-in-mongoose\">#</a></h1>\n<p>Created Friday 19 May 2023 at 11:50 pm</p>\n<p>Note - <code>exec</code> is not needed generally. It’s used only when query building is complex or calls have to be optimized (number of calls, or amount of data wise). Using <code>exec</code> from the get-go may be a sign of bad code.</p>\n<h3 id=\"what-is-exec\">What is <code>exec</code> <a class=\"heading-anchor-permalink\" href=\"#what-is-exec\">#</a></h3>\n<p>By default, the query methods (<code>find*</code>), or query helper methods (<code>.populate</code>, <code>.select</code>) all return a “Mongoose query object” - which is just the query built to be executed, i.e. the DB trip is still not made. Example:</p>\n<pre><code class=\"language-js\">Book.findById(23); // no trip made\nBook.findById(23).populate('author'); // no trip made\n</code></pre>\n<p><strong>This is helpful since it allows creation of chains and makes sure only 1 final DB call is made</strong></p>\n<p>To actually end the query and trigger the DB call, a function called <code>exec</code> needs to be called. There are 3 ways to use it</p>\n<pre><code class=\"language-js\">Book.findById(23).exec().then(book =&gt; {}); // #1 explicit\n\nBook.findById(23).then(book =&gt; {}); // #1 implicit, using .then()\n\nconst book = await Book.findById(23); // #3 implicit, using await\n\n\n// # in the implicit cases, exec is called internally due to .then and await - the promise handling constructs\n</code></pre>\n<p>This is the main use of <code>exec</code> - marking end of query being built and triggering the DB call.</p>\n<h3 id=\"more-about-exec-(help-from-the-web)\">More about <code>exec</code> (help from the Web) <a class=\"heading-anchor-permalink\" href=\"#more-about-exec-(help-from-the-web)\">#</a></h3>\n<p>FIXME - need to recheck this (when I code it), especially the breaking down chained query part</p>\n<ol>\n<li>Main use - end queries being build and trigger DB call. Already seen.</li>\n<li>Usage - Breaking down query chain into multiple statements.<pre><code class=\"language-js\">// case 1 - single statement\nconst bookDetail = await Book.findById(23).populate('author');\n// await is enough, exec not needed\n\n\n// case 2 - break down query into multiple statements\nconst bookMiniQuery = Book.findById(23); // a query object\nconst bookDetail = await bookMiniQuery.populate('author').exec();\n// continuing the query\n\n\n// equivalents\nconst bookDetail = await bookMiniQuery.populate('author'); // implicit exec\nbookMini.populate('author').then(bookDetail =&gt; {});\n</code></pre>\n</li>\n<li>Usage - Building queries on top of already fetched documents, as opposed to the usual “query object”. This works only if <code>.lean</code> is not used.<pre><code class=\"language-js\">const bookDetail = await Book.findById(23).populate('author');\n// await is enough, exec not needed\n\n\nconst bookMini = await Book.findById(23); // document\nconst bookDetail = await bookMini.populate('author').exec();\n// needed here because bookMini is a document, not a query object\n\n// equivalents\nconst bookDetail = await bookMini.populate('author'); // implicit exec\nbookMini.populate('author').then(bookDetail =&gt; {});\n</code></pre>\n</li>\n<li><code>exec</code> is idempotent - doing <code>exec</code> with <code>await</code>, <code>.then</code> will not result in an error. Also calling <code>.exec()</code> repeatedly is fine too. Mongoose is smart enough to ignore the extraneous <code>.exec</code> (whether implicit or explicit) and does not create extra DB calls.</li>\n<li><code>execPopulate</code> - <code>.execPopulate(arg)</code> is short for <code>.populate(arg).exec()</code></li>\n<li>Implicit nature - if one is using <code>then</code> or <code>await</code> and using a single query chain, there’s no need to use <code>exec</code>.</li>\n</ol>\n",
      "id": 130
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/224_Adding_the_Order_model_and_features.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/224_Adding_the_Order_model_and_features.html",
      "content": "# 224. Adding the Order model and features\nCreated Friday 19 May 2023 at 12:10 am\n\nLet's add the product model - [code - commit](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/616d6cf3923735f756f08cadd92d586f4ea6fcc8). Example:\n```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst orderSchema = new Schema({\n\t// cart: CartModel, // invalid, since cart is not a separate model\n\tproducts: [\n\t\t{\n\t\t\tproduct:  { type: Object, required: true }, // general storage\n\t\t\tquantity: { type: Number, required: true },\n\t\t}\n\t],\n\ttotal: { type: Number, required: true },\n\tuser: {\n\t\t// enumerating all, since we don't want the cart here\n\t\tname: { type: String, required: true },\n\t\tuserId: { \n\t\t\tref: 'User', \n\t\t\ttype: Schema.Types.ObjectId, \n\t\t\trequired: true \n\t\t},\n\t},\n});\n\n\nmodule.exports = mongoose.model('Order', orderSchema);\n```\n\nThen, the controller action can be changed. I'm assuming this is easy to do, so skipping. [Code](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/384321f5790c43a56a7bb31a8ddc9dd2ce5e282a)\n\nOne potential caveat `myBook.authorId` (even if `authorId` was populated) may not work, replace the code by this `{...myBook.authorId._doc}`. FIXME: I think this is not an issue, remove it if it's not.",
      "html": "<h1 id=\"224.-adding-the-order-model-and-features\">224. Adding the Order model and features <a class=\"heading-anchor-permalink\" href=\"#224.-adding-the-order-model-and-features\">#</a></h1>\n<p>Created Friday 19 May 2023 at 12:10 am</p>\n<p>Let’s add the product model - <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/616d6cf3923735f756f08cadd92d586f4ea6fcc8\">code - commit</a>. Example:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst orderSchema = new Schema({\n\t// cart: CartModel, // invalid, since cart is not a separate model\n\tproducts: [\n\t\t{\n\t\t\tproduct:  { type: Object, required: true }, // general storage\n\t\t\tquantity: { type: Number, required: true },\n\t\t}\n\t],\n\ttotal: { type: Number, required: true },\n\tuser: {\n\t\t// enumerating all, since we don't want the cart here\n\t\tname: { type: String, required: true },\n\t\tuserId: { \n\t\t\tref: 'User', \n\t\t\ttype: Schema.Types.ObjectId, \n\t\t\trequired: true \n\t\t},\n\t},\n});\n\n\nmodule.exports = mongoose.model('Order', orderSchema);\n</code></pre>\n<p>Then, the controller action can be changed. I’m assuming this is easy to do, so skipping. <a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose/commit/384321f5790c43a56a7bb31a8ddc9dd2ce5e282a\">Code</a></p>\n<p>One potential caveat <code>myBook.authorId</code> (even if <code>authorId</code> was populated) may not work, replace the code by this <code>{...myBook.authorId._doc}</code>. FIXME: I think this is not an issue, remove it if it’s not.</p>\n",
      "id": 131
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/228_timestamps.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/228_timestamps.html",
      "content": "# 229. timestamps\nCreated Sunday 18 June 2023 at 08:46 pm\n\nMongoose, by default, doesn't store instance timestamps - `createdAt` and `updatedAt`.\n\nTo enable them, set `timestamps` to `true` in the model's Schema config. Example:\n```js\nconst mongoose = require(\"mongoose\");\n\nconst OrderSchema = new mongoose.Schema(\n  { userId: 'some code', shippingAddress: 'some code' },\n  {\n    timestamps: true, // here\n  }\n);\n\nconst Order = mongoose.model(\"Order\", OrderSchema);\nmodule.exports = { Order };\n```\n`createdAt` and `updatedAt` fields are now available on the model instances.\n\n\n## Extracting time from `ObjectId`\nMongoDB provides a utility `OjectId.getTimestamp`. It's an instance method on `ObjectId`. This is a bare-bones way to get `createdAt`.\n```js\nconst documentCreatedAt = new ObjectId(user._id).getTimestamp();\n```\n\n\n## Extracting time from `ObjectId` (without utility)\nAn `ObjectId` encodes useful information within it. The document creation time is one of it, and can be extracted like so.\n```js\n// using plain JS - if mongodb or mongoose is not available\nfunction dateFromObjectId(_id) {\n\t// time is stored in hexadecimal, in microseconds\n\t// getting the decimal equivalent, in milliseconds - for `Date`\n    return new Date(parseInt(_id.toString().slice(0,8), 16) * 1000);\n}\ndateFromObjectId(user._id);\n```",
      "html": "<h1 id=\"229.-timestamps\">229. timestamps <a class=\"heading-anchor-permalink\" href=\"#229.-timestamps\">#</a></h1>\n<p>Created Sunday 18 June 2023 at 08:46 pm</p>\n<p>Mongoose, by default, doesn’t store instance timestamps - <code>createdAt</code> and <code>updatedAt</code>.</p>\n<p>To enable them, set <code>timestamps</code> to <code>true</code> in the model’s Schema config. Example:</p>\n<pre><code class=\"language-js\">const mongoose = require(&quot;mongoose&quot;);\n\nconst OrderSchema = new mongoose.Schema(\n  { userId: 'some code', shippingAddress: 'some code' },\n  {\n    timestamps: true, // here\n  }\n);\n\nconst Order = mongoose.model(&quot;Order&quot;, OrderSchema);\nmodule.exports = { Order };\n</code></pre>\n<p><code>createdAt</code> and <code>updatedAt</code> fields are now available on the model instances.</p>\n<h2 id=\"extracting-time-from-objectid\">Extracting time from <code>ObjectId</code> <a class=\"heading-anchor-permalink\" href=\"#extracting-time-from-objectid\">#</a></h2>\n<p>MongoDB provides a utility <code>OjectId.getTimestamp</code>. It’s an instance method on <code>ObjectId</code>. This is a bare-bones way to get <code>createdAt</code>.</p>\n<pre><code class=\"language-js\">const documentCreatedAt = new ObjectId(user._id).getTimestamp();\n</code></pre>\n<h2 id=\"extracting-time-from-objectid-(without-utility)\">Extracting time from <code>ObjectId</code> (without utility) <a class=\"heading-anchor-permalink\" href=\"#extracting-time-from-objectid-(without-utility)\">#</a></h2>\n<p>An <code>ObjectId</code> encodes useful information within it. The document creation time is one of it, and can be extracted like so.</p>\n<pre><code class=\"language-js\">// using plain JS - if mongodb or mongoose is not available\nfunction dateFromObjectId(_id) {\n\t// time is stored in hexadecimal, in microseconds\n\t// getting the decimal equivalent, in milliseconds - for `Date`\n    return new Date(parseInt(_id.toString().slice(0,8), 16) * 1000);\n}\ndateFromObjectId(user._id);\n</code></pre>\n",
      "id": 132
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/229_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/229_Wrap_up.html",
      "content": "# Wrap up\nCreated Friday 19 May 2023 at 12:42 am\n\nEasiest overview  - https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\n\n- Checkout the Mongoose docs for more features. https://mongoosejs.com/\n- Choosing what database to use - SQL or NoSQL, and ORM (or not using one) depends on the project and circumstance.\n- We'll continue with MongoDB for the rest of this course.",
      "html": "<h1 id=\"wrap-up\">Wrap up <a class=\"heading-anchor-permalink\" href=\"#wrap-up\">#</a></h1>\n<p>Created Friday 19 May 2023 at 12:42 am</p>\n<p>Easiest overview  - <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\">https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose</a></p>\n<ul>\n<li>Checkout the Mongoose docs for more features. <a href=\"https://mongoosejs.com/\">https://mongoosejs.com/</a></li>\n<li>Choosing what database to use - SQL or NoSQL, and ORM (or not using one) depends on the project and circumstance.</li>\n<li>We’ll continue with MongoDB for the rest of this course.</li>\n</ul>\n",
      "id": 133
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/1_limit_sort_and_count_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/1_limit_sort_and_count_Mongoose.html",
      "content": "# limit, sort and count in Mongoose\nCreated Monday 19 June 2023 at 01:14 am\n\nNote - these function can be changed to `.find` or any other query method after it.\n\n## 1. limit\nNumber of items returned can be limited by chaining the `.limit` method to `.find`.\n```js\nconst orders = await db\n  .collection(\"orders\")\n  .find(/* some code */)\n  .limit(2)\n  .toArray();\n```\n\nNote: 0 has no effect. Negative values behave the same as positive values.\n\n\n## 2. sort\nItems returned can be sorted by chaining `.sort` to `.find` (or similar)\n\nIt's the same as MongoDB's `.sort`, except that `0` is a valid direction (behaves the same as `1`, i.e. normal sort direction). FIXME: check once.\n\nExample:\n```js\nconst orders = await Order\n  .find(/* some code */)\n  .sort({ shippingAddress: 1 });\n\n\n// multi \nconst orders = await Order\n  .find(/* some code */)\n  .sort({ shippingAddress: 1, phoneCode: -1 })\n  // phone code will apply among documents with matching addresses\n```\n\n\n## 3. count\nChain `.count` to `.find`. Argument is a \"filter\". Returns a number\n```js\nconst numberOfOrders = await Order\n  .find(/* some code */)\n  .count();\n```\n",
      "html": "<h1 id=\"limit%2C-sort-and-count-in-mongoose\">limit, sort and count in Mongoose <a class=\"heading-anchor-permalink\" href=\"#limit%2C-sort-and-count-in-mongoose\">#</a></h1>\n<p>Created Monday 19 June 2023 at 01:14 am</p>\n<p>Note - these function can be changed to <code>.find</code> or any other query method after it.</p>\n<h2 id=\"1.-limit\">1. limit <a class=\"heading-anchor-permalink\" href=\"#1.-limit\">#</a></h2>\n<p>Number of items returned can be limited by chaining the <code>.limit</code> method to <code>.find</code>.</p>\n<pre><code class=\"language-js\">const orders = await db\n  .collection(&quot;orders&quot;)\n  .find(/* some code */)\n  .limit(2)\n  .toArray();\n</code></pre>\n<p>Note: 0 has no effect. Negative values behave the same as positive values.</p>\n<h2 id=\"2.-sort\">2. sort <a class=\"heading-anchor-permalink\" href=\"#2.-sort\">#</a></h2>\n<p>Items returned can be sorted by chaining <code>.sort</code> to <code>.find</code> (or similar)</p>\n<p>It’s the same as MongoDB’s <code>.sort</code>, except that <code>0</code> is a valid direction (behaves the same as <code>1</code>, i.e. normal sort direction). FIXME: check once.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const orders = await Order\n  .find(/* some code */)\n  .sort({ shippingAddress: 1 });\n\n\n// multi \nconst orders = await Order\n  .find(/* some code */)\n  .sort({ shippingAddress: 1, phoneCode: -1 })\n  // phone code will apply among documents with matching addresses\n</code></pre>\n<h2 id=\"3.-count\">3. count <a class=\"heading-anchor-permalink\" href=\"#3.-count\">#</a></h2>\n<p>Chain <code>.count</code> to <code>.find</code>. Argument is a “filter”. Returns a number</p>\n<pre><code class=\"language-js\">const numberOfOrders = await Order\n  .find(/* some code */)\n  .count();\n</code></pre>\n",
      "id": 134
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/2_query_operators_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/2_query_operators_in_Mongoose.html",
      "content": "# query operators in Mongoose\nCreated Monday 19 June 2023 at 02:17 am\n\n- The MongoDB query operators work just fine. Already noted [here](obsidian://open?vault=nodejs-notes&file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2Fextras%2Fquery_operators)\n\nBut Mongoose provides a more readable way to write queries with conditions - by chaining the operators.\n\nFIXME: see later. \n- The thing is to use `.where(\"attributeName\")` whose chained functions (name same as MongoDB operators) take their value as argument. \n- The default (implicit) relation between chained operators is 'AND'.\n- For complex stuff like AND and OR, the argument becomes an array, just like with MongoDB.\n- The structure is similar to Cypress, RSpec's \"code as you would say\".\n- *It may be useful for simple conditionals where the condition for an attribute is made against constants. *Example:\n```js\n// get all orders with totalAmount between 1000 (inclusive) and 5000\n\nconst orders = await Order\n  .find(/* some code */)\n  .where(\"totalAmount\")\n  .gte(1e3)\n  .lt(5e3) // implicit AND\n  .where(\"shippingAddress\")\n  .equals(\"Cayman Islands\");\n\n// some more variations\n\n// #1. shorthand for equals\n.where(\"shippingAddress\")\n.equals(\"Cayman Islands\");\n\n.where(\"shippingAddress\", \"Cayman Islands\")\n\n\n// #2. not equals\n.where(\"shippingAddress\")\n.ne(\"Cayman Islands\")\n```",
      "html": "<h1 id=\"query-operators-in-mongoose\">query operators in Mongoose <a class=\"heading-anchor-permalink\" href=\"#query-operators-in-mongoose\">#</a></h1>\n<p>Created Monday 19 June 2023 at 02:17 am</p>\n<ul>\n<li>The MongoDB query operators work just fine. Already noted <a href=\"obsidian://open?vault=nodejs-notes&amp;file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2Fextras%2Fquery_operators\">here</a></li>\n</ul>\n<p>But Mongoose provides a more readable way to write queries with conditions - by chaining the operators.</p>\n<p>FIXME: see later.</p>\n<ul>\n<li>The thing is to use <code>.where(&quot;attributeName&quot;)</code> whose chained functions (name same as MongoDB operators) take their value as argument.</li>\n<li>The default (implicit) relation between chained operators is ‘AND’.</li>\n<li>For complex stuff like AND and OR, the argument becomes an array, just like with MongoDB.</li>\n<li>The structure is similar to Cypress, RSpec’s “code as you would say”.</li>\n<li>*It may be useful for simple conditionals where the condition for an attribute is made against constants. *Example:</li>\n</ul>\n<pre><code class=\"language-js\">// get all orders with totalAmount between 1000 (inclusive) and 5000\n\nconst orders = await Order\n  .find(/* some code */)\n  .where(&quot;totalAmount&quot;)\n  .gte(1e3)\n  .lt(5e3) // implicit AND\n  .where(&quot;shippingAddress&quot;)\n  .equals(&quot;Cayman Islands&quot;);\n\n// some more variations\n\n// #1. shorthand for equals\n.where(&quot;shippingAddress&quot;)\n.equals(&quot;Cayman Islands&quot;);\n\n.where(&quot;shippingAddress&quot;, &quot;Cayman Islands&quot;)\n\n\n// #2. not equals\n.where(&quot;shippingAddress&quot;)\n.ne(&quot;Cayman Islands&quot;)\n</code></pre>\n",
      "id": 135
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/3_in_oneOf_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/3_in_oneOf_in_Mongoose.html",
      "content": "# `in` (oneOf) operator\nCreated Monday 19 June 2023 at 02:52 am\n\n- The MongoDB `$in` and `$nin` (inside the `.find()`) work just fine. Already noted [here](obsidian://open?vault=nodejs-notes&file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2Fextras%2F3_in_oneOf)\n\nBut, just like with other query operators, Mongoose provides a more readable way to write queries with conditions - by chaining the operators.\n\n## Syntax\n- Use `.where` along with `.in` (or `.nin`), chained to `.find`.\n- The value is an array, obviously.\n```js\n// Get all orders bound for India and USA\nconst orders = await Order\n  .find()\n  .where(\"shippingAddress\")\n  .in([\"India\", \"USA\"])\n\n// Get all orders, except those bound for India and USA\nconst orders = await Order.find()\n  .find()\n  .where(\"shippingAddress\")\n  .nin([\"India\", \"USA\"])\n```",
      "html": "<h1 id=\"in-(oneof)-operator\"><code>in</code> (oneOf) operator <a class=\"heading-anchor-permalink\" href=\"#in-(oneof)-operator\">#</a></h1>\n<p>Created Monday 19 June 2023 at 02:52 am</p>\n<ul>\n<li>The MongoDB <code>$in</code> and <code>$nin</code> (inside the <code>.find()</code>) work just fine. Already noted <a href=\"obsidian://open?vault=nodejs-notes&amp;file=home%2F4_resource_itineraries%2F2_Node_js_complete_guide_academind%2F12_Working_with_NoSQL_and_MongoDB%2Fextras%2F3_in_oneOf\">here</a></li>\n</ul>\n<p>But, just like with other query operators, Mongoose provides a more readable way to write queries with conditions - by chaining the operators.</p>\n<h2 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h2>\n<ul>\n<li>Use <code>.where</code> along with <code>.in</code> (or <code>.nin</code>), chained to <code>.find</code>.</li>\n<li>The value is an array, obviously.</li>\n</ul>\n<pre><code class=\"language-js\">// Get all orders bound for India and USA\nconst orders = await Order\n  .find()\n  .where(&quot;shippingAddress&quot;)\n  .in([&quot;India&quot;, &quot;USA&quot;])\n\n// Get all orders, except those bound for India and USA\nconst orders = await Order.find()\n  .find()\n  .where(&quot;shippingAddress&quot;)\n  .nin([&quot;India&quot;, &quot;USA&quot;])\n</code></pre>\n",
      "id": 136
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/4_ObjectId_in_Mongoose.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/extras/4_ObjectId_in_Mongoose.html",
      "content": "# ObjectId in Mongoose\nCreated Sunday 25 June 2023 at 03:46 pm\n\nThe `ObjectId` class is available in the `mongoose` package, i.e. there's no need to install the \"mongoose\" package just to use `ObjectId`.\n\nLocation:\n```js\nconst mongoose = require('mongoose');\nconst ObjectId = mongoose.Types.ObjectId;\n\nnew ObjectId(); // works\n```",
      "html": "<h1 id=\"objectid-in-mongoose\">ObjectId in Mongoose <a class=\"heading-anchor-permalink\" href=\"#objectid-in-mongoose\">#</a></h1>\n<p>Created Sunday 25 June 2023 at 03:46 pm</p>\n<p>The <code>ObjectId</code> class is available in the <code>mongoose</code> package, i.e. there’s no need to install the “mongoose” package just to use <code>ObjectId</code>.</p>\n<p>Location:</p>\n<pre><code class=\"language-js\">const mongoose = require('mongoose');\nconst ObjectId = mongoose.Types.ObjectId;\n\nnew ObjectId(); // works\n</code></pre>\n",
      "id": 137
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/tempREADME_archived.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/13_Working_with_Mongoose/tempREADME_archived.html",
      "content": "The pages without title (just have lecture number) indicate they were consumed in preview/bing mode.",
      "html": "<p>The pages without title (just have lecture number) indicate they were consumed in preview/bing mode.</p>\n",
      "id": 138
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/230_Module_intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/230_Module_intro.html",
      "content": "# Module intro\nCreated Sunday 25 June 2023 at 07:57 pm\n\n[height.app task link](https://height.app/OitGt6StRG/T-61)\n\nWe have looked at databases, which are stored on secondary storage for long term storage on the server.\n\nNow, let's look at other important storage constructs - in the context of web apps.\n\nWe'll look at 3 things in this section:\n1. What are Cookies?\n2. What are Sessions?\n3. Using Session and Cookies\n\nhttps://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md - all about cookies.\n\n\nKnow that Cookies and sessions are unrelated principally, but they are used in conjunction.\n\n\n---\n\nnote: I'm not trying to give a hard definition.\n\nSuppose we have a web app which has user authentication (simple log in). The expected requirements of such an app include:\n1. User shouldn't have to sign in each time they visit the app\n2. User should be able to see that they are logged in or not.\n3. User should be logged out after a certain event - generally a timeout. By \"logged out\", I mean requests fail and redirects to the login page.\n\n\n## Cookie\n1. Cookies are browser level storage that can be controllable by servers (i.e. the website).\n![](../../../../assets/230_Module_intro-image-1-510c7988.png)\n- Cookies can be used for many purposes, one of which is persistent authentication (\"logged in state\"). Cookies uses for this are also called \"authentication cookies\".\n- Cookies can be manipulated by the user and front-end code too.\n2. Another important aspect of a cookie is that it is included in every request that's made to the website.\n\n## Sessions (not started)\nA session is the server side counterpart of a cookie. It may be stored in a database or otherwise.\n\nAn \"authentication session\" is the counterpart of a \"authentication cookie\".",
      "html": "<h1 id=\"module-intro\">Module intro <a class=\"heading-anchor-permalink\" href=\"#module-intro\">#</a></h1>\n<p>Created Sunday 25 June 2023 at 07:57 pm</p>\n<p><a href=\"https://height.app/OitGt6StRG/T-61\">height.app task link</a></p>\n<p>We have looked at databases, which are stored on secondary storage for long term storage on the server.</p>\n<p>Now, let’s look at other important storage constructs - in the context of web apps.</p>\n<p>We’ll look at 3 things in this section:</p>\n<ol>\n<li>What are Cookies?</li>\n<li>What are Sessions?</li>\n<li>Using Session and Cookies</li>\n</ol>\n<p><a href=\"https://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md\">https://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md</a> - all about cookies.</p>\n<p>Know that Cookies and sessions are unrelated principally, but they are used in conjunction.</p>\n<hr>\n<p>note: I’m not trying to give a hard definition.</p>\n<p>Suppose we have a web app which has user authentication (simple log in). The expected requirements of such an app include:</p>\n<ol>\n<li>User shouldn’t have to sign in each time they visit the app</li>\n<li>User should be able to see that they are logged in or not.</li>\n<li>User should be logged out after a certain event - generally a timeout. By “logged out”, I mean requests fail and redirects to the login page.</li>\n</ol>\n<h2 id=\"cookie\">Cookie <a class=\"heading-anchor-permalink\" href=\"#cookie\">#</a></h2>\n<ol>\n<li>Cookies are browser level storage that can be controllable by servers (i.e. the website).\n<img src=\"../../../../assets/230_Module_intro-image-1-510c7988.png\" alt=\"\"></li>\n</ol>\n<ul>\n<li>Cookies can be used for many purposes, one of which is persistent authentication (“logged in state”). Cookies uses for this are also called “authentication cookies”.</li>\n<li>Cookies can be manipulated by the user and front-end code too.</li>\n</ul>\n<ol start=\"2\">\n<li>Another important aspect of a cookie is that it is included in every request that’s made to the website.</li>\n</ol>\n<h2 id=\"sessions-(not-started)\">Sessions (not started) <a class=\"heading-anchor-permalink\" href=\"#sessions-(not-started)\">#</a></h2>\n<p>A session is the server side counterpart of a cookie. It may be stored in a database or otherwise.</p>\n<p>An “authentication session” is the counterpart of a “authentication cookie”.</p>\n",
      "id": 139
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/231_Cookies_and_Session_Fundamentals.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/231_Cookies_and_Session_Fundamentals.html",
      "content": "# 231. Cookies and Session Fundamentals\nCreated Wed Oct 4, 2023 at 9:42 AM\n\n\nhttps://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md - all about cookies.\n\n\nKnow that Cookies and sessions are unrelated principally, but they are used in conjunction.\n## Cookies (fundam)\n1. What are cookies - client side storage for a site without need of JS. Cookies are data sent on every relevant request automatically by the browser as a header. mAid: Think of them as convenience data that's expendable.\n2. Setting cookies:\n\t- Cookies may be set by the server\n\t- Cookies may be set by the client\n\t- A cookie has a value and a config\n\t- Cookies may be invalidated by the server or the client JS (unless it cannot access it). Of course, invalidation through browser internal UI (manually) is always possible.\n\t- Note: browser level UI (manual) is not scriptable. \n3. Getting cookies (at the server) -  Cookies may be set by the client such that client side JS cannot access it (access through browser internal UI is still possible)\n4. Learnings\n\t1. Browser UI (tabs, pages, components) - components (tags) interact with their own cookies, and have nothing to do with the page src\n\t\t   ![](../../../../assets/231_Cookies_and_Session_Fundamentals-image-1-510c7988.svg)\n\t2. Omni-bar src is a special case of course. This needs protection, since everyone has access to `open(someLink`) in JS (CSRF). More: It's feels like an exception, where we shouldn't \"send\" the cookies. But, it's still within the \"src\" primary identifier realm, since the link component or .open (the page console) can be treated as a component. And components shouldn't be able to create a situation where they affect cookie get/set for other src. Of course, if the components came in the HTML, that's fine. However, since anchor tag is a major component, we should be able to relax this rule (which was the default). But strict mode is now available.\n\t3. Browser cookie manager - For the cookie manager, the primary identifier is \"src\"\n\t\t![](../../../../assets/231_Cookies_and_Session_Fundamentals-image-2-510c7988.svg)\n\n\n## Sessions (fundam)\n1. Definition - A way to implement auth without need for credentials (password) on each request.\n2. USP - basic principle of defense against auth stealing (cookies, token)\n3. Flow - ![](../../../../assets/231_Cookies_and_Session_Fundamentals-image-3-510c7988.svg)\n### Implementation\nThe current (above) flow involves a database call, which is expensive to do for each and every request\n\nOn the other hand, a simple decryption of a string is a fas operation. So instead of the using a table (database), we could encrypt the user details (user_id here) using a key that's only known to the server.\n\nNote: if you don't want to involve encryption, sessions are still a valid concept (send the id unencrypted - it's a random string anyway). But you'll need to maintain a database.\n\n### Optimization 1 - we don't need a table\nThe current (above) flow involves a database call, which is expensive to do for each and every request\n\nOn the other hand, a simple decryption of a string is a fas operation. So instead of the using a table (database), we could encrypt the user details (user_id here) using a key that's only known to the server.\n\nNote: if you don't want to involve encryption, sessions are still a valid concept (send the id unencrypted - it's a random string anyway). But you'll need to maintain a database.\n\n### Optimization 2 - send token back with each response\nTo prevent cookie stealing (which takes some human time), we can change the session encryption key each day (or some other period).\n\nBut why send the token back for every request - well, when the key changes, all existing sessions will be invalidated, forcing the user to sign in again (in order to generate a fresh token). This can be annoying for the user.\n\nInstead we can potentially send new session token with each response. Potentially meaning we would send the same token if it's valid, but if the token is valid and the time is nearing for key change, we'll generate a new token and send that instead.\n\nThis way, we can prevent the force login issue\nfor a majority of users. A small number of users\nwill have to login again, of course - if they were inactive when the session encryption key has changed in that time.\n\n### What's the role of a cookie in all this?\nSince we forego the need for username and password for each request, the client would need to send the session token (encrypted user data) for each request.\n\nJS cannot be used to do this, since the first call would never be authenticated (the page doesn't exist, let alone using `fetch` API).\n\nEven for SPA calls, adding logic to send and receive cookies would be tiring. \n\nFortunately cookies allow us to do all this (including on first page load). So it's both convenient and required.",
      "html": "<h1 id=\"231.-cookies-and-session-fundamentals\">231. Cookies and Session Fundamentals <a class=\"heading-anchor-permalink\" href=\"#231.-cookies-and-session-fundamentals\">#</a></h1>\n<p>Created Wed Oct 4, 2023 at 9:42 AM</p>\n<p><a href=\"https://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md\">https://github.com/sanjar-notes/backend/blob/d7878820f76ec345fdfd5aa0ff69b5f5f0305516/home/4_resource_itineraries/2_Cookies_Hussein_Nasser/1_HTTP_Cookies_Crash_Course.md</a> - all about cookies.</p>\n<p>Know that Cookies and sessions are unrelated principally, but they are used in conjunction.</p>\n<h2 id=\"cookies-(fundam)\">Cookies (fundam) <a class=\"heading-anchor-permalink\" href=\"#cookies-(fundam)\">#</a></h2>\n<ol>\n<li>What are cookies - client side storage for a site without need of JS. Cookies are data sent on every relevant request automatically by the browser as a header. mAid: Think of them as convenience data that’s expendable.</li>\n<li>Setting cookies:\n<ul>\n<li>Cookies may be set by the server</li>\n<li>Cookies may be set by the client</li>\n<li>A cookie has a value and a config</li>\n<li>Cookies may be invalidated by the server or the client JS (unless it cannot access it). Of course, invalidation through browser internal UI (manually) is always possible.</li>\n<li>Note: browser level UI (manual) is not scriptable.</li>\n</ul>\n</li>\n<li>Getting cookies (at the server) -  Cookies may be set by the client such that client side JS cannot access it (access through browser internal UI is still possible)</li>\n<li>Learnings\n<ol>\n<li>Browser UI (tabs, pages, components) - components (tags) interact with their own cookies, and have nothing to do with the page src\n<img src=\"../../../../assets/231_Cookies_and_Session_Fundamentals-image-1-510c7988.svg\" alt=\"\"></li>\n<li>Omni-bar src is a special case of course. This needs protection, since everyone has access to <code>open(someLink</code>) in JS (CSRF). More: It’s feels like an exception, where we shouldn’t “send” the cookies. But, it’s still within the “src” primary identifier realm, since the link component or .open (the page console) can be treated as a component. And components shouldn’t be able to create a situation where they affect cookie get/set for other src. Of course, if the components came in the HTML, that’s fine. However, since anchor tag is a major component, we should be able to relax this rule (which was the default). But strict mode is now available.</li>\n<li>Browser cookie manager - For the cookie manager, the primary identifier is “src”\n<img src=\"../../../../assets/231_Cookies_and_Session_Fundamentals-image-2-510c7988.svg\" alt=\"\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"sessions-(fundam)\">Sessions (fundam) <a class=\"heading-anchor-permalink\" href=\"#sessions-(fundam)\">#</a></h2>\n<ol>\n<li>Definition - A way to implement auth without need for credentials (password) on each request.</li>\n<li>USP - basic principle of defense against auth stealing (cookies, token)</li>\n<li>Flow - <img src=\"../../../../assets/231_Cookies_and_Session_Fundamentals-image-3-510c7988.svg\" alt=\"\"></li>\n</ol>\n<h3 id=\"implementation\">Implementation <a class=\"heading-anchor-permalink\" href=\"#implementation\">#</a></h3>\n<p>The current (above) flow involves a database call, which is expensive to do for each and every request</p>\n<p>On the other hand, a simple decryption of a string is a fas operation. So instead of the using a table (database), we could encrypt the user details (user_id here) using a key that’s only known to the server.</p>\n<p>Note: if you don’t want to involve encryption, sessions are still a valid concept (send the id unencrypted - it’s a random string anyway). But you’ll need to maintain a database.</p>\n<h3 id=\"optimization-1---we-don%E2%80%99t-need-a-table\">Optimization 1 - we don’t need a table <a class=\"heading-anchor-permalink\" href=\"#optimization-1---we-don%E2%80%99t-need-a-table\">#</a></h3>\n<p>The current (above) flow involves a database call, which is expensive to do for each and every request</p>\n<p>On the other hand, a simple decryption of a string is a fas operation. So instead of the using a table (database), we could encrypt the user details (user_id here) using a key that’s only known to the server.</p>\n<p>Note: if you don’t want to involve encryption, sessions are still a valid concept (send the id unencrypted - it’s a random string anyway). But you’ll need to maintain a database.</p>\n<h3 id=\"optimization-2---send-token-back-with-each-response\">Optimization 2 - send token back with each response <a class=\"heading-anchor-permalink\" href=\"#optimization-2---send-token-back-with-each-response\">#</a></h3>\n<p>To prevent cookie stealing (which takes some human time), we can change the session encryption key each day (or some other period).</p>\n<p>But why send the token back for every request - well, when the key changes, all existing sessions will be invalidated, forcing the user to sign in again (in order to generate a fresh token). This can be annoying for the user.</p>\n<p>Instead we can potentially send new session token with each response. Potentially meaning we would send the same token if it’s valid, but if the token is valid and the time is nearing for key change, we’ll generate a new token and send that instead.</p>\n<p>This way, we can prevent the force login issue\nfor a majority of users. A small number of users\nwill have to login again, of course - if they were inactive when the session encryption key has changed in that time.</p>\n<h3 id=\"what%E2%80%99s-the-role-of-a-cookie-in-all-this%3F\">What’s the role of a cookie in all this? <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-the-role-of-a-cookie-in-all-this%3F\">#</a></h3>\n<p>Since we forego the need for username and password for each request, the client would need to send the session token (encrypted user data) for each request.</p>\n<p>JS cannot be used to do this, since the first call would never be authenticated (the page doesn’t exist, let alone using <code>fetch</code> API).</p>\n<p>Even for SPA calls, adding logic to send and receive cookies would be tiring.</p>\n<p>Fortunately cookies allow us to do all this (including on first page load). So it’s both convenient and required.</p>\n",
      "id": 140
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/232_Add_login_flow.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/232_Add_login_flow.html",
      "content": "## 232. Add login flow\nCreated Monday 26 June 2023 at 01:44 am\n\nFor now, let's assume that credential lookup (email and password match) exists already.\n\nWe have done the following till now:\n1. Learn how to set cookie (s) in Express - single cookie, plural cookies.\n2. Learn how to read cookies - plain, or with `cookie-parser` package.\n3. Learnt that cookies by default are 'Session cookies', i.e. they expire when the browser is closed (i.e. all windows of the browser).\n4. Detail wise, we looked two variations.\n\t1. A boolean called 'loggedIn' as cookie. This works - but there's no way identify a user.\n\t\t- A userId cookie in addition to the boolean \"loggedIn\" cookie solves identification issue. But there's still a problem - impersonating is trivially easy.\n\t2. Generate a hash of credentials with a server salt (assume it's fixed and known only by the server). This solves impersonation. A problem - maintaining the server salt across server machines, and changing them regularly is still a problem.\n\t\t- Using credentials is not a must, we could just have stored the userId. All that matters is here is the salt + some piece of information (userId here). We generate a hash everytime a request comes in using the extra piece of info and our server salt, if it matches with the sent hash, we're good.\n\t\t- There's another small problem - it's a preference issue, not strictly a problem. If the server salt does not change, just setting cookies correctly will log the user in, in other words, the user can choose to not use the login page at all, even on completely new devices. They may just copy and paste the cookies on the new device, and it would log them in. This is inconvenient for most web apps - since they wish \"track\" the user, they want to know when the user logged in, and from what all devices did they do so.",
      "html": "<h2 id=\"232.-add-login-flow\">232. Add login flow <a class=\"heading-anchor-permalink\" href=\"#232.-add-login-flow\">#</a></h2>\n<p>Created Monday 26 June 2023 at 01:44 am</p>\n<p>For now, let’s assume that credential lookup (email and password match) exists already.</p>\n<p>We have done the following till now:</p>\n<ol>\n<li>Learn how to set cookie (s) in Express - single cookie, plural cookies.</li>\n<li>Learn how to read cookies - plain, or with <code>cookie-parser</code> package.</li>\n<li>Learnt that cookies by default are ‘Session cookies’, i.e. they expire when the browser is closed (i.e. all windows of the browser).</li>\n<li>Detail wise, we looked two variations.\n<ol>\n<li>A boolean called ‘loggedIn’ as cookie. This works - but there’s no way identify a user.\n<ul>\n<li>A userId cookie in addition to the boolean “loggedIn” cookie solves identification issue. But there’s still a problem - impersonating is trivially easy.</li>\n</ul>\n</li>\n<li>Generate a hash of credentials with a server salt (assume it’s fixed and known only by the server). This solves impersonation. A problem - maintaining the server salt across server machines, and changing them regularly is still a problem.\n<ul>\n<li>Using credentials is not a must, we could just have stored the userId. All that matters is here is the salt + some piece of information (userId here). We generate a hash everytime a request comes in using the extra piece of info and our server salt, if it matches with the sent hash, we’re good.</li>\n<li>There’s another small problem - it’s a preference issue, not strictly a problem. If the server salt does not change, just setting cookies correctly will log the user in, in other words, the user can choose to not use the login page at all, even on completely new devices. They may just copy and paste the cookies on the new device, and it would log them in. This is inconvenient for most web apps - since they wish “track” the user, they want to know when the user logged in, and from what all devices did they do so.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n",
      "id": 141
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/233_Cookie_code.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/233_Cookie_code.html",
      "content": "# 233. Cookie code\nCreated Wednesday 9 August 2023 at 02:41 am\n\n## Server\nRequirements - *Needs the `cookie-parser` package installed and added as middleware.*\n\n1. Create (set). There are two ways, both work without extra packages.\n\t1. `res.setHeader('set-cookie', 'cookieKey=cookieVal; confK=confV;')`\n\t2. `res.cookie('cookieName', 'cookieValue', config?)` [docs](https://expressjs.com/en/4x/api.html#res.cookie)\n2. Read. Two ways to do it. Second one is parsed (but needs a package).\n\t1. `res.headers.cookie` - key value string, need to add parse logic.\n\t2. `res.cookies` object and `res.cookies['cookieName']`. *Needs the ['cookie-parser'](https://www.npmjs.com/package/cookie-parser) package installed and added as middleware.* [docs](https://expressjs.com/en/4x/api.html#req.cookies)\n3. Update - same as set.\n4. Delete - set with `max-age:0`\n\t1. `res.setHeader('set-cookie', 'cookieKey=cookieVal; max-age=0;')`\n\t2. `res.clearCookie('cookieName', config?)` [docs](https://expressjs.com/en/4x/api.html#res.clearCookie)\n\nNote: \n- only reading cookies requires a package `cookie-parser`, writing `res.cookie` is supported by Express by default. Strange but ok.\n- There's no one liner to delete all cookies. Loop through received cookies and call `res.clearCookie(key)` for each.\n\n\n## In browser JS console\n- Read/write is quite simple. Use `document.cookie`.\n- But there's no parser, one needs to be cognizant of string logic.\n- Cookies with config 'HttpOnly' cannot be edited by JS. They can still be edited manually (using browser UI - the Application tab in DevTools).\n```js\ndocument.cookies = 'key1=value1; key2=value2;'\n```\n\n## Trying out the code\n1. Set simple cookies (no config and check if they're set or not).\n",
      "html": "<h1 id=\"233.-cookie-code\">233. Cookie code <a class=\"heading-anchor-permalink\" href=\"#233.-cookie-code\">#</a></h1>\n<p>Created Wednesday 9 August 2023 at 02:41 am</p>\n<h2 id=\"server\">Server <a class=\"heading-anchor-permalink\" href=\"#server\">#</a></h2>\n<p>Requirements - <em>Needs the <code>cookie-parser</code> package installed and added as middleware.</em></p>\n<ol>\n<li>Create (set). There are two ways, both work without extra packages.\n<ol>\n<li><code>res.setHeader('set-cookie', 'cookieKey=cookieVal; confK=confV;')</code></li>\n<li><code>res.cookie('cookieName', 'cookieValue', config?)</code> <a href=\"https://expressjs.com/en/4x/api.html#res.cookie\">docs</a></li>\n</ol>\n</li>\n<li>Read. Two ways to do it. Second one is parsed (but needs a package).\n<ol>\n<li><code>res.headers.cookie</code> - key value string, need to add parse logic.</li>\n<li><code>res.cookies</code> object and <code>res.cookies['cookieName']</code>. <em>Needs the <a href=\"https://www.npmjs.com/package/cookie-parser\">‘cookie-parser’</a> package installed and added as middleware.</em> <a href=\"https://expressjs.com/en/4x/api.html#req.cookies\">docs</a></li>\n</ol>\n</li>\n<li>Update - same as set.</li>\n<li>Delete - set with <code>max-age:0</code>\n<ol>\n<li><code>res.setHeader('set-cookie', 'cookieKey=cookieVal; max-age=0;')</code></li>\n<li><code>res.clearCookie('cookieName', config?)</code> <a href=\"https://expressjs.com/en/4x/api.html#res.clearCookie\">docs</a></li>\n</ol>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>only reading cookies requires a package <code>cookie-parser</code>, writing <code>res.cookie</code> is supported by Express by default. Strange but ok.</li>\n<li>There’s no one liner to delete all cookies. Loop through received cookies and call <code>res.clearCookie(key)</code> for each.</li>\n</ul>\n<h2 id=\"in-browser-js-console\">In browser JS console <a class=\"heading-anchor-permalink\" href=\"#in-browser-js-console\">#</a></h2>\n<ul>\n<li>Read/write is quite simple. Use <code>document.cookie</code>.</li>\n<li>But there’s no parser, one needs to be cognizant of string logic.</li>\n<li>Cookies with config ‘HttpOnly’ cannot be edited by JS. They can still be edited manually (using browser UI - the Application tab in DevTools).</li>\n</ul>\n<pre><code class=\"language-js\">document.cookies = 'key1=value1; key2=value2;'\n</code></pre>\n<h2 id=\"trying-out-the-code\">Trying out the code <a class=\"heading-anchor-permalink\" href=\"#trying-out-the-code\">#</a></h2>\n<ol>\n<li>Set simple cookies (no config and check if they’re set or not).</li>\n</ol>\n",
      "id": 142
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/234_Sessions_code.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/234_Sessions_code.html",
      "content": "# 234. Sessions code\nCreated Sun Oct 1, 2023 at 2:20 PM\n\n",
      "html": "<h1 id=\"234.-sessions-code\">234. Sessions code <a class=\"heading-anchor-permalink\" href=\"#234.-sessions-code\">#</a></h1>\n<p>Created Sun Oct 1, 2023 at 2:20 PM</p>\n",
      "id": 143
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/235_Cookie_experiments.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/235_Cookie_experiments.html",
      "content": "# 235. Cookie experiments\nCreated Sun Oct 22, 2023 at 12:56 AM\n\n- [Live table at Notion](https://www.notion.so/Experiments-with-cookies-9bfd4f4d46494084b14af6fb36cc072a?pvs=4)\n- This is good: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n\nCode + observations at https://github.com/exemplar-codes/cookies-experiments\n\n## CSRF tokens are still needed (post 2020)\nOnly sameSite strict is the **only one** that can offer CSRF protection, and even that's not complete protection. External links (PDF, README) still cause cookies to be sent. It's best to use a CSRF token.\n\nWeird/crazy things in Express noted in repo at relevant places",
      "html": "<h1 id=\"235.-cookie-experiments\">235. Cookie experiments <a class=\"heading-anchor-permalink\" href=\"#235.-cookie-experiments\">#</a></h1>\n<p>Created Sun Oct 22, 2023 at 12:56 AM</p>\n<ul>\n<li><a href=\"https://www.notion.so/Experiments-with-cookies-9bfd4f4d46494084b14af6fb36cc072a?pvs=4\">Live table at Notion</a></li>\n<li>This is good: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies</a></li>\n</ul>\n<p>Code + observations at <a href=\"https://github.com/exemplar-codes/cookies-experiments\">https://github.com/exemplar-codes/cookies-experiments</a></p>\n<h2 id=\"csrf-tokens-are-still-needed-(post-2020)\">CSRF tokens are still needed (post 2020) <a class=\"heading-anchor-permalink\" href=\"#csrf-tokens-are-still-needed-(post-2020)\">#</a></h2>\n<p>Only sameSite strict is the <strong>only one</strong> that can offer CSRF protection, and even that’s not complete protection. External links (PDF, README) still cause cookies to be sent. It’s best to use a CSRF token.</p>\n<p>Weird/crazy things in Express noted in repo at relevant places</p>\n",
      "id": 144
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/info.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/14_Sessions_and_Cookies/info.html",
      "content": "on hold:\n14. https://height.app/OitGt6StRG/T-61 (sessions + cookies)\n15. Auth - https://height.app/OitGt6StRG/T-93\n16. Sending emails - https://height.app/OitGt6StRG/T-99\n17. Advanced auth - https://height.app/OitGt6StRG/T-101",
      "html": "<p>on hold:\n14. <a href=\"https://height.app/OitGt6StRG/T-61\">https://height.app/OitGt6StRG/T-61</a> (sessions + cookies)\n15. Auth - <a href=\"https://height.app/OitGt6StRG/T-93\">https://height.app/OitGt6StRG/T-93</a>\n16. Sending emails - <a href=\"https://height.app/OitGt6StRG/T-99\">https://height.app/OitGt6StRG/T-99</a>\n17. Advanced auth - <a href=\"https://height.app/OitGt6StRG/T-101\">https://height.app/OitGt6StRG/T-101</a></p>\n",
      "id": 145
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/289_Validation_why_and_how.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/289_Validation_why_and_how.html",
      "content": "# 289. Validation, why and how\nCreated Monday 14 August 2023 at 11:17 pm\n\n[height task link](https://height.app/OitGt6StRG/T-131)\n## What and why validation\n- What - Validation in context of backend app means making sure that the data accepted from the client is correct and in the expected format.\n- Why - to make sure the database (app data) is in the correct state.\n\nOf course, what is valid or not is a product level decision\n\n## How is validation done\nThe server gets some input in a request, it checks (validates) the data, the data is accepted (stored/processed) if valid, else the server raises an error.\n\n\n## Validation goals of a BE app\n- A major goal of backend apps is to make sure the data they take from the user (via forms, or otherwise too) is in the correct format and semantically valid.\n- Another goal is to sanitize the input against security vulnerabilities like XSS, SQLI.\n\n\n## What happens if validation is absent\n- Validation is important since wrong data can lead to the system/app (BE + FE) being in the wrong state - this can be a minor issue or a very big problem (if lots of data is in bad state, and corrective data has been lost).\n",
      "html": "<h1 id=\"289.-validation%2C-why-and-how\">289. Validation, why and how <a class=\"heading-anchor-permalink\" href=\"#289.-validation%2C-why-and-how\">#</a></h1>\n<p>Created Monday 14 August 2023 at 11:17 pm</p>\n<p><a href=\"https://height.app/OitGt6StRG/T-131\">height task link</a></p>\n<h2 id=\"what-and-why-validation\">What and why validation <a class=\"heading-anchor-permalink\" href=\"#what-and-why-validation\">#</a></h2>\n<ul>\n<li>What - Validation in context of backend app means making sure that the data accepted from the client is correct and in the expected format.</li>\n<li>Why - to make sure the database (app data) is in the correct state.</li>\n</ul>\n<p>Of course, what is valid or not is a product level decision</p>\n<h2 id=\"how-is-validation-done\">How is validation done <a class=\"heading-anchor-permalink\" href=\"#how-is-validation-done\">#</a></h2>\n<p>The server gets some input in a request, it checks (validates) the data, the data is accepted (stored/processed) if valid, else the server raises an error.</p>\n<h2 id=\"validation-goals-of-a-be-app\">Validation goals of a BE app <a class=\"heading-anchor-permalink\" href=\"#validation-goals-of-a-be-app\">#</a></h2>\n<ul>\n<li>A major goal of backend apps is to make sure the data they take from the user (via forms, or otherwise too) is in the correct format and semantically valid.</li>\n<li>Another goal is to sanitize the input against security vulnerabilities like XSS, SQLI.</li>\n</ul>\n<h2 id=\"what-happens-if-validation-is-absent\">What happens if validation is absent <a class=\"heading-anchor-permalink\" href=\"#what-happens-if-validation-is-absent\">#</a></h2>\n<ul>\n<li>Validation is important since wrong data can lead to the system/app (BE + FE) being in the wrong state - this can be a minor issue or a very big problem (if lots of data is in bad state, and corrective data has been lost).</li>\n</ul>\n",
      "id": 146
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/290_3_layers_of_validation.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/290_3_layers_of_validation.html",
      "content": "# 290. 3 layers of validation\nCreated Tuesday 15 August 2023\n\n## The 3 layers overview\nValidation can be done at multiple layers of an app - the intent and effect varies. The layers are:\n1. Client side - purely a UX thing, isn't technically data validation.\n2. Server side - this is the ideal place for validation, in most apps.\n3. Database level - schema validations of the database being used.\n\n- client side validation is recommended but optional\n- atleast one of server side or database level is mandatory. \n- prefer server side.\n\n&nbsp;\n&nbsp;\n\n![](../../../../assets/290_3_layers_of_validation-image-1-0473ea29.png)\n\n\n## 1. Client-side validation\nThis is just a UX thing.\n\nClient side (browser side) validation can be implemented in various ways:\n1. `input.type` HTML attribute\n2. Custom JavaScript - with or without an application lib like React/Vue.\n   \nIt isn't data validation, technically, since the client can make API calls directly without a browser, or change the frontend code as per their needs (since HTML, CSS and JS are directly accessible - if not readable).\nOr they could just use a API client like Postman to mock the request.\n\nClient side validation is recommended to be there, but isn't enough. Of course, it is not mandatory (if dev resources are low).\n\n\n## 2. Server-side validation\nBy server-side validation, I mean the request handler code - an Express, Rails, Django app. I don't mean the database.\n\nThis is thought to be the ideal place for validation, for most apps. Some reasons for it:\n1. Database may be changed, without changing the server app logic\n2. Easy to respond with messages, files etc.\n3. Easy to do non-trivial validation - like validation that's based on external entities (e.g an external API) or a different part of the app - a database or message-queue etc.\n\n\n## 3. Database level validation\nBy database level, I mean the validations allowed by the db engine - usually done via Schemas (e.g. Sequelize models, Mongoose schemas and models).\n\nThis is not preferred if the database may be changed in the future.\nIt is OK to do this if the app is small and requirements shall stay stable in the future.\n\nIt's not recommended. It's not required (assuming there's server side validation).\n\n---\n\nIn this course, we'll focus on server-side validations only.",
      "html": "<h1 id=\"290.-3-layers-of-validation\">290. 3 layers of validation <a class=\"heading-anchor-permalink\" href=\"#290.-3-layers-of-validation\">#</a></h1>\n<p>Created Tuesday 15 August 2023</p>\n<h2 id=\"the-3-layers-overview\">The 3 layers overview <a class=\"heading-anchor-permalink\" href=\"#the-3-layers-overview\">#</a></h2>\n<p>Validation can be done at multiple layers of an app - the intent and effect varies. The layers are:</p>\n<ol>\n<li>Client side - purely a UX thing, isn’t technically data validation.</li>\n<li>Server side - this is the ideal place for validation, in most apps.</li>\n<li>Database level - schema validations of the database being used.</li>\n</ol>\n<ul>\n<li>client side validation is recommended but optional</li>\n<li>atleast one of server side or database level is mandatory.</li>\n<li>prefer server side.</li>\n</ul>\n<p> \n </p>\n<p><img src=\"../../../../assets/290_3_layers_of_validation-image-1-0473ea29.png\" alt=\"\"></p>\n<h2 id=\"1.-client-side-validation\">1. Client-side validation <a class=\"heading-anchor-permalink\" href=\"#1.-client-side-validation\">#</a></h2>\n<p>This is just a UX thing.</p>\n<p>Client side (browser side) validation can be implemented in various ways:</p>\n<ol>\n<li><code>input.type</code> HTML attribute</li>\n<li>Custom JavaScript - with or without an application lib like React/Vue.</li>\n</ol>\n<p>It isn’t data validation, technically, since the client can make API calls directly without a browser, or change the frontend code as per their needs (since HTML, CSS and JS are directly accessible - if not readable).\nOr they could just use a API client like Postman to mock the request.</p>\n<p>Client side validation is recommended to be there, but isn’t enough. Of course, it is not mandatory (if dev resources are low).</p>\n<h2 id=\"2.-server-side-validation\">2. Server-side validation <a class=\"heading-anchor-permalink\" href=\"#2.-server-side-validation\">#</a></h2>\n<p>By server-side validation, I mean the request handler code - an Express, Rails, Django app. I don’t mean the database.</p>\n<p>This is thought to be the ideal place for validation, for most apps. Some reasons for it:</p>\n<ol>\n<li>Database may be changed, without changing the server app logic</li>\n<li>Easy to respond with messages, files etc.</li>\n<li>Easy to do non-trivial validation - like validation that’s based on external entities (e.g an external API) or a different part of the app - a database or message-queue etc.</li>\n</ol>\n<h2 id=\"3.-database-level-validation\">3. Database level validation <a class=\"heading-anchor-permalink\" href=\"#3.-database-level-validation\">#</a></h2>\n<p>By database level, I mean the validations allowed by the db engine - usually done via Schemas (e.g. Sequelize models, Mongoose schemas and models).</p>\n<p>This is not preferred if the database may be changed in the future.\nIt is OK to do this if the app is small and requirements shall stay stable in the future.</p>\n<p>It’s not recommended. It’s not required (assuming there’s server side validation).</p>\n<hr>\n<p>In this course, we’ll focus on server-side validations only.</p>\n",
      "id": 147
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/291_Validation_as_middlewares.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/291_Validation_as_middlewares.html",
      "content": "\n# 291. Validation as middlewares\nCreated Tuesday 15 August 2023\n\nData validation is simple to structure into a backend app, especially Express.js apps.\n\nJust add it as a middleware.\n\n![Current state of our app](../../../../assets/291_Validation_as_middlewares-image-1-0473ea29.png)Current state of our app\n\n&nbsp;\n&nbsp;\n\n![After adding validation](../../../../assets/291_Validation_as_middlewares-image-2-0473ea29.png)After adding validation",
      "html": "<h1 id=\"291.-validation-as-middlewares\">291. Validation as middlewares <a class=\"heading-anchor-permalink\" href=\"#291.-validation-as-middlewares\">#</a></h1>\n<p>Created Tuesday 15 August 2023</p>\n<p>Data validation is simple to structure into a backend app, especially Express.js apps.</p>\n<p>Just add it as a middleware.</p>\n<p><img src=\"../../../../assets/291_Validation_as_middlewares-image-1-0473ea29.png\" alt=\"Current state of our app\">Current state of our app</p>\n<p> \n </p>\n<p><img src=\"../../../../assets/291_Validation_as_middlewares-image-2-0473ea29.png\" alt=\"After adding validation\">After adding validation</p>\n",
      "id": 148
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/292_express_validator_package_and_two_piece_arch.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/292_express_validator_package_and_two_piece_arch.html",
      "content": "# 292. `express-validator` package and two-piece architecture\nCreated Tuesday 15 August 2023\n\n## About the package\n- We are going to use a npm package called \"express-validator\" for adding validations to our online store app. [npm link](https://www.npmjs.com/package/express-validator). [Docs](https://express-validator.github.io/docs)\n- The package provides some basic constructs and in-build validators. We can also add our own custom validators too.\n- It **internally** uses \"validator\" package (aka validator.js). [npm link](https://www.npmjs.com/package/validator)\n\nFor in-built validators, we will most be refering to validatorJS package docs, https://www.npmjs.com/package/validator\n\n\n## Installation\n```sh\nnpm install express-validator\n```\n\nThat's it.\n\n---\n\n## Two piece behavior of express validator\nThe package exposes two (kinds) of functions:\n1. `check` - the \"accumulator\"\n2. `validatationResult` - the \"collector\"\n\nWhat it wants to us do is simple:\n1. Use the `check('')` as a middleware somewhere before final middlewares. \n\t- why: `check` generates middlewares which do the validation, and accumulate the error (s), we just need to generate check middlewares and add them correctly (express supports comma separated middlewares, so this is very easy). \n\t- Syntax: `check('email').isEmail()` generates a middleware. \n\t- void nature - We can think of these generated middlewares as `void` middlewares - they just mutate (accumulate) errors in the `req` object. They don't stop the request handling, just accumulate.\n2. Now, in later middlewares, we can call `validatonResult`, this is done in custom middlewares only (since they are concerned with responses). \n\t- Syntax: `validatonResult(req)`\n\t- It returns an object, which has a `.array()` function, with length being equal to number of checks that failed on the way to current middleware. Code: `validationResult(req).array()`\n\t- Each element of this array has `{param, value, error, message}`.\n\t- `param` is the key passed in `check`.\n\t- The package does provide default `messages` for in-built validators.\n\nNote: \n- Look at specific part of request - Just like `check`, the package exposes methods like `body`, `param`, `query`, `cookie`, `header` etc to decrease the check area (make validation precise). Rest is the same - provide a key.\n\t- There are still more constructs like `checkExact` and `oneOf`, see [docs](https://express-validator.github.io/docs/api/check).\n- Validators - I know, the validators  like `isEmail()` are the 3rd of functions here. Btw, some of these do take arguments - usually an argument that configures them, example - `isLength({min:5})`\n- Nested paths (check argument) is supported. Example: body is JSON where we wish to validate \"address.country\" (JSON path). `check('address.country')` would work in this case.\n\n\n## Why the two piece approach is good (ignorable)\nI like this approach, since:\n1. If it was one function, we'd have to move the response code inside the check call somehow - breaking DRY and locality of behavior.\n2. Since they are void - they can be ignored for the success case.\n3. Since they are 'accumulative', we can get all errors instead of of just the first one - which would make for a less helpful error message.\n\n\n## Code example (usage)\nI added a mock field and wrote some code that checks the field.\n\n```js\n// set up the error accumulator(s)\nrouter.post(\n  \"/edit-product/:productId\",\n  check(\"adhocEmail\")\n    .isEmail()\n    .isLength({ min: 5 })\n    .withMessage(\"thoda bada email bhejo\"),\n  adminController.postEditProduct\n);\n\n```\n\n```js\n// use the collector when responding (btw, can be used before too)\n\n/* two ways - array or map\ni. array - prefer array if the key is duplicated (i.e. could be in both body and params, or header)\nii. prefer map if key is unique across body, params, header\n*/\n\nconst postEditProduct = async (req, res, next) => {\n  const errors = validationResult(req);\n  const errorsArray = errors.array();\n\t\n  const adhocEmailError = errorsArray.find(item => item.param)\n\n  // remaining response code\n}\n```\n\nCommit - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/93ae7bd5171adec71345b9850468293615d1ad6c\n## More (validators)\nFor more in-built validators, checkout the official docs of validator.js package. Why? The \"express-validator\" package is based (uses) on this package (which was installed implicitly of course).\n\nLink (docs): https://www.npmjs.com/package/validator",
      "html": "<h1 id=\"292.-express-validator-package-and-two-piece-architecture\">292. <code>express-validator</code> package and two-piece architecture <a class=\"heading-anchor-permalink\" href=\"#292.-express-validator-package-and-two-piece-architecture\">#</a></h1>\n<p>Created Tuesday 15 August 2023</p>\n<h2 id=\"about-the-package\">About the package <a class=\"heading-anchor-permalink\" href=\"#about-the-package\">#</a></h2>\n<ul>\n<li>We are going to use a npm package called “express-validator” for adding validations to our online store app. <a href=\"https://www.npmjs.com/package/express-validator\">npm link</a>. <a href=\"https://express-validator.github.io/docs\">Docs</a></li>\n<li>The package provides some basic constructs and in-build validators. We can also add our own custom validators too.</li>\n<li>It <strong>internally</strong> uses “validator” package (aka validator.js). <a href=\"https://www.npmjs.com/package/validator\">npm link</a></li>\n</ul>\n<p>For in-built validators, we will most be refering to validatorJS package docs, <a href=\"https://www.npmjs.com/package/validator\">https://www.npmjs.com/package/validator</a></p>\n<h2 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h2>\n<pre><code class=\"language-sh\">npm install express-validator\n</code></pre>\n<p>That’s it.</p>\n<hr>\n<h2 id=\"two-piece-behavior-of-express-validator\">Two piece behavior of express validator <a class=\"heading-anchor-permalink\" href=\"#two-piece-behavior-of-express-validator\">#</a></h2>\n<p>The package exposes two (kinds) of functions:</p>\n<ol>\n<li><code>check</code> - the “accumulator”</li>\n<li><code>validatationResult</code> - the “collector”</li>\n</ol>\n<p>What it wants to us do is simple:</p>\n<ol>\n<li>Use the <code>check('')</code> as a middleware somewhere before final middlewares.\n<ul>\n<li>why: <code>check</code> generates middlewares which do the validation, and accumulate the error (s), we just need to generate check middlewares and add them correctly (express supports comma separated middlewares, so this is very easy).</li>\n<li>Syntax: <code>check('email').isEmail()</code> generates a middleware.</li>\n<li>void nature - We can think of these generated middlewares as <code>void</code> middlewares - they just mutate (accumulate) errors in the <code>req</code> object. They don’t stop the request handling, just accumulate.</li>\n</ul>\n</li>\n<li>Now, in later middlewares, we can call <code>validatonResult</code>, this is done in custom middlewares only (since they are concerned with responses).\n<ul>\n<li>Syntax: <code>validatonResult(req)</code></li>\n<li>It returns an object, which has a <code>.array()</code> function, with length being equal to number of checks that failed on the way to current middleware. Code: <code>validationResult(req).array()</code></li>\n<li>Each element of this array has <code>{param, value, error, message}</code>.</li>\n<li><code>param</code> is the key passed in <code>check</code>.</li>\n<li>The package does provide default <code>messages</code> for in-built validators.</li>\n</ul>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Look at specific part of request - Just like <code>check</code>, the package exposes methods like <code>body</code>, <code>param</code>, <code>query</code>, <code>cookie</code>, <code>header</code> etc to decrease the check area (make validation precise). Rest is the same - provide a key.\n<ul>\n<li>There are still more constructs like <code>checkExact</code> and <code>oneOf</code>, see <a href=\"https://express-validator.github.io/docs/api/check\">docs</a>.</li>\n</ul>\n</li>\n<li>Validators - I know, the validators  like <code>isEmail()</code> are the 3rd of functions here. Btw, some of these do take arguments - usually an argument that configures them, example - <code>isLength({min:5})</code></li>\n<li>Nested paths (check argument) is supported. Example: body is JSON where we wish to validate “address.country” (JSON path). <code>check('address.country')</code> would work in this case.</li>\n</ul>\n<h2 id=\"why-the-two-piece-approach-is-good-(ignorable)\">Why the two piece approach is good (ignorable) <a class=\"heading-anchor-permalink\" href=\"#why-the-two-piece-approach-is-good-(ignorable)\">#</a></h2>\n<p>I like this approach, since:</p>\n<ol>\n<li>If it was one function, we’d have to move the response code inside the check call somehow - breaking DRY and locality of behavior.</li>\n<li>Since they are void - they can be ignored for the success case.</li>\n<li>Since they are ‘accumulative’, we can get all errors instead of of just the first one - which would make for a less helpful error message.</li>\n</ol>\n<h2 id=\"code-example-(usage)\">Code example (usage) <a class=\"heading-anchor-permalink\" href=\"#code-example-(usage)\">#</a></h2>\n<p>I added a mock field and wrote some code that checks the field.</p>\n<pre><code class=\"language-js\">// set up the error accumulator(s)\nrouter.post(\n  &quot;/edit-product/:productId&quot;,\n  check(&quot;adhocEmail&quot;)\n    .isEmail()\n    .isLength({ min: 5 })\n    .withMessage(&quot;thoda bada email bhejo&quot;),\n  adminController.postEditProduct\n);\n\n</code></pre>\n<pre><code class=\"language-js\">// use the collector when responding (btw, can be used before too)\n\n/* two ways - array or map\ni. array - prefer array if the key is duplicated (i.e. could be in both body and params, or header)\nii. prefer map if key is unique across body, params, header\n*/\n\nconst postEditProduct = async (req, res, next) =&gt; {\n  const errors = validationResult(req);\n  const errorsArray = errors.array();\n\t\n  const adhocEmailError = errorsArray.find(item =&gt; item.param)\n\n  // remaining response code\n}\n</code></pre>\n<p>Commit - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/93ae7bd5171adec71345b9850468293615d1ad6c\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/93ae7bd5171adec71345b9850468293615d1ad6c</a></p>\n<h2 id=\"more-(validators)\">More (validators) <a class=\"heading-anchor-permalink\" href=\"#more-(validators)\">#</a></h2>\n<p>For more in-built validators, checkout the official docs of validator.js package. Why? The “express-validator” package is based (uses) on this package (which was installed implicitly of course).</p>\n<p>Link (docs): <a href=\"https://www.npmjs.com/package/validator\">https://www.npmjs.com/package/validator</a></p>\n",
      "id": 149
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/293_Chainability_and_custom_error_messages.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/293_Chainability_and_custom_error_messages.html",
      "content": "# 293. Chainability and custom error messages\nCreated Sunday 20 August 2023\n\n## Multiple validators (chaining)\nThe `check` (accumulator) can accept more than one validatior at a time, via chaining.\n```js\ncheck(\"adhocEmail\").isEmail().isLength({ min: 5 })\n```\n\n```js\n// usage example\nrouter.post(\"/edit-product/some-path\",\n\t\t\t\n  check(\"adhocEmail\")\n    .isEmail()\n    .isLength({ min: 5 }),\n\n  adminController.postEditProduct\n);\n```\nExample - `.isEmail()` or something built in again.\n\n\n## Custom error messages\nThe custom error message is bland - 'Invalid value'. For passing custom error messages, use the `withMessage()` function chained to a validator, like so:\n```js\ncheck(\"adhocEmail\").isEmail().withMessage(\"this ain't an email...\")\n```\n\n```js\n// usage example\nrouter.post(\"/edit-product/some-path\",\n\t\t\t\n  check(\"adhocEmail\")\n    .isEmail()\n    .withMessage(\"this ain't an email...\"),\n\n  adminController.postEditProduct\n);\n```\n\n\n### Error message shorthand for first validator (ignorable)\nSmall note: For the first validator, the `withMessage` may be omitted - by passing the error message into the accumulator middleware. If a `withMessage` is still given, it will take preference. This affects only the first validator, others will need to have their `withMessage` of course.\n```js\ncheck(\"adhocEmail\", \"adhoc email had an error\")\n.isLength({ min: 8 }); // will work fine\n\n\ncheck(\"adhocEmail\", \"1st way of error message\")\n.isLength({ min: 8 }); // will work fine\n.withMessage(\"2nd way of error message\"); // this will be printed\n```\n\n\n## Note\n- A chain of validators (chained to `check`) will still generate a single middleware.\n- Multiple chained validators could have a single `withMessage`. Example:\n\t```js\n\t// usage example\n\trouter.post(\"/edit-product/some-path\",\n\t\t\t\t\n\t  check(\"adhocEmail\")\n\t    .isEmail()\n\t    .isLength({ min: 5 }),\n\t    .withMessage(\"invalid email or too short\"),\n\t\n\t  adminController.postEditProduct\n\t);\n\t```\n- If multiple chained validator fail (i.e. value is invalid), `express-validator` will still successfully accumulate the errors and let the remaining middlewares run. It does not crash the app.\n- Of course `check().check()` *doesn't make sense*, and won't work since `check` just plucks a path and accumulates errors if any.\n- If both `throw` (or return falsy) and `withMessage` are used, `withMessage`'s message will override the throw Error's message.",
      "html": "<h1 id=\"293.-chainability-and-custom-error-messages\">293. Chainability and custom error messages <a class=\"heading-anchor-permalink\" href=\"#293.-chainability-and-custom-error-messages\">#</a></h1>\n<p>Created Sunday 20 August 2023</p>\n<h2 id=\"multiple-validators-(chaining)\">Multiple validators (chaining) <a class=\"heading-anchor-permalink\" href=\"#multiple-validators-(chaining)\">#</a></h2>\n<p>The <code>check</code> (accumulator) can accept more than one validatior at a time, via chaining.</p>\n<pre><code class=\"language-js\">check(&quot;adhocEmail&quot;).isEmail().isLength({ min: 5 })\n</code></pre>\n<pre><code class=\"language-js\">// usage example\nrouter.post(&quot;/edit-product/some-path&quot;,\n\t\t\t\n  check(&quot;adhocEmail&quot;)\n    .isEmail()\n    .isLength({ min: 5 }),\n\n  adminController.postEditProduct\n);\n</code></pre>\n<p>Example - <code>.isEmail()</code> or something built in again.</p>\n<h2 id=\"custom-error-messages\">Custom error messages <a class=\"heading-anchor-permalink\" href=\"#custom-error-messages\">#</a></h2>\n<p>The custom error message is bland - ‘Invalid value’. For passing custom error messages, use the <code>withMessage()</code> function chained to a validator, like so:</p>\n<pre><code class=\"language-js\">check(&quot;adhocEmail&quot;).isEmail().withMessage(&quot;this ain't an email...&quot;)\n</code></pre>\n<pre><code class=\"language-js\">// usage example\nrouter.post(&quot;/edit-product/some-path&quot;,\n\t\t\t\n  check(&quot;adhocEmail&quot;)\n    .isEmail()\n    .withMessage(&quot;this ain't an email...&quot;),\n\n  adminController.postEditProduct\n);\n</code></pre>\n<h3 id=\"error-message-shorthand-for-first-validator-(ignorable)\">Error message shorthand for first validator (ignorable) <a class=\"heading-anchor-permalink\" href=\"#error-message-shorthand-for-first-validator-(ignorable)\">#</a></h3>\n<p>Small note: For the first validator, the <code>withMessage</code> may be omitted - by passing the error message into the accumulator middleware. If a <code>withMessage</code> is still given, it will take preference. This affects only the first validator, others will need to have their <code>withMessage</code> of course.</p>\n<pre><code class=\"language-js\">check(&quot;adhocEmail&quot;, &quot;adhoc email had an error&quot;)\n.isLength({ min: 8 }); // will work fine\n\n\ncheck(&quot;adhocEmail&quot;, &quot;1st way of error message&quot;)\n.isLength({ min: 8 }); // will work fine\n.withMessage(&quot;2nd way of error message&quot;); // this will be printed\n</code></pre>\n<h2 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h2>\n<ul>\n<li>A chain of validators (chained to <code>check</code>) will still generate a single middleware.</li>\n<li>Multiple chained validators could have a single <code>withMessage</code>. Example:<pre><code class=\"language-js\">// usage example\nrouter.post(&quot;/edit-product/some-path&quot;,\n\t\t\t\n  check(&quot;adhocEmail&quot;)\n    .isEmail()\n    .isLength({ min: 5 }),\n    .withMessage(&quot;invalid email or too short&quot;),\n\n  adminController.postEditProduct\n);\n</code></pre>\n</li>\n<li>If multiple chained validator fail (i.e. value is invalid), <code>express-validator</code> will still successfully accumulate the errors and let the remaining middlewares run. It does not crash the app.</li>\n<li>Of course <code>check().check()</code> <em>doesn’t make sense</em>, and won’t work since <code>check</code> just plucks a path and accumulates errors if any.</li>\n<li>If both <code>throw</code> (or return falsy) and <code>withMessage</code> are used, <code>withMessage</code>'s message will override the throw Error’s message.</li>\n</ul>\n",
      "id": 150
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/294_Custom_validators.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/294_Custom_validators.html",
      "content": "# 294. Custom validators\nCreated Tuesday 22 August 2023\n\nWe have isEmail and other built in \"validators\". But we can create our own very easily too.\n\n1. Just chain `.custom(myCallbackNeedToSpecify)` \n2. the callback structure is simple - first param is the value, and the second is an object containing location, params, href and req itself (basically all we need to decide an error or not).\n\t```js\n\tcheck('adhocEmail')\n    /**\n     * @param value             Value to be validated (if present) | undefined\n     * @param {Object} req      Express request object\n     * @param {String} path     'address.country'\n     * @param {String} location 'body' | 'param' | 'header' | 'query'\n     *\n     * @returns truthy if no error | ( throw new Error('') | falsy )\n     */\n\t.custom((value, { path, location, req }) => {\n\t  const hasAnError = ...// some logic;\n\t  \n\t  if(hasAnError) {\n\t    // throw an error or return falsy\n\t    // prefer throwing since it allows to pass pass an error message\n\t    throw new Error('some specific error occured');\n\t    return false;\n\t  }\n\n\t   // return truthy to indicate not error\n\t  return true;\n\t})\n\t```\n3. Signaling valid/invalid in the callback - if the data is valid, return `true`. Else throw an error `throw new Error('somemessage')`. That's it.\n\nOf course to validate multiple fields, just add multiple `.custom`\n\nCode - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/29797550b7b633fbf6241732a52de103e3afa6f8",
      "html": "<h1 id=\"294.-custom-validators\">294. Custom validators <a class=\"heading-anchor-permalink\" href=\"#294.-custom-validators\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<p>We have isEmail and other built in “validators”. But we can create our own very easily too.</p>\n<ol>\n<li>Just chain <code>.custom(myCallbackNeedToSpecify)</code></li>\n<li>the callback structure is simple - first param is the value, and the second is an object containing location, params, href and req itself (basically all we need to decide an error or not).<pre><code class=\"language-js\">check('adhocEmail')\n/**\n * @param value             Value to be validated (if present) | undefined\n * @param {Object} req      Express request object\n * @param {String} path     'address.country'\n * @param {String} location 'body' | 'param' | 'header' | 'query'\n *\n * @returns truthy if no error | ( throw new Error('') | falsy )\n */\n.custom((value, { path, location, req }) =&gt; {\n  const hasAnError = ...// some logic;\n  \n  if(hasAnError) {\n    // throw an error or return falsy\n    // prefer throwing since it allows to pass pass an error message\n    throw new Error('some specific error occured');\n    return false;\n  }\n\n   // return truthy to indicate not error\n  return true;\n})\n</code></pre>\n</li>\n<li>Signaling valid/invalid in the callback - if the data is valid, return <code>true</code>. Else throw an error <code>throw new Error('somemessage')</code>. That’s it.</li>\n</ol>\n<p>Of course to validate multiple fields, just add multiple <code>.custom</code></p>\n<p>Code - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/29797550b7b633fbf6241732a52de103e3afa6f8\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/29797550b7b633fbf6241732a52de103e3afa6f8</a></p>\n",
      "id": 151
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/295_More_validators.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/295_More_validators.html",
      "content": "# 295. More validators\nCreated Tuesday 22 August 2023\n\n## Simple validators\n1. Equal to - `.equals(idealValue)`\n2. String without space - `isAlphanumeric()` - `[0-9][a-z][A-Z]`\n3. Check if string `isString()` - string or not. `23` is an error, `\"23\"` is fine.\n4. Number within range: `isFloat({ min, max })`\n\t- Unlike the name, works fine with integers.\n\t- Works fine with strings (number as strings) too.\n5. Integer within range:  `isInteger({ min, max })` - like isFloat, but strict about value being an integer.\n\t- Works fine with strings (number as strings) too.\n6. Check if number - `isNumeric()` - checks if string/number is numeric.\n\t- Works fine with strings (number as strings) too.\n\nExample:\n```js\n.check().isFloat({ max: 12 })\n```",
      "html": "<h1 id=\"295.-more-validators\">295. More validators <a class=\"heading-anchor-permalink\" href=\"#295.-more-validators\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<h2 id=\"simple-validators\">Simple validators <a class=\"heading-anchor-permalink\" href=\"#simple-validators\">#</a></h2>\n<ol>\n<li>Equal to - <code>.equals(idealValue)</code></li>\n<li>String without space - <code>isAlphanumeric()</code> - <code>[0-9][a-z][A-Z]</code></li>\n<li>Check if string <code>isString()</code> - string or not. <code>23</code> is an error, <code>&quot;23&quot;</code> is fine.</li>\n<li>Number within range: <code>isFloat({ min, max })</code>\n<ul>\n<li>Unlike the name, works fine with integers.</li>\n<li>Works fine with strings (number as strings) too.</li>\n</ul>\n</li>\n<li>Integer within range:  <code>isInteger({ min, max })</code> - like isFloat, but strict about value being an integer.\n<ul>\n<li>Works fine with strings (number as strings) too.</li>\n</ul>\n</li>\n<li>Check if number - <code>isNumeric()</code> - checks if string/number is numeric.\n<ul>\n<li>Works fine with strings (number as strings) too.</li>\n</ul>\n</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-js\">.check().isFloat({ max: 12 })\n</code></pre>\n",
      "id": 152
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/296_Validating_multiple_fields_mutually.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/296_Validating_multiple_fields_mutually.html",
      "content": "# 296.  Validating multiple fields mutually\nCreated Tuesday 22 August 2023\n\n## Situation\nSuppose the body has `email`, `password`, and `confirmPassword`. And we wish to check if `password` and `confirmPassword` are equal or not.\n\nThere's no other way - we have to use a `custom` validator.\n\nGenerally, passwords have a general validation too (length, strength etc). Since we're checking for equality, using the validator on any of `password` or `confirmPassword` will work. Code:\n```js\ncheck('password')\n.custom((value, { req }) => {\n\tif(value === req.body.confirmPassword) return true;\n\n\tthrow new Error(\"passowrds don't match\");\n})\n.someOtherValidator();\n```\n\nNote: even if both validators fail, `express-validator` will accumulate the error successfully, instead of crashing the app.",
      "html": "<h1 id=\"296.-validating-multiple-fields-mutually\">296.  Validating multiple fields mutually <a class=\"heading-anchor-permalink\" href=\"#296.-validating-multiple-fields-mutually\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Suppose the body has <code>email</code>, <code>password</code>, and <code>confirmPassword</code>. And we wish to check if <code>password</code> and <code>confirmPassword</code> are equal or not.</p>\n<p>There’s no other way - we have to use a <code>custom</code> validator.</p>\n<p>Generally, passwords have a general validation too (length, strength etc). Since we’re checking for equality, using the validator on any of <code>password</code> or <code>confirmPassword</code> will work. Code:</p>\n<pre><code class=\"language-js\">check('password')\n.custom((value, { req }) =&gt; {\n\tif(value === req.body.confirmPassword) return true;\n\n\tthrow new Error(&quot;passowrds don't match&quot;);\n})\n.someOtherValidator();\n</code></pre>\n<p>Note: even if both validators fail, <code>express-validator</code> will accumulate the error successfully, instead of crashing the app.</p>\n",
      "id": 153
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/297_Async_validation.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/297_Async_validation.html",
      "content": "# 297. Async validation\nCreated Tuesday 22 August 2023\n\n\n## Situation\nSuppose a sign up request comes up, and it has 'username' and other things. We wish to check if the `username` is taken (already exists in our database) or not.\n\nThis validation isn't synchronous code - since DB calls are async.\n\nHow can we do this kind of validation using `express-validator`?\n\n\n## Solution\nJust create a custom validator, but the callback will be an `async` function.\nThis is supported by `express-validator` by default. Code:\n```js\ncheck('username')\n.custom(async (value, { req }) => {\n\tconst doesUserNameExists = await someDbCall(value);\n\n\tif(doesUserNameExists) throw new Error('username already exists');\n\n\t// else (do nothing)\n})\n```\nThere's a catch here, unlike the synchronous (where we must return `true` to signal validation is OK) - here we don't need to return anything. Throw an error if validaton is not OK, otherwise do nothing.\n\nNote:\n- If `async/await` syntax is not used, just return the promise. Signals are the same:\n\t- If OK - do nothing\n\t- If not OK - throw an error, or return `Promise.reject('error message')` from the last call.",
      "html": "<h1 id=\"297.-async-validation\">297. Async validation <a class=\"heading-anchor-permalink\" href=\"#297.-async-validation\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Suppose a sign up request comes up, and it has ‘username’ and other things. We wish to check if the <code>username</code> is taken (already exists in our database) or not.</p>\n<p>This validation isn’t synchronous code - since DB calls are async.</p>\n<p>How can we do this kind of validation using <code>express-validator</code>?</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<p>Just create a custom validator, but the callback will be an <code>async</code> function.\nThis is supported by <code>express-validator</code> by default. Code:</p>\n<pre><code class=\"language-js\">check('username')\n.custom(async (value, { req }) =&gt; {\n\tconst doesUserNameExists = await someDbCall(value);\n\n\tif(doesUserNameExists) throw new Error('username already exists');\n\n\t// else (do nothing)\n})\n</code></pre>\n<p>There’s a catch here, unlike the synchronous (where we must return <code>true</code> to signal validation is OK) - here we don’t need to return anything. Throw an error if validaton is not OK, otherwise do nothing.</p>\n<p>Note:</p>\n<ul>\n<li>If <code>async/await</code> syntax is not used, just return the promise. Signals are the same:\n<ul>\n<li>If OK - do nothing</li>\n<li>If not OK - throw an error, or return <code>Promise.reject('error message')</code> from the last call.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 154
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/298_Save_users_work_UX.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/298_Save_users_work_UX.html",
      "content": "# 298. Save user's work (UX)\nCreated Tuesday 22 August 2023\n\n## The idea (UX)\nThe idea is simple - upon validation error, the client should not have to fill up the values again. DON'T redirect, since they will have to fill the form again.\n\nInstead we should just show the errors (for fields) and keep the filled values intact. So they may edit the form and submit again.\n\n\n## SPA vs non-SPA\nSPA vs notSPA changes things a little here.\n- non SPA (ssr) - add conditional error CSS to form and the template engine can do the prefilling (with received form) as well as conditionally apply the CSS (based on validation errors).\n\t- or simply use a flashing library.\n- SPA - since we make a AJAX call, the same thing happens except that we don't need to prefill (since the page never \"really\" redirects in an SPA). It's simple here - just show the errors based on error keys returned by the server, via a Toast/notification.\n\n\n## RoR style actions help here\nSuppose you do have a traditional app (server side rendering).\n\nAn observation: the 7 CRUD endpoints of RoR solve this issue very well, since they have new and edit actions which are supposed to take care of pre-filling and error. It's a good pattern (separated from create and update action).",
      "html": "<h1 id=\"298.-save-user%E2%80%99s-work-(ux)\">298. Save user’s work (UX) <a class=\"heading-anchor-permalink\" href=\"#298.-save-user%E2%80%99s-work-(ux)\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<h2 id=\"the-idea-(ux)\">The idea (UX) <a class=\"heading-anchor-permalink\" href=\"#the-idea-(ux)\">#</a></h2>\n<p>The idea is simple - upon validation error, the client should not have to fill up the values again. DON’T redirect, since they will have to fill the form again.</p>\n<p>Instead we should just show the errors (for fields) and keep the filled values intact. So they may edit the form and submit again.</p>\n<h2 id=\"spa-vs-non-spa\">SPA vs non-SPA <a class=\"heading-anchor-permalink\" href=\"#spa-vs-non-spa\">#</a></h2>\n<p>SPA vs notSPA changes things a little here.</p>\n<ul>\n<li>non SPA (ssr) - add conditional error CSS to form and the template engine can do the prefilling (with received form) as well as conditionally apply the CSS (based on validation errors).\n<ul>\n<li>or simply use a flashing library.</li>\n</ul>\n</li>\n<li>SPA - since we make a AJAX call, the same thing happens except that we don’t need to prefill (since the page never “really” redirects in an SPA). It’s simple here - just show the errors based on error keys returned by the server, via a Toast/notification.</li>\n</ul>\n<h2 id=\"ror-style-actions-help-here\">RoR style actions help here <a class=\"heading-anchor-permalink\" href=\"#ror-style-actions-help-here\">#</a></h2>\n<p>Suppose you do have a traditional app (server side rendering).</p>\n<p>An observation: the 7 CRUD endpoints of RoR solve this issue very well, since they have new and edit actions which are supposed to take care of pre-filling and error. It’s a good pattern (separated from create and update action).</p>\n",
      "id": 155
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/301_Sanitization.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/301_Sanitization.html",
      "content": "# 301. Santitization\nCreated Tuesday 22 August 2023\n\n## Two kinds of sanitizations\nThis is simply the process of trimming the data to match it to our backend/system requirements. There are two aspects here:\n1. Security sanitization - this refers to escaping of user given text, like SQL or HTML, which could open our app to vulnerabilities like SQLi/XSS.\n2. Normal santization - stuff like normalizing emails, trimming spaces at the ends, etc.\n\n\n## How `express-validators` helps\nThe library, in addition to validation constructs, also provided sanitization functions.\n\n- Operation - Doing *will* mutate the req object parts (of course, only the ones that are specified). Again, there will be information loss, since \"express-validator\" directly mutates the `req` (of Express).\n\t- This means custom middlewares ahead (written by us), will also get sanitized values.\n- Usage - to use, just chain it to the `check` (or other accumulator), like validators are chained.\n\t- There's no need to use `validationResult` (collector), to get the sanitized value, since the Express `req` was mutated directly.\n\nExample:\n```js\n  check(\"adhocEmail\")\n    .isEmail()\n    .normalizeEmail(),\n\n(req, res, next) => { req.body.x }; // will be sanitized.\n```\n\n## Some sanitizers\n- `.trim()`\n- `.normalizeEmail()`\n- `escape()` - replaces symbols in HTML (like `<`, `>`) with their HTML entity codes\n- ``\n\n\n## More\nThe library has security based sanitizers too, check the [docs](https://express-validator.github.io/docs/guides/validation-chain/#standard-validatorssanitizers). \nThis article is also very good - [Flavio Copes - Sanitizing input in Express using express-validator\n](https://flaviocopes.com/express-sanitize-input/)",
      "html": "<h1 id=\"301.-santitization\">301. Santitization <a class=\"heading-anchor-permalink\" href=\"#301.-santitization\">#</a></h1>\n<p>Created Tuesday 22 August 2023</p>\n<h2 id=\"two-kinds-of-sanitizations\">Two kinds of sanitizations <a class=\"heading-anchor-permalink\" href=\"#two-kinds-of-sanitizations\">#</a></h2>\n<p>This is simply the process of trimming the data to match it to our backend/system requirements. There are two aspects here:</p>\n<ol>\n<li>Security sanitization - this refers to escaping of user given text, like SQL or HTML, which could open our app to vulnerabilities like SQLi/XSS.</li>\n<li>Normal santization - stuff like normalizing emails, trimming spaces at the ends, etc.</li>\n</ol>\n<h2 id=\"how-express-validators-helps\">How <code>express-validators</code> helps <a class=\"heading-anchor-permalink\" href=\"#how-express-validators-helps\">#</a></h2>\n<p>The library, in addition to validation constructs, also provided sanitization functions.</p>\n<ul>\n<li>Operation - Doing <em>will</em> mutate the req object parts (of course, only the ones that are specified). Again, there will be information loss, since “express-validator” directly mutates the <code>req</code> (of Express).\n<ul>\n<li>This means custom middlewares ahead (written by us), will also get sanitized values.</li>\n</ul>\n</li>\n<li>Usage - to use, just chain it to the <code>check</code> (or other accumulator), like validators are chained.\n<ul>\n<li>There’s no need to use <code>validationResult</code> (collector), to get the sanitized value, since the Express <code>req</code> was mutated directly.</li>\n</ul>\n</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-js\">  check(&quot;adhocEmail&quot;)\n    .isEmail()\n    .normalizeEmail(),\n\n(req, res, next) =&gt; { req.body.x }; // will be sanitized.\n</code></pre>\n<h2 id=\"some-sanitizers\">Some sanitizers <a class=\"heading-anchor-permalink\" href=\"#some-sanitizers\">#</a></h2>\n<ul>\n<li><code>.trim()</code></li>\n<li><code>.normalizeEmail()</code></li>\n<li><code>escape()</code> - replaces symbols in HTML (like <code>&lt;</code>, <code>&gt;</code>) with their HTML entity codes</li>\n<li>``</li>\n</ul>\n<h2 id=\"more\">More <a class=\"heading-anchor-permalink\" href=\"#more\">#</a></h2>\n<p>The library has security based sanitizers too, check the <a href=\"https://express-validator.github.io/docs/guides/validation-chain/#standard-validatorssanitizers\">docs</a>.\nThis article is also very good - <a href=\"https://flaviocopes.com/express-sanitize-input/\">Flavio Copes - Sanitizing input in Express using express-validator\n</a></p>\n",
      "id": 156
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/304_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/18_Understanding_Validation/304_Wrap_up.html",
      "content": "## Wrap up: Validation in Express\nCreated Tuesday 22 August 2023\n\n`express-validator` is a popular package used for validation and sanitization in the Express app dev ecosystem\nIt's:\n1. Easy to use\n2. Has very simple documentation\n3. Is simple to extend\n\nBut there are more solutions to validation in express apps, explore them.\n\nI'm not updating the code - since it'll take too long. Branch: https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/18_data_validation (\"18_data_validation\")",
      "html": "<h2 id=\"wrap-up%3A-validation-in-express\">Wrap up: Validation in Express <a class=\"heading-anchor-permalink\" href=\"#wrap-up%3A-validation-in-express\">#</a></h2>\n<p>Created Tuesday 22 August 2023</p>\n<p><code>express-validator</code> is a popular package used for validation and sanitization in the Express app dev ecosystem\nIt’s:</p>\n<ol>\n<li>Easy to use</li>\n<li>Has very simple documentation</li>\n<li>Is simple to extend</li>\n</ol>\n<p>But there are more solutions to validation in express apps, explore them.</p>\n<p>I’m not updating the code - since it’ll take too long. Branch: <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/18_data_validation\">https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/18_data_validation</a> (“18_data_validation”)</p>\n",
      "id": 157
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/306_Module_intro_and_the_error_sink.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/306_Module_intro_and_the_error_sink.html",
      "content": "# 306. Module intro and the error sink\n\nCode branch link (started a new one): https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/19-error-handling (\"19-error-handling\")\n\n[height.app task link](https://height.app/OitGt6StRG/T-180)\n\n---\n\n## Errors - existence and mindset\nThere are many types of errors\n- Errors are inevitable in a backend app. Some are deliberately designed by us for logging, and as info for the user.\n- The correct mindset here is to \"handle\" errors appropriately.\n\n\n## Types of errors\nTypes of errors with examples of reason and how to deal with them:\n![](../../../../assets/306_Module_intro_and_the_error_sink-image-1-5ab009ef.png)\n\n\n## Dealing with errors - app wide structure\nThere are two things usually done for dealing with errors:\n1. The error \"sink\" - Have a function whose job is to catch error for any unhandled error. This could is essentially like a `try catch` for the whole app.\n\t- It's the job of this sink to build and send at-least a generic error response using the bubbled Error object (e.g. `Error` in JS).\n\t- sometimes errors are deliberately thrown by us, so that this \"sink\" catches it and responds to the user with the message.\n\t- This also prevents a hard-crash of our app (i.e. the Node process dying).\n1. Semantic checks - these are pieces of code that deliberately throw an error when something goes wrong semantically (as opposed to syntax error, development error or external errors). Of course, the \"sink\" catches these too.\n\t- Sometimes, the semantic checks may formulate the response themselves, instead of throwing an error. Example - username is taken (request is sign up) isn't a generic error, and may need special handling - like redirecting to the login page (since the user may be trying to log in, instead of sign up).\n\t- These are usually found inside the context or flow of a feature.\n\nNote:\n- the sink is a system - not a single fixed function, it may have multiple error catches and formulate error responses, and even actions (like redirect).\n- The sink has to take care of two things no matter what - the error message and the action (redirect from a invalid form is bad UX) it takes.\n- Express.js does provide a built-in feature for error handling.\n\nPicture - left side is the sink, right side are the checks (and it's two variants).\n![](../../../../assets/306_Module_intro_and_the_error_sink-image-2-5ab009ef.png)\n\n\n## How to throw errors in JS (ignorable)\nalready learnt in core Node playlist (Codevolution). But still:\n```js\nthrow new Error('error message here') // btw, behaves like `return`\n```",
      "html": "<h1 id=\"306.-module-intro-and-the-error-sink\">306. Module intro and the error sink <a class=\"heading-anchor-permalink\" href=\"#306.-module-intro-and-the-error-sink\">#</a></h1>\n<p>Code branch link (started a new one): <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/19-error-handling\">https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/19-error-handling</a> (“19-error-handling”)</p>\n<p><a href=\"https://height.app/OitGt6StRG/T-180\">height.app task link</a></p>\n<hr>\n<h2 id=\"errors---existence-and-mindset\">Errors - existence and mindset <a class=\"heading-anchor-permalink\" href=\"#errors---existence-and-mindset\">#</a></h2>\n<p>There are many types of errors</p>\n<ul>\n<li>Errors are inevitable in a backend app. Some are deliberately designed by us for logging, and as info for the user.</li>\n<li>The correct mindset here is to “handle” errors appropriately.</li>\n</ul>\n<h2 id=\"types-of-errors\">Types of errors <a class=\"heading-anchor-permalink\" href=\"#types-of-errors\">#</a></h2>\n<p>Types of errors with examples of reason and how to deal with them:\n<img src=\"../../../../assets/306_Module_intro_and_the_error_sink-image-1-5ab009ef.png\" alt=\"\"></p>\n<h2 id=\"dealing-with-errors---app-wide-structure\">Dealing with errors - app wide structure <a class=\"heading-anchor-permalink\" href=\"#dealing-with-errors---app-wide-structure\">#</a></h2>\n<p>There are two things usually done for dealing with errors:</p>\n<ol>\n<li>The error “sink” - Have a function whose job is to catch error for any unhandled error. This could is essentially like a <code>try catch</code> for the whole app.\n<ul>\n<li>It’s the job of this sink to build and send at-least a generic error response using the bubbled Error object (e.g. <code>Error</code> in JS).</li>\n<li>sometimes errors are deliberately thrown by us, so that this “sink” catches it and responds to the user with the message.</li>\n<li>This also prevents a hard-crash of our app (i.e. the Node process dying).</li>\n</ul>\n</li>\n<li>Semantic checks - these are pieces of code that deliberately throw an error when something goes wrong semantically (as opposed to syntax error, development error or external errors). Of course, the “sink” catches these too.\n<ul>\n<li>Sometimes, the semantic checks may formulate the response themselves, instead of throwing an error. Example - username is taken (request is sign up) isn’t a generic error, and may need special handling - like redirecting to the login page (since the user may be trying to log in, instead of sign up).</li>\n<li>These are usually found inside the context or flow of a feature.</li>\n</ul>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>the sink is a system - not a single fixed function, it may have multiple error catches and formulate error responses, and even actions (like redirect).</li>\n<li>The sink has to take care of two things no matter what - the error message and the action (redirect from a invalid form is bad UX) it takes.</li>\n<li>Express.js does provide a built-in feature for error handling.</li>\n</ul>\n<p>Picture - left side is the sink, right side are the checks (and it’s two variants).\n<img src=\"../../../../assets/306_Module_intro_and_the_error_sink-image-2-5ab009ef.png\" alt=\"\"></p>\n<h2 id=\"how-to-throw-errors-in-js-(ignorable)\">How to throw errors in JS (ignorable) <a class=\"heading-anchor-permalink\" href=\"#how-to-throw-errors-in-js-(ignorable)\">#</a></h2>\n<p>already learnt in core Node playlist (Codevolution). But still:</p>\n<pre><code class=\"language-js\">throw new Error('error message here') // btw, behaves like `return`\n</code></pre>\n",
      "id": 158
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/311_Throw_error_page.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/311_Throw_error_page.html",
      "content": "# 311. Throw error page\nCreated Wednesday 23 August 2023\n\nnote: this is not the error sink. It's like a check where we construct the response on the spot.\n\nIt's just early response using a util middleware, that renders a page.\n\nBut I did this out of necessity, already:\n- [util code](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/b9ec4d285b0619af355cb7c8cd9296b52abaa4c4)\n- [usage](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/bd1baa1d9f788be7378f5848aacef7a06d75685e#diff-1b4e82f3315e11c27c617a1c90a00b21db3a3c22e312fef6d2e8cfcb042aaeeeR102)",
      "html": "<h1 id=\"311.-throw-error-page\">311. Throw error page <a class=\"heading-anchor-permalink\" href=\"#311.-throw-error-page\">#</a></h1>\n<p>Created Wednesday 23 August 2023</p>\n<p>note: this is not the error sink. It’s like a check where we construct the response on the spot.</p>\n<p>It’s just early response using a util middleware, that renders a page.</p>\n<p>But I did this out of necessity, already:</p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/b9ec4d285b0619af355cb7c8cd9296b52abaa4c4\">util code</a></li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/bd1baa1d9f788be7378f5848aacef7a06d75685e#diff-1b4e82f3315e11c27c617a1c90a00b21db3a3c22e312fef6d2e8cfcb042aaeeeR102\">usage</a></li>\n</ul>\n",
      "id": 159
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/312_Express_default_error_handler_middleware.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/312_Express_default_error_handler_middleware.html",
      "content": "# 312. Express default error handler middleware\nCreated Wednesday 23 August 2023\n\nExpress docs: https://expressjs.com/en/guide/error-handling.html\n## Situation\nSuppose an error occurs in a middleware, or we throw one deliberately. Result: the app crashes, unless the error is handled `try catch` in the same middleware.\n\nThis is not elegant, since we'll need to duplicate the try catch in all middlewares.\n\n\n## Solution\nExpress.js solves this problem for us.\nWhen an unhandled error occurs, Express stops the usual middleware chain and starts executing some special middlewares at the end of the chain.\n\nOf course, we need to add these middleware(s) ourselves. It could just be one also.\n\nImportant - this \"error\" middleware(s) should have 4 params, at-least. \nOtherwise Express will consider the middleware as a usual \"request\" middleware. Example:\n\n```js\nconst app = express();\n\napp.use();\n// endpooints\n// routers\n\n\n// \"error\" middleware (4 params), where control reaches in case of unhandled error\napp.use((err, req, res, next) => {\n\t// err is available\n\t// send a response, do whatever you want\n})\n```\n\n\n---\n## How to activate error bubbling\nThese events cause stoppage (of normal middleware flow) and trigger error bubbling:\n1. Occurrence of unhandled error\n2. Deliberate `throw` (unhandled)\n3. Running `next(errorObjectOrVariable)` from inside a middleware.\n\nOf course, these should happen inside a \"normal\" middleware.\n\n\n## Error from async code\nIf the unhandled error occurs (or `throw` was done) in async code (middleware), it will crash the app. \nThe only way to trigger error bubbling from an async middleware is to use `next(errorObject)`.\n\n```js\n// below, will trigger Express's error bubbling\n// OK\napp.use((req, res, next) => { throw new Error('...') });\n\n// below, won't trigger Express's error bubbling\n// app will crash\napp.use(async (req, res, next) => {\n\tthrow new Error('...');\n});\n\n// below: fix\napp.use(async (req, res, next) => { \n\tnext(Error('...'));\n});\n```\n\nSuggestion - just use `next(err)` inside `catch` (async/await) or `.catch` (if using Promises)\n\n\n## Error middleware chain behavior\nOnce bubbling starts, all remaining normal middlewares - will be ignored. The bubbling behavior is simple:\n- All normal middlewares are ignored\n- Only error type middlewares (i.e. 4 params) one will now be run.\n- Interleaving - if normal and error middlewares were interleaved, the normal ones will still be ignored.\n- If there was no error bubbling, the error middlewares are ignored.\n- If an error middleware calls `next(someValue)`, the next error middleware will be called.\n\t- Doing `next()` (without params) inside an error middleware stops the chain. The app will hang - no response is sent. *Don't do this*.\n\n\nnote: \n- The term \"bubbling\" may be misleading here - since the first error isn't automatically passed to the error handling middlewares (except the first). You decide what to pass to the next.\n- `(new Error('someMessageee')).message` is possible (in case I need to `.send` the message)\n\n[Code (commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/77ce492c8c822d692c70fb4b57cfeb040a78cc9e)",
      "html": "<h1 id=\"312.-express-default-error-handler-middleware\">312. Express default error handler middleware <a class=\"heading-anchor-permalink\" href=\"#312.-express-default-error-handler-middleware\">#</a></h1>\n<p>Created Wednesday 23 August 2023</p>\n<p>Express docs: <a href=\"https://expressjs.com/en/guide/error-handling.html\">https://expressjs.com/en/guide/error-handling.html</a></p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Suppose an error occurs in a middleware, or we throw one deliberately. Result: the app crashes, unless the error is handled <code>try catch</code> in the same middleware.</p>\n<p>This is not elegant, since we’ll need to duplicate the try catch in all middlewares.</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<p>Express.js solves this problem for us.\nWhen an unhandled error occurs, Express stops the usual middleware chain and starts executing some special middlewares at the end of the chain.</p>\n<p>Of course, we need to add these middleware(s) ourselves. It could just be one also.</p>\n<p>Important - this “error” middleware(s) should have 4 params, at-least.\nOtherwise Express will consider the middleware as a usual “request” middleware. Example:</p>\n<pre><code class=\"language-js\">const app = express();\n\napp.use();\n// endpooints\n// routers\n\n\n// &quot;error&quot; middleware (4 params), where control reaches in case of unhandled error\napp.use((err, req, res, next) =&gt; {\n\t// err is available\n\t// send a response, do whatever you want\n})\n</code></pre>\n<hr>\n<h2 id=\"how-to-activate-error-bubbling\">How to activate error bubbling <a class=\"heading-anchor-permalink\" href=\"#how-to-activate-error-bubbling\">#</a></h2>\n<p>These events cause stoppage (of normal middleware flow) and trigger error bubbling:</p>\n<ol>\n<li>Occurrence of unhandled error</li>\n<li>Deliberate <code>throw</code> (unhandled)</li>\n<li>Running <code>next(errorObjectOrVariable)</code> from inside a middleware.</li>\n</ol>\n<p>Of course, these should happen inside a “normal” middleware.</p>\n<h2 id=\"error-from-async-code\">Error from async code <a class=\"heading-anchor-permalink\" href=\"#error-from-async-code\">#</a></h2>\n<p>If the unhandled error occurs (or <code>throw</code> was done) in async code (middleware), it will crash the app.\nThe only way to trigger error bubbling from an async middleware is to use <code>next(errorObject)</code>.</p>\n<pre><code class=\"language-js\">// below, will trigger Express's error bubbling\n// OK\napp.use((req, res, next) =&gt; { throw new Error('...') });\n\n// below, won't trigger Express's error bubbling\n// app will crash\napp.use(async (req, res, next) =&gt; {\n\tthrow new Error('...');\n});\n\n// below: fix\napp.use(async (req, res, next) =&gt; { \n\tnext(Error('...'));\n});\n</code></pre>\n<p>Suggestion - just use <code>next(err)</code> inside <code>catch</code> (async/await) or <code>.catch</code> (if using Promises)</p>\n<h2 id=\"error-middleware-chain-behavior\">Error middleware chain behavior <a class=\"heading-anchor-permalink\" href=\"#error-middleware-chain-behavior\">#</a></h2>\n<p>Once bubbling starts, all remaining normal middlewares - will be ignored. The bubbling behavior is simple:</p>\n<ul>\n<li>All normal middlewares are ignored</li>\n<li>Only error type middlewares (i.e. 4 params) one will now be run.</li>\n<li>Interleaving - if normal and error middlewares were interleaved, the normal ones will still be ignored.</li>\n<li>If there was no error bubbling, the error middlewares are ignored.</li>\n<li>If an error middleware calls <code>next(someValue)</code>, the next error middleware will be called.\n<ul>\n<li>Doing <code>next()</code> (without params) inside an error middleware stops the chain. The app will hang - no response is sent. <em>Don’t do this</em>.</li>\n</ul>\n</li>\n</ul>\n<p>note:</p>\n<ul>\n<li>The term “bubbling” may be misleading here - since the first error isn’t automatically passed to the error handling middlewares (except the first). You decide what to pass to the next.</li>\n<li><code>(new Error('someMessageee')).message</code> is possible (in case I need to <code>.send</code> the message)</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/77ce492c8c822d692c70fb4b57cfeb040a78cc9e\">Code (commit)</a></p>\n",
      "id": 160
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/313_Creating_the_error_sink.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/313_Creating_the_error_sink.html",
      "content": "# Creating the error *sink*\nCreated Wednesday 23 August 2023\n\nIt's very easy to create the \"error sink\" (discussed in app wide structure) using error handling middlewares of Express.\n\nMake sure that a response is sent.\n\n```js\n// 'express' import, app code, routers etc\n\n// error sink\n// add as the last middleware (after 404, even)\napp.use((err, req, res, next) => {\n\tconsole.log('Error sink reached');\n\n\n\t// responding is mandatory here, or the app will hang\n\tres.send();\n});\n\n\n// app.listen here\n```",
      "html": "<h1 id=\"creating-the-error-sink\">Creating the error <em>sink</em> <a class=\"heading-anchor-permalink\" href=\"#creating-the-error-sink\">#</a></h1>\n<p>Created Wednesday 23 August 2023</p>\n<p>It’s very easy to create the “error sink” (discussed in app wide structure) using error handling middlewares of Express.</p>\n<p>Make sure that a response is sent.</p>\n<pre><code class=\"language-js\">// 'express' import, app code, routers etc\n\n// error sink\n// add as the last middleware (after 404, even)\napp.use((err, req, res, next) =&gt; {\n\tconsole.log('Error sink reached');\n\n\n\t// responding is mandatory here, or the app will hang\n\tres.send();\n});\n\n\n// app.listen here\n</code></pre>\n",
      "id": 161
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/315_HTTP_status_codes.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/315_HTTP_status_codes.html",
      "content": "# 315.  HTTP status codes\nCreated Wednesday 23 August 2023\n\n## What and why are status codes?\n- These are codes sent in the response (by the server).\n- They help the browser know what's going on, in showing error popups.\n- They also help with general web app debugging, logging etc.\n\n\n## Classes of status codes\nThe 4 most important classes of status codes are:\n1. 2xx - success\n2. 3xx - redirect\n3. 4xx - client-side error\n4. 5xx - server-side error\n\n![](../../../../assets/315_HTTP_status_codes-image-1-5ab009ef.png)\n\nFor the complete list of codes, see https://httpstatuses.com/\n\n\n## How to send a status code in Express\n- If response will be built further:\n\t```js\n\tapp.use((req, res, next) => {\n\t  res.statusCode = 200;\n\t\n\t  // continue building the response\n\t});\n\t```\n- if response ready to send (chaining)\n\t```js\n\tapp.use((req, res, next) => {\n\t  res.status(200).send('All good');\n\t});\n\t```\n\nnote: \n- For redirection with status code (default is 302)\n\t- Pass code as the first param - `res.redirect(301, '/path')`\n\t- Already covered in Express\"responses\" fundamental section, btw [66_Responses](../5_Express_js/66_Responses.md#4-convenience-functions).",
      "html": "<h1 id=\"315.-http-status-codes\">315.  HTTP status codes <a class=\"heading-anchor-permalink\" href=\"#315.-http-status-codes\">#</a></h1>\n<p>Created Wednesday 23 August 2023</p>\n<h2 id=\"what-and-why-are-status-codes%3F\">What and why are status codes? <a class=\"heading-anchor-permalink\" href=\"#what-and-why-are-status-codes%3F\">#</a></h2>\n<ul>\n<li>These are codes sent in the response (by the server).</li>\n<li>They help the browser know what’s going on, in showing error popups.</li>\n<li>They also help with general web app debugging, logging etc.</li>\n</ul>\n<h2 id=\"classes-of-status-codes\">Classes of status codes <a class=\"heading-anchor-permalink\" href=\"#classes-of-status-codes\">#</a></h2>\n<p>The 4 most important classes of status codes are:</p>\n<ol>\n<li>2xx - success</li>\n<li>3xx - redirect</li>\n<li>4xx - client-side error</li>\n<li>5xx - server-side error</li>\n</ol>\n<p><img src=\"../../../../assets/315_HTTP_status_codes-image-1-5ab009ef.png\" alt=\"\"></p>\n<p>For the complete list of codes, see <a href=\"https://httpstatuses.com/\">https://httpstatuses.com/</a></p>\n<h2 id=\"how-to-send-a-status-code-in-express\">How to send a status code in Express <a class=\"heading-anchor-permalink\" href=\"#how-to-send-a-status-code-in-express\">#</a></h2>\n<ul>\n<li>If response will be built further:<pre><code class=\"language-js\">app.use((req, res, next) =&gt; {\n  res.statusCode = 200;\n\n  // continue building the response\n});\n</code></pre>\n</li>\n<li>if response ready to send (chaining)<pre><code class=\"language-js\">app.use((req, res, next) =&gt; {\n  res.status(200).send('All good');\n});\n</code></pre>\n</li>\n</ul>\n<p>note:</p>\n<ul>\n<li>For redirection with status code (default is 302)\n<ul>\n<li>Pass code as the first param - <code>res.redirect(301, '/path')</code></li>\n<li>Already covered in Express&quot;responses&quot; fundamental section, btw <a href=\"../5_Express_js/66_Responses.md#4-convenience-functions\">66_Responses</a>.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 162
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/316_Unhandled_async_errors_missing_await.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/316_Unhandled_async_errors_missing_await.html",
      "content": "## 316. Unhandled async errors (missing await)\nCreated Monday 28 August 2023\n\n[dev.to article](https://dev.to/sanjarcode/catch-async-middleware-errors-in-express-v4-53f7)\n## Context\nI am working on a plain JS Express.js app. It has middlewares, a few routers.\n\n&nbsp;\n\n## Situation - strange error\nI was getting an error from Mongoose package. The error would crash the app, in spite of having an error sink - which would never get triggered (unexpected).\n\nI am trying to use the `.save()` mongoose function, an async function, without `await`. But there's a reason I do this - I wish to send the response before the call succeeds.\n\nExact problem (comparison):\n```js\n// error\napp.get('/xyz', async (req, res, next) => {\n\n  try {\n\t// some code here\n\tproduct.save(); // this _will_ throw an error (expected, ok)\n  } \n  catch (e) {\n\tnext(e);\n  }\n\n  console.log('Everything is fine.'); // runs (unexpected)\n  \n});\n\napp.use((err, req, res, next) => {})\n\n// error middleware doesn't run (app crashes)\n```\n\n```js\napp.get('/xyz', async (req, res, next) => {\n\n  try {\n\t// some code here\n\tawait product.save(); // this _will_ throw an error (expected, ok)\n  } \n  catch (e) {\n\tnext(e);\n  }\n\n  console.log('Everything is fine.'); // doesn't run now, as expected\n  \n});\n\napp.use((err, req, res, next) => {})\n\n// error middleware runs (app doesn't crash)\n```\n\n&nbsp;\n\n## Fix (here)\nI needed to add `await`.\n\n&nbsp;\n## Explanation\nSince I did not wait for `product.save()` (which is async - so error is thrown after some time), to express, the error never occurred.\n\nSo, it never ran the code inside `catch`. \n\nAnd therefore, the error middleware never ran.\n\nBut the `product.save()` does throw an error, and it does bubble up at the runtime level (Node.js process instead of within Express), crashing the app.\n\n&nbsp;\n\n## Hack - catch error at a lower level (runtime instead of Express)\nThe following is a native way to catch errors. Add the following as the first middleware:\n```js\napp.use((req, res, next) => {\n  process.on(\"unhandledRejection\", function (reason, p) {\n    console.log(\"hack, Unhandled Rejection at: Promise \", p, \" reason: \", reason);\n    // application specific logging, throwing an error, or other logic here\n  });\n})\n```\nSource: https://stackoverflow.com/a/30650609/11392807\n\nHere:\n- Crash is prevented - since this will catch the unhandled error, prevent bubbling to the runtime level, so the crash will be prevented.\n- The error middleware is still not called.\n- Unfortunately, you can't respond (`res.send`/`res.json`/`res.render`, since this execution is happening outside the middleware chain: we don't have access to `res`.\n\nWhy would you I use this? If the app is old, there may be a lot of such \"non-awaited\" middlewares.\n\n&nbsp;\n\n## Actual fixes\n1. Use `await`.\n2. For non awaited parts, use `.then` and call `next(e)` from `.catch`. Example: If the user doesn't care about the result immediately.\n\n&nbsp;\n\n## Conclusion\nIf async middlewares (Express.js) contain code that doesn't use await. \nThen execution of such code starts happening outside the middleware chain.\nThis leads to problems like failed triggering of error middlewares, app crashes, and inability to send a response.",
      "html": "<h2 id=\"316.-unhandled-async-errors-(missing-await)\">316. Unhandled async errors (missing await) <a class=\"heading-anchor-permalink\" href=\"#316.-unhandled-async-errors-(missing-await)\">#</a></h2>\n<p>Created Monday 28 August 2023</p>\n<p><a href=\"https://dev.to/sanjarcode/catch-async-middleware-errors-in-express-v4-53f7\">dev.to article</a></p>\n<h2 id=\"context\">Context <a class=\"heading-anchor-permalink\" href=\"#context\">#</a></h2>\n<p>I am working on a plain JS Express.js app. It has middlewares, a few routers.</p>\n<p> </p>\n<h2 id=\"situation---strange-error\">Situation - strange error <a class=\"heading-anchor-permalink\" href=\"#situation---strange-error\">#</a></h2>\n<p>I was getting an error from Mongoose package. The error would crash the app, in spite of having an error sink - which would never get triggered (unexpected).</p>\n<p>I am trying to use the <code>.save()</code> mongoose function, an async function, without <code>await</code>. But there’s a reason I do this - I wish to send the response before the call succeeds.</p>\n<p>Exact problem (comparison):</p>\n<pre><code class=\"language-js\">// error\napp.get('/xyz', async (req, res, next) =&gt; {\n\n  try {\n\t// some code here\n\tproduct.save(); // this _will_ throw an error (expected, ok)\n  } \n  catch (e) {\n\tnext(e);\n  }\n\n  console.log('Everything is fine.'); // runs (unexpected)\n  \n});\n\napp.use((err, req, res, next) =&gt; {})\n\n// error middleware doesn't run (app crashes)\n</code></pre>\n<pre><code class=\"language-js\">app.get('/xyz', async (req, res, next) =&gt; {\n\n  try {\n\t// some code here\n\tawait product.save(); // this _will_ throw an error (expected, ok)\n  } \n  catch (e) {\n\tnext(e);\n  }\n\n  console.log('Everything is fine.'); // doesn't run now, as expected\n  \n});\n\napp.use((err, req, res, next) =&gt; {})\n\n// error middleware runs (app doesn't crash)\n</code></pre>\n<p> </p>\n<h2 id=\"fix-(here)\">Fix (here) <a class=\"heading-anchor-permalink\" href=\"#fix-(here)\">#</a></h2>\n<p>I needed to add <code>await</code>.</p>\n<p> </p>\n<h2 id=\"explanation\">Explanation <a class=\"heading-anchor-permalink\" href=\"#explanation\">#</a></h2>\n<p>Since I did not wait for <code>product.save()</code> (which is async - so error is thrown after some time), to express, the error never occurred.</p>\n<p>So, it never ran the code inside <code>catch</code>.</p>\n<p>And therefore, the error middleware never ran.</p>\n<p>But the <code>product.save()</code> does throw an error, and it does bubble up at the runtime level (Node.js process instead of within Express), crashing the app.</p>\n<p> </p>\n<h2 id=\"hack---catch-error-at-a-lower-level-(runtime-instead-of-express)\">Hack - catch error at a lower level (runtime instead of Express) <a class=\"heading-anchor-permalink\" href=\"#hack---catch-error-at-a-lower-level-(runtime-instead-of-express)\">#</a></h2>\n<p>The following is a native way to catch errors. Add the following as the first middleware:</p>\n<pre><code class=\"language-js\">app.use((req, res, next) =&gt; {\n  process.on(&quot;unhandledRejection&quot;, function (reason, p) {\n    console.log(&quot;hack, Unhandled Rejection at: Promise &quot;, p, &quot; reason: &quot;, reason);\n    // application specific logging, throwing an error, or other logic here\n  });\n})\n</code></pre>\n<p>Source: <a href=\"https://stackoverflow.com/a/30650609/11392807\">https://stackoverflow.com/a/30650609/11392807</a></p>\n<p>Here:</p>\n<ul>\n<li>Crash is prevented - since this will catch the unhandled error, prevent bubbling to the runtime level, so the crash will be prevented.</li>\n<li>The error middleware is still not called.</li>\n<li>Unfortunately, you can’t respond (<code>res.send</code>/<code>res.json</code>/<code>res.render</code>, since this execution is happening outside the middleware chain: we don’t have access to <code>res</code>.</li>\n</ul>\n<p>Why would you I use this? If the app is old, there may be a lot of such “non-awaited” middlewares.</p>\n<p> </p>\n<h2 id=\"actual-fixes\">Actual fixes <a class=\"heading-anchor-permalink\" href=\"#actual-fixes\">#</a></h2>\n<ol>\n<li>Use <code>await</code>.</li>\n<li>For non awaited parts, use <code>.then</code> and call <code>next(e)</code> from <code>.catch</code>. Example: If the user doesn’t care about the result immediately.</li>\n</ol>\n<p> </p>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>If async middlewares (Express.js) contain code that doesn’t use await.\nThen execution of such code starts happening outside the middleware chain.\nThis leads to problems like failed triggering of error middlewares, app crashes, and inability to send a response.</p>\n",
      "id": 163
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/317_wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/19_Error_Handling/317_wrap_up.html",
      "content": "# 317. Wrap up\nCreated Wednesday 23 August 2023\n\n- Error Handling in Express.js - Official Docs: https://expressjs.com/en/guide/error-handling.html\n\n![](../../../../assets/317_wrap_up-image-1-5ab009ef.png)",
      "html": "<h1 id=\"317.-wrap-up\">317. Wrap up <a class=\"heading-anchor-permalink\" href=\"#317.-wrap-up\">#</a></h1>\n<p>Created Wednesday 23 August 2023</p>\n<ul>\n<li>Error Handling in Express.js - Official Docs: <a href=\"https://expressjs.com/en/guide/error-handling.html\">https://expressjs.com/en/guide/error-handling.html</a></li>\n</ul>\n<p><img src=\"../../../../assets/317_wrap_up-image-1-5ab009ef.png\" alt=\"\"></p>\n",
      "id": 164
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/5_Understanding_the_role_and_usage_of_Node.js.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/5_Understanding_the_role_and_usage_of_Node.js.html",
      "content": "# 5. Understanding the role and usage of Node.js\nCreated Monday 13 February 2023 at 10:50 am\n\n## What is Node.js\n- Node.js is a general purpose JavaScript runtime environment, unlike JavaScript in the browser (which is a sand-boxed environment).\n\n\n## Alternatives to Node.js\n- Python - Flask, Django\n- C# - ASP.NET framework\n- Java - Sprint framework\n- Ruby - Ruby on Rails, Sinatra\n- Go - Gin\n- Rust - Actix\n- PHP - Laravel\n- JavaScript - Deno, bun\n\n\n## Why learn Node.js\n- Node.js's USP is that a single language (JavaScript) can be used to create both client side and server side apps. Simply said, DX.\n- From a market perspective:\n\t- Node.js is acceptably performant\n\t- Lots of 3rd party packages, libraries, frameworks and tools are available\n\t- A large job market - since companies don't need to hire a specific dev just for the backend",
      "html": "<h1 id=\"5.-understanding-the-role-and-usage-of-node.js\">5. Understanding the role and usage of Node.js <a class=\"heading-anchor-permalink\" href=\"#5.-understanding-the-role-and-usage-of-node.js\">#</a></h1>\n<p>Created Monday 13 February 2023 at 10:50 am</p>\n<h2 id=\"what-is-node.js\">What is Node.js <a class=\"heading-anchor-permalink\" href=\"#what-is-node.js\">#</a></h2>\n<ul>\n<li>Node.js is a general purpose JavaScript runtime environment, unlike JavaScript in the browser (which is a sand-boxed environment).</li>\n</ul>\n<h2 id=\"alternatives-to-node.js\">Alternatives to Node.js <a class=\"heading-anchor-permalink\" href=\"#alternatives-to-node.js\">#</a></h2>\n<ul>\n<li>Python - Flask, Django</li>\n<li>C# - <a href=\"http://ASP.NET\">ASP.NET</a> framework</li>\n<li>Java - Sprint framework</li>\n<li>Ruby - Ruby on Rails, Sinatra</li>\n<li>Go - Gin</li>\n<li>Rust - Actix</li>\n<li>PHP - Laravel</li>\n<li>JavaScript - Deno, bun</li>\n</ul>\n<h2 id=\"why-learn-node.js\">Why learn Node.js <a class=\"heading-anchor-permalink\" href=\"#why-learn-node.js\">#</a></h2>\n<ul>\n<li>Node.js’s USP is that a single language (JavaScript) can be used to create both client side and server side apps. Simply said, DX.</li>\n<li>From a market perspective:\n<ul>\n<li>Node.js is acceptably performant</li>\n<li>Lots of 3rd party packages, libraries, frameworks and tools are available</li>\n<li>A large job market - since companies don’t need to hire a specific dev just for the backend</li>\n</ul>\n</li>\n</ul>\n",
      "id": 165
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/6_Course_Outline.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/1_Introduction/6_Course_Outline.html",
      "content": "# Course Outline\nCreated Monday 13 February 2023 at 11:37 am\n\nTotal sections - 36\n\n1. Node.js basics, debugging\n2. Express.js, Template engines\n3. MVC pattern, Advanced Routes and Models\n4. Databases - MySQL with Sequelize, MongoDB with Mongoose\n5. Sessions and Cookies\n6. Authentication (basic + advanced), authorization\n7. Sending Emails\n8. User Input validation\n9. Error handling\n10. File uploads and downloads\n11. Pagination\n12. Async requests\n13. Handling payments\n14. REST API basics, advanced\n15. Async await\n16. WebSockets and Socket.io - real time full duplex communication\n17. GraphQL\n18. Deployment, including setting up SSL\n19. Node.js beyond web servers\n20. Bonus modules - Node with TypeScript, Deno",
      "html": "<h1 id=\"course-outline\">Course Outline <a class=\"heading-anchor-permalink\" href=\"#course-outline\">#</a></h1>\n<p>Created Monday 13 February 2023 at 11:37 am</p>\n<p>Total sections - 36</p>\n<ol>\n<li>Node.js basics, debugging</li>\n<li>Express.js, Template engines</li>\n<li>MVC pattern, Advanced Routes and Models</li>\n<li>Databases - MySQL with Sequelize, MongoDB with Mongoose</li>\n<li>Sessions and Cookies</li>\n<li>Authentication (basic + advanced), authorization</li>\n<li>Sending Emails</li>\n<li>User Input validation</li>\n<li>Error handling</li>\n<li>File uploads and downloads</li>\n<li>Pagination</li>\n<li>Async requests</li>\n<li>Handling payments</li>\n<li>REST API basics, advanced</li>\n<li>Async await</li>\n<li>WebSockets and <a href=\"http://Socket.io\">Socket.io</a> - real time full duplex communication</li>\n<li>GraphQL</li>\n<li>Deployment, including setting up SSL</li>\n<li>Node.js beyond web servers</li>\n<li>Bonus modules - Node with TypeScript, Deno</li>\n</ol>\n",
      "id": 166
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/319_Module_intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/319_Module_intro.html",
      "content": "# 319. Intro\nCreated Sunday 27 August 2023\n\nProject branch: https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/20-file-uploads-and-downloads\n\nGoals\n- Handle uploads\n- Handle downloads\n\nthoughts: [Blobs are not that common in BE apps](home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/24_Streams_and_Buffers.md#opinion---blobs-are-not-common-in-core-business-servers-fixme-guess)\n\n[height.app task link](https://height.app/OitGt6StRG/T-182)",
      "html": "<h1 id=\"319.-intro\">319. Intro <a class=\"heading-anchor-permalink\" href=\"#319.-intro\">#</a></h1>\n<p>Created Sunday 27 August 2023</p>\n<p>Project branch: <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/20-file-uploads-and-downloads\">https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/20-file-uploads-and-downloads</a></p>\n<p>Goals</p>\n<ul>\n<li>Handle uploads</li>\n<li>Handle downloads</li>\n</ul>\n<p>thoughts: <a href=\"home/4_resource_itineraries/1_codevolution_nodejs_beginners/3_Built_in_modules/24_Streams_and_Buffers.md#opinion---blobs-are-not-common-in-core-business-servers-fixme-guess\">Blobs are not that common in BE apps</a></p>\n<p><a href=\"https://height.app/OitGt6StRG/T-182\">height.app task link</a></p>\n",
      "id": 167
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/320_Adding_a_file_picker_on_the_frontend.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/320_Adding_a_file_picker_on_the_frontend.html",
      "content": "# 320. Adding a file picker on the frontend\nCreated Sunday 27 August 2023\n\nAdd input type=\"file\".\n\nCode: https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/73ebee6105f744312d66f9b8aba444e62a9abdb6",
      "html": "<h1 id=\"320.-adding-a-file-picker-on-the-frontend\">320. Adding a file picker on the frontend <a class=\"heading-anchor-permalink\" href=\"#320.-adding-a-file-picker-on-the-frontend\">#</a></h1>\n<p>Created Sunday 27 August 2023</p>\n<p>Add input type=“file”.</p>\n<p>Code: <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/73ebee6105f744312d66f9b8aba444e62a9abdb6\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/73ebee6105f744312d66f9b8aba444e62a9abdb6</a></p>\n",
      "id": 168
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/321_Handling_Multipart_Formdata.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/321_Handling_Multipart_Formdata.html",
      "content": "---\ntags:\n  - file-uploads\n  - multipart\n  - formdata\n  - multer\n  - enctype\n---\n# 321. Handling Multipart Formdata\n\n## Current body parsing - `urlencoded`\nWe are currently interpreting the body as `urlencoded` (by using express's middleware). This can be checked by seeing the request type which is `application/x-www-form-urlencoded`, which is default content type.\n\nUnfortunately, Express doesn't have a parser that could be used with file payloads. The `\"body-parser\"` package also doesn't support this.\n\n\n## Using `multer`\nMulter is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It's mentioned at Express (http://expressjs.com/en/resources/middleware/multer.html)\n\nfor us, `\"multer\"` is an npm package that can interpret request bodies containing files.\n\nInstallation: `npm install multer`\n\nIt's simple to use -just add a middleware.\n\n\n## form `enctype`\nIn addition to the `<input type=\"file\" />` that we added to our form, we need to change our request  content type to become `\"multipart/form-data\"`.\n\nThis is done by using the `\"enctype\"` attribute on the form, with value `\"multipart/form-data\"`.\n\nnote: setting this will help Express know the content type, so it can ignore the `urlencoded` middleware, and `multer` will take it up. Already learnt this btw.\n\nI added it globally (code): https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/94dc6cc8bead1d08ebb6ccf291fbdf3ea4d9478f\n\nIf using fetch, axios in a JS app, make sure payload is either string or FormData. See https://github.com/sanjar-notes/web_dev_fundamentals/issues/108\n\n## What happens to other form fields\nNo change in `req.body`, except type file ones are removed. Multer takes care of this.\nSo simple fields are still accessible via `req.body.myFormField`.",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>file-uploads</li>\n<li>multipart</li>\n<li>formdata</li>\n<li>multer</li>\n<li>enctype</li>\n</ul>\n<hr>\n<h1 id=\"321.-handling-multipart-formdata\">321. Handling Multipart Formdata <a class=\"heading-anchor-permalink\" href=\"#321.-handling-multipart-formdata\">#</a></h1>\n<h2 id=\"current-body-parsing---urlencoded\">Current body parsing - <code>urlencoded</code> <a class=\"heading-anchor-permalink\" href=\"#current-body-parsing---urlencoded\">#</a></h2>\n<p>We are currently interpreting the body as <code>urlencoded</code> (by using express’s middleware). This can be checked by seeing the request type which is <code>application/x-www-form-urlencoded</code>, which is default content type.</p>\n<p>Unfortunately, Express doesn’t have a parser that could be used with file payloads. The <code>&quot;body-parser&quot;</code> package also doesn’t support this.</p>\n<h2 id=\"using-multer\">Using <code>multer</code> <a class=\"heading-anchor-permalink\" href=\"#using-multer\">#</a></h2>\n<p>Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It’s mentioned at Express (<a href=\"http://expressjs.com/en/resources/middleware/multer.html\">http://expressjs.com/en/resources/middleware/multer.html</a>)</p>\n<p>for us, <code>&quot;multer&quot;</code> is an npm package that can interpret request bodies containing files.</p>\n<p>Installation: <code>npm install multer</code></p>\n<p>It’s simple to use -just add a middleware.</p>\n<h2 id=\"form-enctype\">form <code>enctype</code> <a class=\"heading-anchor-permalink\" href=\"#form-enctype\">#</a></h2>\n<p>In addition to the <code>&lt;input type=&quot;file&quot; /&gt;</code> that we added to our form, we need to change our request  content type to become <code>&quot;multipart/form-data&quot;</code>.</p>\n<p>This is done by using the <code>&quot;enctype&quot;</code> attribute on the form, with value <code>&quot;multipart/form-data&quot;</code>.</p>\n<p>note: setting this will help Express know the content type, so it can ignore the <code>urlencoded</code> middleware, and <code>multer</code> will take it up. Already learnt this btw.</p>\n<p>I added it globally (code): <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/94dc6cc8bead1d08ebb6ccf291fbdf3ea4d9478f\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/94dc6cc8bead1d08ebb6ccf291fbdf3ea4d9478f</a></p>\n<p>If using fetch, axios in a JS app, make sure payload is either string or FormData. See <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/issues/108\">https://github.com/sanjar-notes/web_dev_fundamentals/issues/108</a></p>\n<h2 id=\"what-happens-to-other-form-fields\">What happens to other form fields <a class=\"heading-anchor-permalink\" href=\"#what-happens-to-other-form-fields\">#</a></h2>\n<p>No change in <code>req.body</code>, except type file ones are removed. Multer takes care of this.\nSo simple fields are still accessible via <code>req.body.myFormField</code>.</p>\n",
      "id": 169
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/322_Handling_body_with_multer.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/322_Handling_body_with_multer.html",
      "content": "# 322. Handling body with `multer`\nCreated Sunday 27 August 2023\n\nMulter docs: https://www.npmjs.com/package/multer\nMulter article (LogRocket): https://blog.logrocket.com/multer-nodejs-express-upload-file/\n## Using multer - add a middleware\n```js\napp.use(multer().single('myFormFieldId'));\n```\n\nAccept single file having fieldname. File available in `req.file`.\n\nIt's an object containing original filename, mimetype, encoding and also the buffer (collected one). It also has some more metadata of course.\n\nnote: \n- Multer parsed \"body\" doesn't contain field names from `req.body` that it's adding to `req.file` (or `req.files`). memAid: `req.body` for text/unaccepted fields and `req.file`/`req.files` for files. See [code](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/b5960a4d6a1e0fc73e5909f14b56835dd0242f4d) \n\n\n## Other functions `multer().`\n- `.any()` - accept all files. `req.files` is an array of files.\n- `.none()` - accept only text fields. Throws error if file is uploaded.\n- `.array(['fieldName1, 'fieldName2'], [=maxCount])`. `req.files` has the array of files.\n- `.fields` - accept a mix of files. `req.files`. Most complicated.\n\n\n## File to be stored at location\nIn the example above (`.single`), `req.file.buffer` had the file content.\nThis is too low level, so `multer` offers an option to save file in the filesystem. \n\nDoing this is simple: add the `dest` config in the middleware setup.\nIt's a path (string).\n```js\napp.use(\n  multer({ dest: 'images_dir'})\n  .single('myFormFieldId')\n)\n\n// file will be saved at project_path/images-dir/\n```\n\nNow the file will be saved to project_root/images_dir.\n\nNow `req.file` contains the usual metadata, but instead of the buffer, it now has the file's path.\n\nnotes:\n- Saved filename is a hash with no extension.\n- All kinds of path are supported for 'dest':\n\t1. simple string ('xyz') - files will be stored at `project_root/xyz/`\n\t2. absolute paths are supported (store anywhere on the computer)\n\t3. relative paths are supported (w.r.t project level)",
      "html": "<h1 id=\"322.-handling-body-with-multer\">322. Handling body with <code>multer</code> <a class=\"heading-anchor-permalink\" href=\"#322.-handling-body-with-multer\">#</a></h1>\n<p>Created Sunday 27 August 2023</p>\n<p>Multer docs: <a href=\"https://www.npmjs.com/package/multer\">https://www.npmjs.com/package/multer</a>\nMulter article (LogRocket): <a href=\"https://blog.logrocket.com/multer-nodejs-express-upload-file/\">https://blog.logrocket.com/multer-nodejs-express-upload-file/</a></p>\n<h2 id=\"using-multer---add-a-middleware\">Using multer - add a middleware <a class=\"heading-anchor-permalink\" href=\"#using-multer---add-a-middleware\">#</a></h2>\n<pre><code class=\"language-js\">app.use(multer().single('myFormFieldId'));\n</code></pre>\n<p>Accept single file having fieldname. File available in <code>req.file</code>.</p>\n<p>It’s an object containing original filename, mimetype, encoding and also the buffer (collected one). It also has some more metadata of course.</p>\n<p>note:</p>\n<ul>\n<li>Multer parsed “body” doesn’t contain field names from <code>req.body</code> that it’s adding to <code>req.file</code> (or <code>req.files</code>). memAid: <code>req.body</code> for text/unaccepted fields and <code>req.file</code>/<code>req.files</code> for files. See <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/b5960a4d6a1e0fc73e5909f14b56835dd0242f4d\">code</a></li>\n</ul>\n<h2 id=\"other-functions-multer().\">Other functions <code>multer().</code> <a class=\"heading-anchor-permalink\" href=\"#other-functions-multer().\">#</a></h2>\n<ul>\n<li><code>.any()</code> - accept all files. <code>req.files</code> is an array of files.</li>\n<li><code>.none()</code> - accept only text fields. Throws error if file is uploaded.</li>\n<li><code>.array(['fieldName1, 'fieldName2'], [=maxCount])</code>. <code>req.files</code> has the array of files.</li>\n<li><code>.fields</code> - accept a mix of files. <code>req.files</code>. Most complicated.</li>\n</ul>\n<h2 id=\"file-to-be-stored-at-location\">File to be stored at location <a class=\"heading-anchor-permalink\" href=\"#file-to-be-stored-at-location\">#</a></h2>\n<p>In the example above (<code>.single</code>), <code>req.file.buffer</code> had the file content.\nThis is too low level, so <code>multer</code> offers an option to save file in the filesystem.</p>\n<p>Doing this is simple: add the <code>dest</code> config in the middleware setup.\nIt’s a path (string).</p>\n<pre><code class=\"language-js\">app.use(\n  multer({ dest: 'images_dir'})\n  .single('myFormFieldId')\n)\n\n// file will be saved at project_path/images-dir/\n</code></pre>\n<p>Now the file will be saved to project_root/images_dir.</p>\n<p>Now <code>req.file</code> contains the usual metadata, but instead of the buffer, it now has the file’s path.</p>\n<p>notes:</p>\n<ul>\n<li>Saved filename is a hash with no extension.</li>\n<li>All kinds of path are supported for ‘dest’:\n<ol>\n<li>simple string (‘xyz’) - files will be stored at <code>project_root/xyz/</code></li>\n<li>absolute paths are supported (store anywhere on the computer)</li>\n<li>relative paths are supported (w.r.t project level)</li>\n</ol>\n</li>\n</ul>\n",
      "id": 170
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/323_Configuring_multer.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/323_Configuring_multer.html",
      "content": "# 323. Configuring multer\nCreated Sunday 27 August 2023\n\n## Can't access `req`\nCurrently, the most config we have done is to use the `dest` option for specifying the destination. <details><summary>But this isn't enough</summary> the destination (or logic of) is static and any rename logic will also be static, since we don't have `req` </details>\n\n\n## Accessing `req` with `diskStorage`\nIn addition to the simple `dest`, multer accepts a much more powerful config. This config has to be created in a certain format, the config key is 'storage'. Code:\n```js\nconst multer = require('multer');\n\n// create the config\nconst myMulterConfig = multer.diskStorage({\n  /**\n  * @param {Function} cb - callback that communicates value to multer. First param is an error. Pass null if there's no error. It's like 'next' (express middleware param)\n  *\n  * @param {Object} file - object containing metadata about the file, including buffer (if applicable)\n  *\n  * @param {Object} req Request object from Express.js\n\n  */\n  destination: (req, file, cb) {\n    cb(null, 'images-dir'); // error, value\n  },\n  filename: (req, file, cb) {\n    cb(null, 'file-name');\n  }\n});\n\n// use in middle setup\napp.use(\n  multer({ storage: myMulterConfig })\n  .single('myFormFieldId')\n);\n```\n[Code (commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/377fd1dd1fcca8be4837f8995b4597a2ccf0905f)\n\nNote:\n1. If there are multiple files, these functions are called for all of them (depending on `multer().array`, `multer.any()` etc of course). Expected behavior. [Code](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/06b4fde4beb384f5a93c65e6951a83352334233d)\n\nFIXMEs - \n1. ~~how to prevent saving, i.e. check the file for harmful content. Is there a function like `rejectFile() => bool`~~ done, see next page (filter file types).\n2. delegate save to a web service - how to set destination to a URL, or access a hook multer defines so we can use a cloud service SDK (to save file on the cloud), instead of on disk.\n\t1. Is this irrelevant?\n\t2. If an error occurs from the cloud service, how to relay errors back to Express middleware chain (since process is async and we don't have access to `next`)\n",
      "html": "<h1 id=\"323.-configuring-multer\">323. Configuring multer <a class=\"heading-anchor-permalink\" href=\"#323.-configuring-multer\">#</a></h1>\n<p>Created Sunday 27 August 2023</p>\n<h2 id=\"can%E2%80%99t-access-req\">Can’t access <code>req</code> <a class=\"heading-anchor-permalink\" href=\"#can%E2%80%99t-access-req\">#</a></h2>\n<p>Currently, the most config we have done is to use the <code>dest</code> option for specifying the destination. <details><summary>But this isn’t enough</summary> the destination (or logic of) is static and any rename logic will also be static, since we don’t have <code>req</code> </details></p>\n<h2 id=\"accessing-req-with-diskstorage\">Accessing <code>req</code> with <code>diskStorage</code> <a class=\"heading-anchor-permalink\" href=\"#accessing-req-with-diskstorage\">#</a></h2>\n<p>In addition to the simple <code>dest</code>, multer accepts a much more powerful config. This config has to be created in a certain format, the config key is ‘storage’. Code:</p>\n<pre><code class=\"language-js\">const multer = require('multer');\n\n// create the config\nconst myMulterConfig = multer.diskStorage({\n  /**\n  * @param {Function} cb - callback that communicates value to multer. First param is an error. Pass null if there's no error. It's like 'next' (express middleware param)\n  *\n  * @param {Object} file - object containing metadata about the file, including buffer (if applicable)\n  *\n  * @param {Object} req Request object from Express.js\n\n  */\n  destination: (req, file, cb) {\n    cb(null, 'images-dir'); // error, value\n  },\n  filename: (req, file, cb) {\n    cb(null, 'file-name');\n  }\n});\n\n// use in middle setup\napp.use(\n  multer({ storage: myMulterConfig })\n  .single('myFormFieldId')\n);\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/377fd1dd1fcca8be4837f8995b4597a2ccf0905f\">Code (commit)</a></p>\n<p>Note:</p>\n<ol>\n<li>If there are multiple files, these functions are called for all of them (depending on <code>multer().array</code>, <code>multer.any()</code> etc of course). Expected behavior. <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/06b4fde4beb384f5a93c65e6951a83352334233d\">Code</a></li>\n</ol>\n<p>FIXMEs -</p>\n<ol>\n<li><s>how to prevent saving, i.e. check the file for harmful content. Is there a function like <code>rejectFile() =&gt; bool</code></s> done, see next page (filter file types).</li>\n<li>delegate save to a web service - how to set destination to a URL, or access a hook multer defines so we can use a cloud service SDK (to save file on the cloud), instead of on disk.\n<ol>\n<li>Is this irrelevant?</li>\n<li>If an error occurs from the cloud service, how to relay errors back to Express middleware chain (since process is async and we don’t have access to <code>next</code>)</li>\n</ol>\n</li>\n</ol>\n",
      "id": 171
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/324_Filter_file_types.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/324_Filter_file_types.html",
      "content": "# 324. Filter file types\nCreated Sunday 27 August 2023\n\n## General filter\nThis nothing but a way to reject/accept files. Think of it as a hook within multer.\n\nTo add: use the `fileFilter` config when setting up multer. The value is a function. See:\n```js\nconst myFileFilter = (req, file, cb) => {\n\tconst isAcceptedOrNot = ...;\n\t\n\treturn cb(null, isAcceptedOrNot);\n};\n\napp.use(multer({ fileFilter: multerFileFilter }).any());\n```\n\nIf a file was filtered out - `req.file` will be undefined or `req.files` array will not have it (whichever applicable).\n\nNote:\n- Of course, `dest` or `diskStorage` configs can be used with this.\n\n## File type filter\nThis is just a specific case of the filter\n```js\nconst myFileTypeFilter =\n  (req, file, cb) => {\n    if (file.mimetype === 'image/png' ||\n\t    file.mimetype === 'image/jpg' ||\n\t    file.mimetype === 'image/jpeg'\n    ) {\n      console.log(\"File accepted\");\n      return cb(null, true);\n    }\n    console.log(\"File rejected\");\n    cb(null, true);\n  };\n\napp.use(multer({ fileFilter: multerFileFilter }).any());\n```\n\n[Code (commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/27c5b3730de2bbadf5667eec57a0bd8b8e92f63d)",
      "html": "<h1 id=\"324.-filter-file-types\">324. Filter file types <a class=\"heading-anchor-permalink\" href=\"#324.-filter-file-types\">#</a></h1>\n<p>Created Sunday 27 August 2023</p>\n<h2 id=\"general-filter\">General filter <a class=\"heading-anchor-permalink\" href=\"#general-filter\">#</a></h2>\n<p>This nothing but a way to reject/accept files. Think of it as a hook within multer.</p>\n<p>To add: use the <code>fileFilter</code> config when setting up multer. The value is a function. See:</p>\n<pre><code class=\"language-js\">const myFileFilter = (req, file, cb) =&gt; {\n\tconst isAcceptedOrNot = ...;\n\t\n\treturn cb(null, isAcceptedOrNot);\n};\n\napp.use(multer({ fileFilter: multerFileFilter }).any());\n</code></pre>\n<p>If a file was filtered out - <code>req.file</code> will be undefined or <code>req.files</code> array will not have it (whichever applicable).</p>\n<p>Note:</p>\n<ul>\n<li>Of course, <code>dest</code> or <code>diskStorage</code> configs can be used with this.</li>\n</ul>\n<h2 id=\"file-type-filter\">File type filter <a class=\"heading-anchor-permalink\" href=\"#file-type-filter\">#</a></h2>\n<p>This is just a specific case of the filter</p>\n<pre><code class=\"language-js\">const myFileTypeFilter =\n  (req, file, cb) =&gt; {\n    if (file.mimetype === 'image/png' ||\n\t    file.mimetype === 'image/jpg' ||\n\t    file.mimetype === 'image/jpeg'\n    ) {\n      console.log(&quot;File accepted&quot;);\n      return cb(null, true);\n    }\n    console.log(&quot;File rejected&quot;);\n    cb(null, true);\n  };\n\napp.use(multer({ fileFilter: multerFileFilter }).any());\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/27c5b3730de2bbadf5667eec57a0bd8b8e92f63d\">Code (commit)</a></p>\n",
      "id": 172
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/325_Storing_File_in_database.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/325_Storing_File_in_database.html",
      "content": "# 325. Storing files in database\nCreated Tuesday 29 August 2023\n\n## Don't save files in db\nFiles should not be stored in a database, they are too big, it's too inefficient to store them in a database and query them from there. \n\n\n## What to store in db, then?\nThe actual file (content) should be stored in a filesystem or some external place (cloud), i.e. \"the store\".\n\nWhat should be stored in db - path/link and relevant metadata. i.e. some way to retrieve the file from the \"store\".\n\n## General idea\nThe general idea is - \"db should store only scalar values and references\". \nAdvantages:\n- lazy loading\n- O(1) delete, move\n- file sharing via links\n- Async create/copy (detached from the request-response flow).\n- SPA apps work out of the box - since files are not part of the data req-response flow.\n- Lightweight database.\n\n\n## Get save path in `multer`\nThe save path is available in `req.file.filename` (or `req.files`)\nThis works even if `diskStorage` config is used.\n\nWe just store it in the db.\n```js\n// 'add' controller\nconst product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl || req.file?.path, // here\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n```\n\nHere's the actual [code (commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/e4f1f98e063d64d4f126f5beb682c0c8c3903e10)\n",
      "html": "<h1 id=\"325.-storing-files-in-database\">325. Storing files in database <a class=\"heading-anchor-permalink\" href=\"#325.-storing-files-in-database\">#</a></h1>\n<p>Created Tuesday 29 August 2023</p>\n<h2 id=\"don%E2%80%99t-save-files-in-db\">Don’t save files in db <a class=\"heading-anchor-permalink\" href=\"#don%E2%80%99t-save-files-in-db\">#</a></h2>\n<p>Files should not be stored in a database, they are too big, it’s too inefficient to store them in a database and query them from there.</p>\n<h2 id=\"what-to-store-in-db%2C-then%3F\">What to store in db, then? <a class=\"heading-anchor-permalink\" href=\"#what-to-store-in-db%2C-then%3F\">#</a></h2>\n<p>The actual file (content) should be stored in a filesystem or some external place (cloud), i.e. “the store”.</p>\n<p>What should be stored in db - path/link and relevant metadata. i.e. some way to retrieve the file from the “store”.</p>\n<h2 id=\"general-idea\">General idea <a class=\"heading-anchor-permalink\" href=\"#general-idea\">#</a></h2>\n<p>The general idea is - “db should store only scalar values and references”.\nAdvantages:</p>\n<ul>\n<li>lazy loading</li>\n<li>O(1) delete, move</li>\n<li>file sharing via links</li>\n<li>Async create/copy (detached from the request-response flow).</li>\n<li>SPA apps work out of the box - since files are not part of the data req-response flow.</li>\n<li>Lightweight database.</li>\n</ul>\n<h2 id=\"get-save-path-in-multer\">Get save path in <code>multer</code> <a class=\"heading-anchor-permalink\" href=\"#get-save-path-in-multer\">#</a></h2>\n<p>The save path is available in <code>req.file.filename</code> (or <code>req.files</code>)\nThis works even if <code>diskStorage</code> config is used.</p>\n<p>We just store it in the db.</p>\n<pre><code class=\"language-js\">// 'add' controller\nconst product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl || req.file?.path, // here\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n</code></pre>\n<p>Here’s the actual <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/e4f1f98e063d64d4f126f5beb682c0c8c3903e10\">code (commit)</a></p>\n",
      "id": 173
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/326_Serving_saved_assets.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/326_Serving_saved_assets.html",
      "content": "# 326. Serving saved assets\nCreated Tuesday 29 August 2023\n\n## Why?\nSince we only stored 'links' for images, we need to respond with files (content) when they are requested.\nThis can be done easily using express's static middleware functionality. Code:\n```js\napp.use(express.static('multer-uploads'));\n```\n\n\n## Approach 1 - getting the saved path\nHow to get the 'path' (since we're using `diskStorage` criteria)? \nIt is available in `req.file.path`\nThe 'save' controller will change like this:\n```js\nconst product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl ||  req.file?.path,\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n```\n\n\n### Express static doesn't work (fix)\nThis won't work, since Express ignores the first path (directory) and finds file inside it. So we need to trim this path before saving the path to the database.\n```\nprojectRoot/multer-uploads/myImage.jpg (file system) --> myImage.jpg (database)\n```\n\nThe middleware `app.use(express.static('multer-uploads'))`will work now, answering to URLs like `http://localhost:3000/multer-uploads/myImage.jpg`.\n```js\napp.get(\"/multer-uploads/:fileName\", (req, res, next) => {\n  res.sendFile(path.join(__dirname, \"multer-uploads\", req.params.fileName));\n});\n```\n[Code(commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/621b530e03a3e0d43e2078f708e3b96d54766dee)\n\nA little complex, right?\n\n## Approach 2 - save unique name, without path, (simplifies approach 1)\nAlternatively - we can omit the folder path from the database entirely - save each asset (image) with a unique name. This way, we can migrate to the cloud or change the `multer-uploads` folder without changing the middleware.\n\nExample URL (will now look like):\n```html\n<img src=\"http://localhost:3000/myImage.jpg\" />\n<!-- simple src, no mention of directory or path-->\n```\n\n'save' controller (simple):\n```js\n// no mention of path, but make sure `filename` is unique\nconst product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl ||  req.file?.filename,\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n```\n\nAsset response middleware (complexity contained):\n```js\n// this can be as simple or complex as you want\n\n// simple\napp.use(express.static('multer-uploads'));\n\n// complex - if needed\napp.get(\"/multer-uploads/:fileName\", (req, res, next) => {\n  res.sendFile(path.join(__dirname, \"multer-uploads\", req.params.fileName));\n  // or call an external service if you want\n  // or use a cloud SDK\n});\n```\n\n&nbsp;  \n[Code(commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/d3998fdee97ab700ffb503229f8f17dd0e9bc187)\nnote: I ignored file access authorization, server code access here to keep it simple.",
      "html": "<h1 id=\"326.-serving-saved-assets\">326. Serving saved assets <a class=\"heading-anchor-permalink\" href=\"#326.-serving-saved-assets\">#</a></h1>\n<p>Created Tuesday 29 August 2023</p>\n<h2 id=\"why%3F\">Why? <a class=\"heading-anchor-permalink\" href=\"#why%3F\">#</a></h2>\n<p>Since we only stored ‘links’ for images, we need to respond with files (content) when they are requested.\nThis can be done easily using express’s static middleware functionality. Code:</p>\n<pre><code class=\"language-js\">app.use(express.static('multer-uploads'));\n</code></pre>\n<h2 id=\"approach-1---getting-the-saved-path\">Approach 1 - getting the saved path <a class=\"heading-anchor-permalink\" href=\"#approach-1---getting-the-saved-path\">#</a></h2>\n<p>How to get the ‘path’ (since we’re using <code>diskStorage</code> criteria)?\nIt is available in <code>req.file.path</code>\nThe ‘save’ controller will change like this:</p>\n<pre><code class=\"language-js\">const product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl ||  req.file?.path,\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n</code></pre>\n<h3 id=\"express-static-doesn%E2%80%99t-work-(fix)\">Express static doesn’t work (fix) <a class=\"heading-anchor-permalink\" href=\"#express-static-doesn%E2%80%99t-work-(fix)\">#</a></h3>\n<p>This won’t work, since Express ignores the first path (directory) and finds file inside it. So we need to trim this path before saving the path to the database.</p>\n<pre><code>projectRoot/multer-uploads/myImage.jpg (file system) --&gt; myImage.jpg (database)\n</code></pre>\n<p>The middleware <code>app.use(express.static('multer-uploads'))</code>will work now, answering to URLs like <code>http://localhost:3000/multer-uploads/myImage.jpg</code>.</p>\n<pre><code class=\"language-js\">app.get(&quot;/multer-uploads/:fileName&quot;, (req, res, next) =&gt; {\n  res.sendFile(path.join(__dirname, &quot;multer-uploads&quot;, req.params.fileName));\n});\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/621b530e03a3e0d43e2078f708e3b96d54766dee\">Code(commit)</a></p>\n<p>A little complex, right?</p>\n<h2 id=\"approach-2---save-unique-name%2C-without-path%2C-(simplifies-approach-1)\">Approach 2 - save unique name, without path, (simplifies approach 1) <a class=\"heading-anchor-permalink\" href=\"#approach-2---save-unique-name%2C-without-path%2C-(simplifies-approach-1)\">#</a></h2>\n<p>Alternatively - we can omit the folder path from the database entirely - save each asset (image) with a unique name. This way, we can migrate to the cloud or change the <code>multer-uploads</code> folder without changing the middleware.</p>\n<p>Example URL (will now look like):</p>\n<pre><code class=\"language-html\">&lt;img src=&quot;http://localhost:3000/myImage.jpg&quot; /&gt;\n&lt;!-- simple src, no mention of directory or path--&gt;\n</code></pre>\n<p>‘save’ controller (simple):</p>\n<pre><code class=\"language-js\">// no mention of path, but make sure `filename` is unique\nconst product = new Product({\n  title: req.body.title,\n  imageUrl: req.body.imageUrl ||  req.file?.filename,\n  description: req.body.description,\n  price: req.body.price,\n  userId: req.user._id,\n});\n\nawait product.save();\n</code></pre>\n<p>Asset response middleware (complexity contained):</p>\n<pre><code class=\"language-js\">// this can be as simple or complex as you want\n\n// simple\napp.use(express.static('multer-uploads'));\n\n// complex - if needed\napp.get(&quot;/multer-uploads/:fileName&quot;, (req, res, next) =&gt; {\n  res.sendFile(path.join(__dirname, &quot;multer-uploads&quot;, req.params.fileName));\n  // or call an external service if you want\n  // or use a cloud SDK\n});\n</code></pre>\n<p> <br>\n<a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/d3998fdee97ab700ffb503229f8f17dd0e9bc187\">Code(commit)</a>\nnote: I ignored file access authorization, server code access here to keep it simple.</p>\n",
      "id": 174
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/328_Downloading_files_with_Authentication.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/328_Downloading_files_with_Authentication.html",
      "content": "# 328. Downloading files with Authentication\nCreated Thursday 31 August 2023\n\nSuppose we saved invoices for orders. These files if saved in `multer-uploads` or any such 'statically' served folder is a very bad idea. Reason: anybody can access the invoice of any other person.\n\nSo we need to serve the file only if the invoice belongs to the user whose requesting. When some user 'X' requests for invoice 'iY'. There are three parts:\n\n1. **Make these files aren't blindly served** - save the sensitive stuff in their own folder `/invoices` here. `express.static` won't touch this folder.\n2. **Check if resource belongs to the user** - the logic of `doesInvoiceBelongToUser(invoiceId, userId)` needs to be decided before hand, a simple approach here is to save the invoices as files whose name is the same as the `orderId`, since we can easily check if `orderId` belongs to `user`.\n3. **Send the file** - we dedicate a route `'/invoices/:orderId'` and use `res.sendFile()`/`res.download`\n\n\n[Code (commit)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/976d678572cd94fc3d39a9f9f634ff9193aaf646)",
      "html": "<h1 id=\"328.-downloading-files-with-authentication\">328. Downloading files with Authentication <a class=\"heading-anchor-permalink\" href=\"#328.-downloading-files-with-authentication\">#</a></h1>\n<p>Created Thursday 31 August 2023</p>\n<p>Suppose we saved invoices for orders. These files if saved in <code>multer-uploads</code> or any such ‘statically’ served folder is a very bad idea. Reason: anybody can access the invoice of any other person.</p>\n<p>So we need to serve the file only if the invoice belongs to the user whose requesting. When some user ‘X’ requests for invoice ‘iY’. There are three parts:</p>\n<ol>\n<li><strong>Make these files aren’t blindly served</strong> - save the sensitive stuff in their own folder <code>/invoices</code> here. <code>express.static</code> won’t touch this folder.</li>\n<li><strong>Check if resource belongs to the user</strong> - the logic of <code>doesInvoiceBelongToUser(invoiceId, userId)</code> needs to be decided before hand, a simple approach here is to save the invoices as files whose name is the same as the <code>orderId</code>, since we can easily check if <code>orderId</code> belongs to <code>user</code>.</li>\n<li><strong>Send the file</strong> - we dedicate a route <code>'/invoices/:orderId'</code> and use <code>res.sendFile()</code>/<code>res.download</code></li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/976d678572cd94fc3d39a9f9f634ff9193aaf646\">Code (commit)</a></p>\n",
      "id": 175
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/329_Setting_file_type_during_send.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/329_Setting_file_type_during_send.html",
      "content": "# 329. Setting file type during send\nCreated Thursday 31 August 2023\n\nThe \n1. file type\n2. file name (including extension)\n3. mode - whether to preview or download file \n\ncan all be done using 2 headers. Here:\n```js\n// 1. type\nres.setHeader('content-type', 'application/pdf');\n\n\n// 2. filename and preview/download mode\nres.setHeader('content-disposition', 'inline; filename=yourFile.pdf');\n\n// 2.1 download instead of preview\nres.setHeader('content-disposition', 'attachment; filename=yourFile.pdf');\n```\nCode (commit) - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/61789ec6fbd14d47d8d820cb134fcb53138b82d3",
      "html": "<h1 id=\"329.-setting-file-type-during-send\">329. Setting file type during send <a class=\"heading-anchor-permalink\" href=\"#329.-setting-file-type-during-send\">#</a></h1>\n<p>Created Thursday 31 August 2023</p>\n<p>The</p>\n<ol>\n<li>file type</li>\n<li>file name (including extension)</li>\n<li>mode - whether to preview or download file</li>\n</ol>\n<p>can all be done using 2 headers. Here:</p>\n<pre><code class=\"language-js\">// 1. type\nres.setHeader('content-type', 'application/pdf');\n\n\n// 2. filename and preview/download mode\nres.setHeader('content-disposition', 'inline; filename=yourFile.pdf');\n\n// 2.1 download instead of preview\nres.setHeader('content-disposition', 'attachment; filename=yourFile.pdf');\n</code></pre>\n<p>Code (commit) - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/61789ec6fbd14d47d8d820cb134fcb53138b82d3\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/61789ec6fbd14d47d8d820cb134fcb53138b82d3</a></p>\n",
      "id": 176
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/331_Streaming_vs_preloading_data.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/331_Streaming_vs_preloading_data.html",
      "content": "## 331. Streaming vs pre-loading data\nCreated Thursday 31 August 2023\n\nBasically this means if we're using a buffer or not. Already discussed this in \"66 responses\".\n\nAgain, Express does _not_ provide a direct streaming construct, except that `res` is a writable stream, and therefore piping is supported.\n\n```js\nres.sendFile('path-here');\n\n// vs\n\nconst fileStream = fs.createReadStream(path.join('/path-of-file'));res.statusCode = 200;\nfileStream.pipe(res);\n```\n\nNote: join the global path (that we're storing a util here) with the remaining path, to avoid, path issues\n\nCode (commit) - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/e195d00a700be0aad58c0136b5e0dc8670907dd3",
      "html": "<h2 id=\"331.-streaming-vs-pre-loading-data\">331. Streaming vs pre-loading data <a class=\"heading-anchor-permalink\" href=\"#331.-streaming-vs-pre-loading-data\">#</a></h2>\n<p>Created Thursday 31 August 2023</p>\n<p>Basically this means if we’re using a buffer or not. Already discussed this in “66 responses”.</p>\n<p>Again, Express does <em>not</em> provide a direct streaming construct, except that <code>res</code> is a writable stream, and therefore piping is supported.</p>\n<pre><code class=\"language-js\">res.sendFile('path-here');\n\n// vs\n\nconst fileStream = fs.createReadStream(path.join('/path-of-file'));res.statusCode = 200;\nfileStream.pipe(res);\n</code></pre>\n<p>Note: join the global path (that we’re storing a util here) with the remaining path, to avoid, path issues</p>\n<p>Code (commit) - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/e195d00a700be0aad58c0136b5e0dc8670907dd3\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/e195d00a700be0aad58c0136b5e0dc8670907dd3</a></p>\n",
      "id": 177
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/332_PDFKit_runtime_PDF_generation.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/332_PDFKit_runtime_PDF_generation.html",
      "content": "## 332. PDFKit - runtime PDF generation\nCreated Thursday 31 August 2023\n\n## Pre-generating files is impractical\n1. Invoices and other 'reports' usually get updated very frequently.\n2. Generating files for all possible users/requests is a waste of resources.\n\n\n## App flow for document/large-data download\nInstead of pre-generating, frequently changing documents should either be:\n1. Generated at request time\n2. Or deferred with a notification - *\"We'll send you the document via email when it's ready! ETA: x minutes\"*\n\n\n## Generating documents\nFor generating PDFs, the [pdfkit](https://pdfkit.org/) package is very helpful. It provides both low-level, high-level constructs as well as support for complex and multi-page PDFs. It runs on the server (Node.js) as well in the browser.\n\n```js\nconst PDFDocument = require('pdfkit');\n\napp.use((req, res, next) => {\n  const pdfDoc = new PDFDocument();\n\t\n  pdfDoc.pipe(res); // pdfDoc --> streams into res --> streams to user\n\n  // optional: create a file too (if it's needed)\n  pdfDoc.pipe(require('fs').createWriteStream('path-to-file'));\n\n  pdfDoc.fillColor(\"black\").text(\"Zeroth line of text\");\n\n  pdfDoc\n    .fontSize(20)\n    .fillColor(\"red\")\n    .text(\"First line of text\", { underline: true });\n\n  pdfDoc.fillColor(\"black\").text(\"Second line of text\");\n\n  pdfDoc.end(); // pdfDoc ends --> res ends.\n});\n```\n\nCode - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93",
      "html": "<h2 id=\"332.-pdfkit---runtime-pdf-generation\">332. PDFKit - runtime PDF generation <a class=\"heading-anchor-permalink\" href=\"#332.-pdfkit---runtime-pdf-generation\">#</a></h2>\n<p>Created Thursday 31 August 2023</p>\n<h2 id=\"pre-generating-files-is-impractical\">Pre-generating files is impractical <a class=\"heading-anchor-permalink\" href=\"#pre-generating-files-is-impractical\">#</a></h2>\n<ol>\n<li>Invoices and other ‘reports’ usually get updated very frequently.</li>\n<li>Generating files for all possible users/requests is a waste of resources.</li>\n</ol>\n<h2 id=\"app-flow-for-document%2Flarge-data-download\">App flow for document/large-data download <a class=\"heading-anchor-permalink\" href=\"#app-flow-for-document%2Flarge-data-download\">#</a></h2>\n<p>Instead of pre-generating, frequently changing documents should either be:</p>\n<ol>\n<li>Generated at request time</li>\n<li>Or deferred with a notification - <em>“We’ll send you the document via email when it’s ready! ETA: x minutes”</em></li>\n</ol>\n<h2 id=\"generating-documents\">Generating documents <a class=\"heading-anchor-permalink\" href=\"#generating-documents\">#</a></h2>\n<p>For generating PDFs, the <a href=\"https://pdfkit.org/\">pdfkit</a> package is very helpful. It provides both low-level, high-level constructs as well as support for complex and multi-page PDFs. It runs on the server (Node.js) as well in the browser.</p>\n<pre><code class=\"language-js\">const PDFDocument = require('pdfkit');\n\napp.use((req, res, next) =&gt; {\n  const pdfDoc = new PDFDocument();\n\t\n  pdfDoc.pipe(res); // pdfDoc --&gt; streams into res --&gt; streams to user\n\n  // optional: create a file too (if it's needed)\n  pdfDoc.pipe(require('fs').createWriteStream('path-to-file'));\n\n  pdfDoc.fillColor(&quot;black&quot;).text(&quot;Zeroth line of text&quot;);\n\n  pdfDoc\n    .fontSize(20)\n    .fillColor(&quot;red&quot;)\n    .text(&quot;First line of text&quot;, { underline: true });\n\n  pdfDoc.fillColor(&quot;black&quot;).text(&quot;Second line of text&quot;);\n\n  pdfDoc.end(); // pdfDoc ends --&gt; res ends.\n});\n</code></pre>\n<p>Code - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93</a></p>\n",
      "id": 178
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/334_Deleting_files.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/334_Deleting_files.html",
      "content": "# 334. Deleting files\nCreated Thursday 31 August 2023\n\n## `fs.unlink`\nThe fs modules's `unlink` function helps. Essence:\n```js\n/**\n* @param {String} path\n* @param {Function} callback with first arg being error (null if success)\n* \n*/\nfunction unlink(path, callback = (err) => {}) {}\n```\n\n\n## Usage\n```js\nconst fs = require('node:fs');\n\n// 1. General\nfs.unlink(pathToFile, (err) => {});\n\n\n// 2. in Express\napp.use((req, res, next) => {\n  // code\n  \n  fs.unlink(pathToFile, (err) => { if(err) next(err); });\n  // doesn't trigger error mw if null (success), works for async mws too.\n})\n\n\n// 3. in Express if deletion result is not needed (fire-n-forget)\napp.use((req, res, next) => {\n  // code\n  \n  fs.unlink(pathToFile);\n})\n```\n\n\n## A minor bug I faced with stream and piping (ignorable)\nThe problem:\n```js\napp.use(\"/get-pdf\", async (req, res, next) => {\n  // feature: generate PDF on disk, send it and then delete the generated file.\n  \n  const pdfDoc = new PDFDocument();\n  const mySaveFileStream = createWriteStream(filePath);\n  \n  pdfDoc.pipe(mySaveFileStream);\n  pdfDoc.pipe(res);\n\n  // PDF gen code\n\n  pdfDoc.end(); // automatically fires `res.end()`\n\n  // I wish to remove the file now\n  fs.unlink(fileName); // FOCUS 1: does not work!!\n});\n```\n\nThe fix:\n```js\n...\n  pdfDoc.pipe(mySaveFileStream);\n  pdfDoc.pipe(res);\n\n  res.on('close', () => { fs.unlink(fileName); });\n\n  // PDF gen code\n\n  pdfDoc.end();\n});\n```\n\nOther hacky fixes (that work):\n```js\n  // pdf gen code\n  pdfDoc.end();\n  setTimeout(() => { fs.unlink(pathToFile); }, 0); // hack 1\n  nextTick(() => { fs.unlink(pathToFile); });      // hack 2\n```\n\n\nCode - https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93",
      "html": "<h1 id=\"334.-deleting-files\">334. Deleting files <a class=\"heading-anchor-permalink\" href=\"#334.-deleting-files\">#</a></h1>\n<p>Created Thursday 31 August 2023</p>\n<h2 id=\"fs.unlink\"><code>fs.unlink</code> <a class=\"heading-anchor-permalink\" href=\"#fs.unlink\">#</a></h2>\n<p>The fs modules’s <code>unlink</code> function helps. Essence:</p>\n<pre><code class=\"language-js\">/**\n* @param {String} path\n* @param {Function} callback with first arg being error (null if success)\n* \n*/\nfunction unlink(path, callback = (err) =&gt; {}) {}\n</code></pre>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<pre><code class=\"language-js\">const fs = require('node:fs');\n\n// 1. General\nfs.unlink(pathToFile, (err) =&gt; {});\n\n\n// 2. in Express\napp.use((req, res, next) =&gt; {\n  // code\n  \n  fs.unlink(pathToFile, (err) =&gt; { if(err) next(err); });\n  // doesn't trigger error mw if null (success), works for async mws too.\n})\n\n\n// 3. in Express if deletion result is not needed (fire-n-forget)\napp.use((req, res, next) =&gt; {\n  // code\n  \n  fs.unlink(pathToFile);\n})\n</code></pre>\n<h2 id=\"a-minor-bug-i-faced-with-stream-and-piping-(ignorable)\">A minor bug I faced with stream and piping (ignorable) <a class=\"heading-anchor-permalink\" href=\"#a-minor-bug-i-faced-with-stream-and-piping-(ignorable)\">#</a></h2>\n<p>The problem:</p>\n<pre><code class=\"language-js\">app.use(&quot;/get-pdf&quot;, async (req, res, next) =&gt; {\n  // feature: generate PDF on disk, send it and then delete the generated file.\n  \n  const pdfDoc = new PDFDocument();\n  const mySaveFileStream = createWriteStream(filePath);\n  \n  pdfDoc.pipe(mySaveFileStream);\n  pdfDoc.pipe(res);\n\n  // PDF gen code\n\n  pdfDoc.end(); // automatically fires `res.end()`\n\n  // I wish to remove the file now\n  fs.unlink(fileName); // FOCUS 1: does not work!!\n});\n</code></pre>\n<p>The fix:</p>\n<pre><code class=\"language-js\">...\n  pdfDoc.pipe(mySaveFileStream);\n  pdfDoc.pipe(res);\n\n  res.on('close', () =&gt; { fs.unlink(fileName); });\n\n  // PDF gen code\n\n  pdfDoc.end();\n});\n</code></pre>\n<p>Other hacky fixes (that work):</p>\n<pre><code class=\"language-js\">  // pdf gen code\n  pdfDoc.end();\n  setTimeout(() =&gt; { fs.unlink(pathToFile); }, 0); // hack 1\n  nextTick(() =&gt; { fs.unlink(pathToFile); });      // hack 2\n</code></pre>\n<p>Code - <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93\">https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/069100033b3d7a4bb66ce92205b8c00dd2a51d93</a></p>\n",
      "id": 179
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/336_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/20_File_uploads_and_downloads/336_Wrap_up.html",
      "content": "# 336 Wrap up\nCreated Thursday 31 August 2023\n\nUseful resources:\n\n- Multer Official Docs: https://github.com/expressjs/multer\n- Streaming Files: https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93\n- Generating PDFs with PDFKit: http://pdfkit.org/docs/getting_started.html",
      "html": "<h1 id=\"336-wrap-up\">336 Wrap up <a class=\"heading-anchor-permalink\" href=\"#336-wrap-up\">#</a></h1>\n<p>Created Thursday 31 August 2023</p>\n<p>Useful resources:</p>\n<ul>\n<li>Multer Official Docs: <a href=\"https://github.com/expressjs/multer\">https://github.com/expressjs/multer</a></li>\n<li>Streaming Files: <a href=\"https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93\">https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93</a></li>\n<li>Generating PDFs with PDFKit: <a href=\"http://pdfkit.org/docs/getting_started.html\">http://pdfkit.org/docs/getting_started.html</a></li>\n</ul>\n",
      "id": 180
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/338_Module_intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/338_Module_intro.html",
      "content": "# 338. Module Intro\nCreated Monday 4 September 2023\n\n## Situation\nWhen you search 'bulb' on Amazon, it's impractical for the site to load all items that match.\n- Instead it loads a fixed number of items (say 30) the first time.\n- There's an event - a click, or scroll to end (infinite scroll), that gets the next 30\n- And so on.\n\nThis technique is called pagination. It reduces load on the server and is important to keep server side apps manageable.\n\n[height.app task link](https://height.app/OitGt6StRG/T-211)",
      "html": "<h1 id=\"338.-module-intro\">338. Module Intro <a class=\"heading-anchor-permalink\" href=\"#338.-module-intro\">#</a></h1>\n<p>Created Monday 4 September 2023</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>When you search ‘bulb’ on Amazon, it’s impractical for the site to load all items that match.</p>\n<ul>\n<li>Instead it loads a fixed number of items (say 30) the first time.</li>\n<li>There’s an event - a click, or scroll to end (infinite scroll), that gets the next 30</li>\n<li>And so on.</li>\n</ul>\n<p>This technique is called pagination. It reduces load on the server and is important to keep server side apps manageable.</p>\n<p><a href=\"https://height.app/OitGt6StRG/T-211\">height.app task link</a></p>\n",
      "id": 181
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/339_Pagination_general_contract.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/339_Pagination_general_contract.html",
      "content": "# Pagination general contract\nCreated Monday 4 September 2023\n\nPagination is meant for lists only. \nThere are a few standard params involved. \nI'm assuming the client is an SPA (hardest case).\n\n## Request params\n1. Page size - number of data items to be sent.\n2. Page number - which ('nth') chunk (of page size) to be sent.\n3. Offset - items to ignore at the beginning of list.\n4. Query parameters - helps in filtering, sorting the list.\n\n## Response\n1. data: array of 'page size'\n2. pageNumber: sent since page number and size input could be incoherent.\n3. pageSize: sent since page number and size input could be incoherent.\n4. total: list size had pagination not been there.\n   \nOptional\n1. hasMore - this can be used to disable the 'next' page event/UI at client. This is *optional*, since it's calculable from 'page number', 'page size' and 'total'.\n2. isLastPage, for determining how many pills to make.\n\n## Process\nEssentially, the code on BE does this:\n1. getAll('/resource')\n2. filterAndSort(queryParams || null)\n3. ignoreTill(offset || 0)\n4. divideIntoChunks(pageSize || DEFAULT_PAGE_SIZE)\n5. chunks\\[pageNumber || 1]\n\n## Edge cases\nThe input may be anything, but the response should always be coherent.\n\n- If page and page size are not coherent. The server assumes relevant values. It does this in such a way that the response params are coherent. This behavior varies acc to app requirements of course.\n\t1. If page size is too large or zero, the server ignores the input (and assumes its max limit). The response contains this assumed limit.\n\t2. If page number is too large, the server assumes the last possible page number. The response contains this assumed page number.\n\n## URI\nExample: `/videos?page=1&pageSize=20&sort=asc&sortBy=name&offset=10`",
      "html": "<h1 id=\"pagination-general-contract\">Pagination general contract <a class=\"heading-anchor-permalink\" href=\"#pagination-general-contract\">#</a></h1>\n<p>Created Monday 4 September 2023</p>\n<p>Pagination is meant for lists only.\nThere are a few standard params involved.\nI’m assuming the client is an SPA (hardest case).</p>\n<h2 id=\"request-params\">Request params <a class=\"heading-anchor-permalink\" href=\"#request-params\">#</a></h2>\n<ol>\n<li>Page size - number of data items to be sent.</li>\n<li>Page number - which (‘nth’) chunk (of page size) to be sent.</li>\n<li>Offset - items to ignore at the beginning of list.</li>\n<li>Query parameters - helps in filtering, sorting the list.</li>\n</ol>\n<h2 id=\"response\">Response <a class=\"heading-anchor-permalink\" href=\"#response\">#</a></h2>\n<ol>\n<li>data: array of ‘page size’</li>\n<li>pageNumber: sent since page number and size input could be incoherent.</li>\n<li>pageSize: sent since page number and size input could be incoherent.</li>\n<li>total: list size had pagination not been there.</li>\n</ol>\n<p>Optional</p>\n<ol>\n<li>hasMore - this can be used to disable the ‘next’ page event/UI at client. This is <em>optional</em>, since it’s calculable from ‘page number’, ‘page size’ and ‘total’.</li>\n<li>isLastPage, for determining how many pills to make.</li>\n</ol>\n<h2 id=\"process\">Process <a class=\"heading-anchor-permalink\" href=\"#process\">#</a></h2>\n<p>Essentially, the code on BE does this:</p>\n<ol>\n<li>getAll(’/resource’)</li>\n<li>filterAndSort(queryParams || null)</li>\n<li>ignoreTill(offset || 0)</li>\n<li>divideIntoChunks(pageSize || DEFAULT_PAGE_SIZE)</li>\n<li>chunks[pageNumber || 1]</li>\n</ol>\n<h2 id=\"edge-cases\">Edge cases <a class=\"heading-anchor-permalink\" href=\"#edge-cases\">#</a></h2>\n<p>The input may be anything, but the response should always be coherent.</p>\n<ul>\n<li>If page and page size are not coherent. The server assumes relevant values. It does this in such a way that the response params are coherent. This behavior varies acc to app requirements of course.\n<ol>\n<li>If page size is too large or zero, the server ignores the input (and assumes its max limit). The response contains this assumed limit.</li>\n<li>If page number is too large, the server assumes the last possible page number. The response contains this assumed page number.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"uri\">URI <a class=\"heading-anchor-permalink\" href=\"#uri\">#</a></h2>\n<p>Example: <code>/videos?page=1&amp;pageSize=20&amp;sort=asc&amp;sortBy=name&amp;offset=10</code></p>\n",
      "id": 182
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/340_Implementing_pagination.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/21_Pagination/340_Implementing_pagination.html",
      "content": "# 340. Implementing pagination\nCreated Sunday 10 September 2023\n\nChanges:\n1. Add [pagination buttons (frontend)](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/83a2fe1956a828c3354ac790a6d9481615fbf721)\n2. [Creating pagination util](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/1d365365e4b8fda83dfb888aeae0cd233ff847f1), then [correct](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/f58912507114c3c2f0b362d3a3bb9978a322ed05) it to only do pagination as opposed to sort and filter (these are not relevant to pagination). The util is added as a middleware before listing routes.\n3. Calculate db params - \"skip\" and \"limit\" (db params) from request pagination params - this involves a [virtual calculation](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/dbc2626b9b2dfe66f26ced0b8b4497fb3f424bf4). Mongoose's .skip and .limit methods were enough. The two params work as is for SQL too.\n4. [Respect existing input](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/8550e848613bbf78842d12754efb01636e4b9cab) - page size and offset, in rendered buttons.\n5. [Add helper buttons](https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/20b5ce37c8e34085f1ba36ecc100c8611212fcc8) - previous, next, first and last helper buttons.\n\nDeployed to render.com, see live https://ecomm-t-pagination.onrender.com/products",
      "html": "<h1 id=\"340.-implementing-pagination\">340. Implementing pagination <a class=\"heading-anchor-permalink\" href=\"#340.-implementing-pagination\">#</a></h1>\n<p>Created Sunday 10 September 2023</p>\n<p>Changes:</p>\n<ol>\n<li>Add <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/83a2fe1956a828c3354ac790a6d9481615fbf721\">pagination buttons (frontend)</a></li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/1d365365e4b8fda83dfb888aeae0cd233ff847f1\">Creating pagination util</a>, then <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/f58912507114c3c2f0b362d3a3bb9978a322ed05\">correct</a> it to only do pagination as opposed to sort and filter (these are not relevant to pagination). The util is added as a middleware before listing routes.</li>\n<li>Calculate db params - “skip” and “limit” (db params) from request pagination params - this involves a <a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/dbc2626b9b2dfe66f26ced0b8b4497fb3f424bf4\">virtual calculation</a>. Mongoose’s .skip and .limit methods were enough. The two params work as is for SQL too.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/8550e848613bbf78842d12754efb01636e4b9cab\">Respect existing input</a> - page size and offset, in rendered buttons.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/commit/20b5ce37c8e34085f1ba36ecc100c8611212fcc8\">Add helper buttons</a> - previous, next, first and last helper buttons.</li>\n</ol>\n<p>Deployed to <a href=\"http://render.com\">render.com</a>, see live <a href=\"https://ecomm-t-pagination.onrender.com/products\">https://ecomm-t-pagination.onrender.com/products</a></p>\n",
      "id": 183
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/22_Understanding_Async_Requests_AJAX/347_Just_AJAX.md.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/22_Understanding_Async_Requests_AJAX/347_Just_AJAX.md.html",
      "content": "# 347. Just AJAX\nCreated Sun Sep 10, 2023 at 7:04 PM\n\n- AJAX, it's existence and possibility\n- fetch API and using it\n- Manipulating DOM - deleting the div when DELETE call succeeds.\n\nNothing I didn't already know",
      "html": "<h1 id=\"347.-just-ajax\">347. Just AJAX <a class=\"heading-anchor-permalink\" href=\"#347.-just-ajax\">#</a></h1>\n<p>Created Sun Sep 10, 2023 at 7:04 PM</p>\n<ul>\n<li>AJAX, it’s existence and possibility</li>\n<li>fetch API and using it</li>\n<li>Manipulating DOM - deleting the div when DELETE call succeeds.</li>\n</ul>\n<p>Nothing I didn’t already know</p>\n",
      "id": 184
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/23_Adding_Payments/info.md.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/23_Adding_Payments/info.md.html",
      "content": "Skipping for now, [task link](https://height.app/OitGt6StRG/T-213)",
      "html": "<p>Skipping for now, <a href=\"https://height.app/OitGt6StRG/T-213\">task link</a></p>\n",
      "id": 185
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/359_Module_intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/359_Module_intro.html",
      "content": "# 359. Module intro\nCreated Mon Sep 11, 2023 at 9:44 AM\n\n## Sending pages isn't the norm\nWe have been sending whole pages (HTML using EJS) back as responses in this course. \n\nBut:\n1. SPAs and mobile apps - this is not how modern apps (SPA web apps, mobile) apps usually work. They (the client) get the UI inflating code at the start, and subsequent interactions with the server are mostly about data (not UI). This makes them fast and responsive. Example - React web apps, Mobile apps - React Native, native Android apps\n2. Server side apps - servers don't run browsers (since UI is not a feature here), and so server to server communication doesn't involve pages. The messages sent back and forth are mostly objects, in various standardized formats.\n\n![](../../../../assets/359_Module_intro-image-1-1d84a321.png)\n\n![](../../../../assets/359_Module_intro-image-2-1d84a321.png)\n## APIs (Application Programming Interface)\nAPIs in the context of web apps refer to backend apps that interact with a UI client, or another server. The expected inputs from the \"client\" are:\n1. URI (path and query params)\n2. Body (optional)\n3. Headers\n\n\n## REST APIs term in the course (optional)\nThis course uses the term \"REST API\" for server apps that don't send UI content. This is wrong, since REST is a disciplinary construct/recommendation about how to build APIs.\n\nI understand why it does so. Because REST APIs are the most common kind of web APIs, and most people are familiar with the term.\n\nfine.\n\n\n## Do I specially need to learn such APIs\nNo, all we have learnt so far is mostly applicable as is. It's just that we'll:\n1. Send data without the UI\n2. Will need to design API endpoints a little smartly",
      "html": "<h1 id=\"359.-module-intro\">359. Module intro <a class=\"heading-anchor-permalink\" href=\"#359.-module-intro\">#</a></h1>\n<p>Created Mon Sep 11, 2023 at 9:44 AM</p>\n<h2 id=\"sending-pages-isn%E2%80%99t-the-norm\">Sending pages isn’t the norm <a class=\"heading-anchor-permalink\" href=\"#sending-pages-isn%E2%80%99t-the-norm\">#</a></h2>\n<p>We have been sending whole pages (HTML using EJS) back as responses in this course.</p>\n<p>But:</p>\n<ol>\n<li>SPAs and mobile apps - this is not how modern apps (SPA web apps, mobile) apps usually work. They (the client) get the UI inflating code at the start, and subsequent interactions with the server are mostly about data (not UI). This makes them fast and responsive. Example - React web apps, Mobile apps - React Native, native Android apps</li>\n<li>Server side apps - servers don’t run browsers (since UI is not a feature here), and so server to server communication doesn’t involve pages. The messages sent back and forth are mostly objects, in various standardized formats.</li>\n</ol>\n<p><img src=\"../../../../assets/359_Module_intro-image-1-1d84a321.png\" alt=\"\"></p>\n<p><img src=\"../../../../assets/359_Module_intro-image-2-1d84a321.png\" alt=\"\"></p>\n<h2 id=\"apis-(application-programming-interface)\">APIs (Application Programming Interface) <a class=\"heading-anchor-permalink\" href=\"#apis-(application-programming-interface)\">#</a></h2>\n<p>APIs in the context of web apps refer to backend apps that interact with a UI client, or another server. The expected inputs from the “client” are:</p>\n<ol>\n<li>URI (path and query params)</li>\n<li>Body (optional)</li>\n<li>Headers</li>\n</ol>\n<h2 id=\"rest-apis-term-in-the-course-(optional)\">REST APIs term in the course (optional) <a class=\"heading-anchor-permalink\" href=\"#rest-apis-term-in-the-course-(optional)\">#</a></h2>\n<p>This course uses the term “REST API” for server apps that don’t send UI content. This is wrong, since REST is a disciplinary construct/recommendation about how to build APIs.</p>\n<p>I understand why it does so. Because REST APIs are the most common kind of web APIs, and most people are familiar with the term.</p>\n<p>fine.</p>\n<h2 id=\"do-i-specially-need-to-learn-such-apis\">Do I specially need to learn such APIs <a class=\"heading-anchor-permalink\" href=\"#do-i-specially-need-to-learn-such-apis\">#</a></h2>\n<p>No, all we have learnt so far is mostly applicable as is. It’s just that we’ll:</p>\n<ol>\n<li>Send data without the UI</li>\n<li>Will need to design API endpoints a little smartly</li>\n</ol>\n",
      "id": 186
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/360_API_general_flow.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/360_API_general_flow.html",
      "content": "# 360. API general flow\nCreated Mon Sep 11, 2023 at 10:25 AM\n\n## Client and server\n- The client may be a mobile app, a web app or even a server. It may even be a customer's client, or their server (our business modal could be selling access to our API).\n- The REST API (aka API) resides in the backend app.\n\n![](../../../../assets/360_API_general_flow-image-1-1d84a321.png)",
      "html": "<h1 id=\"360.-api-general-flow\">360. API general flow <a class=\"heading-anchor-permalink\" href=\"#360.-api-general-flow\">#</a></h1>\n<p>Created Mon Sep 11, 2023 at 10:25 AM</p>\n<h2 id=\"client-and-server\">Client and server <a class=\"heading-anchor-permalink\" href=\"#client-and-server\">#</a></h2>\n<ul>\n<li>The client may be a mobile app, a web app or even a server. It may even be a customer’s client, or their server (our business modal could be selling access to our API).</li>\n<li>The REST API (aka API) resides in the backend app.</li>\n</ul>\n<p><img src=\"../../../../assets/360_API_general_flow-image-1-1d84a321.png\" alt=\"\"></p>\n",
      "id": 187
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/361_API_Data_formats.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/361_API_Data_formats.html",
      "content": "# 361. API Data formats\nCreated Mon Sep 11, 2023 at 10:30 AM\n\nSo APIs are about exchanging data (as opposed to UI/UI+data). But in what format?\n\n## Common formats\n1. HTML - is primarily for browsers. not very useful for inter-server comms.\n2. Plain text - very general, not good for computers.\n3. XML - custom tags. a little setup/maintenance overhead.\n4. JSON - both human readable and structured (machine readable). one-to-one correlation with JS objects.  **simplest and good for both humans and machines**. [official website](https://www.json.org/)\n5. ProtoBuf (Protocol Buffer) - binary format, structured. Meant for high traffic, realtime stuff where payload size and/or speed matters. Some setup needed, like XML.\n\nA comparison\n![](../../../../assets/361_API_Data_formats-image-1-1d84a321.png)\n\n## Practically best format - JSON\nJSON is the simplest format and performance is good enough for common applications. It's the goto format for user facing apps.\n\nReasons:\n1. Human readable - helps with debugging\n2. Machine readable\n3. Simple syntax\n4. Browser support by default. \n5. Universal JS engine support - Node.js supports JSON (essentially any system with a JS engine). It also works with most backend frameworks in other langs as well.\n\nCons (applicable for fast/high load systems):\n1. Serialization/deserialization cost - In fast and/or high traffic apps, this can become significant, since JSON is human readable. ProtoBuf are a binary format that are very fast in this regard.\n2. Size of payload - JSON has larger size than a binary format like Protobuf.",
      "html": "<h1 id=\"361.-api-data-formats\">361. API Data formats <a class=\"heading-anchor-permalink\" href=\"#361.-api-data-formats\">#</a></h1>\n<p>Created Mon Sep 11, 2023 at 10:30 AM</p>\n<p>So APIs are about exchanging data (as opposed to UI/UI+data). But in what format?</p>\n<h2 id=\"common-formats\">Common formats <a class=\"heading-anchor-permalink\" href=\"#common-formats\">#</a></h2>\n<ol>\n<li>HTML - is primarily for browsers. not very useful for inter-server comms.</li>\n<li>Plain text - very general, not good for computers.</li>\n<li>XML - custom tags. a little setup/maintenance overhead.</li>\n<li>JSON - both human readable and structured (machine readable). one-to-one correlation with JS objects.  <strong>simplest and good for both humans and machines</strong>. <a href=\"https://www.json.org/\">official website</a></li>\n<li>ProtoBuf (Protocol Buffer) - binary format, structured. Meant for high traffic, realtime stuff where payload size and/or speed matters. Some setup needed, like XML.</li>\n</ol>\n<p>A comparison\n<img src=\"../../../../assets/361_API_Data_formats-image-1-1d84a321.png\" alt=\"\"></p>\n<h2 id=\"practically-best-format---json\">Practically best format - JSON <a class=\"heading-anchor-permalink\" href=\"#practically-best-format---json\">#</a></h2>\n<p>JSON is the simplest format and performance is good enough for common applications. It’s the goto format for user facing apps.</p>\n<p>Reasons:</p>\n<ol>\n<li>Human readable - helps with debugging</li>\n<li>Machine readable</li>\n<li>Simple syntax</li>\n<li>Browser support by default.</li>\n<li>Universal JS engine support - Node.js supports JSON (essentially any system with a JS engine). It also works with most backend frameworks in other langs as well.</li>\n</ol>\n<p>Cons (applicable for fast/high load systems):</p>\n<ol>\n<li>Serialization/deserialization cost - In fast and/or high traffic apps, this can become significant, since JSON is human readable. ProtoBuf are a binary format that are very fast in this regard.</li>\n<li>Size of payload - JSON has larger size than a binary format like Protobuf.</li>\n</ol>\n",
      "id": 188
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/362_Routing_and_HTTP_methods.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/362_Routing_and_HTTP_methods.html",
      "content": "# 362. Routing and HTTP methods\nCreated Thu Sep 14, 2023 at 12:35 AM\n\n## Client app to server flow\nalready_know\n\n1. HTTP is used as the communication protocol\n2. HTTP verbs are general expectations of servers should behave.\n\t1. GET - fetch data, make no change in server.\n\t2. POST - create data\n\t3. PUT - overwrite existing data\n\t4. PATCH - update part of data\n\t5. DELETE - delete data\n3. The all (`/`) and specific (`/:id`) notation for route.\n4. The route determines location of resource/data.\n5. How call reaches from client to server (simplified layers of server)\n\nHTTP verbs and expectations\n![](../../../../assets/362_Routing_and_HTTP_methods-image-1-1d84a321.png)\n\nsimplified layers of server, and route determines resource.\n![](../../../../assets/362_Routing_and_HTTP_methods-image-2-1d84a321.png)",
      "html": "<h1 id=\"362.-routing-and-http-methods\">362. Routing and HTTP methods <a class=\"heading-anchor-permalink\" href=\"#362.-routing-and-http-methods\">#</a></h1>\n<p>Created Thu Sep 14, 2023 at 12:35 AM</p>\n<h2 id=\"client-app-to-server-flow\">Client app to server flow <a class=\"heading-anchor-permalink\" href=\"#client-app-to-server-flow\">#</a></h2>\n<p>already_know</p>\n<ol>\n<li>HTTP is used as the communication protocol</li>\n<li>HTTP verbs are general expectations of servers should behave.\n<ol>\n<li>GET - fetch data, make no change in server.</li>\n<li>POST - create data</li>\n<li>PUT - overwrite existing data</li>\n<li>PATCH - update part of data</li>\n<li>DELETE - delete data</li>\n</ol>\n</li>\n<li>The all (<code>/</code>) and specific (<code>/:id</code>) notation for route.</li>\n<li>The route determines location of resource/data.</li>\n<li>How call reaches from client to server (simplified layers of server)</li>\n</ol>\n<p>HTTP verbs and expectations\n<img src=\"../../../../assets/362_Routing_and_HTTP_methods-image-1-1d84a321.png\" alt=\"\"></p>\n<p>simplified layers of server, and route determines resource.\n<img src=\"../../../../assets/362_Routing_and_HTTP_methods-image-2-1d84a321.png\" alt=\"\"></p>\n",
      "id": 189
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/363_REST_and_core_principles.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/363_REST_and_core_principles.html",
      "content": "# 363. REST core principles\nCreated Thu Sep 14, 2023 at 12:46 AM\n\nnote: these are informal but import REST core principles\n\n## What is REST\nREST is an *architecture style* to develop web services, which uses the HTTP protocol as a communication interface in order to transfer data through HTTP methods.\n\n> The name “Representational State Transfer” is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.\n> &mdash; Roy Fielding, 2000\n\n\n## Principles of REST\nA RESTful system should have these major traits:\n1. Uniform Interface - clearly defined endpoints, request structure and response structure. This means documentation of course.\n2. Resources over *commands* - the client specifies resources to be CRUD, instead of sending commands/code to the server. See  [SOAP](https://www.reddit.com/r/learnprogramming/comments/u2erbr/comment/i4j8f6d/?utm_source=share&utm_medium=web2x&context=3).\n3. Statelessness\n   \nMinor:\n4. Separation of client and server\n5. Cacheable\n6. Layered system - the server could actually be a group of servers working together (including delegation)\n7. Code on demand - the server may sent executable code to the client.\n![](../../../../assets/363_REST_and_core_principles-image-1-1d84a321.png)\nnote: **statelessness** is the only non-trivial thing here. I knew other things already.\n### 2. Client and server separation\nIn the REST architectural style, the implementation of the client and the implementation of the server can be done independently without each knowing about the other.\n\nThis means that the code on the client side can be changed at any time without affecting the operation of the server, and the code on the server side can be changed without affecting the operation of the client.\n\nAs long as each side knows what format of messages to send to the other, they can be kept modular and separate.\n### 3. Stateless\nRESTful systems should be stateless, meaning that server doesn't need to know what state the client is in and vice versa. Consequently, neither save history/previous calls (atleast in a way that affects present calls).\n\n\n\n## Advantages of REST\n1. **Simplicity** - the code and documentation become easy and implicit.\n2. **Reliability** - each component (*resource provider?*) is limited, so errors are easy to log and debug.\n3. **Quick performance** - since each resource has it's own limited scope of change.\n4. **Scalability** - each component can be scaled without affecting the system. Example - multiple clients (including multiple types like web, mobile) could use the same backend server.\n5. **Flexibility** - any component (it's code) of the system can be changed without affecting the system. This can be done even if the system is running, since statelessness is assumed.",
      "html": "<h1 id=\"363.-rest-core-principles\">363. REST core principles <a class=\"heading-anchor-permalink\" href=\"#363.-rest-core-principles\">#</a></h1>\n<p>Created Thu Sep 14, 2023 at 12:46 AM</p>\n<p>note: these are informal but import REST core principles</p>\n<h2 id=\"what-is-rest\">What is REST <a class=\"heading-anchor-permalink\" href=\"#what-is-rest\">#</a></h2>\n<p>REST is an <em>architecture style</em> to develop web services, which uses the HTTP protocol as a communication interface in order to transfer data through HTTP methods.</p>\n<blockquote>\n<p>The name “Representational State Transfer” is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.\n— Roy Fielding, 2000</p>\n</blockquote>\n<h2 id=\"principles-of-rest\">Principles of REST <a class=\"heading-anchor-permalink\" href=\"#principles-of-rest\">#</a></h2>\n<p>A RESTful system should have these major traits:</p>\n<ol>\n<li>Uniform Interface - clearly defined endpoints, request structure and response structure. This means documentation of course.</li>\n<li>Resources over <em>commands</em> - the client specifies resources to be CRUD, instead of sending commands/code to the server. See  <a href=\"https://www.reddit.com/r/learnprogramming/comments/u2erbr/comment/i4j8f6d/?utm_source=share&amp;utm_medium=web2x&amp;context=3\">SOAP</a>.</li>\n<li>Statelessness</li>\n</ol>\n<p>Minor:\n4. Separation of client and server\n5. Cacheable\n6. Layered system - the server could actually be a group of servers working together (including delegation)\n7. Code on demand - the server may sent executable code to the client.\n<img src=\"../../../../assets/363_REST_and_core_principles-image-1-1d84a321.png\" alt=\"\">\nnote: <strong>statelessness</strong> is the only non-trivial thing here. I knew other things already.</p>\n<h3 id=\"2.-client-and-server-separation\">2. Client and server separation <a class=\"heading-anchor-permalink\" href=\"#2.-client-and-server-separation\">#</a></h3>\n<p>In the REST architectural style, the implementation of the client and the implementation of the server can be done independently without each knowing about the other.</p>\n<p>This means that the code on the client side can be changed at any time without affecting the operation of the server, and the code on the server side can be changed without affecting the operation of the client.</p>\n<p>As long as each side knows what format of messages to send to the other, they can be kept modular and separate.</p>\n<h3 id=\"3.-stateless\">3. Stateless <a class=\"heading-anchor-permalink\" href=\"#3.-stateless\">#</a></h3>\n<p>RESTful systems should be stateless, meaning that server doesn’t need to know what state the client is in and vice versa. Consequently, neither save history/previous calls (atleast in a way that affects present calls).</p>\n<h2 id=\"advantages-of-rest\">Advantages of REST <a class=\"heading-anchor-permalink\" href=\"#advantages-of-rest\">#</a></h2>\n<ol>\n<li><strong>Simplicity</strong> - the code and documentation become easy and implicit.</li>\n<li><strong>Reliability</strong> - each component (<em>resource provider?</em>) is limited, so errors are easy to log and debug.</li>\n<li><strong>Quick performance</strong> - since each resource has it’s own limited scope of change.</li>\n<li><strong>Scalability</strong> - each component can be scaled without affecting the system. Example - multiple clients (including multiple types like web, mobile) could use the same backend server.</li>\n<li><strong>Flexibility</strong> - any component (it’s code) of the system can be changed without affecting the system. This can be done even if the system is running, since statelessness is assumed.</li>\n</ol>\n",
      "id": 190
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/365_CORS_error.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/24_REST_APIs_Basics/365_CORS_error.html",
      "content": "# 365. CORS error\nCreated Sun Sep 17, 2023 at 4:09 AM\n\ntodo: https://www.udemy.com/course/nodejs-the-complete-guide/learn/lecture/12087624#overview",
      "html": "<h1 id=\"365.-cors-error\">365. CORS error <a class=\"heading-anchor-permalink\" href=\"#365.-cors-error\">#</a></h1>\n<p>Created Sun Sep 17, 2023 at 4:09 AM</p>\n<p>todo: <a href=\"https://www.udemy.com/course/nodejs-the-complete-guide/learn/lecture/12087624#overview\">https://www.udemy.com/course/nodejs-the-complete-guide/learn/lecture/12087624#overview</a></p>\n",
      "id": 191
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/25_Making_API_app/370_Module_Intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/25_Making_API_app/370_Module_Intro.html",
      "content": "# 370. Module Intro\nCreated Sun Sep 17, 2023 at 4:10 AM\n\nI build a checklist API app + has SPA too (optional) - https://height.app/OitGt6StRG/T-243\n\n- basics Node, Express set up\n- models set up\n- MongoDB connect set up\n- SPA how to structure deploy\n- ",
      "html": "<h1 id=\"370.-module-intro\">370. Module Intro <a class=\"heading-anchor-permalink\" href=\"#370.-module-intro\">#</a></h1>\n<p>Created Sun Sep 17, 2023 at 4:10 AM</p>\n<p>I build a checklist API app + has SPA too (optional) - <a href=\"https://height.app/OitGt6StRG/T-243\">https://height.app/OitGt6StRG/T-243</a></p>\n<ul>\n<li>basics Node, Express set up</li>\n<li>models set up</li>\n<li>MongoDB connect set up</li>\n<li>SPA how to structure deploy</li>\n<li></li>\n</ul>\n",
      "id": 192
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/25_How_the_Web_works.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/25_How_the_Web_works.html",
      "content": "# 25. How the Web works\nCreated Monday 13 February 2023 at 12:25 pm\n\n## Request-Response model of the web\nThe communication model used by the Internet is a request-response model based on HTTP (Hyper Text Transfer Protocol). Details:\n- The flow is simple:\n\t1. Machine A send a request to some IP address.\n\t2. Machine B (with the IP address in \\#1) sends back a \"response\".\n- Machine A is called the client and Machine B is called the server. These terms are relative and may be temporary.\n- The request is usually sent using a browser, but it could be sent otherwise too.\n- The response is definitely not sent using a browser, since a browser cannot respond.\n- Derived: Server to server communication is also possible via this request-response model. By server to server, I mean no browsers are involved.\n\n![](../../../../assets/25_How_the_Web_works-image-1-239d2959.png)\n\n\n## About HTTP and HTTPS\n- HTTP is the protocol used to specify the format and general flow of request and responses.\n- HTTPS is the same as HTTP, except with encryption (SSL) turned on. All data between the client and server is now encrypted.\n- We'll use HTTP for all projects in this course, since our will be running locally. We'll learn how to turn on SSL (for HTTPS), at the end of the course when learning about deployment.\n- HTTPS is a minimum requirement on the Internet today. Using HTTP for real apps is strongly discouraged.\n",
      "html": "<h1 id=\"25.-how-the-web-works\">25. How the Web works <a class=\"heading-anchor-permalink\" href=\"#25.-how-the-web-works\">#</a></h1>\n<p>Created Monday 13 February 2023 at 12:25 pm</p>\n<h2 id=\"request-response-model-of-the-web\">Request-Response model of the web <a class=\"heading-anchor-permalink\" href=\"#request-response-model-of-the-web\">#</a></h2>\n<p>The communication model used by the Internet is a request-response model based on HTTP (Hyper Text Transfer Protocol). Details:</p>\n<ul>\n<li>The flow is simple:\n<ol>\n<li>Machine A send a request to some IP address.</li>\n<li>Machine B (with the IP address in #1) sends back a “response”.</li>\n</ol>\n</li>\n<li>Machine A is called the client and Machine B is called the server. These terms are relative and may be temporary.</li>\n<li>The request is usually sent using a browser, but it could be sent otherwise too.</li>\n<li>The response is definitely not sent using a browser, since a browser cannot respond.</li>\n<li>Derived: Server to server communication is also possible via this request-response model. By server to server, I mean no browsers are involved.</li>\n</ul>\n<p><img src=\"../../../../assets/25_How_the_Web_works-image-1-239d2959.png\" alt=\"\"></p>\n<h2 id=\"about-http-and-https\">About HTTP and HTTPS <a class=\"heading-anchor-permalink\" href=\"#about-http-and-https\">#</a></h2>\n<ul>\n<li>HTTP is the protocol used to specify the format and general flow of request and responses.</li>\n<li>HTTPS is the same as HTTP, except with encryption (SSL) turned on. All data between the client and server is now encrypted.</li>\n<li>We’ll use HTTP for all projects in this course, since our will be running locally. We’ll learn how to turn on SSL (for HTTPS), at the end of the course when learning about deployment.</li>\n<li>HTTPS is a minimum requirement on the Internet today. Using HTTP for real apps is strongly discouraged.</li>\n</ul>\n",
      "id": 193
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/27_The_Node_lifecycle_and_Event_loop.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/27_The_Node_lifecycle_and_Event_loop.html",
      "content": "# 27. The Node lifecycle and Event loop\nCreated Monday 13 February 2023 at 09:26 pm\n\n## Life-cycle\n- Node.js uses 3 constructs to execute code - stack (+ heap), event loop and the task queue.\n\t- Process starts using the `node` command, usually (\"pm2\"?).\n\t- All JS code is executed on the **stack**.\n\t- **Event loop** becomes active only when all synchronous code has finished running.\n\t- **Task queue** is populated from the beginning, but starts functioning only when the event loop becomes active.\n\t- The Node.js process ends when all tasks in the task queue have finished executing, or if there's an explicit exit.\n\n![](../../../../assets/27_The_Node_lifecycle_and_Event_loop-image-1-239d2959.png)\n\nNote: Pressing Ctrl + C also ends the process.\n\n\n## Terminating scripts and the process\n- `process.exit()` is used terminate a Node.js process. `process` is available globally.\n- `return` (by itself, outside a function) is used to exit the current script being run.\n\nNeither are used in general.\n",
      "html": "<h1 id=\"27.-the-node-lifecycle-and-event-loop\">27. The Node lifecycle and Event loop <a class=\"heading-anchor-permalink\" href=\"#27.-the-node-lifecycle-and-event-loop\">#</a></h1>\n<p>Created Monday 13 February 2023 at 09:26 pm</p>\n<h2 id=\"life-cycle\">Life-cycle <a class=\"heading-anchor-permalink\" href=\"#life-cycle\">#</a></h2>\n<ul>\n<li>Node.js uses 3 constructs to execute code - stack (+ heap), event loop and the task queue.\n<ul>\n<li>Process starts using the <code>node</code> command, usually (“pm2”?).</li>\n<li>All JS code is executed on the <strong>stack</strong>.</li>\n<li><strong>Event loop</strong> becomes active only when all synchronous code has finished running.</li>\n<li><strong>Task queue</strong> is populated from the beginning, but starts functioning only when the event loop becomes active.</li>\n<li>The Node.js process ends when all tasks in the task queue have finished executing, or if there’s an explicit exit.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../../../../assets/27_The_Node_lifecycle_and_Event_loop-image-1-239d2959.png\" alt=\"\"></p>\n<p>Note: Pressing Ctrl + C also ends the process.</p>\n<h2 id=\"terminating-scripts-and-the-process\">Terminating scripts and the process <a class=\"heading-anchor-permalink\" href=\"#terminating-scripts-and-the-process\">#</a></h2>\n<ul>\n<li><code>process.exit()</code> is used terminate a Node.js process. <code>process</code> is available globally.</li>\n<li><code>return</code> (by itself, outside a function) is used to exit the current script being run.</li>\n</ul>\n<p>Neither are used in general.</p>\n",
      "id": 194
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/29_Understanding_Requests.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/29_Understanding_Requests.html",
      "content": "# 29. Understanding Requests\nCreated Monday 13 February 2023 at 10:02 pm\n\nThe request param in `http`'s server callback contains a lot of data and functions - HTTP headers, browser (\"user-agent\"), acceptable mime types, etc.\n\nSome important ones are:\n- `url` - requested URL (with domain and string before it removed). A request for `example.com` will have the `url` /.\n- `method` - HTTP verb. Example - GET, PUT, POST, DELETE, HEAD etc.",
      "html": "<h1 id=\"29.-understanding-requests\">29. Understanding Requests <a class=\"heading-anchor-permalink\" href=\"#29.-understanding-requests\">#</a></h1>\n<p>Created Monday 13 February 2023 at 10:02 pm</p>\n<p>The request param in <code>http</code>'s server callback contains a lot of data and functions - HTTP headers, browser (“user-agent”), acceptable mime types, etc.</p>\n<p>Some important ones are:</p>\n<ul>\n<li><code>url</code> - requested URL (with domain and string before it removed). A request for <code>example.com</code> will have the <code>url</code> /.</li>\n<li><code>method</code> - HTTP verb. Example - GET, PUT, POST, DELETE, HEAD etc.</li>\n</ul>\n",
      "id": 195
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/30_Sending_Responses.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/30_Sending_Responses.html",
      "content": "# 30. Sending Responses\nCreated Monday 13 February 2023 at 10:07 pm\n\n- The response (second param) in an `http`'s server callback is not very interesting from a read POV. It's meant to respond (i.e. do an action), so we mostly use functions attached to it to build and send response.\n- It's actually a writable stream.\n- Some common variables and functions:\n\t1. **Status**: `res.statusCode` - set this variable to specify the response code. e.g. 200, 404.\n\t2. **Headers**: `res.setHeader(headerName, headerValue)`. Header names and values follow a specification, i.e. they're not usually\\* arbitrary. \\*custom ones can be created easily.\n\t3. **Body**: `res.write(stringOrBuffer)` - used to send data to the client. If data is large, it'll be sent in chunks automatically. <details><summary>TCP abstraction</summary>`write`, I guess, is an abstraction for sending TCP packets. The exact number of TCP packets will depend on the agreed MSS (Maximum Segment Size) of the connection (i.e. multiple `.write` don't mean that many TCP packets - Node.js has a buffer it maintains, where all `.write()` data is kept, a TCP packet is created and sent only when this buffer fills up. However, there is a way to explicitly cause a TCP packet to be created and sent, even if the buffer hasn't filled up - `res.flush()`. Using this without a good reason is discouraged for network efficiency reasons. Since it's a abstraction over TCP, `res.write` and `res.flush` work within the existing HTTP connection without creating a new TCP packet. See [gpt3-res-flush-tcp-node](/assets/gpt3-res-flush-tcp-node.pdf)</details>\n\t4. **End response**:`res.end([,stringOrBuffer])` - finishes the response, optionally do a write before finishing. Use this at last, as subsequent use of `res` will now in an error.\n\nExample ([code](https://github.com/exemplar-codes/nodejs-server-academind/commit/93d4ca94b4194bfc3d5d69ea186f03426a9fa7b1)):\n```js\nconst http = require(\"http\");\n\nconst server = http.createServer((req, res) => {\n\tres.setHeader(\"Content-Type\",  \"text/html\")\n\tres.write('<html>')\n\tres.write('<head><title>My first page</title></head>');\n\tres.write('<body><h1>Hello from my Node.js server</h1></body');\n\tres.write('</html>');\n\tres.end()\n});\n\nserver.listen(3000, () => console.log(\"Server running on port 3000\"));\n```\nNote: \n- We can use a single `write` to send the whole text. `http` module handles chunking and transmission automatically.\n- `res.end()` doesn't end the callback function. Also, `res.end()` it should be the last interaction with `res`. Thus, we may need to `return` from the function, if there's an unguarded interaction with `res`. For example:\n```js\n(req, res) => {\n\tif(req.url === '/') {\n\t\tres.write(\"Hello\");\n\t\tres.end();\n\t\t// return; if missing\n\t}\n\n\tres.write(\"Page not found\"); // ...we get an error\n\tres.end();\n}\n```\n- Headers should be sent first, and completely, before the body is sent. This is not something Node.js or `node:http` specific. It's in the HTTP specification. This means that `res.writeHead` can only be done once, in a request-response lifecycle.\n- There's no way to explicitly send headers. They're sent automatically when `res.write()` or `res.end()` is run. Of course, they're only sent once.\n\n## Optional - streaming stuff\nIt's very easy to \"stream\" stuff, since the response param is a stream.\n\nMost browsers can directly consume popular MIME types (atleast Chrome).\n\nCommon data types:\n- Text - need to set headers `Content-Type: text/plain` and `X-Content-Type-Options: nosniff`. [Code](https://github.com/exemplar-codes/nodejs-server-academind/commit/a251ee567861b835c46c9e17c1c8106f4aeb8236)\n- HTML - set `Content-Type: text/html`. [Code](https://github.com/exemplar-codes/nodejs-server-academind/commit/665951340266df242d7573aba4a249e122d68ef2)\n- Music (mp3) - set `Content-Type: audio/mpeg`. [Code](https://github.com/exemplar-codes/nodejs-server-academind/commit/66d92a21d7efc55e103b3e312b395ac5889a8dcb)\n- Images (jpg or jpeg) - set `Content-Type: image/jpeg`. [Code](https://github.com/exemplar-codes/nodejs-server-academind/commit/77081114e9f10e3440873640993cb3a6a1f315bd)\n\nNote: \n- Derived: This isn't actually a new thing, `res.write()` does chunking automatically anyway. It's just that the streaming is more noticeable for large files.\n- No client code was needed here. Simply visiting the endpoint worked.\n- Of course, this was a very simple scenario. Streaming data is a complex engineering problem that depends on the application, environment, size of the system etc.",
      "html": "<h1 id=\"30.-sending-responses\">30. Sending Responses <a class=\"heading-anchor-permalink\" href=\"#30.-sending-responses\">#</a></h1>\n<p>Created Monday 13 February 2023 at 10:07 pm</p>\n<ul>\n<li>The response (second param) in an <code>http</code>'s server callback is not very interesting from a read POV. It’s meant to respond (i.e. do an action), so we mostly use functions attached to it to build and send response.</li>\n<li>It’s actually a writable stream.</li>\n<li>Some common variables and functions:\n<ol>\n<li><strong>Status</strong>: <code>res.statusCode</code> - set this variable to specify the response code. e.g. 200, 404.</li>\n<li><strong>Headers</strong>: <code>res.setHeader(headerName, headerValue)</code>. Header names and values follow a specification, i.e. they’re not usually* arbitrary. *custom ones can be created easily.</li>\n<li><strong>Body</strong>: <code>res.write(stringOrBuffer)</code> - used to send data to the client. If data is large, it’ll be sent in chunks automatically. <details><summary>TCP abstraction</summary><code>write</code>, I guess, is an abstraction for sending TCP packets. The exact number of TCP packets will depend on the agreed MSS (Maximum Segment Size) of the connection (i.e. multiple <code>.write</code> don’t mean that many TCP packets - Node.js has a buffer it maintains, where all <code>.write()</code> data is kept, a TCP packet is created and sent only when this buffer fills up. However, there is a way to explicitly cause a TCP packet to be created and sent, even if the buffer hasn’t filled up - <code>res.flush()</code>. Using this without a good reason is discouraged for network efficiency reasons. Since it’s a abstraction over TCP, <code>res.write</code> and <code>res.flush</code> work within the existing HTTP connection without creating a new TCP packet. See <a href=\"/assets/gpt3-res-flush-tcp-node.pdf\">gpt3-res-flush-tcp-node</a></details></li>\n<li><strong>End response</strong>:<code>res.end([,stringOrBuffer])</code> - finishes the response, optionally do a write before finishing. Use this at last, as subsequent use of <code>res</code> will now in an error.</li>\n</ol>\n</li>\n</ul>\n<p>Example (<a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/93d4ca94b4194bfc3d5d69ea186f03426a9fa7b1\">code</a>):</p>\n<pre><code class=\"language-js\">const http = require(&quot;http&quot;);\n\nconst server = http.createServer((req, res) =&gt; {\n\tres.setHeader(&quot;Content-Type&quot;,  &quot;text/html&quot;)\n\tres.write('&lt;html&gt;')\n\tres.write('&lt;head&gt;&lt;title&gt;My first page&lt;/title&gt;&lt;/head&gt;');\n\tres.write('&lt;body&gt;&lt;h1&gt;Hello from my Node.js server&lt;/h1&gt;&lt;/body');\n\tres.write('&lt;/html&gt;');\n\tres.end()\n});\n\nserver.listen(3000, () =&gt; console.log(&quot;Server running on port 3000&quot;));\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>We can use a single <code>write</code> to send the whole text. <code>http</code> module handles chunking and transmission automatically.</li>\n<li><code>res.end()</code> doesn’t end the callback function. Also, <code>res.end()</code> it should be the last interaction with <code>res</code>. Thus, we may need to <code>return</code> from the function, if there’s an unguarded interaction with <code>res</code>. For example:</li>\n</ul>\n<pre><code class=\"language-js\">(req, res) =&gt; {\n\tif(req.url === '/') {\n\t\tres.write(&quot;Hello&quot;);\n\t\tres.end();\n\t\t// return; if missing\n\t}\n\n\tres.write(&quot;Page not found&quot;); // ...we get an error\n\tres.end();\n}\n</code></pre>\n<ul>\n<li>Headers should be sent first, and completely, before the body is sent. This is not something Node.js or <code>node:http</code> specific. It’s in the HTTP specification. This means that <code>res.writeHead</code> can only be done once, in a request-response lifecycle.</li>\n<li>There’s no way to explicitly send headers. They’re sent automatically when <code>res.write()</code> or <code>res.end()</code> is run. Of course, they’re only sent once.</li>\n</ul>\n<h2 id=\"optional---streaming-stuff\">Optional - streaming stuff <a class=\"heading-anchor-permalink\" href=\"#optional---streaming-stuff\">#</a></h2>\n<p>It’s very easy to “stream” stuff, since the response param is a stream.</p>\n<p>Most browsers can directly consume popular MIME types (atleast Chrome).</p>\n<p>Common data types:</p>\n<ul>\n<li>Text - need to set headers <code>Content-Type: text/plain</code> and <code>X-Content-Type-Options: nosniff</code>. <a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/a251ee567861b835c46c9e17c1c8106f4aeb8236\">Code</a></li>\n<li>HTML - set <code>Content-Type: text/html</code>. <a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/665951340266df242d7573aba4a249e122d68ef2\">Code</a></li>\n<li>Music (mp3) - set <code>Content-Type: audio/mpeg</code>. <a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/66d92a21d7efc55e103b3e312b395ac5889a8dcb\">Code</a></li>\n<li>Images (jpg or jpeg) - set <code>Content-Type: image/jpeg</code>. <a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/77081114e9f10e3440873640993cb3a6a1f315bd\">Code</a></li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Derived: This isn’t actually a new thing, <code>res.write()</code> does chunking automatically anyway. It’s just that the streaming is more noticeable for large files.</li>\n<li>No client code was needed here. Simply visiting the endpoint worked.</li>\n<li>Of course, this was a very simple scenario. Streaming data is a complex engineering problem that depends on the application, environment, size of the system etc.</li>\n</ul>\n",
      "id": 196
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/32_Routing_requests.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/32_Routing_requests.html",
      "content": "# 32. Routing requests\nCreated Tuesday 14 February 2023 at 01:09 am\n\n## Why\nThe USP of the internet is the hyperlink. Routing is backend feature that makes this possible.\n\n\n## What\n- Routing generally refers to the act responding differently for different request URLs.\n- In the modern web however, routing is a general term for responding to requests based on metadata of the request - URL, locale, authentication, authorization etc.\n\n\n## How (app implementation)\n- Fundamentally, routing is done by a switch (or if else) of criteria and associated and action/response.\n- It can get complex, since criteria can be based on nested routes, query strings, other request metadata or a combination of these.\n\nExamples\n- [Based on route](https://github.com/exemplar-codes/nodejs-server-academind/commit/eb4e6ef075fe3f401075c28c1c09f152682df67d)\n- [Based on route and HTTP method](https://github.com/exemplar-codes/nodejs-server-academind/commit/e1e0ef52406ae8d6ab943f2e514e2eb33c2380eb)",
      "html": "<h1 id=\"32.-routing-requests\">32. Routing requests <a class=\"heading-anchor-permalink\" href=\"#32.-routing-requests\">#</a></h1>\n<p>Created Tuesday 14 February 2023 at 01:09 am</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>The USP of the internet is the hyperlink. Routing is backend feature that makes this possible.</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<ul>\n<li>Routing generally refers to the act responding differently for different request URLs.</li>\n<li>In the modern web however, routing is a general term for responding to requests based on metadata of the request - URL, locale, authentication, authorization etc.</li>\n</ul>\n<h2 id=\"how-(app-implementation)\">How (app implementation) <a class=\"heading-anchor-permalink\" href=\"#how-(app-implementation)\">#</a></h2>\n<ul>\n<li>Fundamentally, routing is done by a switch (or if else) of criteria and associated and action/response.</li>\n<li>It can get complex, since criteria can be based on nested routes, query strings, other request metadata or a combination of these.</li>\n</ul>\n<p>Examples</p>\n<ul>\n<li><a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/eb4e6ef075fe3f401075c28c1c09f152682df67d\">Based on route</a></li>\n<li><a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/e1e0ef52406ae8d6ab943f2e514e2eb33c2380eb\">Based on route and HTTP method</a></li>\n</ul>\n",
      "id": 197
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/33_Redirecting_requests.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/33_Redirecting_requests.html",
      "content": "# 33. Redirecting requests\nCreated Tuesday 14 February 2023 at 03:39 pm\n\n\n## Situation (why we need redirects)\n1. Temporary redirects during site maintenance or downtime\n2. Permanent redirects to preserver existing links (especially bookmarks) to resources whose location has updated.\n3. Enforce HTTPS by redirecting\n4. Federated login. See [chatgpt-redirections-&-IDP-login](/assets/chatgpt-redirections-and-IDP-login.pdf).\n\n\n## About (history, spec)\n- Read [Redirections in HTTP - MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections)\n- HTTP has a special kind of response (aka \"HTTP redirect\" or just \"redirect\") that cause the browser to load a new URL (contained in the \"redirect\" response).\n- There are 3 ways to redirect a client (in order of priority):\n\t1. Server redirect. This should be preferred.\n\t2. HTML redirect - using the `<meta>` tag\n\t3. JavaScript redirect - set the URL on page load or some other condition.\n- There are 3 types of redirections (with status codes):\n\t1. Permanent - 301. Others - 308\n\t2. Temporary - 302. Others - 303, 307\n\t3. Special - 304 (not modified - use local cache). Others - 300.\n\n\n## How (to do a server redirect)\nFor HTTP (i.e. server redirect), do two things:\n1. Set status code to a redirect friendly one (3xx).\n2. Set \"Location\" header, with value as the location.\n\nExample:\n```js\n(req, res) = {\n\tres.statusCode = 301;\n\tres.setHeade(\"Location\", \"/about\"); // same domain\n\tres.setHeader(\"Location\", \"https://github.com\"); // external domain\n}\n```\n[Code example](https://github.com/exemplar-codes/nodejs-server-academind/commit/0418ad5b9b0c026c442178672050e1d6b0bf078b)",
      "html": "<h1 id=\"33.-redirecting-requests\">33. Redirecting requests <a class=\"heading-anchor-permalink\" href=\"#33.-redirecting-requests\">#</a></h1>\n<p>Created Tuesday 14 February 2023 at 03:39 pm</p>\n<h2 id=\"situation-(why-we-need-redirects)\">Situation (why we need redirects) <a class=\"heading-anchor-permalink\" href=\"#situation-(why-we-need-redirects)\">#</a></h2>\n<ol>\n<li>Temporary redirects during site maintenance or downtime</li>\n<li>Permanent redirects to preserver existing links (especially bookmarks) to resources whose location has updated.</li>\n<li>Enforce HTTPS by redirecting</li>\n<li>Federated login. See <a href=\"/assets/chatgpt-redirections-and-IDP-login.pdf\">chatgpt-redirections-&amp;-IDP-login</a>.</li>\n</ol>\n<h2 id=\"about-(history%2C-spec)\">About (history, spec) <a class=\"heading-anchor-permalink\" href=\"#about-(history%2C-spec)\">#</a></h2>\n<ul>\n<li>Read <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections\">Redirections in HTTP - MDN</a></li>\n<li>HTTP has a special kind of response (aka “HTTP redirect” or just “redirect”) that cause the browser to load a new URL (contained in the “redirect” response).</li>\n<li>There are 3 ways to redirect a client (in order of priority):\n<ol>\n<li>Server redirect. This should be preferred.</li>\n<li>HTML redirect - using the <code>&lt;meta&gt;</code> tag</li>\n<li>JavaScript redirect - set the URL on page load or some other condition.</li>\n</ol>\n</li>\n<li>There are 3 types of redirections (with status codes):\n<ol>\n<li>Permanent - 301. Others - 308</li>\n<li>Temporary - 302. Others - 303, 307</li>\n<li>Special - 304 (not modified - use local cache). Others - 300.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"how-(to-do-a-server-redirect)\">How (to do a server redirect) <a class=\"heading-anchor-permalink\" href=\"#how-(to-do-a-server-redirect)\">#</a></h2>\n<p>For HTTP (i.e. server redirect), do two things:</p>\n<ol>\n<li>Set status code to a redirect friendly one (3xx).</li>\n<li>Set “Location” header, with value as the location.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-js\">(req, res) = {\n\tres.statusCode = 301;\n\tres.setHeade(&quot;Location&quot;, &quot;/about&quot;); // same domain\n\tres.setHeader(&quot;Location&quot;, &quot;https://github.com&quot;); // external domain\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/0418ad5b9b0c026c442178672050e1d6b0bf078b\">Code example</a></p>\n",
      "id": 198
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/34_Parsing_Request_bodies.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/34_Parsing_Request_bodies.html",
      "content": "# 34. Parsing Request bodies\nCreated Thursday 16 February 2023 at 09:10 am\n\n\n# Situation\nWith the `http` module, the request param doesn't have anything like `request.data`. Instead, the incoming data is sent as a stream.\n\nTechnically, the `req` param is a modified version of the readable stream, and therefore has event listeners for the body part of the request.\n\n\n## How (to parse request body)\nThere are two scenarios here - work with chunks or collate them in a buffer before working on them. In case the body is text, we'll need to have it fully. Code:\n```js\n (req, res) => {\n\tconst enteredMessageBuffer = [];\n\treq.on(\"data\", (chunk) => {\n\t  enteredMessageBuffer.push(chunk);\n\t});\n\treq.on(\"end\", () => {\n\t  const receivedRequestBody = enteredMessageBuffer.toString();\n\t  const bodyObject = JSON.parse(enteredMessageBuffer.toString()); // if JSON is received\n\n\t  // use the body here\n\t});\n}\n```\n[Full code example](https://github.com/exemplar-codes/nodejs-server-academind/commit/588367749067dafd08aa677cc415627fe28799dc)",
      "html": "<h1 id=\"34.-parsing-request-bodies\">34. Parsing Request bodies <a class=\"heading-anchor-permalink\" href=\"#34.-parsing-request-bodies\">#</a></h1>\n<p>Created Thursday 16 February 2023 at 09:10 am</p>\n<h1 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h1>\n<p>With the <code>http</code> module, the request param doesn’t have anything like <code>request.data</code>. Instead, the incoming data is sent as a stream.</p>\n<p>Technically, the <code>req</code> param is a modified version of the readable stream, and therefore has event listeners for the body part of the request.</p>\n<h2 id=\"how-(to-parse-request-body)\">How (to parse request body) <a class=\"heading-anchor-permalink\" href=\"#how-(to-parse-request-body)\">#</a></h2>\n<p>There are two scenarios here - work with chunks or collate them in a buffer before working on them. In case the body is text, we’ll need to have it fully. Code:</p>\n<pre><code class=\"language-js\"> (req, res) =&gt; {\n\tconst enteredMessageBuffer = [];\n\treq.on(&quot;data&quot;, (chunk) =&gt; {\n\t  enteredMessageBuffer.push(chunk);\n\t});\n\treq.on(&quot;end&quot;, () =&gt; {\n\t  const receivedRequestBody = enteredMessageBuffer.toString();\n\t  const bodyObject = JSON.parse(enteredMessageBuffer.toString()); // if JSON is received\n\n\t  // use the body here\n\t});\n}\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/nodejs-server-academind/commit/588367749067dafd08aa677cc415627fe28799dc\">Full code example</a></p>\n",
      "id": 199
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/39_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/3_Understanding_the_basics/39_Wrap_up.html",
      "content": "# 39. Wrap up\nCreated Sunday 19 February 2023 at 10:41 am\n\n## Stuff learnt\n1. Request-Response model of the Web\n2. Node.js code runs in a non-blocking way, the event loop, yada yada. Two important things about code execution and event loop:\n\t1. The event loop comes into play only after all top-level synchronous code has finished execution.\n\t2. The program stops when the event loop has handled all events.**A Web server program never stops since the _listen_ event never ends**.\n4. Request *data* (aka body) is a readable stream through events on it. Response data is a writable stream.\n5. Double responses should be avoided, since it leads to an error.\n\n![](../../../../assets/39_Wrap_up-image-1-239d2959.png)\n\n\n## Conclusion\n- This was a lot nitty-gritty information and code. This is not the way (i.e. the right layer of abstraction) web apps (servers) are developed, generally.\n- This section was important to understand the basics and how things work under the hood.\n",
      "html": "<h1 id=\"39.-wrap-up\">39. Wrap up <a class=\"heading-anchor-permalink\" href=\"#39.-wrap-up\">#</a></h1>\n<p>Created Sunday 19 February 2023 at 10:41 am</p>\n<h2 id=\"stuff-learnt\">Stuff learnt <a class=\"heading-anchor-permalink\" href=\"#stuff-learnt\">#</a></h2>\n<ol>\n<li>Request-Response model of the Web</li>\n<li>Node.js code runs in a non-blocking way, the event loop, yada yada. Two important things about code execution and event loop:\n<ol>\n<li>The event loop comes into play only after all top-level synchronous code has finished execution.</li>\n<li>The program stops when the event loop has handled all events.<strong>A Web server program never stops since the <em>listen</em> event never ends</strong>.</li>\n</ol>\n</li>\n<li>Request <em>data</em> (aka body) is a readable stream through events on it. Response data is a writable stream.</li>\n<li>Double responses should be avoided, since it leads to an error.</li>\n</ol>\n<p><img src=\"../../../../assets/39_Wrap_up-image-1-239d2959.png\" alt=\"\"></p>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<ul>\n<li>This was a lot nitty-gritty information and code. This is not the way (i.e. the right layer of abstraction) web apps (servers) are developed, generally.</li>\n<li>This section was important to understand the basics and how things work under the hood.</li>\n</ul>\n",
      "id": 200
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/4_Improved_Development_Workflow_and_Debugging/51_Using_the_Debugger.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/4_Improved_Development_Workflow_and_Debugging/51_Using_the_Debugger.html",
      "content": "# 51. Using the Debugger\nCreated Sunday 19 February 2023 at 02:27 pm\n\nVScode has a built in Node.js debugger. It's nice and easy to use. We'll be using that here.\n\n## Starting the debugger\n1. Add breakpoints in file(s)\n2. Run the main file in debug mode. We can of course run a specific file, but most files either give an error or not useful independently.\n   \n\n## Using the debugger\n- Controls\n\t- Pause, stop, restart\n\t- Resume\n\t- Next line (i.e. step over)\n\t- Step into, step out\n- In debug mode:\n\t- Hover over tokens to see values\n\t- See variable values in the side-panel\n\t- See the stack\n\t- Add variables to 'watch' to see changes to selected variable\n\n\n## Intermittent code\n- We can run explicit code in the debug console. Writing to variables is allowed.\n- Variable values can be changed by double clicking on them in the debug side-panel.\n\n\n## Restarting the debugger automatically\nWe use \"nodemon\" to restart the app if any file is edited. \n1. Install \"nodemon\" globally.\n2. Add this to the config (in \"launch.json\"):\n```json\n\"restart\": true,\n\"runtimeExecutable\": \"nodemon\",\n```\n\n- Optionally, one can use the terminal instead of debug console. Set:\n```json\n \"console\": \"integratedTerminal\"\n```\n\n\n## Further reading/help\n1. Node.js docs - https://nodejs.org/en/docs/guides/debugging-getting-started/\n2. VScode docs - https://code.visualstudio.com/docs/nodejs/nodejs-debugging",
      "html": "<h1 id=\"51.-using-the-debugger\">51. Using the Debugger <a class=\"heading-anchor-permalink\" href=\"#51.-using-the-debugger\">#</a></h1>\n<p>Created Sunday 19 February 2023 at 02:27 pm</p>\n<p>VScode has a built in Node.js debugger. It’s nice and easy to use. We’ll be using that here.</p>\n<h2 id=\"starting-the-debugger\">Starting the debugger <a class=\"heading-anchor-permalink\" href=\"#starting-the-debugger\">#</a></h2>\n<ol>\n<li>Add breakpoints in file(s)</li>\n<li>Run the main file in debug mode. We can of course run a specific file, but most files either give an error or not useful independently.</li>\n</ol>\n<h2 id=\"using-the-debugger\">Using the debugger <a class=\"heading-anchor-permalink\" href=\"#using-the-debugger\">#</a></h2>\n<ul>\n<li>Controls\n<ul>\n<li>Pause, stop, restart</li>\n<li>Resume</li>\n<li>Next line (i.e. step over)</li>\n<li>Step into, step out</li>\n</ul>\n</li>\n<li>In debug mode:\n<ul>\n<li>Hover over tokens to see values</li>\n<li>See variable values in the side-panel</li>\n<li>See the stack</li>\n<li>Add variables to ‘watch’ to see changes to selected variable</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"intermittent-code\">Intermittent code <a class=\"heading-anchor-permalink\" href=\"#intermittent-code\">#</a></h2>\n<ul>\n<li>We can run explicit code in the debug console. Writing to variables is allowed.</li>\n<li>Variable values can be changed by double clicking on them in the debug side-panel.</li>\n</ul>\n<h2 id=\"restarting-the-debugger-automatically\">Restarting the debugger automatically <a class=\"heading-anchor-permalink\" href=\"#restarting-the-debugger-automatically\">#</a></h2>\n<p>We use “nodemon” to restart the app if any file is edited.</p>\n<ol>\n<li>Install “nodemon” globally.</li>\n<li>Add this to the config (in “launch.json”):</li>\n</ol>\n<pre><code class=\"language-json\">&quot;restart&quot;: true,\n&quot;runtimeExecutable&quot;: &quot;nodemon&quot;,\n</code></pre>\n<ul>\n<li>Optionally, one can use the terminal instead of debug console. Set:</li>\n</ul>\n<pre><code class=\"language-json\"> &quot;console&quot;: &quot;integratedTerminal&quot;\n</code></pre>\n<h2 id=\"further-reading%2Fhelp\">Further reading/help <a class=\"heading-anchor-permalink\" href=\"#further-reading%2Fhelp\">#</a></h2>\n<ol>\n<li>Node.js docs - <a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\">https://nodejs.org/en/docs/guides/debugging-getting-started/</a></li>\n<li>VScode docs - <a href=\"https://code.visualstudio.com/docs/nodejs/nodejs-debugging\">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></li>\n</ol>\n",
      "id": 201
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/57_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/57_Module_introduction.html",
      "content": "# 57. Module introduction\nCreated Sunday 19 February 2023 at 05:37 pm\n\n## Situation\n- Using the http module, fs module for reading/writing files, streams etc is OK. But it's inefficient (from a DX POV), and therefore impractical for making apps. Reasons:\n\t- Repetition of standard stuff - extracting the body of a request, creating JSON strings\n\t- Too fine grained\n\t- Too much code and scope of errors\n\t- No clear structure for files, functions - this need to be taught/communicated/maintained separately.\n- More tangible reasons why this (vanilla Node.js server app) is impractical:\n\t- Routing\n\t- Handling status codes, response headers\n\t- Reacting differently based on request headers\n\n\n## A solution\nExpress.js is a web app (server side) framework that solves many of the aforementioned problems and provides many utility functions.\n\n- Express.js helps us focus more on the business, instead of the code.\n\n\n## In this section\n1. What is Express.js?\n2. Using middlewares - an important feature of Express\n3. Working with requests and responses, elegantly!\n4. Routing - more structured, compared to explicit if-else blocks.\n5. Returning files.",
      "html": "<h1 id=\"57.-module-introduction\">57. Module introduction <a class=\"heading-anchor-permalink\" href=\"#57.-module-introduction\">#</a></h1>\n<p>Created Sunday 19 February 2023 at 05:37 pm</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<ul>\n<li>Using the http module, fs module for reading/writing files, streams etc is OK. But it’s inefficient (from a DX POV), and therefore impractical for making apps. Reasons:\n<ul>\n<li>Repetition of standard stuff - extracting the body of a request, creating JSON strings</li>\n<li>Too fine grained</li>\n<li>Too much code and scope of errors</li>\n<li>No clear structure for files, functions - this need to be taught/communicated/maintained separately.</li>\n</ul>\n</li>\n<li>More tangible reasons why this (vanilla Node.js server app) is impractical:\n<ul>\n<li>Routing</li>\n<li>Handling status codes, response headers</li>\n<li>Reacting differently based on request headers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"a-solution\">A solution <a class=\"heading-anchor-permalink\" href=\"#a-solution\">#</a></h2>\n<p>Express.js is a web app (server side) framework that solves many of the aforementioned problems and provides many utility functions.</p>\n<ul>\n<li>Express.js helps us focus more on the business, instead of the code.</li>\n</ul>\n<h2 id=\"in-this-section\">In this section <a class=\"heading-anchor-permalink\" href=\"#in-this-section\">#</a></h2>\n<ol>\n<li>What is Express.js?</li>\n<li>Using middlewares - an important feature of Express</li>\n<li>Working with requests and responses, elegantly!</li>\n<li>Routing - more structured, compared to explicit if-else blocks.</li>\n<li>Returning files.</li>\n</ol>\n",
      "id": 202
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/58_What_is_Express_js.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/58_What_is_Express_js.html",
      "content": "# 58. What is Express.js?\nCreated Sunday 19 February 2023 at 05:50 pm\n\n## Situation\nWriting server-side code, even if the business logic is ignored, is quite cumbersome and difficult if done using vanilla Node.js way.\n\nWe wish to focus on the business logic, i.e. the parts that make our app unique and special, and not on the nitty gritty details needed by any app.\n\n\n## Frameworks\nA framework is a system that provides many things:\n1. Code - helper functions, classes, modules. This code usually has in-built protection against common security vulnerabilities.\n2. Tools - to scaffold, develop, run, build executables/optimized files.\n3. Rules - structure the app, ways to do common tasks, opinions for development.\n\nNote: A library just provides the code part.\n\n\n## Alternatives to Express.js\n1. Vanilla Node.js - this may be suitable for a small app, or simple apps. It's good for learning.\n2. Adonis.js - framework inspired by Laravel (a PHP based server side framework)\n3. Koa\n4. Sails.js\nand many more.\n\n\n## Why Express.js\nExpress.js is:\n1. Popularity - the \\*most popular and extensively used\n2. Minimalistic - doesn't add too much functionality out of the box.\n3. Extensibility - Express.js has an excellent plugin system, and there are lots of packages of common tasks that can be hooked into Express\n\n\n## About Express.js\n1. It uses the `http` module heavily\n2. Many functions from the `http` module can be used as is. But they're not used commonly since they are primitive compared to what Express provides.",
      "html": "<h1 id=\"58.-what-is-express.js%3F\">58. What is Express.js? <a class=\"heading-anchor-permalink\" href=\"#58.-what-is-express.js%3F\">#</a></h1>\n<p>Created Sunday 19 February 2023 at 05:50 pm</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Writing server-side code, even if the business logic is ignored, is quite cumbersome and difficult if done using vanilla Node.js way.</p>\n<p>We wish to focus on the business logic, i.e. the parts that make our app unique and special, and not on the nitty gritty details needed by any app.</p>\n<h2 id=\"frameworks\">Frameworks <a class=\"heading-anchor-permalink\" href=\"#frameworks\">#</a></h2>\n<p>A framework is a system that provides many things:</p>\n<ol>\n<li>Code - helper functions, classes, modules. This code usually has in-built protection against common security vulnerabilities.</li>\n<li>Tools - to scaffold, develop, run, build executables/optimized files.</li>\n<li>Rules - structure the app, ways to do common tasks, opinions for development.</li>\n</ol>\n<p>Note: A library just provides the code part.</p>\n<h2 id=\"alternatives-to-express.js\">Alternatives to Express.js <a class=\"heading-anchor-permalink\" href=\"#alternatives-to-express.js\">#</a></h2>\n<ol>\n<li>Vanilla Node.js - this may be suitable for a small app, or simple apps. It’s good for learning.</li>\n<li>Adonis.js - framework inspired by Laravel (a PHP based server side framework)</li>\n<li>Koa</li>\n<li>Sails.js\nand many more.</li>\n</ol>\n<h2 id=\"why-express.js\">Why Express.js <a class=\"heading-anchor-permalink\" href=\"#why-express.js\">#</a></h2>\n<p>Express.js is:</p>\n<ol>\n<li>Popularity - the *most popular and extensively used</li>\n<li>Minimalistic - doesn’t add too much functionality out of the box.</li>\n<li>Extensibility - Express.js has an excellent plugin system, and there are lots of packages of common tasks that can be hooked into Express</li>\n</ol>\n<h2 id=\"about-express.js\">About Express.js <a class=\"heading-anchor-permalink\" href=\"#about-express.js\">#</a></h2>\n<ol>\n<li>It uses the <code>http</code> module heavily</li>\n<li>Many functions from the <code>http</code> module can be used as is. But they’re not used commonly since they are primitive compared to what Express provides.</li>\n</ol>\n",
      "id": 203
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/59. Installing Express.js.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/59. Installing Express.js.html",
      "content": "# 59. Installing Express.js\nCreated Sunday 19 February 2023 at 06:13 pm\n\n- Install `express` package using `npm`.\n- It's a production dependency, not a development one.\n\nThat's it.\n\n## Basic express skeleton\n- `express` returns a function on import.\n- The app is created by calling the imported function.\n- This \"app\" is a valid middleware itself (this fact is not used directly, but is important to understand).\n- The \"app\" is also a valid callback for `http.Server.listen`. We, however, don't need to use this fact since express already has that function available on \"app\". Otherwise, we'd have to import an extra thing(`node:http`) that's used just once.\n```js\nconst express = require('express');\n\nconst app = express();\n\n... // app code\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n```\n\nNote: [Code - for random port, or getting the server's port](https://github.com/exemplar-codes/express-app-academind/commit/8f03882bb2a11e19262536def7ac2dac93e254eb)",
      "html": "<h1 id=\"59.-installing-express.js\">59. Installing Express.js <a class=\"heading-anchor-permalink\" href=\"#59.-installing-express.js\">#</a></h1>\n<p>Created Sunday 19 February 2023 at 06:13 pm</p>\n<ul>\n<li>Install <code>express</code> package using <code>npm</code>.</li>\n<li>It’s a production dependency, not a development one.</li>\n</ul>\n<p>That’s it.</p>\n<h2 id=\"basic-express-skeleton\">Basic express skeleton <a class=\"heading-anchor-permalink\" href=\"#basic-express-skeleton\">#</a></h2>\n<ul>\n<li><code>express</code> returns a function on import.</li>\n<li>The app is created by calling the imported function.</li>\n<li>This “app” is a valid middleware itself (this fact is not used directly, but is important to understand).</li>\n<li>The “app” is also a valid callback for <code>http.Server.listen</code>. We, however, don’t need to use this fact since express already has that function available on “app”. Otherwise, we’d have to import an extra thing(<code>node:http</code>) that’s used just once.</li>\n</ul>\n<pre><code class=\"language-js\">const express = require('express');\n\nconst app = express();\n\n... // app code\n\napp.listen(3000, () =&gt; console.log('Server running on port 3000'));\n</code></pre>\n<p>Note: <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/8f03882bb2a11e19262536def7ac2dac93e254eb\">Code - for random port, or getting the server’s port</a></p>\n",
      "id": 204
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/60_Adding_Middlewares.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/60_Adding_Middlewares.html",
      "content": "# 60. Adding Middlewares\nCreated Tuesday 21 February 2023 at 09:15 am\n\n/storymode\n\n## What is a middleware\n- The most important (and used) construct in Express.js is middleware. A middleware is just a function.\n- Almost everything is a middleware (i.e. some specific implementation of the middleware) in Express.\n- A middleware has access to request, response params. Additionally, it has a \"next\" param that's used to ~~transfer control~~ continue the middleware chain, i.e. the next middleware will be run.\n\nNote: Middlewares in Express.js can be asynchronous, this is supported by default. Simple use the \"async await\" syntax.\n\n## Where do middlewares fit-in in Express\n![](../../../../assets/60_Adding_Middlewares-image-1-5460df7d.png)\n- Middlewares are an array of functions that run (linearly, and in top-down file order) between the phase of request and response.\n- There's actually no \"response\" function in Express. Some middleware ends the request-response cycle by responding.\n- If no middleware responds, the connection will not end (most likely time-out). This practically never happens, since an \"all accepting\" 404 middleware is always present at the end.\n\n## Anatomy of a middleware\n1. A middleware has access to request, respond params, in addition to a \"next\" param that's used to ~~transfer control~~ continue the middleware chain.\n2. If \"next\" is not called in a middleware, it should either respond or else the connection will be stalled (never finish).\n3. Since middlewares are just functions, a lot of useful 3rd party middlewares are available.\n\n\n## Syntax\n1. A middleware is added to the app using `app.use()`. That's it.\n```js\nconst express = require('express');\n\nconst app = express();\n\napp.use((req, res, next) => {\n    console.log(\"1 ran\");\n    next();\n});\n\napp.use((req, res, next) => {\n    console.log(\"2 ran\");\n    next();\n\n\t// to explicitly end execution of the middleware, `return` is still needed. Only `next()` is not sufficient\n\tconsole.log(\"Ran from 2, even though next() has run\");\n});\n\napp.use((req, res, next) => {\n\tconsole.log(\"3 ran\");\n});\n\napp.use((req, res, next) => {\n\tconsole.log(\"4 did not run\");\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n```\n\n\n## My understanding of middleware (not in course)\n### Mechanics of middlewares\n1. All top-level express code are middlewares.\n2. Middlewares don't have nesting. Router may look like nesting, but they're actually a syntactic sugar for linearity. There's no possibility of branching.\n3. Middle-wares are evaluated top-down.\n4. A middleware runs only if it's the first one in the app or if the one before it executed `next()`.\n5. Middlewares can consume other middlewares to give a new middleware. This can be used for non-route organization into files.\n6. If a middleware does not call `next`, it has to send a response\n\n### Types of constructs in Express\nStructuring/organizing/classification of middlewares:\n1. Simplest - seen above\n2. Multi-file\n3. Route based\n4. HTTP verb based\n5. Router\n![](../../../../assets/60_Adding_Middlewares-image-2-5460df7d.svg)\n",
      "html": "<h1 id=\"60.-adding-middlewares\">60. Adding Middlewares <a class=\"heading-anchor-permalink\" href=\"#60.-adding-middlewares\">#</a></h1>\n<p>Created Tuesday 21 February 2023 at 09:15 am</p>\n<p>/storymode</p>\n<h2 id=\"what-is-a-middleware\">What is a middleware <a class=\"heading-anchor-permalink\" href=\"#what-is-a-middleware\">#</a></h2>\n<ul>\n<li>The most important (and used) construct in Express.js is middleware. A middleware is just a function.</li>\n<li>Almost everything is a middleware (i.e. some specific implementation of the middleware) in Express.</li>\n<li>A middleware has access to request, response params. Additionally, it has a “next” param that’s used to <s>transfer control</s> continue the middleware chain, i.e. the next middleware will be run.</li>\n</ul>\n<p>Note: Middlewares in Express.js can be asynchronous, this is supported by default. Simple use the “async await” syntax.</p>\n<h2 id=\"where-do-middlewares-fit-in-in-express\">Where do middlewares fit-in in Express <a class=\"heading-anchor-permalink\" href=\"#where-do-middlewares-fit-in-in-express\">#</a></h2>\n<p><img src=\"../../../../assets/60_Adding_Middlewares-image-1-5460df7d.png\" alt=\"\"></p>\n<ul>\n<li>Middlewares are an array of functions that run (linearly, and in top-down file order) between the phase of request and response.</li>\n<li>There’s actually no “response” function in Express. Some middleware ends the request-response cycle by responding.</li>\n<li>If no middleware responds, the connection will not end (most likely time-out). This practically never happens, since an “all accepting” 404 middleware is always present at the end.</li>\n</ul>\n<h2 id=\"anatomy-of-a-middleware\">Anatomy of a middleware <a class=\"heading-anchor-permalink\" href=\"#anatomy-of-a-middleware\">#</a></h2>\n<ol>\n<li>A middleware has access to request, respond params, in addition to a “next” param that’s used to <s>transfer control</s> continue the middleware chain.</li>\n<li>If “next” is not called in a middleware, it should either respond or else the connection will be stalled (never finish).</li>\n<li>Since middlewares are just functions, a lot of useful 3rd party middlewares are available.</li>\n</ol>\n<h2 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h2>\n<ol>\n<li>A middleware is added to the app using <code>app.use()</code>. That’s it.</li>\n</ol>\n<pre><code class=\"language-js\">const express = require('express');\n\nconst app = express();\n\napp.use((req, res, next) =&gt; {\n    console.log(&quot;1 ran&quot;);\n    next();\n});\n\napp.use((req, res, next) =&gt; {\n    console.log(&quot;2 ran&quot;);\n    next();\n\n\t// to explicitly end execution of the middleware, `return` is still needed. Only `next()` is not sufficient\n\tconsole.log(&quot;Ran from 2, even though next() has run&quot;);\n});\n\napp.use((req, res, next) =&gt; {\n\tconsole.log(&quot;3 ran&quot;);\n});\n\napp.use((req, res, next) =&gt; {\n\tconsole.log(&quot;4 did not run&quot;);\n});\n\napp.listen(3000, () =&gt; console.log('Server running on port 3000'));\n</code></pre>\n<h2 id=\"my-understanding-of-middleware-(not-in-course)\">My understanding of middleware (not in course) <a class=\"heading-anchor-permalink\" href=\"#my-understanding-of-middleware-(not-in-course)\">#</a></h2>\n<h3 id=\"mechanics-of-middlewares\">Mechanics of middlewares <a class=\"heading-anchor-permalink\" href=\"#mechanics-of-middlewares\">#</a></h3>\n<ol>\n<li>All top-level express code are middlewares.</li>\n<li>Middlewares don’t have nesting. Router may look like nesting, but they’re actually a syntactic sugar for linearity. There’s no possibility of branching.</li>\n<li>Middle-wares are evaluated top-down.</li>\n<li>A middleware runs only if it’s the first one in the app or if the one before it executed <code>next()</code>.</li>\n<li>Middlewares can consume other middlewares to give a new middleware. This can be used for non-route organization into files.</li>\n<li>If a middleware does not call <code>next</code>, it has to send a response</li>\n</ol>\n<h3 id=\"types-of-constructs-in-express\">Types of constructs in Express <a class=\"heading-anchor-permalink\" href=\"#types-of-constructs-in-express\">#</a></h3>\n<p>Structuring/organizing/classification of middlewares:</p>\n<ol>\n<li>Simplest - seen above</li>\n<li>Multi-file</li>\n<li>Route based</li>\n<li>HTTP verb based</li>\n<li>Router\n<img src=\"../../../../assets/60_Adding_Middlewares-image-2-5460df7d.svg\" alt=\"\"></li>\n</ol>\n",
      "id": 205
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_1_Handling_routes.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_1_Handling_routes.html",
      "content": "# 61. Handling routes\nCreated Tuesday 21 February 2023 at 09:48 am\n\n## Situation\nThe simplest and naive way to do routing is based on `req.url` and running `next()` (with `return`) conditionally to ignore the current middleware.\n\nExpress.js has an easy way to get around this.\n\n\n## How\nThe `app.use()` function already provides an easy way to do this. The function actually has 5 forms. It accepts a path (string) as first argument that decides if the middleware will be run or ignored (think auto `next()`).\n\n```js\nconst express = require('express');\n\nconst app = express();\n\napp.use('/shop', (req, res, next) => {});\napp.use('/user', (req, res, next) => {});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n```\n\nThe **match criteria** for the path is \"starts with\", and not an exact match. This means:\n1. `/` will match all routes. `/` is actually the default value for the path param in `.use()`.\n2. Order of middlewares is important for correct routing.\n```js\nconst express = require('express');\n\nconst app = express();\n\n// correct order, if one wants to respond directly if '/user'\napp.use('/user', (req, res, next) => {});\napp.use('/', (req, res, next) => {});\n\n// wrong order, for the goal stated above\napp.use('/', (req, res, next) => {}); // will be run\napp.use('/user', (req, res, next) => {}); // will be run if `/` has next()\n\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n```\n\nNote: \n- Other than auto-next(), the usual rules apply.\n- Path (i.e. first argument for middleware register) [can](https://expressjs.com/en/api.html#path-examples) be an `Array` of `string`s too, instead of just a single `string`, match criteria remains the same. e.g `app.use(['/order', '/api/order'], () => {})` is fine.",
      "html": "<h1 id=\"61.-handling-routes\">61. Handling routes <a class=\"heading-anchor-permalink\" href=\"#61.-handling-routes\">#</a></h1>\n<p>Created Tuesday 21 February 2023 at 09:48 am</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>The simplest and naive way to do routing is based on <code>req.url</code> and running <code>next()</code> (with <code>return</code>) conditionally to ignore the current middleware.</p>\n<p>Express.js has an easy way to get around this.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>The <code>app.use()</code> function already provides an easy way to do this. The function actually has 5 forms. It accepts a path (string) as first argument that decides if the middleware will be run or ignored (think auto <code>next()</code>).</p>\n<pre><code class=\"language-js\">const express = require('express');\n\nconst app = express();\n\napp.use('/shop', (req, res, next) =&gt; {});\napp.use('/user', (req, res, next) =&gt; {});\n\napp.listen(3000, () =&gt; console.log('Server running on port 3000'));\n</code></pre>\n<p>The <strong>match criteria</strong> for the path is “starts with”, and not an exact match. This means:</p>\n<ol>\n<li><code>/</code> will match all routes. <code>/</code> is actually the default value for the path param in <code>.use()</code>.</li>\n<li>Order of middlewares is important for correct routing.</li>\n</ol>\n<pre><code class=\"language-js\">const express = require('express');\n\nconst app = express();\n\n// correct order, if one wants to respond directly if '/user'\napp.use('/user', (req, res, next) =&gt; {});\napp.use('/', (req, res, next) =&gt; {});\n\n// wrong order, for the goal stated above\napp.use('/', (req, res, next) =&gt; {}); // will be run\napp.use('/user', (req, res, next) =&gt; {}); // will be run if `/` has next()\n\n\napp.listen(3000, () =&gt; console.log('Server running on port 3000'));\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>Other than auto-next(), the usual rules apply.</li>\n<li>Path (i.e. first argument for middleware register) <a href=\"https://expressjs.com/en/api.html#path-examples\">can</a> be an <code>Array</code> of <code>string</code>s too, instead of just a single <code>string</code>, match criteria remains the same. e.g <code>app.use(['/order', '/api/order'], () =&gt; {})</code> is fine.</li>\n</ul>\n",
      "id": 206
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_2_Handling_HTTP_methods.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/61_2_Handling_HTTP_methods.html",
      "content": "# 65. HTTP methods\nCreated Wednesday 22 February 2023 at 11:28 pm\n\n## Situation\nFiltering w.r.t HTTP method is a common thing done using an `if` on `req.method`.\n\n## What is app.METHOD\nIt's conceptually a filter on top of `app.use()`, based on the HTTP method of the request. There are many (as many as HTTP methods). Common ones:\n1. `app.get(\"\")`\n2. `app.post(\"\")`\n3. `app.put(\"\")`\n4. `app.delete(\"\")`\n5. `app.all(\"\")` - handles all HTTP methods. Generally used for multi-file middleware organization, **but** prefix won't be trimmed off.\n\nSyntax - `app.get`, `app.delete`, `app.post`, `app.all` etc, instead of `app.use`.\n\n- Unlike `app.use()`, passing a path to app.METHOD is necessary (even if it's just `\"/\"` ). It'll be silently ignored otherwise.\n- The match criteria for path specified in app.METHOD is an **exact match**. Of course, a trailing \"/\" if any is ignored and handled properly.\n- Multi-file middleware organization is possible with all these, but prefix will be not be trimmed (it'll be passed to the child *as is*). [Code example](https://github.com/exemplar-codes/express-app-academind/commit/19e738f6969544e358d074d0b56f297b78f993fc)\n\n[Code example](https://github.com/exemplar-codes/express-app-academind/commit/01c10d54a073f86069088751b922d5e8fcc38308)\n\n### Doubts (mental edge cases)\n- In case a child middleware file's register (in the parent) was an app.METHOD, the child file's non-method middlewares will still run, since there's no concept of nesting in Express - it's all linear.\n- Multiple `app.METHOD` if applicable, will all execute (i.e. there's no auto response/stoppage after executing of any of them). Example - If a `app.get` and an `app.all`, both, are present, and a `GET` request comes up, both will run (assuming there's no response from anyone between them, including the previous one among them). [Code example](https://github.com/exemplar-codes/express-app-academind/commit/bb97487b43fc6b260e72c303c3a0b967a6d10ff3)",
      "html": "<h1 id=\"65.-http-methods\">65. HTTP methods <a class=\"heading-anchor-permalink\" href=\"#65.-http-methods\">#</a></h1>\n<p>Created Wednesday 22 February 2023 at 11:28 pm</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Filtering w.r.t HTTP method is a common thing done using an <code>if</code> on <code>req.method</code>.</p>\n<h2 id=\"what-is-app.method\">What is app.METHOD <a class=\"heading-anchor-permalink\" href=\"#what-is-app.method\">#</a></h2>\n<p>It’s conceptually a filter on top of <code>app.use()</code>, based on the HTTP method of the request. There are many (as many as HTTP methods). Common ones:</p>\n<ol>\n<li><code>app.get(&quot;&quot;)</code></li>\n<li><code>app.post(&quot;&quot;)</code></li>\n<li><code>app.put(&quot;&quot;)</code></li>\n<li><code>app.delete(&quot;&quot;)</code></li>\n<li><code>app.all(&quot;&quot;)</code> - handles all HTTP methods. Generally used for multi-file middleware organization, <strong>but</strong> prefix won’t be trimmed off.</li>\n</ol>\n<p>Syntax - <code>app.get</code>, <code>app.delete</code>, <code>app.post</code>, <code>app.all</code> etc, instead of <code>app.use</code>.</p>\n<ul>\n<li>Unlike <code>app.use()</code>, passing a path to app.METHOD is necessary (even if it’s just <code>&quot;/&quot;</code> ). It’ll be silently ignored otherwise.</li>\n<li>The match criteria for path specified in app.METHOD is an <strong>exact match</strong>. Of course, a trailing “/” if any is ignored and handled properly.</li>\n<li>Multi-file middleware organization is possible with all these, but prefix will be not be trimmed (it’ll be passed to the child <em>as is</em>). <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/19e738f6969544e358d074d0b56f297b78f993fc\">Code example</a></li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/01c10d54a073f86069088751b922d5e8fcc38308\">Code example</a></p>\n<h3 id=\"doubts-(mental-edge-cases)\">Doubts (mental edge cases) <a class=\"heading-anchor-permalink\" href=\"#doubts-(mental-edge-cases)\">#</a></h3>\n<ul>\n<li>In case a child middleware file’s register (in the parent) was an app.METHOD, the child file’s non-method middlewares will still run, since there’s no concept of nesting in Express - it’s all linear.</li>\n<li>Multiple <code>app.METHOD</code> if applicable, will all execute (i.e. there’s no auto response/stoppage after executing of any of them). Example - If a <code>app.get</code> and an <code>app.all</code>, both, are present, and a <code>GET</code> request comes up, both will run (assuming there’s no response from anyone between them, including the previous one among them). <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/bb97487b43fc6b260e72c303c3a0b967a6d10ff3\">Code example</a></li>\n</ul>\n",
      "id": 207
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/62_Express_Router.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/62_Express_Router.html",
      "content": "# 66-68. Express Router\nCreated Wednesday 22 February 2023 at 08:36 am\n\n## Situation\nMulti-file organization + (optional) router prefix trimmed.\n\n\n## How (to use)\n```js\n// main.js file\nconst express = require(\"express\");\n\nconst app = express();\n\nconst shopRouter = require(\"./routes/shop\"); // file path doesn't matter\n\n// shopRouter is a valid middleware\napp.use(\"/shop\", shopRouter); // router route specified here, in parent file\n\napp.use(\"/\", (req, res, next) => {\n  console.log(\"Main middleware ran\");\n});\n\napp.listen(3000, () => console.log(\"Server running at port 3000\"));\n```\n\n```js\n// routes/shop.js file\nconst express = require(\"express\");\n\nconst router = express.Router(); // just like an app\n\nrouter.use((req, res, next) => {\n  console.log(\"Shop middleware ran\");\n});\n\n// actual request URL is \"/shop\", but this will match, since prefix is trimmed\nrouter.get(\"/\", (req, res, next) => {\n  console.log(\"Shop GET ran\");\n});\n\nmodule.exports = router;\n```\n\n[Code example](https://github.com/exemplar-codes/express-app-academind/commit/0b38a374f223ef3c50e44deeee8b008639aa751a)\n\n## Syntax\n1. A router is created using `express.Router()` instead of `express()`.\n2. The router can register middlewares onto it just like an app.\n3. The router is a valid middleware, so it can be exported to and registered normally by the parent.\n4. The router path is specified in the parent. This part (prefix) is trimmed, i.e. not accessible to the router. Technically, it is accessible, but the intent is to hide/not-use it.\n5. The router should be registered in the parent, preferably using `use('path_here', myRouter)`\n   \n## Doubts (everything works as expected)\n1. Simplest - No path for router specified (i.e. using full path in router too). **Expected**, **OK**\n2. Default spec - Router path '/' (i.e. using full path in router too). **Expected**, **OK**\n3. Path in parent, no path in router. **OK**. **Prefer** `.use('', myRouter)` only for registering router, since:\n\t1. Path normalized forwarding is not done if `get`.\n\t2. `app.route('').use(myRouter)` is just too caveat-ed. Caveats - `app.route()` can only chain an app.METHOD, and since app.METHOD does not trim the route for the router, there's no use of `app.route` for a router (i.e. or in general for any useful multi-file scenario).\n4. Path in parent, \"/\" or some larger path in router. **Expected**. **OK**.\n\nNote:\n- Things learnt - app.METHOD always needs the path param, even if it is `'/'`.\n- Standard rules apply, unless specified otherwise.\n- The router path trimming feature assumes all paths in the router have a common prefix.\n- The router can be used without the path trimming feature also (i.e. don't specify a path while registering). This is actually the better way to do multi-file middleware/route organization (instead of using `express()` to make the child - see [code](https://github.com/exemplar-codes/express-app-academind/commit/2be76a9c2fb4c542967cd94e568f40367f17e2d8)).\n- Don't *call* the imported router when registering. A middleware is specified using a callback (since `express() or express.Router()` return a callback functions with attached attributes). \n\t- This is a common mistake since plugable middlewares *seem to be called* - `app.use(express.json())` or `app.use(express.static())`. These entities need to be called since they're not actually a middleware (callback), but a function that returns a configured middleware (callback), based on the arguments are passed.\n\t- [Code](https://github.com/unclassified-repos/academind-nodejs-assignment-2/commit/b0cd454943d3681bc5a642778c6109782e6b7877)\n\t- The error message from Express.js is quite useless, BTW. FIXME: discuss about better error message for this case, on the Express.js project site.",
      "html": "<h1 id=\"66-68.-express-router\">66-68. Express Router <a class=\"heading-anchor-permalink\" href=\"#66-68.-express-router\">#</a></h1>\n<p>Created Wednesday 22 February 2023 at 08:36 am</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Multi-file organization + (optional) router prefix trimmed.</p>\n<h2 id=\"how-(to-use)\">How (to use) <a class=\"heading-anchor-permalink\" href=\"#how-(to-use)\">#</a></h2>\n<pre><code class=\"language-js\">// main.js file\nconst express = require(&quot;express&quot;);\n\nconst app = express();\n\nconst shopRouter = require(&quot;./routes/shop&quot;); // file path doesn't matter\n\n// shopRouter is a valid middleware\napp.use(&quot;/shop&quot;, shopRouter); // router route specified here, in parent file\n\napp.use(&quot;/&quot;, (req, res, next) =&gt; {\n  console.log(&quot;Main middleware ran&quot;);\n});\n\napp.listen(3000, () =&gt; console.log(&quot;Server running at port 3000&quot;));\n</code></pre>\n<pre><code class=\"language-js\">// routes/shop.js file\nconst express = require(&quot;express&quot;);\n\nconst router = express.Router(); // just like an app\n\nrouter.use((req, res, next) =&gt; {\n  console.log(&quot;Shop middleware ran&quot;);\n});\n\n// actual request URL is &quot;/shop&quot;, but this will match, since prefix is trimmed\nrouter.get(&quot;/&quot;, (req, res, next) =&gt; {\n  console.log(&quot;Shop GET ran&quot;);\n});\n\nmodule.exports = router;\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/0b38a374f223ef3c50e44deeee8b008639aa751a\">Code example</a></p>\n<h2 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h2>\n<ol>\n<li>A router is created using <code>express.Router()</code> instead of <code>express()</code>.</li>\n<li>The router can register middlewares onto it just like an app.</li>\n<li>The router is a valid middleware, so it can be exported to and registered normally by the parent.</li>\n<li>The router path is specified in the parent. This part (prefix) is trimmed, i.e. not accessible to the router. Technically, it is accessible, but the intent is to hide/not-use it.</li>\n<li>The router should be registered in the parent, preferably using <code>use('path_here', myRouter)</code></li>\n</ol>\n<h2 id=\"doubts-(everything-works-as-expected)\">Doubts (everything works as expected) <a class=\"heading-anchor-permalink\" href=\"#doubts-(everything-works-as-expected)\">#</a></h2>\n<ol>\n<li>Simplest - No path for router specified (i.e. using full path in router too). <strong>Expected</strong>, <strong>OK</strong></li>\n<li>Default spec - Router path ‘/’ (i.e. using full path in router too). <strong>Expected</strong>, <strong>OK</strong></li>\n<li>Path in parent, no path in router. <strong>OK</strong>. <strong>Prefer</strong> <code>.use('', myRouter)</code> only for registering router, since:\n<ol>\n<li>Path normalized forwarding is not done if <code>get</code>.</li>\n<li><code>app.route('').use(myRouter)</code> is just too caveat-ed. Caveats - <code>app.route()</code> can only chain an app.METHOD, and since app.METHOD does not trim the route for the router, there’s no use of <code>app.route</code> for a router (i.e. or in general for any useful multi-file scenario).</li>\n</ol>\n</li>\n<li>Path in parent, “/” or some larger path in router. <strong>Expected</strong>. <strong>OK</strong>.</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Things learnt - app.METHOD always needs the path param, even if it is <code>'/'</code>.</li>\n<li>Standard rules apply, unless specified otherwise.</li>\n<li>The router path trimming feature assumes all paths in the router have a common prefix.</li>\n<li>The router can be used without the path trimming feature also (i.e. don’t specify a path while registering). This is actually the better way to do multi-file middleware/route organization (instead of using <code>express()</code> to make the child - see <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/2be76a9c2fb4c542967cd94e568f40367f17e2d8\">code</a>).</li>\n<li>Don’t <em>call</em> the imported router when registering. A middleware is specified using a callback (since <code>express() or express.Router()</code> return a callback functions with attached attributes).\n<ul>\n<li>This is a common mistake since plugable middlewares <em>seem to be called</em> - <code>app.use(express.json())</code> or <code>app.use(express.static())</code>. These entities need to be called since they’re not actually a middleware (callback), but a function that returns a configured middleware (callback), based on the arguments are passed.</li>\n<li><a href=\"https://github.com/unclassified-repos/academind-nodejs-assignment-2/commit/b0cd454943d3681bc5a642778c6109782e6b7877\">Code</a></li>\n<li>The error message from Express.js is quite useless, BTW. FIXME: discuss about better error message for this case, on the Express.js project site.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 208
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/63_Chain_of_middlewares.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/63_Chain_of_middlewares.html",
      "content": "# 63. Chain of middlewares\nCreated Friday 18 August 2023\n\n## Situation\nSuppose I need to run multiple middlewares for the exact same method, route, router or maybe with `.use()` itself.\n\nLet's try with the `.use()` one, should be simple, I just write them one below the other. \n\nBut what if the number of middlewares are not known, or I'm lazy. Can I use a for loop?\nNo. Since all `.use(callback)` are callbacks, we never run them until we get a request - so it's *not possible* with a for loop.\n\n\n## Solution - how\nSince looping is not possible.\nExpress supports comma separated syntax or an array of middlewares passed to `.use` (and other functions).\nThe syntax is very flexible - everything is linearized.\n\n\n## Solution - syntax\nHere's the syntax:\n```js\napp.use(myMiddleware); // already familiar\n\n\n// 1. Comma-separated works fine too (all will be run in order)\napp.use(myMiddleware1, myMiddleware2, myMiddleware3);\n\n// 2. Array also works \napp.use([myMiddleware1, myMiddleware2, myMiddleware3]);\n\n// 3. can use both - it still works\napp.use(myMiddleware1, [myMiddleware2, myMiddleware3], myMiddleware4);\n\n// 4. btw, nested arrays work too, Express just flattens them\napp.use(myMiddleware1, [myMiddleware2, [myMiddleware3]], myMiddleware4);\n```\n\nWorks with `.router()`, `method('', )` too.\n\n\n## Doubt (ignorable)\nQ: Could it work with this notation of comma, or array if we can write a wrapper with a loop?\nA: It would work, but not properly or for call cases:\n1. For middleware that don't respond. \n\t1. It would *seem* to work. Since each middleware in the loop would call `next()`, but the first iteration would end the wrapper (which is a middleware itself). So the others in the loop would run (but not in the queue - they will run independently). **Doesn't work**\n2. If they respond - **won't work**, see why: \n\t- If the first one is a non-responding middleware, point 1 happens (out of order exec) - not acceptable.\n\t- If we ignore out of order/independent execution. Let's see what happens, the responding middleware runs... fine, no. When the next middleware (be it responding or non-responding), we would get headers set error - since it would reach the 404.\n\nI know, we can update `res.locals` and catch that in 404, but the out of exec order is till not solved.\n\nConstruct of arrays/comma separated middleware is a REQUIRED feature.\n\nIt makes it easy to develop Express apps.\n",
      "html": "<h1 id=\"63.-chain-of-middlewares\">63. Chain of middlewares <a class=\"heading-anchor-permalink\" href=\"#63.-chain-of-middlewares\">#</a></h1>\n<p>Created Friday 18 August 2023</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Suppose I need to run multiple middlewares for the exact same method, route, router or maybe with <code>.use()</code> itself.</p>\n<p>Let’s try with the <code>.use()</code> one, should be simple, I just write them one below the other.</p>\n<p>But what if the number of middlewares are not known, or I’m lazy. Can I use a for loop?\nNo. Since all <code>.use(callback)</code> are callbacks, we never run them until we get a request - so it’s <em>not possible</em> with a for loop.</p>\n<h2 id=\"solution---how\">Solution - how <a class=\"heading-anchor-permalink\" href=\"#solution---how\">#</a></h2>\n<p>Since looping is not possible.\nExpress supports comma separated syntax or an array of middlewares passed to <code>.use</code> (and other functions).\nThe syntax is very flexible - everything is linearized.</p>\n<h2 id=\"solution---syntax\">Solution - syntax <a class=\"heading-anchor-permalink\" href=\"#solution---syntax\">#</a></h2>\n<p>Here’s the syntax:</p>\n<pre><code class=\"language-js\">app.use(myMiddleware); // already familiar\n\n\n// 1. Comma-separated works fine too (all will be run in order)\napp.use(myMiddleware1, myMiddleware2, myMiddleware3);\n\n// 2. Array also works \napp.use([myMiddleware1, myMiddleware2, myMiddleware3]);\n\n// 3. can use both - it still works\napp.use(myMiddleware1, [myMiddleware2, myMiddleware3], myMiddleware4);\n\n// 4. btw, nested arrays work too, Express just flattens them\napp.use(myMiddleware1, [myMiddleware2, [myMiddleware3]], myMiddleware4);\n</code></pre>\n<p>Works with <code>.router()</code>, <code>method('', )</code> too.</p>\n<h2 id=\"doubt-(ignorable)\">Doubt (ignorable) <a class=\"heading-anchor-permalink\" href=\"#doubt-(ignorable)\">#</a></h2>\n<p>Q: Could it work with this notation of comma, or array if we can write a wrapper with a loop?\nA: It would work, but not properly or for call cases:</p>\n<ol>\n<li>For middleware that don’t respond.\n<ol>\n<li>It would <em>seem</em> to work. Since each middleware in the loop would call <code>next()</code>, but the first iteration would end the wrapper (which is a middleware itself). So the others in the loop would run (but not in the queue - they will run independently). <strong>Doesn’t work</strong></li>\n</ol>\n</li>\n<li>If they respond - <strong>won’t work</strong>, see why:\n<ul>\n<li>If the first one is a non-responding middleware, point 1 happens (out of order exec) - not acceptable.</li>\n<li>If we ignore out of order/independent execution. Let’s see what happens, the responding middleware runs… fine, no. When the next middleware (be it responding or non-responding), we would get headers set error - since it would reach the 404.</li>\n</ul>\n</li>\n</ol>\n<p>I know, we can update <code>res.locals</code> and catch that in 404, but the out of exec order is till not solved.</p>\n<p>Construct of arrays/comma separated middleware is a REQUIRED feature.</p>\n<p>It makes it easy to develop Express apps.</p>\n",
      "id": 209
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/64_Conditional_middlewares.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/64_Conditional_middlewares.html",
      "content": "# 64. Conditional middlewares\nCreated Friday 18 August 2023\n\n## Situation\nThere is a backend app with many middlewares, including two named X and Y. The requirement is that only X runs or Y runs based on a condition.\n&nbsp;\n\n## Solution\nHow do we handle this?\nThere are a few cases here, with minor variations.\n1. Keep it linear - we add the middlewares one after the other. In the body of these middlewares we `return` early if the condition is not matching.\n\t- If both are custom middlewares\n\t```js\n\tfunction mwX(req, res, next) {\n\t\tif(condition)\n\t\t\treturn next();\n\t\t// do X mw logic\n\t}\n\t\n\tfunction mwY(req, res, next) {\n\t\tif(condition)\n\t\t\treturn next();\n\t\t// do Y mw logic\n\t}\n\n\tapp.use([mwX, myY]);\n\t```\n\t- If any of them is library generated. Or if you don't want to litter conditional code into middlewares.\n    ```js\n\t// of course, this can be done using array too\n\tfunction xConditional(req, res, next) {\n\t\tif(condition)\n\t\t\treturn X;\n\t\treturn ((req, res, next) => { return next(); });\n\t}\n\n\tfunction yConditional(req, res, next) {\n\t\tif(condition)\n\t\t\treturn Y;\n\t\treturn ((req, res, next) => { return next(); });\n\t}\n\n\t\n\tapp.use([xConditional, yConditional])\n\t```\n2. Ternary - works only if the condition is static (i.e. not dependent on `req` or `res`), we can use the ternary operator. `app.use(condition ? X : Y);`. X and Y could be custom or library generated doesn't matter. Code:\n\t```js\n\tapp.use(staticCondition ? X : Y);\n\t```\n\n\nNote: \n- Prefer differentiation based on route, method and router before doing this. They are in-built control mechanisms which are intuitive and easy to use.\n- Can be generalized to more than 2 middlewares too.\n- Direct wrapper  (special case) - if the middlewares are exclusively conditional. Code:\n\t```js\n\tfunction wrapperMiddleware() {\n\t  if(condition) // based on req or res logic or otherwise\n\t    return X;\n\t  else\n\t    return Y;\n\t}\n\n\tapp.use(wrapperMiddleware());\n\t```",
      "html": "<h1 id=\"64.-conditional-middlewares\">64. Conditional middlewares <a class=\"heading-anchor-permalink\" href=\"#64.-conditional-middlewares\">#</a></h1>\n<p>Created Friday 18 August 2023</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>There is a backend app with many middlewares, including two named X and Y. The requirement is that only X runs or Y runs based on a condition.\n </p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<p>How do we handle this?\nThere are a few cases here, with minor variations.</p>\n<ol>\n<li>Keep it linear - we add the middlewares one after the other. In the body of these middlewares we <code>return</code> early if the condition is not matching.\n<ul>\n<li>If both are custom middlewares</li>\n</ul>\n<pre><code class=\"language-js\">function mwX(req, res, next) {\n\tif(condition)\n\t\treturn next();\n\t// do X mw logic\n}\n\nfunction mwY(req, res, next) {\n\tif(condition)\n\t\treturn next();\n\t// do Y mw logic\n}\n\napp.use([mwX, myY]);\n</code></pre>\n<ul>\n<li>If any of them is library generated. Or if you don’t want to litter conditional code into middlewares.</li>\n</ul>\n<pre><code class=\"language-js\">// of course, this can be done using array too\nfunction xConditional(req, res, next) {\n\tif(condition)\n\t\treturn X;\n\treturn ((req, res, next) =&gt; { return next(); });\n}\n\nfunction yConditional(req, res, next) {\n\tif(condition)\n\t\treturn Y;\n\treturn ((req, res, next) =&gt; { return next(); });\n}\n\n\napp.use([xConditional, yConditional])\n</code></pre>\n</li>\n<li>Ternary - works only if the condition is static (i.e. not dependent on <code>req</code> or <code>res</code>), we can use the ternary operator. <code>app.use(condition ? X : Y);</code>. X and Y could be custom or library generated doesn’t matter. Code:<pre><code class=\"language-js\">app.use(staticCondition ? X : Y);\n</code></pre>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Prefer differentiation based on route, method and router before doing this. They are in-built control mechanisms which are intuitive and easy to use.</li>\n<li>Can be generalized to more than 2 middlewares too.</li>\n<li>Direct wrapper  (special case) - if the middlewares are exclusively conditional. Code:<pre><code class=\"language-js\">function wrapperMiddleware() {\n  if(condition) // based on req or res logic or otherwise\n    return X;\n  else\n    return Y;\n}\n\napp.use(wrapperMiddleware());\n</code></pre>\n</li>\n</ul>\n",
      "id": 210
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/66_Responses.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/66_Responses.html",
      "content": "# 62. Responses\nCreated Thursday 23 February 2023 at 12:27 am\n\n[Code - demo and experiments](https://github.com/exemplar-codes/express-app-academind/blob/main/responses.js)\n\n# Situation\nobvs\n\n\n## Syntax\n```js\nconst express = require(\"express\");\n\nconst app = express();\n\napp.use((req, res) => {\n  res.send(\"Hello, world\"); // sent as \"text/plain\"\n});\n\napp.listen(3000, () => console.log(\"Server running on port 3000\"));\n```\n\n### 1. Status\n - `res.status(200)`\n - `res.sendStatus(200)` sends the status code with the corresponding status message as text, it also ends the response.\n\n### 2. Headers\n`res.set`\n\nThere are two forms:\n\t1. One header - two args. `res.set(HEADER_KEY, HEADER_VALUE)`. Example: `res.set('Content-Type', 'text/plain')`\n\t2. Multiple headers - one object as argument. `res.set({key1: value1, key2: value2})`. Example:\n```js\nres.set({\n  'Content-Type': 'text/plain',\n  'Content-Length': '123',\n  ETag: '12345' // no hypen, so string notation not needed\n})\n```\n\nNote:\n- The HTTP spec requires headers to be sent first, and completely, before the body can be sent. See [Headers send first - ChatGPT converastion, PDF](/assets/gpt3-headers-first-even-if-chunked.pdf).\n- Just like with `node:http`, there's no way to send headers explicitly. There're sent (once, and before anything else) when a body (or portion) of it is sent.\n\n### 3. Body\n1. S*end* variables - `res.send()`. This is supposed to be the \"convenient\" default over `http.req.end` (which is still available if needed). It behaves in the usual way, i.e. ends the response. It accepts all *JSONable* data types `String`, `Boolean`, `Array`, `Object`. Accepts `Buffer` too.\n2. Send JSON - `res.json()`. Prefer this over `res.send` for JSON responses.\n3. S*end* a file (not download) - `sendFiles(\"absolute_file_path\")` or alternatively `sendFiles(\"relative_path\", {root: \"\"})`. Zip files will be automatically be downloaded in the browser, as they're not consumable directly. **Intended for small files only, since it doesn't use chunking**.\n4. Send a file (for download) - `res.download(...)`. Same as `res.sendFiles`, except sends proper headers and causes download on the browser.\n5. Send file efficiently - create a read stream, pipe it through to `res`, just like with vanilla `http` module.\n\t```js\n\tconst fs = require('node:fs');\n\tconst path = require('node:path');\n\n\tapp.get('/some-path', (req, res, next) => {\n\t\n\t  const fileStream = fs.createReadStream(path.join('/path-of-file'));\n\t  res.statusCode = 200;\n\t  fileStream.pipe(res);\n\n\t  // that's it !!\n\t})\n\t```\n\nNote: \n- There's auto content-type inference, for variables and files both. It's binary level for files (so wrong extension is also handled properly). [Code](https://github.com/exemplar-codes/express-app-academind/commit/60e88a6d4bf1524c789749811c72076b0fae48da)\n- `res.write()` (inherited from `node:http`) is still available, for sending data without ending the connection. Just [remember](https://stackoverflow.com/a/34187352/11392807) the `\"no-sniff\"` header value.\n- If using `res.write()`, don't use `res.send()` or `res.json()` etc. Either send body using `node:http` methods or Express methods, but not both, otherwise it leads to errors. FIXME: why does this happen?\n\n### 4. Convenience functions\n1. Redirect - `res.redirect([statusCode=302], \"/my_absolute_or_relative_location\")`.\n2. Set the content-type header - `res.type(\"content_type_value\")`. Partial arguments are fine - i.e. if \"/\" is absent in the argument, for example \"html\", it'll set the type correctly (i.e. \"text/html\"), else will set it to same as passed argument.\n\n\n## Examples and nuances\n1. Types of responses (content types):\n\t1. [Text](https://github.com/exemplar-codes/express-app-academind/commit/384f76a1ee9c2aac45cee6a35d27732f2e7ed477) - `res.send(\"my_string_here\")`. Sent as `\"Content-Type: text/plain\"`.\n\t2. [JSON](https://github.com/exemplar-codes/express-app-academind/commit/62d86f57f68134d39b1883bbf0e6fe7b3b9f2c26) - `res.send(myJSONObject)`. Sent as `\"Content-Type: application/json\"`. Object should be JSON serializable.\n\t3. [HTML](https://github.com/exemplar-codes/express-app-academind/commit/63559a1ddc7f97c224512df5e57342d73f145fda) - `res.send(\"my_HTML_here\")`. Sent as `\"Content-Type: text/html\"`.\n\t4. Image, audio - `res.sendFile(\"./path_to_file\", { root: __dirname})`. Will be sent as proper `\"Content-Type\"`. [Code example](https://github.com/exemplar-codes/express-app-academind/commit/9c2c6b1279b031b2af273491258e5532ab8c6f09)\n\t5. [ZIP file](https://github.com/exemplar-codes/express-app-academind/commit/17cc84628b179cc68d3f40adbb85ef0d39ec0577) - `res.sendFile(\"./path_to_file\", { root: __dirname})`\n2. Middlewares can be run (i.e. `next()` works) even after ending the response. Don't if this is a bad practice or a deliberate thing for stateful servers. FIXME.\n3. In Express, only `res` functions are **chainable**. This chaining doesn't work with `http.res.` functions, use individual statements with them.\n```js\n(req, res, next) => {\n\tres.status(200).send(\"All OK\");\n\n\t// also fine, BTW\n\tres.status(200);\n\tres.send(\"All OK\");\n\n\t// error - `node:http` method are not chainable\n\tres.writeHead(200).end(\"All OK\");\n}\n```\n4. Avoid double response ends, as it's an error. To check if response has been handled by some other middleware, check `res.headersSent` at the start of the current middleware. If it's `true`, don't respond (this will result in an error). If it's `false`, you're free to respond. <details><summary>How does this work</summary>HTTP spec requires headers to be sent completely before any part of the body is sent. In `express` (or even `node:http`), there's no way to explicitly send headers, i.e. headers are sent only if body is sent (partially or fully) and/or on response end. So, if headers have been sent, you can be sure a response was made, even if partial.</details>\n\n\n## Doubts\n1. Sending some data with redirect - not possible/encouraged since redirect is a complete action itself, it cannot be paired with a data response. Technically, redirect does send an automatic response - the HTML of the new location. If I still want to send some data, I can add a temporary query string in the redirect location. See [StackOverflow](https://stackoverflow.com/a/62297733/11392807).",
      "html": "<h1 id=\"62.-responses\">62. Responses <a class=\"heading-anchor-permalink\" href=\"#62.-responses\">#</a></h1>\n<p>Created Thursday 23 February 2023 at 12:27 am</p>\n<p><a href=\"https://github.com/exemplar-codes/express-app-academind/blob/main/responses.js\">Code - demo and experiments</a></p>\n<h1 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h1>\n<p>obvs</p>\n<h2 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h2>\n<pre><code class=\"language-js\">const express = require(&quot;express&quot;);\n\nconst app = express();\n\napp.use((req, res) =&gt; {\n  res.send(&quot;Hello, world&quot;); // sent as &quot;text/plain&quot;\n});\n\napp.listen(3000, () =&gt; console.log(&quot;Server running on port 3000&quot;));\n</code></pre>\n<h3 id=\"1.-status\">1. Status <a class=\"heading-anchor-permalink\" href=\"#1.-status\">#</a></h3>\n<ul>\n<li><code>res.status(200)</code></li>\n<li><code>res.sendStatus(200)</code> sends the status code with the corresponding status message as text, it also ends the response.</li>\n</ul>\n<h3 id=\"2.-headers\">2. Headers <a class=\"heading-anchor-permalink\" href=\"#2.-headers\">#</a></h3>\n<p><code>res.set</code></p>\n<p>There are two forms:\n1. One header - two args. <code>res.set(HEADER_KEY, HEADER_VALUE)</code>. Example: <code>res.set('Content-Type', 'text/plain')</code>\n2. Multiple headers - one object as argument. <code>res.set({key1: value1, key2: value2})</code>. Example:</p>\n<pre><code class=\"language-js\">res.set({\n  'Content-Type': 'text/plain',\n  'Content-Length': '123',\n  ETag: '12345' // no hypen, so string notation not needed\n})\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>The HTTP spec requires headers to be sent first, and completely, before the body can be sent. See <a href=\"/assets/gpt3-headers-first-even-if-chunked.pdf\">Headers send first - ChatGPT converastion, PDF</a>.</li>\n<li>Just like with <code>node:http</code>, there’s no way to send headers explicitly. There’re sent (once, and before anything else) when a body (or portion) of it is sent.</li>\n</ul>\n<h3 id=\"3.-body\">3. Body <a class=\"heading-anchor-permalink\" href=\"#3.-body\">#</a></h3>\n<ol>\n<li>S<em>end</em> variables - <code>res.send()</code>. This is supposed to be the “convenient” default over <code>http.req.end</code> (which is still available if needed). It behaves in the usual way, i.e. ends the response. It accepts all <em>JSONable</em> data types <code>String</code>, <code>Boolean</code>, <code>Array</code>, <code>Object</code>. Accepts <code>Buffer</code> too.</li>\n<li>Send JSON - <code>res.json()</code>. Prefer this over <code>res.send</code> for JSON responses.</li>\n<li>S<em>end</em> a file (not download) - <code>sendFiles(&quot;absolute_file_path&quot;)</code> or alternatively <code>sendFiles(&quot;relative_path&quot;, {root: &quot;&quot;})</code>. Zip files will be automatically be downloaded in the browser, as they’re not consumable directly. <strong>Intended for small files only, since it doesn’t use chunking</strong>.</li>\n<li>Send a file (for download) - <code>res.download(...)</code>. Same as <code>res.sendFiles</code>, except sends proper headers and causes download on the browser.</li>\n<li>Send file efficiently - create a read stream, pipe it through to <code>res</code>, just like with vanilla <code>http</code> module.<pre><code class=\"language-js\">const fs = require('node:fs');\nconst path = require('node:path');\n\napp.get('/some-path', (req, res, next) =&gt; {\n\n  const fileStream = fs.createReadStream(path.join('/path-of-file'));\n  res.statusCode = 200;\n  fileStream.pipe(res);\n\n  // that's it !!\n})\n</code></pre>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>There’s auto content-type inference, for variables and files both. It’s binary level for files (so wrong extension is also handled properly). <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/60e88a6d4bf1524c789749811c72076b0fae48da\">Code</a></li>\n<li><code>res.write()</code> (inherited from <code>node:http</code>) is still available, for sending data without ending the connection. Just <a href=\"https://stackoverflow.com/a/34187352/11392807\">remember</a> the <code>&quot;no-sniff&quot;</code> header value.</li>\n<li>If using <code>res.write()</code>, don’t use <code>res.send()</code> or <code>res.json()</code> etc. Either send body using <code>node:http</code> methods or Express methods, but not both, otherwise it leads to errors. FIXME: why does this happen?</li>\n</ul>\n<h3 id=\"4.-convenience-functions\">4. Convenience functions <a class=\"heading-anchor-permalink\" href=\"#4.-convenience-functions\">#</a></h3>\n<ol>\n<li>Redirect - <code>res.redirect([statusCode=302], &quot;/my_absolute_or_relative_location&quot;)</code>.</li>\n<li>Set the content-type header - <code>res.type(&quot;content_type_value&quot;)</code>. Partial arguments are fine - i.e. if “/” is absent in the argument, for example “html”, it’ll set the type correctly (i.e. “text/html”), else will set it to same as passed argument.</li>\n</ol>\n<h2 id=\"examples-and-nuances\">Examples and nuances <a class=\"heading-anchor-permalink\" href=\"#examples-and-nuances\">#</a></h2>\n<ol>\n<li>Types of responses (content types):\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/384f76a1ee9c2aac45cee6a35d27732f2e7ed477\">Text</a> - <code>res.send(&quot;my_string_here&quot;)</code>. Sent as <code>&quot;Content-Type: text/plain&quot;</code>.</li>\n<li><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/62d86f57f68134d39b1883bbf0e6fe7b3b9f2c26\">JSON</a> - <code>res.send(myJSONObject)</code>. Sent as <code>&quot;Content-Type: application/json&quot;</code>. Object should be JSON serializable.</li>\n<li><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/63559a1ddc7f97c224512df5e57342d73f145fda\">HTML</a> - <code>res.send(&quot;my_HTML_here&quot;)</code>. Sent as <code>&quot;Content-Type: text/html&quot;</code>.</li>\n<li>Image, audio - <code>res.sendFile(&quot;./path_to_file&quot;, { root: __dirname})</code>. Will be sent as proper <code>&quot;Content-Type&quot;</code>. <a href=\"https://github.com/exemplar-codes/express-app-academind/commit/9c2c6b1279b031b2af273491258e5532ab8c6f09\">Code example</a></li>\n<li><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/17cc84628b179cc68d3f40adbb85ef0d39ec0577\">ZIP file</a> - <code>res.sendFile(&quot;./path_to_file&quot;, { root: __dirname})</code></li>\n</ol>\n</li>\n<li>Middlewares can be run (i.e. <code>next()</code> works) even after ending the response. Don’t if this is a bad practice or a deliberate thing for stateful servers. FIXME.</li>\n<li>In Express, only <code>res</code> functions are <strong>chainable</strong>. This chaining doesn’t work with <code>http.res.</code> functions, use individual statements with them.</li>\n</ol>\n<pre><code class=\"language-js\">(req, res, next) =&gt; {\n\tres.status(200).send(&quot;All OK&quot;);\n\n\t// also fine, BTW\n\tres.status(200);\n\tres.send(&quot;All OK&quot;);\n\n\t// error - `node:http` method are not chainable\n\tres.writeHead(200).end(&quot;All OK&quot;);\n}\n</code></pre>\n<ol start=\"4\">\n<li>Avoid double response ends, as it’s an error. To check if response has been handled by some other middleware, check <code>res.headersSent</code> at the start of the current middleware. If it’s <code>true</code>, don’t respond (this will result in an error). If it’s <code>false</code>, you’re free to respond. <details><summary>How does this work</summary>HTTP spec requires headers to be sent completely before any part of the body is sent. In <code>express</code> (or even <code>node:http</code>), there’s no way to explicitly send headers, i.e. headers are sent only if body is sent (partially or fully) and/or on response end. So, if headers have been sent, you can be sure a response was made, even if partial.</details></li>\n</ol>\n<h2 id=\"doubts\">Doubts <a class=\"heading-anchor-permalink\" href=\"#doubts\">#</a></h2>\n<ol>\n<li>Sending some data with redirect - not possible/encouraged since redirect is a complete action itself, it cannot be paired with a data response. Technically, redirect does send an automatic response - the HTML of the new location. If I still want to send some data, I can add a temporary query string in the redirect location. See <a href=\"https://stackoverflow.com/a/62297733/11392807\">StackOverflow</a>.</li>\n</ol>\n",
      "id": 211
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/67_Requests.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/67_Requests.html",
      "content": "---\ntags:\n  - form\n  - payload\n  - bodyParser\n  - ip-address\n---\n# 67. Requests\nCreated Wednesday 22 February 2023 at 11:01 pm\n\n[Code - demo and experiments](https://github.com/exemplar-codes/express-app-academind/commit/b28b5db7ae4e71a73524d82c1803d0d892718a96)\n\n## Situation\nIn `node:http`, the request data is available as a stream that can be piped, listened to. This is not very helpful since most app servers typically deal with small and almost scalar data (i.e. objects of a fixed and low size).\n\nExpress provides some constructs to deal with these \"scalar\" values easily. Of course, very granular control is still possible since Express mostly uses (and exposes the API of) `http` under the hood.\n\n## 1. Method\n`req.method` - a string\n\n## 2. Path\n- `req.originalUrl` - original request URL. Stays the same in routers too.\n- `req.baseUrl` - URL for routers, middlewares i.e. value after prefix trimming has been applied.\n- `req.url` - inherited from `node:http` module. Can be edited for internal routing. Not used very often.\n\n### 2.1 Query string params (i.e. ?q=)\n- `req.query` - an object constructed from query string, with query string keys as keys.\n- Supports complex query strings too - duplicate keys, arrays, nested objects (atleast since Node v16).\n\t- Duplicate keys are are made into arrays. `?name=Sanjar&name=Nemo` will become `name: ['Sanjar', 'Nemo']`.\n\t- Both direct and explicit array notations are supported, i.e. `?name=Sanjar&name=Nemo` and `?name[]=Sanjar&name[]=Nemo` are equivalent.\n\nNote: For convenience functions, use `qs`, a 3rd party module.\n\n### 2.2 Path params (i.e. `/:name`)\n`req.params` - object containing path params. Default value is `{}`.\n\nExample: definition `user/:name` with instance `/user/23` will result in `{name: \"23\"}`.\n\nNote: \n- supports regex and capture groups, if they're used for param definition.\n- Is available in routers too.\n\n## 3. Headers\n- `req.get(headerKey)` - returns header value.\n- `req.headers` property - object containing all headers.\n- `req.is(contentTypeValue)` returns argument (`string`) as is if match, else returns `false`. Returns `null` if there's no body. Example - `req.is(\"application/json\")`, `req.is(\"urlencoded\")`. Accepts partial input too.\n- `req.accepts(acceptHeaderValue)` returns bool. Example - `req.accepts(\"application/json\")`. Accepts partial input too.\n\nNote:\n- `req.header()` is an alias of `req.get()`\n- `req.get()` is case insensitive.\n- The `Referrer` and `Referer` header fields are treated as the same.\n\n## 4. Body\n- `req.body` property - request's body. Is `undefined` by default. Some interpretation is needed before use.\n- The interpretation is usually done by built-in middlewares. Common ones:\n\t- `express.text()` - text\n\t- `express.json()` - JSON\n\t- `express.raw()` - raw binary data\n\t- `express.urlencoded` - for form data. Query strings don't need this, they're `urlencoded` by default. <details><summary>FIXME</summary>`extended` is for query params, but `urlencoded` is not needed anymore, why is there still a a warning if this is omitted - `express.urlencoded({ extended: false })`. Should I keep it as false, since it's not needed anymore.</details>\n- `req.body` is a readable stream and is pipable, whenever this is applicable.\n\t```js\n\tapp.use(express.json());\n\t\n\tapp.post('/', (req, res, next) => {\n\t\treq.body; // is an object\n\t});\n\t```\n\n## 5. HTTP version\n- `req.httpVersion` - a string. Example `\"1.1\"`. Is mostly enough.\n- `req.httpVersionMajor` - a number. Example - `1` for `\"1.1\"`\n- `req.httpVersionMinor` - a number. Example - `2` for `\"1.2\"`\n\n\n## Convenience properties and functions\n1. `res.locals` - this object is intended to **store data/code for upcoming middlewares**. To use it, just add attributes with the data/code. It's guaranteed to be safe from changes by Express, and is also available at all middlewares (top level ones as well as routers).\n\t- It's an empty object, so attributes can be attached directly using dot notation. memory aid: don't mutate `req` (request object), let it be clean.\n\t- For storing user info (token or the whole object), the `req.user` property is more popular in the Node.js community. It too, is guaranteed to remain unchanged and be available at all middlewares.\n\t\t- In general, `res.locals` is the construct to be used for middleware communication (for a given request). `req.user` is more popular than `res.locals.user`, but any of them could be used.\n\t\t- In general, it's best not to add custom attributes to the `req` object directly.\n1. `req.is(contentTypeValue)`- Get `\"Content-Type\"` of the request.\n\t- Argument - `String`. Accepts partial arguments too, `req.is(\"json\")` will return `\"application/json\"`.\n\t- Returns a `String`. Returns false if type is absent. Returns `null` if there's no body.\n2. `req.cookies` property - cookies as an object\n3. `req.route` returns skeleton of the path as is. Useful is path params are used.\n4. `req.secure` - returns a boolean if HTTPS is being used.\n\n## Extras\n1. `req.ip` - IP address of the request client. Assumes trust proxy setting is not false.\n2. `req.subdomain` - array of subdomains (in ancestor order, of course). Note - default offset is 2, i.e. ignores the last two. Example - `\"tobi.ferrets.example.com\"` will result in `['ferrets', 'tobi']`\n3. `req.xhr` property - boolean. `true` if request made using `XMLHttpRequest` or `fetch`. **Not useful**, unless the `X-Requested-With` header has a value of `XMLHttpRequest`.",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>form</li>\n<li>payload</li>\n<li>bodyParser</li>\n<li>ip-address</li>\n</ul>\n<hr>\n<h1 id=\"67.-requests\">67. Requests <a class=\"heading-anchor-permalink\" href=\"#67.-requests\">#</a></h1>\n<p>Created Wednesday 22 February 2023 at 11:01 pm</p>\n<p><a href=\"https://github.com/exemplar-codes/express-app-academind/commit/b28b5db7ae4e71a73524d82c1803d0d892718a96\">Code - demo and experiments</a></p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>In <code>node:http</code>, the request data is available as a stream that can be piped, listened to. This is not very helpful since most app servers typically deal with small and almost scalar data (i.e. objects of a fixed and low size).</p>\n<p>Express provides some constructs to deal with these “scalar” values easily. Of course, very granular control is still possible since Express mostly uses (and exposes the API of) <code>http</code> under the hood.</p>\n<h2 id=\"1.-method\">1. Method <a class=\"heading-anchor-permalink\" href=\"#1.-method\">#</a></h2>\n<p><code>req.method</code> - a string</p>\n<h2 id=\"2.-path\">2. Path <a class=\"heading-anchor-permalink\" href=\"#2.-path\">#</a></h2>\n<ul>\n<li><code>req.originalUrl</code> - original request URL. Stays the same in routers too.</li>\n<li><code>req.baseUrl</code> - URL for routers, middlewares i.e. value after prefix trimming has been applied.</li>\n<li><code>req.url</code> - inherited from <code>node:http</code> module. Can be edited for internal routing. Not used very often.</li>\n</ul>\n<h3 id=\"2.1-query-string-params-(i.e.-%3Fq%3D)\">2.1 Query string params (i.e. ?q=) <a class=\"heading-anchor-permalink\" href=\"#2.1-query-string-params-(i.e.-%3Fq%3D)\">#</a></h3>\n<ul>\n<li><code>req.query</code> - an object constructed from query string, with query string keys as keys.</li>\n<li>Supports complex query strings too - duplicate keys, arrays, nested objects (atleast since Node v16).\n<ul>\n<li>Duplicate keys are are made into arrays. <code>?name=Sanjar&amp;name=Nemo</code> will become <code>name: ['Sanjar', 'Nemo']</code>.</li>\n<li>Both direct and explicit array notations are supported, i.e. <code>?name=Sanjar&amp;name=Nemo</code> and <code>?name[]=Sanjar&amp;name[]=Nemo</code> are equivalent.</li>\n</ul>\n</li>\n</ul>\n<p>Note: For convenience functions, use <code>qs</code>, a 3rd party module.</p>\n<h3 id=\"2.2-path-params-(i.e.-%2F%3Aname)\">2.2 Path params (i.e. <code>/:name</code>) <a class=\"heading-anchor-permalink\" href=\"#2.2-path-params-(i.e.-%2F%3Aname)\">#</a></h3>\n<p><code>req.params</code> - object containing path params. Default value is <code>{}</code>.</p>\n<p>Example: definition <code>user/:name</code> with instance <code>/user/23</code> will result in <code>{name: &quot;23&quot;}</code>.</p>\n<p>Note:</p>\n<ul>\n<li>supports regex and capture groups, if they’re used for param definition.</li>\n<li>Is available in routers too.</li>\n</ul>\n<h2 id=\"3.-headers\">3. Headers <a class=\"heading-anchor-permalink\" href=\"#3.-headers\">#</a></h2>\n<ul>\n<li><code>req.get(headerKey)</code> - returns header value.</li>\n<li><code>req.headers</code> property - object containing all headers.</li>\n<li><code>req.is(contentTypeValue)</code> returns argument (<code>string</code>) as is if match, else returns <code>false</code>. Returns <code>null</code> if there’s no body. Example - <code>req.is(&quot;application/json&quot;)</code>, <code>req.is(&quot;urlencoded&quot;)</code>. Accepts partial input too.</li>\n<li><code>req.accepts(acceptHeaderValue)</code> returns bool. Example - <code>req.accepts(&quot;application/json&quot;)</code>. Accepts partial input too.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li><code>req.header()</code> is an alias of <code>req.get()</code></li>\n<li><code>req.get()</code> is case insensitive.</li>\n<li>The <code>Referrer</code> and <code>Referer</code> header fields are treated as the same.</li>\n</ul>\n<h2 id=\"4.-body\">4. Body <a class=\"heading-anchor-permalink\" href=\"#4.-body\">#</a></h2>\n<ul>\n<li><code>req.body</code> property - request’s body. Is <code>undefined</code> by default. Some interpretation is needed before use.</li>\n<li>The interpretation is usually done by built-in middlewares. Common ones:\n<ul>\n<li><code>express.text()</code> - text</li>\n<li><code>express.json()</code> - JSON</li>\n<li><code>express.raw()</code> - raw binary data</li>\n<li><code>express.urlencoded</code> - for form data. Query strings don’t need this, they’re <code>urlencoded</code> by default. <details><summary>FIXME</summary><code>extended</code> is for query params, but <code>urlencoded</code> is not needed anymore, why is there still a a warning if this is omitted - <code>express.urlencoded({ extended: false })</code>. Should I keep it as false, since it’s not needed anymore.</details></li>\n</ul>\n</li>\n<li><code>req.body</code> is a readable stream and is pipable, whenever this is applicable.<pre><code class=\"language-js\">app.use(express.json());\n\napp.post('/', (req, res, next) =&gt; {\n\treq.body; // is an object\n});\n</code></pre>\n</li>\n</ul>\n<h2 id=\"5.-http-version\">5. HTTP version <a class=\"heading-anchor-permalink\" href=\"#5.-http-version\">#</a></h2>\n<ul>\n<li><code>req.httpVersion</code> - a string. Example <code>&quot;1.1&quot;</code>. Is mostly enough.</li>\n<li><code>req.httpVersionMajor</code> - a number. Example - <code>1</code> for <code>&quot;1.1&quot;</code></li>\n<li><code>req.httpVersionMinor</code> - a number. Example - <code>2</code> for <code>&quot;1.2&quot;</code></li>\n</ul>\n<h2 id=\"convenience-properties-and-functions\">Convenience properties and functions <a class=\"heading-anchor-permalink\" href=\"#convenience-properties-and-functions\">#</a></h2>\n<ol>\n<li><code>res.locals</code> - this object is intended to <strong>store data/code for upcoming middlewares</strong>. To use it, just add attributes with the data/code. It’s guaranteed to be safe from changes by Express, and is also available at all middlewares (top level ones as well as routers).\n<ul>\n<li>It’s an empty object, so attributes can be attached directly using dot notation. memory aid: don’t mutate <code>req</code> (request object), let it be clean.</li>\n<li>For storing user info (token or the whole object), the <code>req.user</code> property is more popular in the Node.js community. It too, is guaranteed to remain unchanged and be available at all middlewares.\n<ul>\n<li>In general, <code>res.locals</code> is the construct to be used for middleware communication (for a given request). <code>req.user</code> is more popular than <code>res.locals.user</code>, but any of them could be used.</li>\n<li>In general, it’s best not to add custom attributes to the <code>req</code> object directly.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>req.is(contentTypeValue)</code>- Get <code>&quot;Content-Type&quot;</code> of the request.\n<ul>\n<li>Argument - <code>String</code>. Accepts partial arguments too, <code>req.is(&quot;json&quot;)</code> will return <code>&quot;application/json&quot;</code>.</li>\n<li>Returns a <code>String</code>. Returns false if type is absent. Returns <code>null</code> if there’s no body.</li>\n</ul>\n</li>\n<li><code>req.cookies</code> property - cookies as an object</li>\n<li><code>req.route</code> returns skeleton of the path as is. Useful is path params are used.</li>\n<li><code>req.secure</code> - returns a boolean if HTTPS is being used.</li>\n</ol>\n<h2 id=\"extras\">Extras <a class=\"heading-anchor-permalink\" href=\"#extras\">#</a></h2>\n<ol>\n<li><code>req.ip</code> - IP address of the request client. Assumes trust proxy setting is not false.</li>\n<li><code>req.subdomain</code> - array of subdomains (in ancestor order, of course). Note - default offset is 2, i.e. ignores the last two. Example - <code>&quot;tobi.ferrets.example.com&quot;</code> will result in <code>['ferrets', 'tobi']</code></li>\n<li><code>req.xhr</code> property - boolean. <code>true</code> if request made using <code>XMLHttpRequest</code> or <code>fetch</code>. <strong>Not useful</strong>, unless the <code>X-Requested-With</code> header has a value of <code>XMLHttpRequest</code>.</li>\n</ol>\n",
      "id": 212
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/todo.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/5_Express_js/todo.html",
      "content": "",
      "html": "",
      "id": 213
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/69_Creating_HTML_pages.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/69_Creating_HTML_pages.html",
      "content": "# 69. Creating HTML pages\nCreated Tuesday 28 February 2023 at 11:02 am\n\nUntil now's we've been sending HTML as a string. That's not at all scalable. In this section, we'll send client side HTML, CSS and JS.\n\n---\nIt is common for apps to have a fixed number of page skeletons. These are called \"views\" and stored in a folder named so. A view can either be completely static or contain some parts that may be replaced by relevant data (i.e. server side rendering).\n\n---\n[Code - basic routes, HTML files](https://github.com/exemplar-codes/traditional-web-app-express/commit/832b70455ac0e57e18c38f0a32dd69d04a6f1df3)\n\n## Sending HTML files\n`res.sendFile()`, enough.\n\n## Specifying file path\n`sendFile`, by default takes a single argument - absolute path of file. Doing this however is not realistic, using relative paths is easier.\n\n`sendFile` also accepts a relative path, but the prefix (i.e. `.` or `..`) *needs* to be specified too. Here's the syntax:\n```js\nsendFile(\"/home/sanjar/Desktop/shop.html\"); // OK, since absolute path\n\nsendFile(\"./shop.html\"); // error!\n\nsendFile(\"./shop.html\", { root: \"/home/sanjar/Desktop\" }); // OK. Practical to use.\n```\n\n### Practically specifying file paths (simple but wordy, saved for posterity)\n#### Problem\n- The simplest (and best) to specify paths is to start from the project's root, since all files are available from it, and people know where files lie w.r.t it.\n- `__dirname` is a reliable way to know absolute paths.\n- Problem with `__dirname` is that it refers to the file being executed, and not where it was run from. This is good because we can run our app from anywhere in the system (don't have to navigate to the directory and run), but it's also a little problematic since it's value is different for each file.\n\n\n#### Solution approach\n- A simple way to solve all these issues is to store value of `__dirname` of a top-level file JavaScript file, somewhere somehow.\n- Use core module function `node:path.join()` to construct the absolute path of a file before passing it to `sendFile()`.\n```js\nconst myEasyRootPath = ;// stored path\n\nconst path = require(\"node:path\");\nsendFile(path.join(myEasyRootPath, \"views\", \"shop.html\"));\n```\nNote: Note: it's not neccessary to use top-level, any level from where it's easy (based on knowledge of the codebase) to construct paths to files.\n\n\n### Solution (any Node project)\n```js\n// my-project/utils/path.js\nconst path = require(\"node:path\");\nmodule.exports = path.join(__dirname, \"..\");\n```\n\n```js\n// my-project/../../..../some-app-file.js\nconst rootPath = require(\"../../util/path.js\");\n```\nNote: \n- Not very helpful since we are having to write a path to get the rootPath. But works reliably. FIXME.\n- FIXME: add root path to the globally available `process` variable. Experiment later.\n\n\n#### Solution in Express\n- Express projects usually have a top-level file where the server first runs. This top server file is usually at the root itself, or atleast at a place higher than all sendable files. Simply store the `__dirname` in the \"app settings\", using `app.set('easy-root-path', __dirname)`.\n- Where to store root path - in top-level app's 'settings'. And since the root \"app\" is available  to every middleware, including routers (nested or not), we can read the value:\n\t- At the top-file itself - `app.get('easy-root-path')`\n\t- At a place below top-file - `req.app.get('easy-root-path')`. This is because `req.app` (or `res.app`) available in all middlewares and point to the root Express \"app\".\n\n```js\n// top level file, index.js, app.js OR src/app.js\nconst express = require(\"express\");\nconst app = express();\n\nconst shopRouter = require(\"some-path-to-shop-router\");\napp.set('my-easy-root-path', __dirname); // key name important\n\napp.use(\"some-shop-uri-here\", shopRouter);\n\n...more code here\n```\n\n```js\n// nested router, middleware etc - shop.js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst path = require(\"node:path\");\n\nrouter.get(\"my-uri\", (req, res, next) => {\n\tconst fileToSendPath = path.join(req.app.get('my-easy-root-path'), \"views\", \"shop.html\");\n\n\tres.sendFile(fileToSendPath);\n\n\t// or equivalently, a little verbose though\n\tres.sendFile(path.join(\"views\", \"shop.html\"), { root: req.app.get('my-easy-root-path') });\n});\n\n... more code here\n```\nNote: don't export root path from a server file, or any file containing app code since it can result in circular-dependency errors. Exporting root path from a utility file is fine, though.\n\n[Code - file paths in Express app](https://github.com/exemplar-codes/traditional-web-app-express/commit/a448f3db4fe924b61ad5b4f1db03ff60442d9c90)",
      "html": "<h1 id=\"69.-creating-html-pages\">69. Creating HTML pages <a class=\"heading-anchor-permalink\" href=\"#69.-creating-html-pages\">#</a></h1>\n<p>Created Tuesday 28 February 2023 at 11:02 am</p>\n<p>Until now’s we’ve been sending HTML as a string. That’s not at all scalable. In this section, we’ll send client side HTML, CSS and JS.</p>\n<hr>\n<p>It is common for apps to have a fixed number of page skeletons. These are called “views” and stored in a folder named so. A view can either be completely static or contain some parts that may be replaced by relevant data (i.e. server side rendering).</p>\n<hr>\n<p><a href=\"https://github.com/exemplar-codes/traditional-web-app-express/commit/832b70455ac0e57e18c38f0a32dd69d04a6f1df3\">Code - basic routes, HTML files</a></p>\n<h2 id=\"sending-html-files\">Sending HTML files <a class=\"heading-anchor-permalink\" href=\"#sending-html-files\">#</a></h2>\n<p><code>res.sendFile()</code>, enough.</p>\n<h2 id=\"specifying-file-path\">Specifying file path <a class=\"heading-anchor-permalink\" href=\"#specifying-file-path\">#</a></h2>\n<p><code>sendFile</code>, by default takes a single argument - absolute path of file. Doing this however is not realistic, using relative paths is easier.</p>\n<p><code>sendFile</code> also accepts a relative path, but the prefix (i.e. <code>.</code> or <code>..</code>) <em>needs</em> to be specified too. Here’s the syntax:</p>\n<pre><code class=\"language-js\">sendFile(&quot;/home/sanjar/Desktop/shop.html&quot;); // OK, since absolute path\n\nsendFile(&quot;./shop.html&quot;); // error!\n\nsendFile(&quot;./shop.html&quot;, { root: &quot;/home/sanjar/Desktop&quot; }); // OK. Practical to use.\n</code></pre>\n<h3 id=\"practically-specifying-file-paths-(simple-but-wordy%2C-saved-for-posterity)\">Practically specifying file paths (simple but wordy, saved for posterity) <a class=\"heading-anchor-permalink\" href=\"#practically-specifying-file-paths-(simple-but-wordy%2C-saved-for-posterity)\">#</a></h3>\n<h4 id=\"problem\">Problem <a class=\"heading-anchor-permalink\" href=\"#problem\">#</a></h4>\n<ul>\n<li>The simplest (and best) to specify paths is to start from the project’s root, since all files are available from it, and people know where files lie w.r.t it.</li>\n<li><code>__dirname</code> is a reliable way to know absolute paths.</li>\n<li>Problem with <code>__dirname</code> is that it refers to the file being executed, and not where it was run from. This is good because we can run our app from anywhere in the system (don’t have to navigate to the directory and run), but it’s also a little problematic since it’s value is different for each file.</li>\n</ul>\n<h4 id=\"solution-approach\">Solution approach <a class=\"heading-anchor-permalink\" href=\"#solution-approach\">#</a></h4>\n<ul>\n<li>A simple way to solve all these issues is to store value of <code>__dirname</code> of a top-level file JavaScript file, somewhere somehow.</li>\n<li>Use core module function <code>node:path.join()</code> to construct the absolute path of a file before passing it to <code>sendFile()</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const myEasyRootPath = ;// stored path\n\nconst path = require(&quot;node:path&quot;);\nsendFile(path.join(myEasyRootPath, &quot;views&quot;, &quot;shop.html&quot;));\n</code></pre>\n<p>Note: Note: it’s not neccessary to use top-level, any level from where it’s easy (based on knowledge of the codebase) to construct paths to files.</p>\n<h3 id=\"solution-(any-node-project)\">Solution (any Node project) <a class=\"heading-anchor-permalink\" href=\"#solution-(any-node-project)\">#</a></h3>\n<pre><code class=\"language-js\">// my-project/utils/path.js\nconst path = require(&quot;node:path&quot;);\nmodule.exports = path.join(__dirname, &quot;..&quot;);\n</code></pre>\n<pre><code class=\"language-js\">// my-project/../../..../some-app-file.js\nconst rootPath = require(&quot;../../util/path.js&quot;);\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>Not very helpful since we are having to write a path to get the rootPath. But works reliably. FIXME.</li>\n<li>FIXME: add root path to the globally available <code>process</code> variable. Experiment later.</li>\n</ul>\n<h4 id=\"solution-in-express\">Solution in Express <a class=\"heading-anchor-permalink\" href=\"#solution-in-express\">#</a></h4>\n<ul>\n<li>Express projects usually have a top-level file where the server first runs. This top server file is usually at the root itself, or atleast at a place higher than all sendable files. Simply store the <code>__dirname</code> in the “app settings”, using <code>app.set('easy-root-path', __dirname)</code>.</li>\n<li>Where to store root path - in top-level app’s ‘settings’. And since the root “app” is available  to every middleware, including routers (nested or not), we can read the value:\n<ul>\n<li>At the top-file itself - <code>app.get('easy-root-path')</code></li>\n<li>At a place below top-file - <code>req.app.get('easy-root-path')</code>. This is because <code>req.app</code> (or <code>res.app</code>) available in all middlewares and point to the root Express “app”.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">// top level file, index.js, app.js OR src/app.js\nconst express = require(&quot;express&quot;);\nconst app = express();\n\nconst shopRouter = require(&quot;some-path-to-shop-router&quot;);\napp.set('my-easy-root-path', __dirname); // key name important\n\napp.use(&quot;some-shop-uri-here&quot;, shopRouter);\n\n...more code here\n</code></pre>\n<pre><code class=\"language-js\">// nested router, middleware etc - shop.js\nconst express = require(&quot;express&quot;);\nconst router = express.Router();\n\nconst path = require(&quot;node:path&quot;);\n\nrouter.get(&quot;my-uri&quot;, (req, res, next) =&gt; {\n\tconst fileToSendPath = path.join(req.app.get('my-easy-root-path'), &quot;views&quot;, &quot;shop.html&quot;);\n\n\tres.sendFile(fileToSendPath);\n\n\t// or equivalently, a little verbose though\n\tres.sendFile(path.join(&quot;views&quot;, &quot;shop.html&quot;), { root: req.app.get('my-easy-root-path') });\n});\n\n... more code here\n</code></pre>\n<p>Note: don’t export root path from a server file, or any file containing app code since it can result in circular-dependency errors. Exporting root path from a utility file is fine, though.</p>\n<p><a href=\"https://github.com/exemplar-codes/traditional-web-app-express/commit/a448f3db4fe924b61ad5b4f1db03ff60442d9c90\">Code - file paths in Express app</a></p>\n",
      "id": 214
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/70_Adding_404_page.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/70_Adding_404_page.html",
      "content": "# Adding 404 page\nCreated Wednesday 1 March 2023 at 10:56 pm\n\nUse `res.sendFile()` inside the last \"unfiltered\" middleware. This middleware runs only if none of the other middlewares match.\n\nNote: We can check `res.headersSent` to avoid double responses, but it's fine without it too, since `next()` is usually never called after response.",
      "html": "<h1 id=\"adding-404-page\">Adding 404 page <a class=\"heading-anchor-permalink\" href=\"#adding-404-page\">#</a></h1>\n<p>Created Wednesday 1 March 2023 at 10:56 pm</p>\n<p>Use <code>res.sendFile()</code> inside the last “unfiltered” middleware. This middleware runs only if none of the other middlewares match.</p>\n<p>Note: We can check <code>res.headersSent</code> to avoid double responses, but it’s fine without it too, since <code>next()</code> is usually never called after response.</p>\n",
      "id": 215
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/71_Serving_Files_Statically.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/71_Serving_Files_Statically.html",
      "content": "# 71. Serving Files Statically\nCreated Wednesday 1 March 2023 at 11:41 pm\n\n## Situation (ignorable)\nHTML files have assets - CSS, JS, images etc. After an HTML file is received loaded by the browser, GET calls for embedded assets are made automatically by the browser.\n\nBut since our Express.js app has no routes that handle this, nothing is sent back (404). This is bad. \n\nUI assets are *usually* publicly viewable files with no sensitive data. And since there can be a lot of them, including those generated by front-end app bundlers, it doesn't make sense to create route(s) to handle serving these files.\n\nFortunately, Express has a built-in middleware for such functionality.\n\n## How (to serve file statically)\nFor serving static files directly, i.e. URL ending with raw file, use the `express.static` middleware. \n\nSyntax - [`express.static('absolue_path_to_folder')`](https://expressjs.com/en/starter/static-files.html)\nMapping - `/main.css` will serve `my-project/public/main.css` file.\nExample:\n```js\nconst express = require('express');\nconst app = express();\n\nconst path = require('node:path');\n\napp.use(express.static(path.join(__dirname, \"public\")));\n// URL /main.css will serve my-project/public/main.css\n\n// usual app code...\n```\n\nNote:\n- This middleware only serves files inside (i.e. children and descendants) the specified folder, not outside the ones it.\n- Specify the proper URL for file embeds - use URLs that an external user would, not project file paths. Relative URLs (starting with `\"/\"`) are fine, of course.\n- Use `\"/\"` prefix in asset URLs, since it specifies actual \"root\" (from domain), and ignores nested paths that we are on. **This is important**.\n- Specifying file extension can be made optional, [see this](https://stackoverflow.com/questions/16534545/how-to-get-rid-of-html-extension-when-serving-webpages-with-node-js). Express will serve the first file found. Of course, specifying sub-folder (if any) is still neccessary. \n\t```js\n\t// /fries will serve fries.jpg if it's there\n\tapp.use(\n\t  express.static(path.join(rootPath, \"public\"), {\n\t    extensions: [\"html\", \"htm\", \"jpg\"],\n\t    index: false,\n\t  })\n\t);\n\n\t// NOTE: USE WITH CARE, since a page/API route may be overshadowed since static middleware usually comes before METHOD middlewares\n\t```\n\n[Code - serving files statically](https://github.com/exemplar-codes/traditional-web-app-express/commit/a70e538767d5a5fca63d723c305eca978725f001)\n\n\n## Dumb server using Express\nTo create a dumb server - that just sends files. \nThe `express.static` middleware along with a 404 handling middleware are enough.\n\n",
      "html": "<h1 id=\"71.-serving-files-statically\">71. Serving Files Statically <a class=\"heading-anchor-permalink\" href=\"#71.-serving-files-statically\">#</a></h1>\n<p>Created Wednesday 1 March 2023 at 11:41 pm</p>\n<h2 id=\"situation-(ignorable)\">Situation (ignorable) <a class=\"heading-anchor-permalink\" href=\"#situation-(ignorable)\">#</a></h2>\n<p>HTML files have assets - CSS, JS, images etc. After an HTML file is received loaded by the browser, GET calls for embedded assets are made automatically by the browser.</p>\n<p>But since our Express.js app has no routes that handle this, nothing is sent back (404). This is bad.</p>\n<p>UI assets are <em>usually</em> publicly viewable files with no sensitive data. And since there can be a lot of them, including those generated by front-end app bundlers, it doesn’t make sense to create route(s) to handle serving these files.</p>\n<p>Fortunately, Express has a built-in middleware for such functionality.</p>\n<h2 id=\"how-(to-serve-file-statically)\">How (to serve file statically) <a class=\"heading-anchor-permalink\" href=\"#how-(to-serve-file-statically)\">#</a></h2>\n<p>For serving static files directly, i.e. URL ending with raw file, use the <code>express.static</code> middleware.</p>\n<p>Syntax - <a href=\"https://expressjs.com/en/starter/static-files.html\"><code>express.static('absolue_path_to_folder')</code></a>\nMapping - <code>/main.css</code> will serve <code>my-project/public/main.css</code> file.\nExample:</p>\n<pre><code class=\"language-js\">const express = require('express');\nconst app = express();\n\nconst path = require('node:path');\n\napp.use(express.static(path.join(__dirname, &quot;public&quot;)));\n// URL /main.css will serve my-project/public/main.css\n\n// usual app code...\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>This middleware only serves files inside (i.e. children and descendants) the specified folder, not outside the ones it.</li>\n<li>Specify the proper URL for file embeds - use URLs that an external user would, not project file paths. Relative URLs (starting with <code>&quot;/&quot;</code>) are fine, of course.</li>\n<li>Use <code>&quot;/&quot;</code> prefix in asset URLs, since it specifies actual “root” (from domain), and ignores nested paths that we are on. <strong>This is important</strong>.</li>\n<li>Specifying file extension can be made optional, <a href=\"https://stackoverflow.com/questions/16534545/how-to-get-rid-of-html-extension-when-serving-webpages-with-node-js\">see this</a>. Express will serve the first file found. Of course, specifying sub-folder (if any) is still neccessary.<pre><code class=\"language-js\">// /fries will serve fries.jpg if it's there\napp.use(\n  express.static(path.join(rootPath, &quot;public&quot;), {\n    extensions: [&quot;html&quot;, &quot;htm&quot;, &quot;jpg&quot;],\n    index: false,\n  })\n);\n\n// NOTE: USE WITH CARE, since a page/API route may be overshadowed since static middleware usually comes before METHOD middlewares\n</code></pre>\n</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/traditional-web-app-express/commit/a70e538767d5a5fca63d723c305eca978725f001\">Code - serving files statically</a></p>\n<h2 id=\"dumb-server-using-express\">Dumb server using Express <a class=\"heading-anchor-permalink\" href=\"#dumb-server-using-express\">#</a></h2>\n<p>To create a dumb server - that just sends files.\nThe <code>express.static</code> middleware along with a 404 handling middleware are enough.</p>\n",
      "id": 216
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/75_Assignment_3.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/75_Assignment_3.html",
      "content": "# 75. Assignment 3\nCreated Thursday 2 March 2023 at 04:14 am\n\n### Solution\nhttps://github.com/unclassified-repos/academind-nodejs-assignment-2\n\n### Statement\n![](../../../../assets/75_Assignment_3-image-1-56c80579.png)\n",
      "html": "<h1 id=\"75.-assignment-3\">75. Assignment 3 <a class=\"heading-anchor-permalink\" href=\"#75.-assignment-3\">#</a></h1>\n<p>Created Thursday 2 March 2023 at 04:14 am</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<p><a href=\"https://github.com/unclassified-repos/academind-nodejs-assignment-2\">https://github.com/unclassified-repos/academind-nodejs-assignment-2</a></p>\n<h3 id=\"statement\">Statement <a class=\"heading-anchor-permalink\" href=\"#statement\">#</a></h3>\n<p><img src=\"../../../../assets/75_Assignment_3-image-1-56c80579.png\" alt=\"\"></p>\n",
      "id": 217
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/76_Section_5_wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_1_Sending_vanilla_HTML/76_Section_5_wrap_up.html",
      "content": "# 76. Section 5 wrap up\nCreated Saturday 4 March 2023 at 07:23 pm\n\nLearnt 4 things:\n1. Express - a convenient way to write server side code. Built on top of the `node:http` module, and inherits almost all fields (if it may be needed). It's minimalist, but still very useful.\n2. Middlewares - the primary construct in Express to run code. Middlewares execute (or skipped) linearly and in order. Special types of middlewares are available for handling requests based on method, route. **Also**, many built-in and 3rd party plugins are available for express.\n3. Routers/routing - split code for a route in a separate file. Is the de-facto construct for multi-file express code. Route filter can be turned off (by not specifying it).\n4. Serving files statically - the `express.static()` middleware can be used to create a static server in one-line.",
      "html": "<h1 id=\"76.-section-5-wrap-up\">76. Section 5 wrap up <a class=\"heading-anchor-permalink\" href=\"#76.-section-5-wrap-up\">#</a></h1>\n<p>Created Saturday 4 March 2023 at 07:23 pm</p>\n<p>Learnt 4 things:</p>\n<ol>\n<li>Express - a convenient way to write server side code. Built on top of the <code>node:http</code> module, and inherits almost all fields (if it may be needed). It’s minimalist, but still very useful.</li>\n<li>Middlewares - the primary construct in Express to run code. Middlewares execute (or skipped) linearly and in order. Special types of middlewares are available for handling requests based on method, route. <strong>Also</strong>, many built-in and 3rd party plugins are available for express.</li>\n<li>Routers/routing - split code for a route in a separate file. Is the de-facto construct for multi-file express code. Route filter can be turned off (by not specifying it).</li>\n<li>Serving files statically - the <code>express.static()</code> middleware can be used to create a static server in one-line.</li>\n</ol>\n",
      "id": 218
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/78_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/78_Module_introduction.html",
      "content": "# 78. Module Introduction\nCreated Sunday 5 March 2023 at 01:38 am\n\n## Situation\nCurrently, we are sending \"static\" HTML files and assets. This is not realistic since websites usually need to show different pages depending upon the user data.\n\nThis means that even if a page is similar in look and feel for different users (i.e. page has a common UI template), the data displayed on the page is different (based on user data).\n\n## A solution - template engine\nA template engine is a tool that helps the servers generate the pages to be sent dynamically. The template engine is essentially a function that takes 2 arguments - a template file (with keys) and user data (with corresponding keys) and spits out the HTML file. This file is sent as the response. This is also known as server side rendering.\n\n<details>\n  <summary>What I know (or think I now) about template engines</summary>\n  <ul>\n    <li>\n      Templates are usually written in a DSL. The DSL and the template engine\n      are mostly coupled and made by the same team.\n    </li>\n    <li>\n      Templates have *placeholder* constructs were data and also code in a\n      programming language may be written.\n    </li>\n    <li>\n      The placeholder should evaluate to a render-able type like strings,\n      number, characters.\n    </li>\n  </ul>\n</details>\n\n---\nIn this module, we'll be learning about:\n1. Managing dynamic content (without a database, for now)\n2. Using some templating engines - Pug, Handlebars and EJS\n   \n[Initial code - server app with static HTML and assets](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/591b2acf09cb6d83fd434e20bc367f65136e5463)\nWe'll build up and learn upon this.",
      "html": "<h1 id=\"78.-module-introduction\">78. Module Introduction <a class=\"heading-anchor-permalink\" href=\"#78.-module-introduction\">#</a></h1>\n<p>Created Sunday 5 March 2023 at 01:38 am</p>\n<h2 id=\"situation\">Situation <a class=\"heading-anchor-permalink\" href=\"#situation\">#</a></h2>\n<p>Currently, we are sending “static” HTML files and assets. This is not realistic since websites usually need to show different pages depending upon the user data.</p>\n<p>This means that even if a page is similar in look and feel for different users (i.e. page has a common UI template), the data displayed on the page is different (based on user data).</p>\n<h2 id=\"a-solution---template-engine\">A solution - template engine <a class=\"heading-anchor-permalink\" href=\"#a-solution---template-engine\">#</a></h2>\n<p>A template engine is a tool that helps the servers generate the pages to be sent dynamically. The template engine is essentially a function that takes 2 arguments - a template file (with keys) and user data (with corresponding keys) and spits out the HTML file. This file is sent as the response. This is also known as server side rendering.</p>\n<details>\n  <summary>What I know (or think I now) about template engines</summary>\n  <ul>\n    <li>\n      Templates are usually written in a DSL. The DSL and the template engine\n      are mostly coupled and made by the same team.\n    </li>\n    <li>\n      Templates have *placeholder* constructs were data and also code in a\n      programming language may be written.\n    </li>\n    <li>\n      The placeholder should evaluate to a render-able type like strings,\n      number, characters.\n    </li>\n  </ul>\n</details>\n<hr>\n<p>In this module, we’ll be learning about:</p>\n<ol>\n<li>Managing dynamic content (without a database, for now)</li>\n<li>Using some templating engines - Pug, Handlebars and EJS</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/591b2acf09cb6d83fd434e20bc367f65136e5463\">Initial code - server app with static HTML and assets</a>\nWe’ll build up and learn upon this.</p>\n",
      "id": 219
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/79_Sharing_Data_across_Requests_and_Users.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/79_Sharing_Data_across_Requests_and_Users.html",
      "content": "# 79. Sharing Data across Requests and Users\n\n[Initial code](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/591b2acf09cb6d83fd434e20bc367f65136e5463)\n\n## Storing data between requests, and users\nLet's store (ingest) data inside JavaScript variables themselves, i.e. data is available in RAM, until the server is stopped.\n\nThis \"temporary\" storage can easily be used by other routers, files, by exporting the storage variable, and since the storage variable (array or object) is a reference type, it's no duplicated/reset when imported/used by other parts of the server.\n\nSo, data is persisted across requests, assuming the server keeps running.\n   \nDoubt: we'll not get circular dependency issues here, since the exporting file is run once and cached, by default in Node.js.\n\n\n## This is not good (in general)\nThis kind of storage is:\n1. Not secure - atleast for our implementation here, since every user can read/write all data.\n2. Very unreliable - servers auto-restart if an error occurs, code is updated, power goes out etc\n3. Very inefficient - RAM is for immediate working memory\n4. Difficult to manage, track\n\nThis is very unrealistic so will almost never be used in a backend app.\n\nNote: we can and will share data across requests, but not across users, in this module. This would still be unrealistic for a backend app, however.\n\n## But, good enough for learning\nBut, for this module, we'll use this method to explore use of templating engines, without the overhead of database code.",
      "html": "<h1 id=\"79.-sharing-data-across-requests-and-users\">79. Sharing Data across Requests and Users <a class=\"heading-anchor-permalink\" href=\"#79.-sharing-data-across-requests-and-users\">#</a></h1>\n<p><a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/591b2acf09cb6d83fd434e20bc367f65136e5463\">Initial code</a></p>\n<h2 id=\"storing-data-between-requests%2C-and-users\">Storing data between requests, and users <a class=\"heading-anchor-permalink\" href=\"#storing-data-between-requests%2C-and-users\">#</a></h2>\n<p>Let’s store (ingest) data inside JavaScript variables themselves, i.e. data is available in RAM, until the server is stopped.</p>\n<p>This “temporary” storage can easily be used by other routers, files, by exporting the storage variable, and since the storage variable (array or object) is a reference type, it’s no duplicated/reset when imported/used by other parts of the server.</p>\n<p>So, data is persisted across requests, assuming the server keeps running.</p>\n<p>Doubt: we’ll not get circular dependency issues here, since the exporting file is run once and cached, by default in Node.js.</p>\n<h2 id=\"this-is-not-good-(in-general)\">This is not good (in general) <a class=\"heading-anchor-permalink\" href=\"#this-is-not-good-(in-general)\">#</a></h2>\n<p>This kind of storage is:</p>\n<ol>\n<li>Not secure - atleast for our implementation here, since every user can read/write all data.</li>\n<li>Very unreliable - servers auto-restart if an error occurs, code is updated, power goes out etc</li>\n<li>Very inefficient - RAM is for immediate working memory</li>\n<li>Difficult to manage, track</li>\n</ol>\n<p>This is very unrealistic so will almost never be used in a backend app.</p>\n<p>Note: we can and will share data across requests, but not across users, in this module. This would still be unrealistic for a backend app, however.</p>\n<h2 id=\"but%2C-good-enough-for-learning\">But, good enough for learning <a class=\"heading-anchor-permalink\" href=\"#but%2C-good-enough-for-learning\">#</a></h2>\n<p>But, for this module, we’ll use this method to explore use of templating engines, without the overhead of database code.</p>\n",
      "id": 220
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/80_Template_engines_overview.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/80_Template_engines_overview.html",
      "content": "# 80. Template engines - overview\nCreated Sunday 5 March 2023 at 10:01 pm\n\n## What's a templating engine.\nI was right here, just read it - [78_Module_introduction](78_Module_introduction.md)\n![](../../../../assets/80_Template_engines_overview-image-1-bb4042ab.png)\n\n\n## Some popular templating engines\nThese differ in:\n1. Syntax - DSL\n2. Philosophy\n3. Reuse-constructs\n4. Layout, and styling constructs\n\nEngines:\n1. EJS - normal HTML for markup, DSL for JS code.\n2. Pug (aka Jade) - uses a minimized version of HTML, hashtag-curly brace syntax for placeholders. Special constructs for control flow.\n3. Handlebars - normal HTML for markup, double curly brace syntax for placeholder. Similar to EJS, but has less features and different philosophy.\n\n![](../../../../assets/80_Template_engines_overview-image-2-bb4042ab.png)\n\n\n## Installing a template engine\n- Template engines are simple Node.js packages available through npm.\n- Since template engines are needed at request time, they're installed as production dependencies.\n- Most template engines can hook into the server lib/frwk, with almost no code needed.\n- All the 3 mentioned here (EJS, Pug, Handlebars) are \"Express.js compatible\", i.e, they can be plugged in as an Express middleware using a single line.\n\n\n## Connecting a template engine to the server lib/frwk\n- `ejs`, `pug`. Has express.js support out of the box.\n- `npm install ejs`\n- For handlebars, use `express-handlebars` since it has built-in express support. FYI: the `handlebars` package is a general package for Node.js.\n\nNote: templating engine, in principle, are not tied to a server lib/frwk. Thus, they do need some code to connect with the server lib/frwk in use. Since the packages discussed above already have support for Express, that code is just one line.\n",
      "html": "<h1 id=\"80.-template-engines---overview\">80. Template engines - overview <a class=\"heading-anchor-permalink\" href=\"#80.-template-engines---overview\">#</a></h1>\n<p>Created Sunday 5 March 2023 at 10:01 pm</p>\n<h2 id=\"what%E2%80%99s-a-templating-engine.\">What’s a templating engine. <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-a-templating-engine.\">#</a></h2>\n<p>I was right here, just read it - <a href=\"78_Module_introduction.html\">78_Module_introduction</a>\n<img src=\"../../../../assets/80_Template_engines_overview-image-1-bb4042ab.png\" alt=\"\"></p>\n<h2 id=\"some-popular-templating-engines\">Some popular templating engines <a class=\"heading-anchor-permalink\" href=\"#some-popular-templating-engines\">#</a></h2>\n<p>These differ in:</p>\n<ol>\n<li>Syntax - DSL</li>\n<li>Philosophy</li>\n<li>Reuse-constructs</li>\n<li>Layout, and styling constructs</li>\n</ol>\n<p>Engines:</p>\n<ol>\n<li>EJS - normal HTML for markup, DSL for JS code.</li>\n<li>Pug (aka Jade) - uses a minimized version of HTML, hashtag-curly brace syntax for placeholders. Special constructs for control flow.</li>\n<li>Handlebars - normal HTML for markup, double curly brace syntax for placeholder. Similar to EJS, but has less features and different philosophy.</li>\n</ol>\n<p><img src=\"../../../../assets/80_Template_engines_overview-image-2-bb4042ab.png\" alt=\"\"></p>\n<h2 id=\"installing-a-template-engine\">Installing a template engine <a class=\"heading-anchor-permalink\" href=\"#installing-a-template-engine\">#</a></h2>\n<ul>\n<li>Template engines are simple Node.js packages available through npm.</li>\n<li>Since template engines are needed at request time, they’re installed as production dependencies.</li>\n<li>Most template engines can hook into the server lib/frwk, with almost no code needed.</li>\n<li>All the 3 mentioned here (EJS, Pug, Handlebars) are “Express.js compatible”, i.e, they can be plugged in as an Express middleware using a single line.</li>\n</ul>\n<h2 id=\"connecting-a-template-engine-to-the-server-lib%2Ffrwk\">Connecting a template engine to the server lib/frwk <a class=\"heading-anchor-permalink\" href=\"#connecting-a-template-engine-to-the-server-lib%2Ffrwk\">#</a></h2>\n<ul>\n<li><code>ejs</code>, <code>pug</code>. Has express.js support out of the box.</li>\n<li><code>npm install ejs</code></li>\n<li>For handlebars, use <code>express-handlebars</code> since it has built-in express support. FYI: the <code>handlebars</code> package is a general package for Node.js.</li>\n</ul>\n<p>Note: templating engine, in principle, are not tied to a server lib/frwk. Thus, they do need some code to connect with the server lib/frwk in use. Since the packages discussed above already have support for Express, that code is just one line.</p>\n",
      "id": 221
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/81_Installing_Pug_and_using_it.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/81_Installing_Pug_and_using_it.html",
      "content": "# 81. Installing Pug and using it\nCreated Sunday 5 March 2023 at 10:22 pm\n\n## Install, connect, use with Express.js\n1. `npm install pug`\n2. `app.set('view engine', 'pug')` - set view engine. The argument `'pug'` works because pug *automatically* registers with express.\n3. `app.set('views', 'path_to_templates_folder')` - set views folder. Optional (default is `my-project/views`).\n4. `res.render('my_template_name')` - .pug extension is optional if engine `pug` is set. Can also pass in path to template file, if `\"views\"` Express app settings in unset.\n\n\n## Pug syntax\nPug syntax is simple, concise.\n1. Indentation matters, no closing tags, no angled brackets\n2. class is specified with chained dot notation `div.my-class`. Same with id (with `#`)\n3. attributes directly after tag (and classes) inside parentheses.\n4. `div` is the default tag, if no tag is specified.\n\nExample (Pug, vs HTML):\n![](../../../../assets/81_Installing_Pug_and_using_it-image-1-bb4042ab.png)\n![](../../../../assets/81_Installing_Pug_and_using_it-image-2-bb4042ab.png)\n\nCode (same as above):\n```pug\ndoctype html\nhtml(lang=\"en\")\n    head\n        meta(charset=\"UTF-8\")\n        meta(http-equiv=\"X-UA-Compatible\" content=\"IE=edge\")\n        meta(name=\"viewport\" content=\"width=device-width, initial-scale=1.0\")\n        title Add Product\n    body\n        header.main-header\n        nav.main-header__nav\n            ul.main-header__item-list\n                li.main-header__item\n                    a.active(href=\"/\") Shop\n                li.main-header__item\n                    a(href=\"/admin/add-product\") Add Product\n```\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <header class=\"main-header\">\n        <nav class=\"main-header__nav\">\n            <ul class=\"main-header__item-list\">\n                <li class=\"main-header__item\"><a class=\"active\" href=\"/\">Shop</a></li>\n                <li class=\"main-header__item\"><a href=\"/admin/add-product\">Add Product</a></li>\n            </ul>\n        </nav>\n    </header>\n</body>\n```\n\nNote:\n- In VScode:\n\t- Pug auto-completion works out of the box.\n\t- There's no built-in formatter, however. An [extension](https://marketplace.visualstudio.com/items?itemName=ducfilan.pug-formatter) is available though.\n\n[Code until here](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/2ec3459c867b46cb703b5daf2b0d4f6c8f8013dc)\n\n## Dynamic content\nPlaceholders and dynamic content is the primary goal of a template engine. Let's see how to do that with Pug (and Express).\n\n- Pass *props* - `res.render('my-template-file', props)`. Example - `res.render('my-template-file', { docTitle: \"Sanjar's\", ratings: [5, 1, 5, 4] })`\n- Consume props - prop values are accessible globally inside the template using keys, no import needed.\n\nDSL:\n1. Renderable type - `#{placeholder_name}`\n\t```pug\n\ttitle #{docTitle}\n\t```\n2. Iterate, use the `each` and `in` keyword provided by Pug. No imports needed, of course.\n\t```pug\n\th1 Ratings\n\tdiv.grid\n\t    each product in prods\n\t        article.card.product-item\n\t            header.card__header\n\t                h2.product__title #{product.title}\n\t```\n\nSee [docs](https://pugjs.org/api/getting-started.html) for more DSL constructs\n\nNote:\n- to convert HTML to Pug, use https://html-to-pug.com\n- functions can be passed as props, and can be called inside the placeholder construct. Parentheses are required for function call, as is usual in JS.\n- The props passing syntax - `res.render('my-template-file', props)` is same with any template engine.\n",
      "html": "<h1 id=\"81.-installing-pug-and-using-it\">81. Installing Pug and using it <a class=\"heading-anchor-permalink\" href=\"#81.-installing-pug-and-using-it\">#</a></h1>\n<p>Created Sunday 5 March 2023 at 10:22 pm</p>\n<h2 id=\"install%2C-connect%2C-use-with-express.js\">Install, connect, use with Express.js <a class=\"heading-anchor-permalink\" href=\"#install%2C-connect%2C-use-with-express.js\">#</a></h2>\n<ol>\n<li><code>npm install pug</code></li>\n<li><code>app.set('view engine', 'pug')</code> - set view engine. The argument <code>'pug'</code> works because pug <em>automatically</em> registers with express.</li>\n<li><code>app.set('views', 'path_to_templates_folder')</code> - set views folder. Optional (default is <code>my-project/views</code>).</li>\n<li><code>res.render('my_template_name')</code> - .pug extension is optional if engine <code>pug</code> is set. Can also pass in path to template file, if <code>&quot;views&quot;</code> Express app settings in unset.</li>\n</ol>\n<h2 id=\"pug-syntax\">Pug syntax <a class=\"heading-anchor-permalink\" href=\"#pug-syntax\">#</a></h2>\n<p>Pug syntax is simple, concise.</p>\n<ol>\n<li>Indentation matters, no closing tags, no angled brackets</li>\n<li>class is specified with chained dot notation <code>div.my-class</code>. Same with id (with <code>#</code>)</li>\n<li>attributes directly after tag (and classes) inside parentheses.</li>\n<li><code>div</code> is the default tag, if no tag is specified.</li>\n</ol>\n<p>Example (Pug, vs HTML):\n<img src=\"../../../../assets/81_Installing_Pug_and_using_it-image-1-bb4042ab.png\" alt=\"\">\n<img src=\"../../../../assets/81_Installing_Pug_and_using_it-image-2-bb4042ab.png\" alt=\"\"></p>\n<p>Code (same as above):</p>\n<pre><code class=\"language-pug\">doctype html\nhtml(lang=&quot;en&quot;)\n    head\n        meta(charset=&quot;UTF-8&quot;)\n        meta(http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;)\n        meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;)\n        title Add Product\n    body\n        header.main-header\n        nav.main-header__nav\n            ul.main-header__item-list\n                li.main-header__item\n                    a.active(href=&quot;/&quot;) Shop\n                li.main-header__item\n                    a(href=&quot;/admin/add-product&quot;) Add Product\n</code></pre>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;header class=&quot;main-header&quot;&gt;\n        &lt;nav class=&quot;main-header__nav&quot;&gt;\n            &lt;ul class=&quot;main-header__item-list&quot;&gt;\n                &lt;li class=&quot;main-header__item&quot;&gt;&lt;a class=&quot;active&quot; href=&quot;/&quot;&gt;Shop&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=&quot;main-header__item&quot;&gt;&lt;a href=&quot;/admin/add-product&quot;&gt;Add Product&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>In VScode:\n<ul>\n<li>Pug auto-completion works out of the box.</li>\n<li>There’s no built-in formatter, however. An <a href=\"https://marketplace.visualstudio.com/items?itemName=ducfilan.pug-formatter\">extension</a> is available though.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/2ec3459c867b46cb703b5daf2b0d4f6c8f8013dc\">Code until here</a></p>\n<h2 id=\"dynamic-content\">Dynamic content <a class=\"heading-anchor-permalink\" href=\"#dynamic-content\">#</a></h2>\n<p>Placeholders and dynamic content is the primary goal of a template engine. Let’s see how to do that with Pug (and Express).</p>\n<ul>\n<li>Pass <em>props</em> - <code>res.render('my-template-file', props)</code>. Example - <code>res.render('my-template-file', { docTitle: &quot;Sanjar's&quot;, ratings: [5, 1, 5, 4] })</code></li>\n<li>Consume props - prop values are accessible globally inside the template using keys, no import needed.</li>\n</ul>\n<p>DSL:</p>\n<ol>\n<li>Renderable type - <code>#{placeholder_name}</code><pre><code class=\"language-pug\">title #{docTitle}\n</code></pre>\n</li>\n<li>Iterate, use the <code>each</code> and <code>in</code> keyword provided by Pug. No imports needed, of course.<pre><code class=\"language-pug\">h1 Ratings\ndiv.grid\n    each product in prods\n        article.card.product-item\n            header.card__header\n                h2.product__title #{product.title}\n</code></pre>\n</li>\n</ol>\n<p>See <a href=\"https://pugjs.org/api/getting-started.html\">docs</a> for more DSL constructs</p>\n<p>Note:</p>\n<ul>\n<li>to convert HTML to Pug, use <a href=\"https://html-to-pug.com\">https://html-to-pug.com</a></li>\n<li>functions can be passed as props, and can be called inside the placeholder construct. Parentheses are required for function call, as is usual in JS.</li>\n<li>The props passing syntax - <code>res.render('my-template-file', props)</code> is same with any template engine.</li>\n</ul>\n",
      "id": 222
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/82_Layouts_in_Pug.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/82_Layouts_in_Pug.html",
      "content": "# 82. Layouts in Pug\nCreated Monday 6 March 2023 at 01:01 am\n\nMany pages on the frontend have common elements that are always there - headers, footers, style files, etc.\n\n- Declare template placeholder - `block` followed by key name.\n\t```pug\n\t//- my-project/views/my-layouts-folder/main-layout.pug\n\tdoctype html\n\thead\n\t  meta(charset=\"UTF-8\")\n\t  meta(name=\"viewport\" content=\"width=device-width, initial-scale=1.0\")\n\t  meta(http-equiv=\"X-UA-Compatible\" content=\"ie=edge\")\n\t  block title\n\t  link(rel=\"stylesheet\" href=\"/css/main.css\")\n\t  block styles\n\tbody\n\t  header.main-header\n\t    nav.main-header__nav\n\t      ul.main-header__item-list\n\t        li.main-header__item\n\t          a.active(href=\"/\") Shop\n\t        li.main-header__item\n\t          a(href=\"/admin/add-product\") Add Product\n\t  block content\n\t```\n- Using the layout placeholder - same, block followed by keyname. Value passed as child.\n\t```pug\n\textends my-layouts-folder/main-layout\n\t\n\tblock title\n\t  title Page Not Found\n\tblock content\n\t  h1 Page Not Found!\n\t```\n\tevaluates to \n\t```pug\n\tdoctype html\n\t\n\thead\n\t  meta(charset=\"UTF-8\")\n\t  meta(name=\"viewport\" content=\"width=device-width, initial-scale=1.0\")\n\t  meta(http-equiv=\"X-UA-Compatible\" content=\"ie=edge\")\n\t   title Page Not Found\n\t  link(rel=\"stylesheet\" href=\"/css/main.css\")\n\tbody\n\t  header.main-header\n\t    nav.main-header__nav\n\t      ul.main-header__item-list\n\t        li.main-header__item\n\t          a.active(href=\"/\") Shop\n\t        li.main-header__item\n\t          a(href=\"/admin/add-product\") Add Product\n\t   h1 Page Not Found!\n\t```\n\nNote: not using a block is fine.\n\n---\n\nActive link wrong value in add-products page\nhttps://github.com/exemplar-codes/templating-engines-w-express-js/commit/f280d6508731d952f29b4938283f8acf87ec0763\n\nSolution - remove default active link, pass some variable that's used to conditionally determine the class.\n```pug\n//- `layouts/main-layout.pug`\nnav.main-header__nav\n      ul.main-header__item-list\n        li.main-header__item\n          a(href=\"/\" class=(myActivePath === 'shop-page' ? 'active': '')) Shop\n        li.main-header__item\n          a(href=\"/admin/add-product\" class=(myActivePath === 'on-admin-page' ? 'active': '')) Add Product\n```\n```js\n// shop.js\n  res.render('shop', {\n    prods: adminData.products, \n    docTitle: 'My shop', \n    myActivePath: 'shop-page',\n  });\n```\n```js\n// add-product page\nres.render('add-product', { myActivePath: 'on-admin-page' });\n```\n\n[Code](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/b3240643503169b4f09ecf165649c9a94110e2b9)\n\nNote: \n- Of course, passing in arbitrary tokens is not a good way to handle active link (I did this to demo that there's no systematic way to do this in Pug, afaik). A better way would be to pass a prop determine function as prop, or make the whole link a layout placeholder.\n- Ternary expressions are fine in Pug\n- Parentheses are to add JS code inside attribute clause values. Nesting them is fine too.\n\n\n## Pug (conclusion)\nThese was a good overview of Pug, but there are still more patterns and features available. \n- See [docs](https://pugjs.org/api/getting-started.html)\n- [freeCodeCamp - Pug Full tutorial for beginners](https://youtu.be/kt3cEjjkCZA) , 1 hr video - covers many things",
      "html": "<h1 id=\"82.-layouts-in-pug\">82. Layouts in Pug <a class=\"heading-anchor-permalink\" href=\"#82.-layouts-in-pug\">#</a></h1>\n<p>Created Monday 6 March 2023 at 01:01 am</p>\n<p>Many pages on the frontend have common elements that are always there - headers, footers, style files, etc.</p>\n<ul>\n<li>Declare template placeholder - <code>block</code> followed by key name.<pre><code class=\"language-pug\">//- my-project/views/my-layouts-folder/main-layout.pug\ndoctype html\nhead\n  meta(charset=&quot;UTF-8&quot;)\n  meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;)\n  meta(http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;)\n  block title\n  link(rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;)\n  block styles\nbody\n  header.main-header\n    nav.main-header__nav\n      ul.main-header__item-list\n        li.main-header__item\n          a.active(href=&quot;/&quot;) Shop\n        li.main-header__item\n          a(href=&quot;/admin/add-product&quot;) Add Product\n  block content\n</code></pre>\n</li>\n<li>Using the layout placeholder - same, block followed by keyname. Value passed as child.<pre><code class=\"language-pug\">extends my-layouts-folder/main-layout\n\nblock title\n  title Page Not Found\nblock content\n  h1 Page Not Found!\n</code></pre>\nevaluates to<pre><code class=\"language-pug\">doctype html\n\nhead\n  meta(charset=&quot;UTF-8&quot;)\n  meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;)\n  meta(http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;)\n   title Page Not Found\n  link(rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;)\nbody\n  header.main-header\n    nav.main-header__nav\n      ul.main-header__item-list\n        li.main-header__item\n          a.active(href=&quot;/&quot;) Shop\n        li.main-header__item\n          a(href=&quot;/admin/add-product&quot;) Add Product\n   h1 Page Not Found!\n</code></pre>\n</li>\n</ul>\n<p>Note: not using a block is fine.</p>\n<hr>\n<p>Active link wrong value in add-products page\n<a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/f280d6508731d952f29b4938283f8acf87ec0763\">https://github.com/exemplar-codes/templating-engines-w-express-js/commit/f280d6508731d952f29b4938283f8acf87ec0763</a></p>\n<p>Solution - remove default active link, pass some variable that’s used to conditionally determine the class.</p>\n<pre><code class=\"language-pug\">//- `layouts/main-layout.pug`\nnav.main-header__nav\n      ul.main-header__item-list\n        li.main-header__item\n          a(href=&quot;/&quot; class=(myActivePath === 'shop-page' ? 'active': '')) Shop\n        li.main-header__item\n          a(href=&quot;/admin/add-product&quot; class=(myActivePath === 'on-admin-page' ? 'active': '')) Add Product\n</code></pre>\n<pre><code class=\"language-js\">// shop.js\n  res.render('shop', {\n    prods: adminData.products, \n    docTitle: 'My shop', \n    myActivePath: 'shop-page',\n  });\n</code></pre>\n<pre><code class=\"language-js\">// add-product page\nres.render('add-product', { myActivePath: 'on-admin-page' });\n</code></pre>\n<p><a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/b3240643503169b4f09ecf165649c9a94110e2b9\">Code</a></p>\n<p>Note:</p>\n<ul>\n<li>Of course, passing in arbitrary tokens is not a good way to handle active link (I did this to demo that there’s no systematic way to do this in Pug, afaik). A better way would be to pass a prop determine function as prop, or make the whole link a layout placeholder.</li>\n<li>Ternary expressions are fine in Pug</li>\n<li>Parentheses are to add JS code inside attribute clause values. Nesting them is fine too.</li>\n</ul>\n<h2 id=\"pug-(conclusion)\">Pug (conclusion) <a class=\"heading-anchor-permalink\" href=\"#pug-(conclusion)\">#</a></h2>\n<p>These was a good overview of Pug, but there are still more patterns and features available.</p>\n<ul>\n<li>See <a href=\"https://pugjs.org/api/getting-started.html\">docs</a></li>\n<li><a href=\"https://youtu.be/kt3cEjjkCZA\">freeCodeCamp - Pug Full tutorial for beginners</a> , 1 hr video - covers many things</li>\n</ul>\n",
      "id": 223
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/83_Handlebars_skipping.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/83_Handlebars_skipping.html",
      "content": "Created Wednesday 8 March 2023 at 04:48 pm\n\nSkipping handlebars, not relevant at the moment.\n- Handlebars is mostly HTML, unlike plug\n- It's restrictive, in that no computation are allowed inside the template, including conditional ones. This is good - in the sense that all logic is present on the server code, not the template. But it's bad - in the way that the most trivial of things need to be done outside the template.\n- It does have conditionals, and iteration constructs.",
      "html": "<p>Created Wednesday 8 March 2023 at 04:48 pm</p>\n<p>Skipping handlebars, not relevant at the moment.</p>\n<ul>\n<li>Handlebars is mostly HTML, unlike plug</li>\n<li>It’s restrictive, in that no computation are allowed inside the template, including conditional ones. This is good - in the sense that all logic is present on the server code, not the template. But it’s bad - in the way that the most trivial of things need to be done outside the template.</li>\n<li>It does have conditionals, and iteration constructs.</li>\n</ul>\n",
      "id": 224
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/84_EJS.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/6_2_Templating_Engines_and_Dynamic_content/84_EJS.html",
      "content": "# 84. EJS\nCreated Wednesday 8 March 2023 at 04:48 pm\n\n- Has Express.js support out of the box.\n- Uses HTML for markup, a very small DSL and JS code can be used freely.\n- It's quite like ERB (Ruby).\n\n\n## Steps to use with Express\n1. Install EJS - `npm install ejs`\n2. Set view engine in Express (just like Pug):\n\t```js\n\tapp.set('view engine', 'ejs');\n\tapp.set('views', 'views'); // since our templates are at my-proj/views\n\t```\n3. Passing props remains the same - add object as second argument:\n\t```js\n\tres.render('path-to-template-inside-views', { name: \"Sanjar\" });\n\t```\n\n## Template usage\n1. UI Markup is HTML, no special syntax here.\n2. EJS files end in `.ejs`\n3. DSL:\n\t1. `<%= renderablePropOrCode %>` - render the prop or code (assuming it's render-able)\n\t2. `<% users.length + 1 %>` - JS code for control flow, no output. Can be used in multi-line way, with markup between these blocks.\n\t3. `<%- \"<p>\" + \"Hello, world\" + \"</p>\" %>` - render unescaped HTML/EJS. **Not used very much - except for re-usability among templates**\n\nNote:\n- Nesting among these is fine\n- The JS code is not fully free form - e.g only `} else {` works, splittling this into multiple blocks will throw error. Advice - assume blocks are always needed, and don't do unnecessary gymnastics.\n- XSS attack for unescaped HTML is not a concern (for code generated by our templates), since we're the server.\n- Props are passed down automatically if partials (`include`) is used.\n\n## Working with partials\nWhy - code reuse among templates.\n\nA partial is simply a EJS file can be imported into another EJS file. It's called \"partial\" - since this file is not a complete page, i.e. has partial code.\n\nSteps to use:\n1. Write part to be used elsewhere, in an EJS file.\n2. Keep this file somewhere inside `views` folder.\n3. In another EJS file (the one importing), use `include('path-to-partial-template-inside-view-folder')`. That's it. Props are passed down automatically.\n\nExample:\n```ejs\n%% shop.ejs %%\n<h1>Shop page</h1>\n<nav>... some code here </nav>\n```\nmay be broken down (assuming \"nav\" code is used on other pages)\n```ejs\n%% navigation.ejs %%\n<nav>... some code here </nav>\n```\n```ejs\n%% shop.ejs %%\n<h1>Shop page</h1>\n<%- include('navigation.ejs')  %>\n```\nWe are using unescaped DSL tag (`<%- %>`) since we need to treat imported code as markup, not plain text.\n\nAll pages using \"nav\" can do the same.\n\nNote:\n- We don't (need to) specify/set path to partials using JS code. EJS looks in folder containing the template, we can construct the path from there (as we did here).\n- Of course, passing `path` and `__dirname` as props to construct path to partial would still work, since `include()` does accept an absolute path. **Not needed generally, just mentioning that it's possible**.\n- EJS can be used without Express too, and also in the browser. [See - experiment with SSG with EJS](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/e8f6cd62e4156c0420444b33bf0771e423e17ad1).\n\n## Examples\n```ejs\n%% simple render %%\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/d5c842a) %%\n\n<h1><%= welcomeMessage %></h1>\n\n<h1><%= \"Hi, \" + name + \"!\" %></h1>\n\n<%= \"<p>HTML is escaped by default, so printed like plain text</p>\" %>\n```\n```ejs\n%% JS code is allowed, though not rendered %%\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/18a7124) %%\n\n<% if(showPicture) { %>\n\t<img src=\"<%= imgURL %>\" alt=\"<%= imgAltText %>\" />\n<% } %>\n\n%% This not completely free flow - assume blocks are always needed and keep them together %%\n\n<% if(isFirstChessPlayer) { %>\n\t<h1>Hi, you're <em>white</em>\n<% } else %>\n\t<h1>Please wait, you're <em>black</em>\n<% } %>\n```\n```ejs\n%% Unescaped HTML/EJS code - used for importing EJS code from files %%\n%% XSS attack is not a concern, from us, since we are the server %%\n\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/402bf6fa2bd4309b34fdd8aa6f747b2c0d4f678d) %%\n\n<%- `<button class=\"btn\" type=\"submit\">Add Product</button>` %>\n\n<%- include('includes/navigation.ejs') %>\n```\n\n\n## Almost all EJS functionality\nI know the syntax already, adding this for the sake of exhaustiveness.\n![](../../../../assets/84_EJS-image-1-bb4042ab.png)\n\n\n## Global props - `locals` (Express.js)\nThe `res.locals` object is available inside EJS, by default. The prop name is `locals`.\n\nThis solves: \n- The problem of \"conditionally existent\" props in EJS, atleast if Express is being used.\n- The problem of \"globally\" accessible props, without adding them to each `res.render()` of the app\n\nExample:\n```js\n<%= locals.isAuthenticated ? \"Logout\" : \"Login\" %>\n```",
      "html": "<h1 id=\"84.-ejs\">84. EJS <a class=\"heading-anchor-permalink\" href=\"#84.-ejs\">#</a></h1>\n<p>Created Wednesday 8 March 2023 at 04:48 pm</p>\n<ul>\n<li>Has Express.js support out of the box.</li>\n<li>Uses HTML for markup, a very small DSL and JS code can be used freely.</li>\n<li>It’s quite like ERB (Ruby).</li>\n</ul>\n<h2 id=\"steps-to-use-with-express\">Steps to use with Express <a class=\"heading-anchor-permalink\" href=\"#steps-to-use-with-express\">#</a></h2>\n<ol>\n<li>Install EJS - <code>npm install ejs</code></li>\n<li>Set view engine in Express (just like Pug):<pre><code class=\"language-js\">app.set('view engine', 'ejs');\napp.set('views', 'views'); // since our templates are at my-proj/views\n</code></pre>\n</li>\n<li>Passing props remains the same - add object as second argument:<pre><code class=\"language-js\">res.render('path-to-template-inside-views', { name: &quot;Sanjar&quot; });\n</code></pre>\n</li>\n</ol>\n<h2 id=\"template-usage\">Template usage <a class=\"heading-anchor-permalink\" href=\"#template-usage\">#</a></h2>\n<ol>\n<li>UI Markup is HTML, no special syntax here.</li>\n<li>EJS files end in <code>.ejs</code></li>\n<li>DSL:\n<ol>\n<li><code>&lt;%= renderablePropOrCode %&gt;</code> - render the prop or code (assuming it’s render-able)</li>\n<li><code>&lt;% users.length + 1 %&gt;</code> - JS code for control flow, no output. Can be used in multi-line way, with markup between these blocks.</li>\n<li><code>&lt;%- &quot;&lt;p&gt;&quot; + &quot;Hello, world&quot; + &quot;&lt;/p&gt;&quot; %&gt;</code> - render unescaped HTML/EJS. <strong>Not used very much - except for re-usability among templates</strong></li>\n</ol>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Nesting among these is fine</li>\n<li>The JS code is not fully free form - e.g only <code>} else {</code> works, splittling this into multiple blocks will throw error. Advice - assume blocks are always needed, and don’t do unnecessary gymnastics.</li>\n<li>XSS attack for unescaped HTML is not a concern (for code generated by our templates), since we’re the server.</li>\n<li>Props are passed down automatically if partials (<code>include</code>) is used.</li>\n</ul>\n<h2 id=\"working-with-partials\">Working with partials <a class=\"heading-anchor-permalink\" href=\"#working-with-partials\">#</a></h2>\n<p>Why - code reuse among templates.</p>\n<p>A partial is simply a EJS file can be imported into another EJS file. It’s called “partial” - since this file is not a complete page, i.e. has partial code.</p>\n<p>Steps to use:</p>\n<ol>\n<li>Write part to be used elsewhere, in an EJS file.</li>\n<li>Keep this file somewhere inside <code>views</code> folder.</li>\n<li>In another EJS file (the one importing), use <code>include('path-to-partial-template-inside-view-folder')</code>. That’s it. Props are passed down automatically.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-ejs\">%% shop.ejs %%\n&lt;h1&gt;Shop page&lt;/h1&gt;\n&lt;nav&gt;... some code here &lt;/nav&gt;\n</code></pre>\n<p>may be broken down (assuming “nav” code is used on other pages)</p>\n<pre><code class=\"language-ejs\">%% navigation.ejs %%\n&lt;nav&gt;... some code here &lt;/nav&gt;\n</code></pre>\n<pre><code class=\"language-ejs\">%% shop.ejs %%\n&lt;h1&gt;Shop page&lt;/h1&gt;\n&lt;%- include('navigation.ejs')  %&gt;\n</code></pre>\n<p>We are using unescaped DSL tag (<code>&lt;%- %&gt;</code>) since we need to treat imported code as markup, not plain text.</p>\n<p>All pages using “nav” can do the same.</p>\n<p>Note:</p>\n<ul>\n<li>We don’t (need to) specify/set path to partials using JS code. EJS looks in folder containing the template, we can construct the path from there (as we did here).</li>\n<li>Of course, passing <code>path</code> and <code>__dirname</code> as props to construct path to partial would still work, since <code>include()</code> does accept an absolute path. <strong>Not needed generally, just mentioning that it’s possible</strong>.</li>\n<li>EJS can be used without Express too, and also in the browser. <a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js/commit/e8f6cd62e4156c0420444b33bf0771e423e17ad1\">See - experiment with SSG with EJS</a>.</li>\n</ul>\n<h2 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h2>\n<pre><code class=\"language-ejs\">%% simple render %%\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/d5c842a) %%\n\n&lt;h1&gt;&lt;%= welcomeMessage %&gt;&lt;/h1&gt;\n\n&lt;h1&gt;&lt;%= &quot;Hi, &quot; + name + &quot;!&quot; %&gt;&lt;/h1&gt;\n\n&lt;%= &quot;&lt;p&gt;HTML is escaped by default, so printed like plain text&lt;/p&gt;&quot; %&gt;\n</code></pre>\n<pre><code class=\"language-ejs\">%% JS code is allowed, though not rendered %%\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/18a7124) %%\n\n&lt;% if(showPicture) { %&gt;\n\t&lt;img src=&quot;&lt;%= imgURL %&gt;&quot; alt=&quot;&lt;%= imgAltText %&gt;&quot; /&gt;\n&lt;% } %&gt;\n\n%% This not completely free flow - assume blocks are always needed and keep them together %%\n\n&lt;% if(isFirstChessPlayer) { %&gt;\n\t&lt;h1&gt;Hi, you're &lt;em&gt;white&lt;/em&gt;\n&lt;% } else %&gt;\n\t&lt;h1&gt;Please wait, you're &lt;em&gt;black&lt;/em&gt;\n&lt;% } %&gt;\n</code></pre>\n<pre><code class=\"language-ejs\">%% Unescaped HTML/EJS code - used for importing EJS code from files %%\n%% XSS attack is not a concern, from us, since we are the server %%\n\n%% [Code example](https://github.com/exemplar-codes/templating-engines-w-express-js/commit/402bf6fa2bd4309b34fdd8aa6f747b2c0d4f678d) %%\n\n&lt;%- `&lt;button class=&quot;btn&quot; type=&quot;submit&quot;&gt;Add Product&lt;/button&gt;` %&gt;\n\n&lt;%- include('includes/navigation.ejs') %&gt;\n</code></pre>\n<h2 id=\"almost-all-ejs-functionality\">Almost all EJS functionality <a class=\"heading-anchor-permalink\" href=\"#almost-all-ejs-functionality\">#</a></h2>\n<p>I know the syntax already, adding this for the sake of exhaustiveness.\n<img src=\"../../../../assets/84_EJS-image-1-bb4042ab.png\" alt=\"\"></p>\n<h2 id=\"global-props---locals-(express.js)\">Global props - <code>locals</code> (Express.js) <a class=\"heading-anchor-permalink\" href=\"#global-props---locals-(express.js)\">#</a></h2>\n<p>The <code>res.locals</code> object is available inside EJS, by default. The prop name is <code>locals</code>.</p>\n<p>This solves:</p>\n<ul>\n<li>The problem of “conditionally existent” props in EJS, atleast if Express is being used.</li>\n<li>The problem of “globally” accessible props, without adding them to each <code>res.render()</code> of the app</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-js\">&lt;%= locals.isAuthenticated ? &quot;Logout&quot; : &quot;Login&quot; %&gt;\n</code></pre>\n",
      "id": 225
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/104_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/104_Wrap_up.html",
      "content": "# 104. Wrap up\nCreated Monday 13 March 2023 at 09:30 pm\n\n![](../../../../assets/104_Wrap_up-image-1-e4b0ecf2.png)\n",
      "html": "<h1 id=\"104.-wrap-up\">104. Wrap up <a class=\"heading-anchor-permalink\" href=\"#104.-wrap-up\">#</a></h1>\n<p>Created Monday 13 March 2023 at 09:30 pm</p>\n<p><img src=\"../../../../assets/104_Wrap_up-image-1-e4b0ecf2.png\" alt=\"\"></p>\n",
      "id": 226
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/96_Module_intro.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/96_Module_intro.html",
      "content": "# 96. Module intro\nCreated Sunday 12 March 2023 at 05:44 pm\n\nMVC is a systematic way to organize application code. It's relevant and popular for  server side apps, desktop apps.",
      "html": "<h1 id=\"96.-module-intro\">96. Module intro <a class=\"heading-anchor-permalink\" href=\"#96.-module-intro\">#</a></h1>\n<p>Created Sunday 12 March 2023 at 05:44 pm</p>\n<p>MVC is a systematic way to organize application code. It’s relevant and popular for  server side apps, desktop apps.</p>\n",
      "id": 227
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/97_What_is_MVC.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/97_What_is_MVC.html",
      "content": "# 97. What is MVC\nCreated Sunday 12 March 2023 at 05:44 pm\n\n/rough-in the sense that I don't want to spend time on exact definition of MVC\n\n- MVC (Model-View-Controller) is a way to organize (logical) server side code.\n- MVC is a way to achieve separation of concerns.\n\nMVC parts:\n1. Views - usually HTML templates. But in general, this is code responsible for generating the responses (what the users see). It is decoupled from both data and the business logic.\n2. Models - code representing and managing data, e.g. saving data, fetching data, querying data, connecting to storage software  - database, cache, external bucket etc. Since saving data is a responsibility of Models, they also contain the business logic.\n3. Controllers - code that glues together functionality of Models and Views. In fact, it is the controller that handles (and is aware) of the HTTP request (since both Model and Views are oblivious to the request or it's params).\nNote: generally, there's something called 'Router' that runs first (in the request cycle) and triggers the relevant controller to be called (passing along request params, of course).\n\n---\nMVC in an Express app\nSince the primary (and only) construct of Express is the middleware, controllers are split across middlewares.",
      "html": "<h1 id=\"97.-what-is-mvc\">97. What is MVC <a class=\"heading-anchor-permalink\" href=\"#97.-what-is-mvc\">#</a></h1>\n<p>Created Sunday 12 March 2023 at 05:44 pm</p>\n<p>/rough-in the sense that I don’t want to spend time on exact definition of MVC</p>\n<ul>\n<li>MVC (Model-View-Controller) is a way to organize (logical) server side code.</li>\n<li>MVC is a way to achieve separation of concerns.</li>\n</ul>\n<p>MVC parts:</p>\n<ol>\n<li>Views - usually HTML templates. But in general, this is code responsible for generating the responses (what the users see). It is decoupled from both data and the business logic.</li>\n<li>Models - code representing and managing data, e.g. saving data, fetching data, querying data, connecting to storage software  - database, cache, external bucket etc. Since saving data is a responsibility of Models, they also contain the business logic.</li>\n<li>Controllers - code that glues together functionality of Models and Views. In fact, it is the controller that handles (and is aware) of the HTTP request (since both Model and Views are oblivious to the request or it’s params).\nNote: generally, there’s something called ‘Router’ that runs first (in the request cycle) and triggers the relevant controller to be called (passing along request params, of course).</li>\n</ol>\n<hr>\n<p>MVC in an Express app\nSince the primary (and only) construct of Express is the middleware, controllers are split across middlewares.</p>\n",
      "id": 228
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/98_Adding_controllers.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/98_Adding_controllers.html",
      "content": "# Adding controllers\nCreated Sunday 12 March 2023 at 07:36 pm\n\n/not-exhaustive - coz wasting time on getting to a definition for controllers, right now is a waste of time\n\n## What controllers to make\nControllers can be grouped in many ways, choose what's easy and scalable. Example:\n1. One controller per route.\n2. One controller per model action\nNote: controllers are named as plural, e.g. \"products\". Models are named singular, e.g. just \"product\".\n\n\n## Implementing controllers\n- Start with a [new project](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs)\n- Add controllers - [start](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/d38d7b158058fd255911e83a5dd32bbdf44ccb72) to [finish](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/939b74e949c24d70db272c587ccc55a817616705)\n\n\n## 7 actions (Rails inspired) - optional\nRuby on Rails has 7 general kinds of actions. These apply per exposed model. [Link](https://guides.rubyonrails.org/routing.html#crud-verbs-and-actions)\n\n| Action  | HTTP verb | Path             | Comment                                      | Used in API server |\n| ------- | --------- | ---------------- | -------------------------------------------- | ------------------ |\n| index   | GET       | /photos          | display a list of all photos                 | yes                |\n| show    | GET       | /photos/:id      | display a specific photo                     | yes                |\n| create  | POST      | /photos          | create a new photo                           | yes                |\n| update  | PATCH/PUT | /photos/:id      | update a specific photo                      | yes                |\n| destroy | DELETE    | /photos/:id      | delete a specific photo                      | yes                |\n| new     | GET       | /photos/new      | return an HTML form for creating a new photo | no                 |\n| edit    | GET       | /photos/:id/edit | return an HTML form for editing a photo      | no                 |",
      "html": "<h1 id=\"adding-controllers\">Adding controllers <a class=\"heading-anchor-permalink\" href=\"#adding-controllers\">#</a></h1>\n<p>Created Sunday 12 March 2023 at 07:36 pm</p>\n<p>/not-exhaustive - coz wasting time on getting to a definition for controllers, right now is a waste of time</p>\n<h2 id=\"what-controllers-to-make\">What controllers to make <a class=\"heading-anchor-permalink\" href=\"#what-controllers-to-make\">#</a></h2>\n<p>Controllers can be grouped in many ways, choose what’s easy and scalable. Example:</p>\n<ol>\n<li>One controller per route.</li>\n<li>One controller per model action\nNote: controllers are named as plural, e.g. “products”. Models are named singular, e.g. just “product”.</li>\n</ol>\n<h2 id=\"implementing-controllers\">Implementing controllers <a class=\"heading-anchor-permalink\" href=\"#implementing-controllers\">#</a></h2>\n<ul>\n<li>Start with a <a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs\">new project</a></li>\n<li>Add controllers - <a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/d38d7b158058fd255911e83a5dd32bbdf44ccb72\">start</a> to <a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/939b74e949c24d70db272c587ccc55a817616705\">finish</a></li>\n</ul>\n<h2 id=\"7-actions-(rails-inspired)---optional\">7 actions (Rails inspired) - optional <a class=\"heading-anchor-permalink\" href=\"#7-actions-(rails-inspired)---optional\">#</a></h2>\n<p>Ruby on Rails has 7 general kinds of actions. These apply per exposed model. <a href=\"https://guides.rubyonrails.org/routing.html#crud-verbs-and-actions\">Link</a></p>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>HTTP verb</th>\n<th>Path</th>\n<th>Comment</th>\n<th>Used in API server</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>GET</td>\n<td>/photos</td>\n<td>display a list of all photos</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>show</td>\n<td>GET</td>\n<td>/photos/:id</td>\n<td>display a specific photo</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>create</td>\n<td>POST</td>\n<td>/photos</td>\n<td>create a new photo</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>update</td>\n<td>PATCH/PUT</td>\n<td>/photos/:id</td>\n<td>update a specific photo</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>DELETE</td>\n<td>/photos/:id</td>\n<td>delete a specific photo</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>new</td>\n<td>GET</td>\n<td>/photos/new</td>\n<td>return an HTML form for creating a new photo</td>\n<td>no</td>\n</tr>\n<tr>\n<td>edit</td>\n<td>GET</td>\n<td>/photos/:id/edit</td>\n<td>return an HTML form for editing a photo</td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 229
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/99_Adding_models.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/99_Adding_models.html",
      "content": "# 99. Adding models\nCreated Sunday 12 March 2023 at 07:37 pm\n\n/somewhat-rough\n\nThe data of our app is currently stored in a controller. This is not ideal, since a model may be used by many controllers. Note - not having the DB is not the issue I'm talking about, I'm talking about coupling of unrelated parts of code, which is not desirable. **We should create a dedicated model file**.\n\n---\n\nThe structure of a single product is quite simple - an object with a string attribute called \"title\".\n\nA model should also have functions to:\n1. save, delete, edit the model instance. \n2. get, delete and query the whole collection (here - a simple array) of models. \n\nCode (for this project):\n- Since the a model (i.e. model instance) has properties (\"title\") and methods, we can use the `class` keyword available in modern JS. This is better than other methods like constructor-closure.\n- The collection functions should be usable without creating a model instance - i.e. they should be static keyword. Modern JS does have the `static` keyword that can be used for this.\n- Model file and the `class` name, by convention, start with capital letters.\n\n[Code - add Product model](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/7a0efc72a105c981ef7668be6883530fa32b9848)\n\nCode (generally):\n- The model contains the database connection logic, and this part should be abstracted in the app code - i.e. controllers should not have to worry about DB connection, etc.\n- We didn't have an `id` or any other unique identifier (aka \"primary key\" in DB jargon) here. This is usually not an issue, since the database program assigns this automatically.\n\nNote: \n- Since we don't have a database, the collection (i.e. array of objects) is stored outside the model. Of course, the static functions do refer to this outside array, which is fine.\n\n---\n## Storing models persistently (ignorable)\nNote: this is an extra thing, that we don't have to do in real apps, since persistence is provided by a DB.\n\nCurrently, we store app data (the \"products\") in RAM. This data gets lost when the server stops running. To avoid this, we'll add a very simple persistent storage using files - read and write using `fs`. \n\nWe'll use JSON because the serializer (`JSON.stringify()`) and de-serializer (`JSON.parse()`) are available in Node.js out of the box. Note: I'm using \"serializer\" in the simplest sense here.\n\n[Code - simple file persistence](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/164902787266eed034a39bdcf897e6d84ca28a1a)",
      "html": "<h1 id=\"99.-adding-models\">99. Adding models <a class=\"heading-anchor-permalink\" href=\"#99.-adding-models\">#</a></h1>\n<p>Created Sunday 12 March 2023 at 07:37 pm</p>\n<p>/somewhat-rough</p>\n<p>The data of our app is currently stored in a controller. This is not ideal, since a model may be used by many controllers. Note - not having the DB is not the issue I’m talking about, I’m talking about coupling of unrelated parts of code, which is not desirable. <strong>We should create a dedicated model file</strong>.</p>\n<hr>\n<p>The structure of a single product is quite simple - an object with a string attribute called “title”.</p>\n<p>A model should also have functions to:</p>\n<ol>\n<li>save, delete, edit the model instance.</li>\n<li>get, delete and query the whole collection (here - a simple array) of models.</li>\n</ol>\n<p>Code (for this project):</p>\n<ul>\n<li>Since the a model (i.e. model instance) has properties (“title”) and methods, we can use the <code>class</code> keyword available in modern JS. This is better than other methods like constructor-closure.</li>\n<li>The collection functions should be usable without creating a model instance - i.e. they should be static keyword. Modern JS does have the <code>static</code> keyword that can be used for this.</li>\n<li>Model file and the <code>class</code> name, by convention, start with capital letters.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/7a0efc72a105c981ef7668be6883530fa32b9848\">Code - add Product model</a></p>\n<p>Code (generally):</p>\n<ul>\n<li>The model contains the database connection logic, and this part should be abstracted in the app code - i.e. controllers should not have to worry about DB connection, etc.</li>\n<li>We didn’t have an <code>id</code> or any other unique identifier (aka “primary key” in DB jargon) here. This is usually not an issue, since the database program assigns this automatically.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Since we don’t have a database, the collection (i.e. array of objects) is stored outside the model. Of course, the static functions do refer to this outside array, which is fine.</li>\n</ul>\n<hr>\n<h2 id=\"storing-models-persistently-(ignorable)\">Storing models persistently (ignorable) <a class=\"heading-anchor-permalink\" href=\"#storing-models-persistently-(ignorable)\">#</a></h2>\n<p>Note: this is an extra thing, that we don’t have to do in real apps, since persistence is provided by a DB.</p>\n<p>Currently, we store app data (the “products”) in RAM. This data gets lost when the server stops running. To avoid this, we’ll add a very simple persistent storage using files - read and write using <code>fs</code>.</p>\n<p>We’ll use JSON because the serializer (<code>JSON.stringify()</code>) and de-serializer (<code>JSON.parse()</code>) are available in Node.js out of the box. Note: I’m using “serializer” in the simplest sense here.</p>\n<p><a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs/commit/164902787266eed034a39bdcf897e6d84ca28a1a\">Code - simple file persistence</a></p>\n",
      "id": 230
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/defer.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/7_The_MVC_pattern/defer.html",
      "content": "Read and add (atleast the link) into notes https://developer.mozilla.org/en-US/docs/Glossary/MVC",
      "html": "<p>Read and add (atleast the link) into notes <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/MVC\">https://developer.mozilla.org/en-US/docs/Glossary/MVC</a></p>\n",
      "id": 231
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/8_Enhancing_the_shop_app_optional/107_Create_the_Shop_structure.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/8_Enhancing_the_shop_app_optional/107_Create_the_Shop_structure.html",
      "content": "# 107. Create the Shop structure\nCreated Tuesday 14 March 2023 at 12:57 am\n\nNote: Forked the project, for this enhancement/practice section (and showoff in resume). [Repo link](https://github.com/exemplar-codes/online-shop-express-ejs-mvc)\n\n## Move views to relevant folders\n- Change `res.render()` since views moved.\n- Change EJS `include()` path since views moved.\n- [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/dea7f61a024da17fb8eca4750c1a48d77b1455f0)\n\n\n## Add more views (todo)\n### Shop\n1. Landing page for products - show only popular products, not the whole listing (which is the case now)\n2. Product detail page - details for selected project\n3. Cart page - see added item, when the cart icon in the navbar is clicked\n4. Checkout page - opens from inside the cart page\n\nBoth admin and customer admin should not be on the same navigation bar. We'll ignore this for now, work on the UI (i.e. add all links for now), and add handle this later.\n\n\n### Admin\n1. Edit product page\n2. Product listing (for admin). Similar to the one views by shop, but only products created by the admin are listed here.\n\n---\n## Work\n- Add links for the pages we'll be adding.\n- Since admin and customer are logically different, let's have one dedicated controller for each.\n- Then, handle the routes, add new controllers.\n- We can see that \"edit\", \"delete\" routes need to be have a reference to the product. This information is generally part of the request URL - as dynamic routes, or query params.\n  \nOK, this work will be be done in this module, but throughout the course.",
      "html": "<h1 id=\"107.-create-the-shop-structure\">107. Create the Shop structure <a class=\"heading-anchor-permalink\" href=\"#107.-create-the-shop-structure\">#</a></h1>\n<p>Created Tuesday 14 March 2023 at 12:57 am</p>\n<p>Note: Forked the project, for this enhancement/practice section (and showoff in resume). <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc\">Repo link</a></p>\n<h2 id=\"move-views-to-relevant-folders\">Move views to relevant folders <a class=\"heading-anchor-permalink\" href=\"#move-views-to-relevant-folders\">#</a></h2>\n<ul>\n<li>Change <code>res.render()</code> since views moved.</li>\n<li>Change EJS <code>include()</code> path since views moved.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/dea7f61a024da17fb8eca4750c1a48d77b1455f0\">Code</a></li>\n</ul>\n<h2 id=\"add-more-views-(todo)\">Add more views (todo) <a class=\"heading-anchor-permalink\" href=\"#add-more-views-(todo)\">#</a></h2>\n<h3 id=\"shop\">Shop <a class=\"heading-anchor-permalink\" href=\"#shop\">#</a></h3>\n<ol>\n<li>Landing page for products - show only popular products, not the whole listing (which is the case now)</li>\n<li>Product detail page - details for selected project</li>\n<li>Cart page - see added item, when the cart icon in the navbar is clicked</li>\n<li>Checkout page - opens from inside the cart page</li>\n</ol>\n<p>Both admin and customer admin should not be on the same navigation bar. We’ll ignore this for now, work on the UI (i.e. add all links for now), and add handle this later.</p>\n<h3 id=\"admin\">Admin <a class=\"heading-anchor-permalink\" href=\"#admin\">#</a></h3>\n<ol>\n<li>Edit product page</li>\n<li>Product listing (for admin). Similar to the one views by shop, but only products created by the admin are listed here.</li>\n</ol>\n<hr>\n<h2 id=\"work\">Work <a class=\"heading-anchor-permalink\" href=\"#work\">#</a></h2>\n<ul>\n<li>Add links for the pages we’ll be adding.</li>\n<li>Since admin and customer are logically different, let’s have one dedicated controller for each.</li>\n<li>Then, handle the routes, add new controllers.</li>\n<li>We can see that “edit”, “delete” routes need to be have a reference to the product. This information is generally part of the request URL - as dynamic routes, or query params.</li>\n</ul>\n<p>OK, this work will be be done in this module, but throughout the course.</p>\n",
      "id": 232
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/115_Module_introduction.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/115_Module_introduction.html",
      "content": "# 115. Module introduction\nCreated Sunday 19 March 2023 at 08:28 pm\n\n1. We need the ability to pass some data through request URLs.\n\t- We'll learn about dynamic routes (aka route params), query params. They are supported by Express out-of-the-box.\n\t- We'll also learn when to NOT use dynamic routes, query params and use a request body instead.\n2. We'll enhance our models to support dynamic URLs.\n\nMinor adjustments made to the project. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/60a704f94b6c63c7edb7b31bbf1495c1bd5bbe1a)",
      "html": "<h1 id=\"115.-module-introduction\">115. Module introduction <a class=\"heading-anchor-permalink\" href=\"#115.-module-introduction\">#</a></h1>\n<p>Created Sunday 19 March 2023 at 08:28 pm</p>\n<ol>\n<li>We need the ability to pass some data through request URLs.\n<ul>\n<li>We’ll learn about dynamic routes (aka route params), query params. They are supported by Express out-of-the-box.</li>\n<li>We’ll also learn when to NOT use dynamic routes, query params and use a request body instead.</li>\n</ul>\n</li>\n<li>We’ll enhance our models to support dynamic URLs.</li>\n</ol>\n<p>Minor adjustments made to the project. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/60a704f94b6c63c7edb7b31bbf1495c1bd5bbe1a\">Code</a></p>\n",
      "id": 233
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/118_Adding_Product_ID_to_the_path.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/118_Adding_Product_ID_to_the_path.html",
      "content": "# 116. Adding Product ID to the path\nCreated Sunday 19 March 2023 at 08:48 pm\n\nWe need to have a unique identifier for every products, that we can use as route params or query params. Let's change the Product model to have an \"id\". [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/55823fb83da097545247b309453a60a030922c10)",
      "html": "<h1 id=\"116.-adding-product-id-to-the-path\">116. Adding Product ID to the path <a class=\"heading-anchor-permalink\" href=\"#116.-adding-product-id-to-the-path\">#</a></h1>\n<p>Created Sunday 19 March 2023 at 08:48 pm</p>\n<p>We need to have a unique identifier for every products, that we can use as route params or query params. Let’s change the Product model to have an “id”. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/55823fb83da097545247b309453a60a030922c10\">Code</a></p>\n",
      "id": 234
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/119_Extracting_Dynamic_Params.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/119_Extracting_Dynamic_Params.html",
      "content": "# 119. Extracting Dynamic Params\nCreated Sunday 19 March 2023 at 09:49 pm\n\n## Route params\n- **Capturing** (from the URL) - Express uses colon notation to specify path params. Example:\n\t```js\n\trouter.get('/product:myProductId', ...)\n\t```\n- **Accessing** (in code) - `req.params` is an object with route params. Key names are the same as those used for capturing.\n\nAll params are `String`. **This is important, especially for the bug where === used in code**. Either parse the value properly or use `==` (non-strict equality).\n\n\n## Query params\n- **Capturing** - done by default.\n- **Accessing** - `req.query` is an object with query params. Complex queries are properly handled - arrays, objects are created.\n\nI already covered this in [67. Requests - Path](../5_Express_js/67_Requests#2.%20Path)\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6a868c7e584162d911a0a6e97a6736bb16ec4915)",
      "html": "<h1 id=\"119.-extracting-dynamic-params\">119. Extracting Dynamic Params <a class=\"heading-anchor-permalink\" href=\"#119.-extracting-dynamic-params\">#</a></h1>\n<p>Created Sunday 19 March 2023 at 09:49 pm</p>\n<h2 id=\"route-params\">Route params <a class=\"heading-anchor-permalink\" href=\"#route-params\">#</a></h2>\n<ul>\n<li><strong>Capturing</strong> (from the URL) - Express uses colon notation to specify path params. Example:<pre><code class=\"language-js\">router.get('/product:myProductId', ...)\n</code></pre>\n</li>\n<li><strong>Accessing</strong> (in code) - <code>req.params</code> is an object with route params. Key names are the same as those used for capturing.</li>\n</ul>\n<p>All params are <code>String</code>. <strong>This is important, especially for the bug where === used in code</strong>. Either parse the value properly or use <code>==</code> (non-strict equality).</p>\n<h2 id=\"query-params\">Query params <a class=\"heading-anchor-permalink\" href=\"#query-params\">#</a></h2>\n<ul>\n<li><strong>Capturing</strong> - done by default.</li>\n<li><strong>Accessing</strong> - <code>req.query</code> is an object with query params. Complex queries are properly handled - arrays, objects are created.</li>\n</ul>\n<p>I already covered this in <a href=\"../5_Express_js/67_Requests#2.%20Path\">67. Requests - Path</a></p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6a868c7e584162d911a0a6e97a6736bb16ec4915\">Code</a></p>\n",
      "id": 235
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/122_Passing_data_with_POST_Requests.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/122_Passing_data_with_POST_Requests.html",
      "content": "# 122. Passing data with POST Requests\nCreated Sunday 19 March 2023 at 10:55 pm\n\n[Code at this point](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/4351719113ea11bacc7fd0255815a2df6a76149b)\n\nSince the \"Add to cart\" is a POST request, we should pass the data not as a dynamic route but as a body.\n\nSteps to access POST request's body as form data:\n1. Parse the body properly - using `express.urlencoded` middleware.\n2. Access the body - `req.body`. In this case it's an object with keys as \"name\" attributes used in the form.\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6dc2c5e735e932692407dbceccb80ae0e9f33e2b)\n\nOf course, the middleware needs to be used only once. It's usually kept in the root router (`app`), to avoid clutter in specific routers.\n\nNote: GET requests cannot have a body, as per modern HTTP. So dynamic data is passed as dynamic params (ignore custom headers for now).\n\n\n## Passing form from the frontend\nThe usual, \n1. Specify the `method` and `action` attributes on the form\n2. Use `name` attribute in the `input` tags.\n3. If the form is to merely act as submit button, the `<input type=\"hidden\" />` can be used, to hide the `<input />` UI. Of course, a `name` and `value` is still needed.\n\nExample:\n```html\n<form action=\"/cart\" method=\"POST\" >\n  <input type=\"hidden\" name=\"productId\"  value=\"34\" />\n  <button type=\"submit\" class=\"btn\">Add to Cart</button>\n</form>\n```",
      "html": "<h1 id=\"122.-passing-data-with-post-requests\">122. Passing data with POST Requests <a class=\"heading-anchor-permalink\" href=\"#122.-passing-data-with-post-requests\">#</a></h1>\n<p>Created Sunday 19 March 2023 at 10:55 pm</p>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/4351719113ea11bacc7fd0255815a2df6a76149b\">Code at this point</a></p>\n<p>Since the “Add to cart” is a POST request, we should pass the data not as a dynamic route but as a body.</p>\n<p>Steps to access POST request’s body as form data:</p>\n<ol>\n<li>Parse the body properly - using <code>express.urlencoded</code> middleware.</li>\n<li>Access the body - <code>req.body</code>. In this case it’s an object with keys as “name” attributes used in the form.</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6dc2c5e735e932692407dbceccb80ae0e9f33e2b\">Code</a></p>\n<p>Of course, the middleware needs to be used only once. It’s usually kept in the root router (<code>app</code>), to avoid clutter in specific routers.</p>\n<p>Note: GET requests cannot have a body, as per modern HTTP. So dynamic data is passed as dynamic params (ignore custom headers for now).</p>\n<h2 id=\"passing-form-from-the-frontend\">Passing form from the frontend <a class=\"heading-anchor-permalink\" href=\"#passing-form-from-the-frontend\">#</a></h2>\n<p>The usual,</p>\n<ol>\n<li>Specify the <code>method</code> and <code>action</code> attributes on the form</li>\n<li>Use <code>name</code> attribute in the <code>input</code> tags.</li>\n<li>If the form is to merely act as submit button, the <code>&lt;input type=&quot;hidden&quot; /&gt;</code> can be used, to hide the <code>&lt;input /&gt;</code> UI. Of course, a <code>name</code> and <code>value</code> is still needed.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-html\">&lt;form action=&quot;/cart&quot; method=&quot;POST&quot; &gt;\n  &lt;input type=&quot;hidden&quot; name=&quot;productId&quot;  value=&quot;34&quot; /&gt;\n  &lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Add to Cart&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n",
      "id": 236
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/123_Adding_a_Cart_Model.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/123_Adding_a_Cart_Model.html",
      "content": "# 123. Adding a Cart model\nCreated Sunday 19 March 2023 at 11:19 pm\n\nWe want a cart object to:\n1. Hold all the products - basically, a list of product ids.\n2. Add quantities for the products in the cart\n\nLet's ignore remaining cart actions (like resetting the cart, adding/remove given quantity of a product) for now.\n\n",
      "html": "<h1 id=\"123.-adding-a-cart-model\">123. Adding a Cart model <a class=\"heading-anchor-permalink\" href=\"#123.-adding-a-cart-model\">#</a></h1>\n<p>Created Sunday 19 March 2023 at 11:19 pm</p>\n<p>We want a cart object to:</p>\n<ol>\n<li>Hold all the products - basically, a list of product ids.</li>\n<li>Add quantities for the products in the cart</li>\n</ol>\n<p>Let’s ignore remaining cart actions (like resetting the cart, adding/remove given quantity of a product) for now.</p>\n",
      "id": 237
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/124_Continuing_on.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/124_Continuing_on.html",
      "content": "# 124. Using Query Params\nCreated Monday 20 March 2023 at 08:36 pm\n\n## Edit product page\nLet's work on the edit-product page. The edit-product page (makes sense for a given product only) should be a pre-populated form, containing existing title, price and other information about the product.\n\nTo handle the update operation, we'll accept a POST request and update the product.\n\n---\nThe \"edit page\" will look exactly like the \"add-product\" page, except that:\n1. It's loaded for a specific product. `/edit-product/:id`\n2. It's pre-populated with the product information\n3. For submission makes a POST request to `/edit-product/:id`.\n\nWe can reuse the add-product page (view). Better, we can a single view and optionally pass an `edit` boolean, which will be false for add-page but true for edit-page. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/a342b762df03cce4f73d720cbc05cd63407b4f90)\n\nPre-populating product info in edit page. Pass the existing info as `value` attribute of the `<input />`. For the text area, pass the info between the `textarea` tags (take care of white-space). **`<input />` with the `value` attribute can be edited normally.** [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8a97d6e0ff58406d86f25fb39a797229374de7be)\n\n\n## Delete product\nButton exists already, just add the endpoint. [Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ad6f98248b84f8dd858658a0622e73b365f6d188)\n\nNote: Since `<form method= />` can only be \"get\" or \"post\". We are sending a POST request to handle deletion. This is not ideal, but OK since we are avoiding JavaScript (fixme, anyway to send DELETE request without JS?).\n\n\n## Delete cart item\nAdd button under product detail page. Add endpoint.\n\nIgnoring errors:\n1. Product id is invalid\n2. Product is in cart, but has been deleted by admin\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8e411170a801c64a86d6522f6f798c7e01006099)\n\n\n## Show cart items\n- Major thing is the table - filter out available products, and quantity in cart.\n- Add plus, minus and remove item functionality. Copy add to cart functionality that exists already. Write code for the remaining two, from scratch.\n\n[Code](https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6126819bf6be838c56a2acc99d6a3c9d50193e3b)",
      "html": "<h1 id=\"124.-using-query-params\">124. Using Query Params <a class=\"heading-anchor-permalink\" href=\"#124.-using-query-params\">#</a></h1>\n<p>Created Monday 20 March 2023 at 08:36 pm</p>\n<h2 id=\"edit-product-page\">Edit product page <a class=\"heading-anchor-permalink\" href=\"#edit-product-page\">#</a></h2>\n<p>Let’s work on the edit-product page. The edit-product page (makes sense for a given product only) should be a pre-populated form, containing existing title, price and other information about the product.</p>\n<p>To handle the update operation, we’ll accept a POST request and update the product.</p>\n<hr>\n<p>The “edit page” will look exactly like the “add-product” page, except that:</p>\n<ol>\n<li>It’s loaded for a specific product. <code>/edit-product/:id</code></li>\n<li>It’s pre-populated with the product information</li>\n<li>For submission makes a POST request to <code>/edit-product/:id</code>.</li>\n</ol>\n<p>We can reuse the add-product page (view). Better, we can a single view and optionally pass an <code>edit</code> boolean, which will be false for add-page but true for edit-page. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/a342b762df03cce4f73d720cbc05cd63407b4f90\">Code</a></p>\n<p>Pre-populating product info in edit page. Pass the existing info as <code>value</code> attribute of the <code>&lt;input /&gt;</code>. For the text area, pass the info between the <code>textarea</code> tags (take care of white-space). <strong><code>&lt;input /&gt;</code> with the <code>value</code> attribute can be edited normally.</strong> <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8a97d6e0ff58406d86f25fb39a797229374de7be\">Code</a></p>\n<h2 id=\"delete-product\">Delete product <a class=\"heading-anchor-permalink\" href=\"#delete-product\">#</a></h2>\n<p>Button exists already, just add the endpoint. <a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/ad6f98248b84f8dd858658a0622e73b365f6d188\">Code</a></p>\n<p>Note: Since <code>&lt;form method= /&gt;</code> can only be “get” or “post”. We are sending a POST request to handle deletion. This is not ideal, but OK since we are avoiding JavaScript (fixme, anyway to send DELETE request without JS?).</p>\n<h2 id=\"delete-cart-item\">Delete cart item <a class=\"heading-anchor-permalink\" href=\"#delete-cart-item\">#</a></h2>\n<p>Add button under product detail page. Add endpoint.</p>\n<p>Ignoring errors:</p>\n<ol>\n<li>Product id is invalid</li>\n<li>Product is in cart, but has been deleted by admin</li>\n</ol>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/8e411170a801c64a86d6522f6f798c7e01006099\">Code</a></p>\n<h2 id=\"show-cart-items\">Show cart items <a class=\"heading-anchor-permalink\" href=\"#show-cart-items\">#</a></h2>\n<ul>\n<li>Major thing is the table - filter out available products, and quantity in cart.</li>\n<li>Add plus, minus and remove item functionality. Copy add to cart functionality that exists already. Write code for the remaining two, from scratch.</li>\n</ul>\n<p><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc/commit/6126819bf6be838c56a2acc99d6a3c9d50193e3b\">Code</a></p>\n",
      "id": 238
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/133_Wrap_up.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/9_Dynamic_routes_and_Advanced_Models/133_Wrap_up.html",
      "content": "# 133. Wrap up\nCreated Tuesday 21 March 2023 at 12:21 am\n\nNothing special. Except:\n1. Joins are expensive, even if the files are loaded in memory.\n2. Middlewares in Express.js (all types) can be asynchronous. No special syntax needed.\n\n![](../../../../assets/133_Wrap_up-image-1-c364ac36.png)\n",
      "html": "<h1 id=\"133.-wrap-up\">133. Wrap up <a class=\"heading-anchor-permalink\" href=\"#133.-wrap-up\">#</a></h1>\n<p>Created Tuesday 21 March 2023 at 12:21 am</p>\n<p>Nothing special. Except:</p>\n<ol>\n<li>Joins are expensive, even if the files are loaded in memory.</li>\n<li>Middlewares in Express.js (all types) can be asynchronous. No special syntax needed.</li>\n</ol>\n<p><img src=\"../../../../assets/133_Wrap_up-image-1-c364ac36.png\" alt=\"\"></p>\n",
      "id": 239
    },
    {
      "path": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/index.md",
      "url": "home/4_resource_itineraries/2_Node_js_complete_guide_academind/index.html",
      "content": "# 2. Node js complete guide academind\nCreated Monday 13 February 2023 at 05:40 am\n\n## Purpose/intent\n- Having learnt Node.js fundamentals (somewhat significantly), it's time to move on to making applications and learning about ecosystem (including libraries, frameworks , tools) etc.\n- Learn about general implementation details of backend development through Node.js. This can be generalized to other languages and runtimes like Go, Java etc. *I will still learn all about Node.js specifics*.\n\n\n## Link\nwith branch: https://github.com/sanjar-notes/nodejs-notes/tree/r/academind-nodejs-complete-guide\n\nCourse info (JSON) - ![](/assets/nodejs-complete-guide-all.json)\n\n## Progress\nOn hold sections\n14. Sessions & Cookies (minor left) [task link](https://height.app/OitGt6StRG/T-61)\n15. Authentication - [task link](https://height.app/OitGt6StRG/T-93)\n16. Sending emails - [task link](https://height.app/OitGt6StRG/T-99)\n17. Advanced authentication - [task link](https://height.app/OitGt6StRG/T-101)\n18. Sec 24 \"Adding payments\", [task link](https://height.app/OitGt6StRG/T-213), on hold, will do later.",
      "html": "<h1 id=\"2.-node-js-complete-guide-academind\">2. Node js complete guide academind <a class=\"heading-anchor-permalink\" href=\"#2.-node-js-complete-guide-academind\">#</a></h1>\n<p>Created Monday 13 February 2023 at 05:40 am</p>\n<h2 id=\"purpose%2Fintent\">Purpose/intent <a class=\"heading-anchor-permalink\" href=\"#purpose%2Fintent\">#</a></h2>\n<ul>\n<li>Having learnt Node.js fundamentals (somewhat significantly), it’s time to move on to making applications and learning about ecosystem (including libraries, frameworks , tools) etc.</li>\n<li>Learn about general implementation details of backend development through Node.js. This can be generalized to other languages and runtimes like Go, Java etc. <em>I will still learn all about Node.js specifics</em>.</li>\n</ul>\n<h2 id=\"link\">Link <a class=\"heading-anchor-permalink\" href=\"#link\">#</a></h2>\n<p>with branch: <a href=\"https://github.com/sanjar-notes/nodejs-notes/tree/r/academind-nodejs-complete-guide\">https://github.com/sanjar-notes/nodejs-notes/tree/r/academind-nodejs-complete-guide</a></p>\n<p>Course info (JSON) - <img src=\"/assets/nodejs-complete-guide-all.json\" alt=\"\"></p>\n<h2 id=\"progress\">Progress <a class=\"heading-anchor-permalink\" href=\"#progress\">#</a></h2>\n<p>On hold sections\n14. Sessions &amp; Cookies (minor left) <a href=\"https://height.app/OitGt6StRG/T-61\">task link</a>\n15. Authentication - <a href=\"https://height.app/OitGt6StRG/T-93\">task link</a>\n16. Sending emails - <a href=\"https://height.app/OitGt6StRG/T-99\">task link</a>\n17. Advanced authentication - <a href=\"https://height.app/OitGt6StRG/T-101\">task link</a>\n18. Sec 24 “Adding payments”, <a href=\"https://height.app/OitGt6StRG/T-213\">task link</a>, on hold, will do later.</p>\n",
      "id": 240
    },
    {
      "path": "home/5_projects.md",
      "url": "home/5_projects.html",
      "content": "# 5. Projects\nCreated Monday 14 August 2023 at 09:00 pm\n\n1. [codevolution-nodejs](https://github.com/exemplar-codes/codevolution-nodejs) core Node.js fundamentals, ecosystem details, modules, ESM, npm etc.\n2. [hello-world-sanjarcode-npm](https://github.com/exemplar-codes/hello-world-sanjarcode-npm) - custom npm package\n3. [nodejs-server-academind](https://github.com/exemplar-codes/nodejs-server-academind) - exploring the `http` core module and creating servers with it. realize why it's not the best abstraction for web apps.\n4. [express-app-academind](https://github.com/exemplar-codes/express-app-academind) - exploring express.js, middlewares, routers, req, res, headers, basic structuring.\n5. [traditional-web-app-express](https://github.com/exemplar-codes/traditional-web-app-express) - sending HTML files back, sending other types of file, public folder in express, simple file server.\n6. [templating-engines-w-express-js](https://github.com/exemplar-codes/templating-engines-w-express-js) - explore templating engines Pug, EJS, how to specify engine to express, layouts\n7. [mvc-basics-exploration-expressjs](https://github.com/exemplar-codes/mvc-basics-exploration-expressjs) - simple exploration of MVC (created custom classes for models) and used `node:fs` for persistence, how to structure endpoints, logic and app's logical modules. . Learnt about seeding, and problems with using the filesystem for persistence.\n8. [online-shop-express-ejs-mvc](https://github.com/exemplar-codes/online-shop-express-ejs-mvc) - making an app using EJS and Sequelize (a SQL ORM). Explored models in Sequelize, common operations, associations and some hooks. Learnt that it's not a complete or stable solution, but easy to use.\n9. [online-shop-with-nosql-mongodb](https://github.com/exemplar-codes/online-shop-with-nosql-mongodb) - explore MongoDB, connections, connecting to Atlas. Rewrite the DB part with MongoDB. Again, implement own classes for models.\n10. [online-shop-with-nosql-mongoose](https://github.com/exemplar-codes/online-shop-with-nosql-mongoose) - explore Mongoose (an ODM for MongoDB), learn easier syntax for mongodb, learn about Schema and Models in Mongoose.\n11. [online-shop-sessions-and-cookies](https://github.com/exemplar-codes/online-shop-sessions-and-cookies - explore idea of cookies, sessions. Cookie subtstructure within browsers, some vulnerabilities, node packages to do common ops with cookies.\n12. [online-shop-nodejs-branches](https://github.com/exemplar-codes/online-shop-nodejs-branches) - from session 18 (validation onwards). I had made forks for sections, which was getting out of hands. All branches here will be chronological.\n\t1. [Section 18 (branch)](https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/18_data_validation) - user data validation\n\t2. ",
      "html": "<h1 id=\"5.-projects\">5. Projects <a class=\"heading-anchor-permalink\" href=\"#5.-projects\">#</a></h1>\n<p>Created Monday 14 August 2023 at 09:00 pm</p>\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/codevolution-nodejs\">codevolution-nodejs</a> core Node.js fundamentals, ecosystem details, modules, ESM, npm etc.</li>\n<li><a href=\"https://github.com/exemplar-codes/hello-world-sanjarcode-npm\">hello-world-sanjarcode-npm</a> - custom npm package</li>\n<li><a href=\"https://github.com/exemplar-codes/nodejs-server-academind\">nodejs-server-academind</a> - exploring the <code>http</code> core module and creating servers with it. realize why it’s not the best abstraction for web apps.</li>\n<li><a href=\"https://github.com/exemplar-codes/express-app-academind\">express-app-academind</a> - exploring express.js, middlewares, routers, req, res, headers, basic structuring.</li>\n<li><a href=\"https://github.com/exemplar-codes/traditional-web-app-express\">traditional-web-app-express</a> - sending HTML files back, sending other types of file, public folder in express, simple file server.</li>\n<li><a href=\"https://github.com/exemplar-codes/templating-engines-w-express-js\">templating-engines-w-express-js</a> - explore templating engines Pug, EJS, how to specify engine to express, layouts</li>\n<li><a href=\"https://github.com/exemplar-codes/mvc-basics-exploration-expressjs\">mvc-basics-exploration-expressjs</a> - simple exploration of MVC (created custom classes for models) and used <code>node:fs</code> for persistence, how to structure endpoints, logic and app’s logical modules. . Learnt about seeding, and problems with using the filesystem for persistence.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-express-ejs-mvc\">online-shop-express-ejs-mvc</a> - making an app using EJS and Sequelize (a SQL ORM). Explored models in Sequelize, common operations, associations and some hooks. Learnt that it’s not a complete or stable solution, but easy to use.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongodb\">online-shop-with-nosql-mongodb</a> - explore MongoDB, connections, connecting to Atlas. Rewrite the DB part with MongoDB. Again, implement own classes for models.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-with-nosql-mongoose\">online-shop-with-nosql-mongoose</a> - explore Mongoose (an ODM for MongoDB), learn easier syntax for mongodb, learn about Schema and Models in Mongoose.</li>\n<li>[online-shop-sessions-and-cookies](<a href=\"https://github.com/exemplar-codes/online-shop-sessions-and-cookies\">https://github.com/exemplar-codes/online-shop-sessions-and-cookies</a> - explore idea of cookies, sessions. Cookie subtstructure within browsers, some vulnerabilities, node packages to do common ops with cookies.</li>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches\">online-shop-nodejs-branches</a> - from session 18 (validation onwards). I had made forks for sections, which was getting out of hands. All branches here will be chronological.\n<ol>\n<li><a href=\"https://github.com/exemplar-codes/online-shop-nodejs-branches/tree/18_data_validation\">Section 18 (branch)</a> - user data validation</li>\n<li></li>\n</ol>\n</li>\n</ol>\n",
      "id": 241
    },
    {
      "path": "home/6_setup.md",
      "url": "home/6_setup.html",
      "content": "",
      "html": "",
      "id": 242
    },
    {
      "path": "tooling/README.md",
      "url": "tooling/README.html",
      "content": "This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.\n\nCreated Sun Sep 10, 2023 at 6:44 PM\n\n",
      "html": "<p>This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.</p>\n<p>Created Sun Sep 10, 2023 at 6:44 PM</p>\n",
      "id": 243
    },
    {
      "path": "tooling/obsidian-templates/README.md",
      "url": "tooling/obsidian-templates/README.html",
      "content": "This folder is meant for obsidian templates.\n\n## Templater plugin\n\n- I keep the templater plugins here as well. [Templater help](https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066)\n- I've added empty hotkey enties into templater and have attached them as top command palette options.\n- If templates increase, I'll need to use the 'Templater: insert template modal'. *Palette term 'modal' is enough*\n",
      "html": "<p>This folder is meant for obsidian templates.</p>\n<h2 id=\"templater-plugin\">Templater plugin <a class=\"heading-anchor-permalink\" href=\"#templater-plugin\">#</a></h2>\n<ul>\n<li>I keep the templater plugins here as well. <a href=\"https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066\">Templater help</a></li>\n<li>I’ve added empty hotkey enties into templater and have attached them as top command palette options.</li>\n<li>If templates increase, I’ll need to use the ‘Templater: insert template modal’. <em>Palette term ‘modal’ is enough</em></li>\n</ul>\n",
      "id": 244
    },
    {
      "path": "tooling/obsidian-templates/templater/timestamp.md",
      "url": "tooling/obsidian-templates/templater/timestamp.html",
      "content": "<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n",
      "html": "<p>&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n",
      "id": 245
    },
    {
      "path": "tooling/obsidian-templates/templater/title_and_date.md",
      "url": "tooling/obsidian-templates/templater/title_and_date.html",
      "content": "<%*\nfileName = tp.file.title;\nif (fileName.endsWith(\".md\")) fileName = fileName.slice(0, -3);\n\nif(fileName === \"index\") { // if name is index, consider parent folder name\n  fileName = tp.file.folder();\n}\n\n// I used underscores for note.md names, but they make bad URLs,\n// so I switched to using hypens. Example: '1_React_Lists' to '1-React-Lists'\n// adding a separator token here, fallback value is underscore\nconst separator = fileName.indexOf('-') > fileName.indexOf('_') ? '-' : '_';\ncompleteTitle = fileName.replaceAll(separator, \" \");\npotentialNumber = completeTitle.split(\" \").at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);\n\nnewTitle = hasNumber\n  ? `${potentialNumber}. ${titleWithoutNumber}`\n  : completeTitle;\n%># <% newTitle %>\n<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n<% tp.file.cursor() %>",
      "html": "<p>&lt;%*\nfileName = tp.file.title;\nif (fileName.endsWith(&quot;.md&quot;)) fileName = fileName.slice(0, -3);</p>\n<p>if(fileName === “index”) { // if name is index, consider parent folder name\nfileName = tp.file.folder();\n}</p>\n<p>// I used underscores for <a href=\"http://note.md\">note.md</a> names, but they make bad URLs,\n// so I switched to using hypens. Example: ‘1_React_Lists’ to ‘1-React-Lists’\n// adding a separator token here, fallback value is underscore\nconst separator = fileName.indexOf(’-’) &gt; fileName.indexOf(’<em>’) ? ‘-’ : '</em>’;\ncompleteTitle = fileName.replaceAll(separator, &quot; “);\npotentialNumber = completeTitle.split(” &quot;).at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);</p>\n<p>newTitle = hasNumber\n? <code>${potentialNumber}. ${titleWithoutNumber}</code>\n: completeTitle;\n%&gt;# &lt;% newTitle %&gt;\n&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n<p>&lt;% tp.file.cursor() %&gt;</p>\n",
      "id": 246
    },
    {
      "path": "tooling/obsidian-templates/templater/w2h.md",
      "url": "tooling/obsidian-templates/templater/w2h.html",
      "content": "## Why\n<% tp.file.cursor(1) %>\n\n## How\n<% tp.file.cursor(2) %>\n\n## What\n<% tp.file.cursor(3) %>",
      "html": "<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>&lt;% tp.file.cursor(1) %&gt;</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>&lt;% tp.file.cursor(2) %&gt;</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>&lt;% tp.file.cursor(3) %&gt;</p>\n",
      "id": 247
    },
    {
      "path": "vault/1_Setup/Environment_variables.md",
      "url": "vault/1_Setup/Environment_variables.html",
      "content": "---\ntags:\n  - env\n  - environment-variables\n---\n# 1. Environment variables\nCreated Mon Dec 25, 2023 at 9:57 PM\n\n## No library (native) method\n[Docs](https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs)\n### Set envs\nThere are two ways:\n1. inline - `SECRET1=hello node app.js`. Multiple can be added too `SECRET1=hello SECRET_2=world node app.js`. Works with npm scripts too.\n2. file. This is possible with a new feature (works on v20). You specify the .env file as an option. Don't add spaces around equal sign.\n\t```env\n\tSECRET1=hello\n\tSECRET2=world\n\t```\n\tFile will be run like so `node --env-file=.env app.js`\n\n### Get envs\nThe envs in both cases are injected into `process.env`. So `process.env.SECRET1` will get the value.\n\n\n## With library\nThere's the [dotenv](https://www.npmjs.com/package/dotenv) library that's common.\n\n### Set envs\nAdd to file\n```env\nSECRET1=hello\nSECRET2=world\n```\n\n### Get envs\n```js\nconst env = require(\"dotenv\").config().parsed;\nenv.SECRET1 // 'hello;\n```\n\nThere are more sophisticated libs that allow nested configs, type safety etc.",
      "html": "<hr>\n<p>tags:</p>\n<ul>\n<li>env</li>\n<li>environment-variables</li>\n</ul>\n<hr>\n<h1 id=\"1.-environment-variables\">1. Environment variables <a class=\"heading-anchor-permalink\" href=\"#1.-environment-variables\">#</a></h1>\n<p>Created Mon Dec 25, 2023 at 9:57 PM</p>\n<h2 id=\"no-library-(native)-method\">No library (native) method <a class=\"heading-anchor-permalink\" href=\"#no-library-(native)-method\">#</a></h2>\n<p><a href=\"https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs\">Docs</a></p>\n<h3 id=\"set-envs\">Set envs <a class=\"heading-anchor-permalink\" href=\"#set-envs\">#</a></h3>\n<p>There are two ways:</p>\n<ol>\n<li>inline - <code>SECRET1=hello node app.js</code>. Multiple can be added too <code>SECRET1=hello SECRET_2=world node app.js</code>. Works with npm scripts too.</li>\n<li>file. This is possible with a new feature (works on v20). You specify the .env file as an option. Don’t add spaces around equal sign.<pre><code class=\"language-env\">SECRET1=hello\nSECRET2=world\n</code></pre>\nFile will be run like so <code>node --env-file=.env app.js</code></li>\n</ol>\n<h3 id=\"get-envs\">Get envs <a class=\"heading-anchor-permalink\" href=\"#get-envs\">#</a></h3>\n<p>The envs in both cases are injected into <code>process.env</code>. So <code>process.env.SECRET1</code> will get the value.</p>\n<h2 id=\"with-library\">With library <a class=\"heading-anchor-permalink\" href=\"#with-library\">#</a></h2>\n<p>There’s the <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> library that’s common.</p>\n<h3 id=\"set-envs-2\">Set envs <a class=\"heading-anchor-permalink\" href=\"#set-envs-2\">#</a></h3>\n<p>Add to file</p>\n<pre><code class=\"language-env\">SECRET1=hello\nSECRET2=world\n</code></pre>\n<h3 id=\"get-envs-2\">Get envs <a class=\"heading-anchor-permalink\" href=\"#get-envs-2\">#</a></h3>\n<pre><code class=\"language-js\">const env = require(&quot;dotenv&quot;).config().parsed;\nenv.SECRET1 // 'hello;\n</code></pre>\n<p>There are more sophisticated libs that allow nested configs, type safety etc.</p>\n",
      "id": 248
    },
    {
      "path": "vault/1_Setup/Node_versions.md",
      "url": "vault/1_Setup/Node_versions.html",
      "content": "# Node versions\nCreated Wed Dec 27, 2023 at 12:38 AM\n\nMany projects have bad documentation or ways around what Node.js version they use, and how to load it.\nBut there's a simple explicit way to do both enforcement and convenience at once.\n\nIt involves making changes to 4 files - `.nvmrc`, `.npmrc`, `package.json` and terminal hook (`.zshrc` for example).\n\n1. Enforcement - the app will raise errors for wrong versions during `npm install`. `.npmrc` and `package.json` do this, since any app is started by an npm script. This raises an error during `npm install` itself for wrong Node version, which is a good thing. See [StackOverflow](https://stackoverflow.com/a/61403989/11392807)\n\n   `/.npmrc`\n\n   ```sh\n   engine-strict=true\n   ```\n\n   `/package.json`. See [engines property on npmjs](https://docs.npmjs.com/cli/v10/configuring-npm/package-json#engines)\n\n   ```json\n    \"engines\": {\n        \"node\": \"<=16\"\n    },\n    // supports range like so `>=0.10.3 <15`\n    // optionally, even `npm` version can be specified\n   ```\n\n2. Convenience\n\n   1. Manual load - Add `.nvmrc` with the node version (by running `node -v > .nvmrc`), then manually do `nvm use` inside the directory. Don't have to remember \"x\" in `nvm use x`, good.\n\n      `/.nvmrc` and (for safety/other [environments](https://stackoverflow.com/questions/27425852/what-uses-respects-the-node-version-file)) `/.node-version` file\n\n      ```json\n      v16.20.2\n      ```\n\n   2. Auto load - remembering and doing `nvm use` for each new terminal is lame. So, add `.nvmrc` to the project as usual, and also add a function that loads the node version. Fully automatic. See [Deeper shell integration](https://github.com/nvm-sh/nvm?tab=readme-ov-file#deeper-shell-integration)\n\n      `~/.zshrc`\n\n      ```sh\n      # for ZSH: Add to .zshrc https://github.com/nvm-sh/nvm?tab=readme-ov-file#zsh\n      # for bash: Add to .bashrc https://github.com/nvm-sh/nvm?tab=readme-ov-file#bash\n      # optionally can do\n      ```\n\nNotes and gotchas:\n- Set global default: `nvm` has a bad UI. To set global default, one has to run `nvm use alias default _version_`\n- Use specific node version (temporarily - for terminal session) - `nvm use _version_`\n- On mac, make sure to run `brew uninstall node`. Homebrew node messes up with nvm global default - it just takes over the default.\n\n## PS\nTime to take [asdf](https://asdf-vm.com/) seriously?",
      "html": "<h1 id=\"node-versions\">Node versions <a class=\"heading-anchor-permalink\" href=\"#node-versions\">#</a></h1>\n<p>Created Wed Dec 27, 2023 at 12:38 AM</p>\n<p>Many projects have bad documentation or ways around what Node.js version they use, and how to load it.\nBut there’s a simple explicit way to do both enforcement and convenience at once.</p>\n<p>It involves making changes to 4 files - <code>.nvmrc</code>, <code>.npmrc</code>, <code>package.json</code> and terminal hook (<code>.zshrc</code> for example).</p>\n<ol>\n<li>\n<p>Enforcement - the app will raise errors for wrong versions during <code>npm install</code>. <code>.npmrc</code> and <code>package.json</code> do this, since any app is started by an npm script. This raises an error during <code>npm install</code> itself for wrong Node version, which is a good thing. See <a href=\"https://stackoverflow.com/a/61403989/11392807\">StackOverflow</a></p>\n<p><code>/.npmrc</code></p>\n<pre><code class=\"language-sh\">engine-strict=true\n</code></pre>\n<p><code>/package.json</code>. See <a href=\"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#engines\">engines property on npmjs</a></p>\n<pre><code class=\"language-json\"> &quot;engines&quot;: {\n     &quot;node&quot;: &quot;&lt;=16&quot;\n },\n // supports range like so `&gt;=0.10.3 &lt;15`\n // optionally, even `npm` version can be specified\n</code></pre>\n</li>\n<li>\n<p>Convenience</p>\n<ol>\n<li>\n<p>Manual load - Add <code>.nvmrc</code> with the node version (by running <code>node -v &gt; .nvmrc</code>), then manually do <code>nvm use</code> inside the directory. Don’t have to remember “x” in <code>nvm use x</code>, good.</p>\n<p><code>/.nvmrc</code> and (for safety/other <a href=\"https://stackoverflow.com/questions/27425852/what-uses-respects-the-node-version-file\">environments</a>) <code>/.node-version</code> file</p>\n<pre><code class=\"language-json\">v16.20.2\n</code></pre>\n</li>\n<li>\n<p>Auto load - remembering and doing <code>nvm use</code> for each new terminal is lame. So, add <code>.nvmrc</code> to the project as usual, and also add a function that loads the node version. Fully automatic. See <a href=\"https://github.com/nvm-sh/nvm?tab=readme-ov-file#deeper-shell-integration\">Deeper shell integration</a></p>\n<p><code>~/.zshrc</code></p>\n<pre><code class=\"language-sh\"># for ZSH: Add to .zshrc https://github.com/nvm-sh/nvm?tab=readme-ov-file#zsh\n# for bash: Add to .bashrc https://github.com/nvm-sh/nvm?tab=readme-ov-file#bash\n# optionally can do\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<p>Notes and gotchas:</p>\n<ul>\n<li>Set global default: <code>nvm</code> has a bad UI. To set global default, one has to run <code>nvm use alias default _version_</code></li>\n<li>Use specific node version (temporarily - for terminal session) - <code>nvm use _version_</code></li>\n<li>On mac, make sure to run <code>brew uninstall node</code>. Homebrew node messes up with nvm global default - it just takes over the default.</li>\n</ul>\n<h2 id=\"ps\">PS <a class=\"heading-anchor-permalink\" href=\"#ps\">#</a></h2>\n<p>Time to take <a href=\"https://asdf-vm.com/\">asdf</a> seriously?</p>\n",
      "id": 249
    },
    {
      "path": "vault/1_Setup/fetch-available-v18.md",
      "url": "vault/1_Setup/fetch-available-v18.html",
      "content": "# fetch available v18\nCreated Wed Jan 3, 2024 at 12:39 AM\n\nThe `fetch` API (like in browsers) is available by default from Node ***v18*** onwards. It's a globally available function. No CLI options or imports needed. 🎉🥳\n\n```js\nfetch(\"https://api.github.com/users/sanjarcode\")\n  .then((resp) => resp.json())\n  .then(console.log);\n\n// runs as is without issues\n```",
      "html": "<h1 id=\"fetch-available-v18\">fetch available v18 <a class=\"heading-anchor-permalink\" href=\"#fetch-available-v18\">#</a></h1>\n<p>Created Wed Jan 3, 2024 at 12:39 AM</p>\n<p>The <code>fetch</code> API (like in browsers) is available by default from Node <em><strong>v18</strong></em> onwards. It’s a globally available function. No CLI options or imports needed. 🎉🥳</p>\n<pre><code class=\"language-js\">fetch(&quot;https://api.github.com/users/sanjarcode&quot;)\n  .then((resp) =&gt; resp.json())\n  .then(console.log);\n\n// runs as is without issues\n</code></pre>\n",
      "id": 250
    }
  ]
}